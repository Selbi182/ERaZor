; Sonic the Hedgehog 2 disassembled binary

; Nemesis,   2004: Created original disassembly for SNASM68K
; Aurochs,   2005: Translated to AS and annotated
; Xenowhirl, 2007: More annotation, overall cleanup, Z80 disassembly
; ---------------------------------------------------------------------------
; NOTES:
;
; Set your editor's tab width to 8 characters wide for viewing this file.
;
; It is highly suggested that you read the AS User's Manual before diving too
; far into this disassembly. At least read the section on nameless temporary
; symbols. Your brain may melt if you don't know how those work.
;
; See s2.notes.txt for more comments about this disassembly and other useful info.

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; ASSEMBLY OPTIONS:
;
padToPowerOfTwo = 0
;	| If 1, pads the end of the rom to the next power of two bytes (for real hardware)
;
skipChecksumCheck = 1
;	| If 1, disables the unnecessary (and slow) bootup checksum calculation
;
zeroOffsetOptimization = 1
;	| If 1, makes a handful of zero-offset instructions smaller
;
assembleZ80SoundDriver = 1
;	| If 1, the Z80 sound driver is assembled with the rest of the rom
;	| If 0, the Z80 sound driver is BINCLUDEd (less flexible)

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; AS-specific macros and assembler settings
	CPU 68000
	include "win32/s2.macrosetup.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Equates section - Names for variables.
; ---------------------------------------------------------------------------
; size variables - you'll get an informational error if you need to change these...
; they are all in units of bytes
Size_of_DAC_samples =		$2F00
Size_of_SEGA_sound =		$6174
Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver

; ---------------------------------------------------------------------------
; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
; ---------------------------------------------------------------------------
; universally followed object conventions:
render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
art_tile =		  2 ; and 3 ; start of sprite's art
mappings =		  4 ; and 5 and 6 and 7
x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
priority =		$18 ; 0 = front
width_pixels =		$19
mapping_frame =		$1A
; ---------------------------------------------------------------------------
; conventions followed by most objects:
x_vel =			$10 ; and $11 ; horizontal velocity
y_vel =			$12 ; and $13 ; vertical velocity
y_radius =		$16 ; collision width / 2
x_radius =		$17 ; collision height / 2
anim_frame =		$1B
anim =			$1C
next_anim =		$1D
anim_frame_duration =	$1E
status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
routine =		$24
routine_secondary =	$25
angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
; ---------------------------------------------------------------------------
; conventions followed by many objects but NOT sonic/tails:
collision_flags =	$20
collision_property =	$21
respawn_index =		$23
subtype =		$28
; ---------------------------------------------------------------------------
; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
; note: $1F, $20, and $21 are unused and available
inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
air_left =		$28
flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
status_secondary =	$2B
flips_remaining =	$2C ; number of flip revolutions remaining
flip_speed =		$2D ; number of flip revolutions per frame / 256
move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
invincibility_time =	$32 ; and $33 ; remaining
speedshoes_time =	$34 ; and $35 ; remaining
next_tilt =		$36 ; angle on ground in front of sprite
tilt =			$37 ; angle on ground
stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
spindash_counter =	$3A ; and $3B
jumping =		$3C
interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
layer =			$3E ; collision plane, track switching...
layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
; ---------------------------------------------------------------------------
; conventions followed by several objects but NOT sonic/tails:
y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
; ---------------------------------------------------------------------------
; unknown or inconsistently used offsets that are not applicable to sonic/tails:
; (provided because rearrangement of the above values sometimes requires making space in here too)
objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
objoff_B =		3+x_pos
objoff_E =		2+y_pos
objoff_F =		3+y_pos
objoff_14 =		$14
objoff_15 =		$15
objoff_1F =		$1F
objoff_27 =		$27
objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
 enum               objoff_29=$29,objoff_2A=$2A,objoff_2B=$2B,objoff_2C=$2C,objoff_2D=$2D,objoff_2E=$2E,objoff_2F=$2F
 enum objoff_30=$30,objoff_31=$31,objoff_32=$32,objoff_33=$33,objoff_34=$34,objoff_35=$35,objoff_36=$36,objoff_37=$37
 enum objoff_38=$38,objoff_39=$39,objoff_3A=$3A,objoff_3B=$3B,objoff_3C=$3C,objoff_3D=$3D,objoff_3E=$3E,objoff_3F=$3F
; ---------------------------------------------------------------------------
; property of all objects:
next_object =		$40 ; the size of an object

; ---------------------------------------------------------------------------
; I run the main 68k RAM addresses through this function
; to let them work in both 16-bit and 32-bit addressing modes.
ramaddr function x,-(-x)&$FFFFFFFF

; ---------------------------------------------------------------------------
; RAM variables
RAM_Start =			ramaddr( $FFFF0000 )
Metablock_Table =		ramaddr( $FFFF0000 )
Level_Layout =			ramaddr( $FFFF8000 )
Block_Table =			ramaddr( $FFFF9000 )
Decomp_Buffer =			ramaddr( $FFFFAA00 )
Sprite_Table_Input = 		ramaddr( $FFFFAC00 ) ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
Object_RAM =			ramaddr( $FFFFB000 ) ; through $FFFFD5FF
MainCharacter =			ramaddr( $FFFFB000 ) ; first object (usually Sonic except in a Tails Alone game)
Sidekick =			ramaddr( $FFFFB040 ) ; second object (Tails in a Sonic and Tails game)
Tails_Tails =			ramaddr( $FFFFD000 ) ; address of the Tail's Tails object
Sonic_Dust =			ramaddr( $FFFFD100 )
Tails_Dust =			ramaddr( $FFFFD140 )

PNT_Buffer =			ramaddr( $FFFFD000 ) ; in special stage
Primary_Collision =		ramaddr( $FFFFD600 )
Horiz_Scroll_Buf_2 =		ramaddr( $FFFFD700 ) ; in special stage
Secondary_Collision =		ramaddr( $FFFFD900 )
VDP_Command_Buffer =		ramaddr( $FFFFDC00 ) ; stores VDP commands to issue the next time ProcessDMAQueue is called
VDP_Command_Buffer_Slot =	ramaddr( $FFFFDCFC ) ; stores the address of the next open slot for a queued VDP command
Sprite_Table_2 =		ramaddr( $FFFFDD00 ) ; Sprite attribute table buffer for the bottom split screen in 2-player mode
Horiz_Scroll_Buf =		ramaddr( $FFFFE000 )
Sonic_Stat_Record_Buf =		ramaddr( $FFFFE400 )
Sonic_Pos_Record_Buf =		ramaddr( $FFFFE500 )
Tails_Pos_Record_Buf =		ramaddr( $FFFFE600 )
Ring_Positions =		ramaddr( $FFFFE800 )
Camera_RAM =			ramaddr( $FFFFEE00 )
Camera_X_pos =			ramaddr( $FFFFEE00 )
Camera_Y_pos =			ramaddr( $FFFFEE04 )
Camera_Max_Y_pos =		ramaddr( $FFFFEEC6 )
Camera_Min_X_pos =		ramaddr( $FFFFEEC8 )
Camera_Max_X_pos =		ramaddr( $FFFFEECA )
Camera_Min_Y_pos =		ramaddr( $FFFFEECC )
Camera_Max_Y_pos_now =		ramaddr( $FFFFEECE ) ; was "Camera_max_scroll_spd"...
Sonic_Pos_Record_Index =	ramaddr( $FFFFEED2 ) ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
Tails_Pos_Record_Index =	ramaddr( $FFFFEED6 ) ; into Tails_Pos_Record_Buf
Camera_Y_pos_bias =		ramaddr( $FFFFEED8 ) ; added to y position for lookup/lookdown, $60 is center
Camera_Y_pos_bias_2P =		ramaddr( $FFFFEEDA ) ; for Tails
Dynamic_Resize_Routine =	ramaddr( $FFFFEEDF )
Tails_Min_X_pos =		ramaddr( $FFFFEEF8 )
Tails_Max_X_pos =		ramaddr( $FFFFEEFA )
Tails_Max_Y_pos =		ramaddr( $FFFFEEFE )

Underwater_palette_2 = 		ramaddr( $FFFFF000 ) ; not sure what it's used for but it's only used when there's water
Underwater_palette = 		ramaddr( $FFFFF080 ) ; main palette for underwater parts of the screen
Underwater_palette_line4 = 	ramaddr( $FFFFF0E0 )

Game_Mode =			ramaddr( $FFFFF600 ) ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
Ctrl_1_Logical =		ramaddr( $FFFFF602 ) ; 2 bytes
Ctrl_1_Held_Logical =		ramaddr( $FFFFF602 ) ; 1 byte
Ctrl_1_Press_Logical =		ramaddr( $FFFFF603 ) ; 1 byte
Ctrl_1 =			ramaddr( $FFFFF604 ) ; 2 bytes
Ctrl_1_Held =			ramaddr( $FFFFF604 ) ; 1 byte ; (pressed and held were switched around before)
Ctrl_1_Press =			ramaddr( $FFFFF605 ) ; 1 byte
Ctrl_2 =			ramaddr( $FFFFF606 ) ; 2 bytes
Ctrl_2_Held =			ramaddr( $FFFFF606 ) ; 1 byte
Ctrl_2_Press =			ramaddr( $FFFFF607 ) ; 1 byte
Demo_Time_left =		ramaddr( $FFFFF614 ) ; 2 bytes

Vscroll_Factor =		ramaddr( $FFFFF616 )
Hint_counter_reserve =		ramaddr( $FFFFF624 ) ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
Delay_Time =			ramaddr( $FFFFF62A ) ; number of frames to delay the game
RNG_seed =			ramaddr( $FFFFF636 ) ; used for random number generation
Game_paused =			ramaddr( $FFFFF63A )
DMA_data_thunk =		ramaddr( $FFFFF640 ) ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.

Water_Level_1 =			ramaddr( $FFFFF646 )
Water_Level_2 =			ramaddr( $FFFFF648 )
Water_Level_3 =			ramaddr( $FFFFF64A )
Water_routine =			ramaddr( $FFFFF64D )
Water_move =			ramaddr( $FFFFF64E )
Water_on =			ramaddr( $FFFFF64C ) ; is set based on Water_flag
New_Water_Level =		ramaddr( $FFFFF650 )
Water_change_speed =		ramaddr( $FFFFF652 )
Palette_frame_count =		ramaddr( $FFFFF65E )
Super_Sonic_palette =		ramaddr( $FFFFF65F )
Ctrl_2_Logical =		ramaddr( $FFFFF66A ) ; 2 bytes
Ctrl_2_Held_Logical =		ramaddr( $FFFFF66A ) ; 1 byte
Ctrl_2_Press_Logical =		ramaddr( $FFFFF66B ) ; 1 byte
Sonic_Look_delay_counter = 	ramaddr( $FFFFF66C ) ; 2 bytes
Tails_Look_delay_counter = 	ramaddr( $FFFFF66E ) ; 2 bytes
Super_Sonic_frame_count =	ramaddr( $FFFFF670 )
Plc_Buffer =			ramaddr( $FFFFF680 ) ; Pattern load queue

Misc_Variables =		ramaddr( $FFFFF700 )

; extra variables for the second player (CPU) in 1-player mode
Tails_control_counter =		ramaddr( $FFFFF702 ) ; how long until the CPU takes control
Tails_respawn_counter =		ramaddr( $FFFFF704 )
Tails_CPU_routine =		ramaddr( $FFFFF708 )
Tails_CPU_target_x =		ramaddr( $FFFFF70A )
Tails_CPU_target_y =		ramaddr( $FFFFF70C )
Tails_interact_ID =		ramaddr( $FFFFF70E ) ; object ID of last object stood on

Level_started_flag =		ramaddr( $FFFFF711 )
CNZ_Bumper_routine =		ramaddr( $FFFFF71A )
Dirty_flag =			ramaddr( $FFFFF72C ) ; if whole screen needs to redraw
Water_flag =			ramaddr( $FFFFF730 ) ; if the level has water or oil

Sonic_top_speed =		ramaddr( $FFFFF760 )
Sonic_acceleration =		ramaddr( $FFFFF762 )
Sonic_deceleration =		ramaddr( $FFFFF764 )
Obj_placement_routine =		ramaddr( $FFFFF76C )
Obj_load_addr_0 =		ramaddr( $FFFFF770 )
Obj_load_addr_1 =		ramaddr( $FFFFF774 )
Obj_load_addr_2 =		ramaddr( $FFFFF778 )
Obj_load_addr_3 =		ramaddr( $FFFFF77C )
Demo_button_index =		ramaddr( $FFFFF790 ) ; index into button press demo data, for player 1
Demo_press_counter =		ramaddr( $FFFFF792 ) ; frames remaining until next button press, for player 1
Demo_button_index_2P =		ramaddr( $FFFFF732 ) ; index into button press demo data, for player 2
Demo_press_counter_2P =		ramaddr( $FFFFF734 ) ; frames remaining until next button press, for player 2
Collision_addr =		ramaddr( $FFFFF796 )
Current_Boss_ID =		ramaddr( $FFFFF7AA )
Control_Locked =		ramaddr( $FFFFF7CC )
Chain_Bonus_counter =		ramaddr( $FFFFF7D0 ) ; counts up when you destroy things that give points, resets when you touch the ground
Bonus_Countdown_1 =		ramaddr( $FFFFF7D2 ) ; level results time bonus or special stage sonic ring bonus
Bonus_Countdown_2 =		ramaddr( $FFFFF7D4 ) ; level results ring bonus or special stage tails ring bonus
Update_Bonus_score =		ramaddr( $FFFFF7D6 )
Camera_X_pos_coarse =		ramaddr( $FFFFF7DA ) ; (Camera_X_pos - 128) / 256

Sprite_Table =			ramaddr( $FFFFF800 ) ; Sprite attribute table buffer

Normal_palette =		ramaddr( $FFFFFB00 )
Normal_palette_line2 =		ramaddr( $FFFFFB20 )
Normal_palette_line3 =		ramaddr( $FFFFFB40 )
Normal_palette_line4 =		ramaddr( $FFFFFB60 )
Second_palette =		ramaddr( $FFFFFB80 )
Second_palette_line2 =		ramaddr( $FFFFFBA0 )
Second_palette_line3 =		ramaddr( $FFFFFBC0 )
Second_palette_line4 =		ramaddr( $FFFFFBE0 )

Object_Respawn_Table =		ramaddr( $FFFFFC00 )
System_Stack =			ramaddr( $FFFFFE00 )
Level_Inactive_flag = 		ramaddr( $FFFFFE02 ) ; (2 bytes)
Timer_frames =			ramaddr( $FFFFFE04 ) ; (2 bytes)
Debug_object =			ramaddr( $FFFFFE06 )
Debug_placement_mode =		ramaddr( $FFFFFE08 )
Current_ZoneAndAct =		ramaddr( $FFFFFE10 ) ; 2 bytes
Current_Zone =			ramaddr( $FFFFFE10 ) ; 1 byte
Current_Act =			ramaddr( $FFFFFE11 ) ; 1 byte
Life_count =			ramaddr( $FFFFFE12 )
Current_Special_Stage =		ramaddr( $FFFFFE16 )
Continue_count =		ramaddr( $FFFFFE18 )
Super_Sonic_flag =		ramaddr( $FFFFFE19 )
Time_Over_flag =		ramaddr( $FFFFFE1A )
Extra_life_flags =		ramaddr( $FFFFFE1B )

; If set, the respective HUD element will be updated.
Update_HUD_lives =		ramaddr( $FFFFFE1C )
Update_HUD_rings =		ramaddr( $FFFFFE1D )
Update_HUD_timer =		ramaddr( $FFFFFE1E )
Update_HUD_score =		ramaddr( $FFFFFE1F )

Ring_count =			ramaddr( $FFFFFE20 ) ; 2 bytes
Timer =				ramaddr( $FFFFFE22 ) ; 4 bytes
Timer_minute_word =		ramaddr( $FFFFFE22 ) ; 2 bytes
Timer_minute =			ramaddr( $FFFFFE23 ) ; 1 byte
Timer_second =			ramaddr( $FFFFFE24 ) ; 1 byte
Timer_centisecond =		ramaddr( $FFFFFE25 ) ; 1 byte
Score =				ramaddr( $FFFFFE26 ) ; 4 bytes
Last_star_pole_hit =		ramaddr( $FFFFFE30 ) ; 1 byte -- max activated starpole ID in this act

Saved_Last_star_pole_hit =	ramaddr( $FFFFFE31 )
Saved_x_pos =			ramaddr( $FFFFFE32 )
Saved_y_pos =			ramaddr( $FFFFFE34 )
Saved_Ring_count =		ramaddr( $FFFFFE36 )
Saved_Timer =			ramaddr( $FFFFFE38 )
Saved_art_tile =		ramaddr( $FFFFFE3C )
Saved_layer =			ramaddr( $FFFFFE3E )
Saved_Camera_X_pos =		ramaddr( $FFFFFE40 )
Saved_Camera_Y_pos =		ramaddr( $FFFFFE42 )
Saved_Water_Level =		ramaddr( $FFFFFE50 )
Saved_Water_routine =		ramaddr( $FFFFFE52 )
Saved_Water_move =		ramaddr( $FFFFFE53 )
Saved_Extra_life_flags =	ramaddr( $FFFFFE54 )
Saved_Extra_life_flags_2P =	ramaddr( $FFFFFE55 )
Saved_Camera_Max_Y_pos =	ramaddr( $FFFFFE56 )
Saved_Dynamic_Resize_Routine =	ramaddr( $FFFFFE58 )

Logspike_anim_counter =		ramaddr( $FFFFFEA0 )
Logspike_anim_frame =		ramaddr( $FFFFFEA1 )
Rings_anim_counter =		ramaddr( $FFFFFEA2 )
Rings_anim_frame =		ramaddr( $FFFFFEA3 )
Unknown_anim_counter =		ramaddr( $FFFFFEA4 ) ; I think this was $FFFFFEC4 in the alpha
Unknown_anim_frame =		ramaddr( $FFFFFEA5 )
Ring_spill_anim_counter =	ramaddr( $FFFFFEA6 ) ; scattered rings
Ring_spill_anim_frame =		ramaddr( $FFFFFEA7 )
Ring_spill_anim_accum =		ramaddr( $FFFFFEA8 )

; values for the second player (some of these only apply to 2-player games)
Tails_top_speed =		ramaddr( $FFFFFEC0 ) ; Tails_max_vel
Tails_acceleration =		ramaddr( $FFFFFEC2 )
Tails_deceleration =		ramaddr( $FFFFFEC4 )
Life_count_2P =			ramaddr( $FFFFFEC6 )
Extra_life_flags_2P =		ramaddr( $FFFFFEC7 )
Update_HUD_lives_2P =		ramaddr( $FFFFFEC8 )
Update_HUD_rings_2P =		ramaddr( $FFFFFEC9 )
Update_HUD_timer_2P =		ramaddr( $FFFFFECA )
Update_HUD_score_2P =		ramaddr( $FFFFFECB ) ; mostly unused
Time_Over_flag_2P =		ramaddr( $FFFFFECC )
Ring_count_2P =			ramaddr( $FFFFFED0 )
Timer_2P =			ramaddr( $FFFFFED2 ) ; 4 bytes
Timer_minute_word_2P =		ramaddr( $FFFFFED2 ) ; 2 bytes
Timer_minute_2P =		ramaddr( $FFFFFED3 ) ; 1 byte
Timer_second_2P =		ramaddr( $FFFFFED4 ) ; 1 byte
Timer_centisecond_2P =		ramaddr( $FFFFFED5 ) ; 1 byte
Score_2P =			ramaddr( $FFFFFED6 )
Last_star_pole_hit_2P =		ramaddr( $FFFFFEE0 )

Saved_Last_star_pole_hit_2P =	ramaddr( $FFFFFEE1 )
Saved_x_pos_2P =		ramaddr( $FFFFFEE2 )
Saved_y_pos_2P =		ramaddr( $FFFFFEE4 )
Saved_Ring_count_2P =		ramaddr( $FFFFFEE6 )
Saved_Timer_2P =		ramaddr( $FFFFFEE8 )
Saved_art_tile_2P =		ramaddr( $FFFFFEEC )
Saved_layer_2P =		ramaddr( $FFFFFEEE )

Loser_Time_Left =		ramaddr( $FFFFFEF8 )
Results_Screen_2P =		ramaddr( $FFFFFF10 ) ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
Results_Data_2P =		ramaddr( $FFFFFF20 ) ; $18 bytes
EHZ_Results_2P =		ramaddr( $FFFFFF20 ) ; 6 bytes
MCZ_Results_2P =		ramaddr( $FFFFFF26 ) ; 6 bytes
CNZ_Results_2P =		ramaddr( $FFFFFF2C ) ; 6 bytes
SS_Results_2P =			ramaddr( $FFFFFF32 ) ; 6 bytes
SS_Total_Won =			ramaddr( $FFFFFF38 ) ; 2 bytes (player 1 then player 2)
Perfect_rings_left =		ramaddr( $FFFFFF40 )
Player_mode =			ramaddr( $FFFFFF70 ) ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
Player_option =			ramaddr( $FFFFFF72 ) ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails

Two_player_items =		ramaddr( $FFFFFF74 )
Level_select_zone =		ramaddr( $FFFFFF82 )
Sound_test_sound =		ramaddr( $FFFFFF84 )
Title_screen_option =		ramaddr( $FFFFFF86 )
Current_Zone_2P =		ramaddr( $FFFFFF88 )
Current_Act_2P =		ramaddr( $FFFFFF89 )
Two_player_mode_copy =		ramaddr( $FFFFFF8A )
Options_menu_box =		ramaddr( $FFFFFF8C )
Level_Music =			ramaddr( $FFFFFF90 )
Game_Over_2P =			ramaddr( $FFFFFF98 )
Got_Emerald =			ramaddr( $FFFFFFB0 )
Emerald_count =			ramaddr( $FFFFFFB1 )
Got_Emeralds_array =		ramaddr( $FFFFFFB2 ) ; 7 bytes
Next_Extra_life_score =		ramaddr( $FFFFFFC0 )
Next_Extra_life_score_2P =	ramaddr( $FFFFFFC4 )
Level_Has_Signpost =		ramaddr( $FFFFFFC8 ) ; 1 byte ; 1 = signpost, 0 = boss or nothing
Level_select_flag =		ramaddr( $FFFFFFD0 )
Slow_motion_flag =		ramaddr( $FFFFFFD1 )
Correct_cheat_entries =		ramaddr( $FFFFFFD4 )
Correct_cheat_entries_2 =	ramaddr( $FFFFFFD6 ) ; for 14 continues or 7 emeralds codes
Two_player_mode =		ramaddr( $FFFFFFD8 ) ; flag (0 for main game)

; Values in these variables are passed to the sound driver during V-INT.
; They use a playlist index, not a sound test index.
Music_to_play =			ramaddr( $FFFFFFE0 )
SFX_to_play =			ramaddr( $FFFFFFE1 ) ; normal
SFX_to_play_2 =			ramaddr( $FFFFFFE2 ) ; alternating stereo
Music_to_play_2 =		ramaddr( $FFFFFFE4 ) ; alternate (higher priority?) slot

Demo_mode_flag =		ramaddr( $FFFFFFF0 ) ; 1 if a demo is playing (2 bytes)
Demo_number =			ramaddr( $FFFFFFF2 ) ; which demo will play next (2 bytes)
Graphics_Flags =		ramaddr( $FFFFFFF8 ) ; misc. bitfield
Debug_mode_flag =		ramaddr( $FFFFFFFA ) ; (2 bytes)
Checksum_fourcc =		ramaddr( $FFFFFFFC ) ; (4 bytes)

; ---------------------------------------------------------------------------
; VDP addressses
VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)

; ---------------------------------------------------------------------------
; Z80 addresses
Z80_RAM =			$A00000 ; start of Z80 RAM
Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
Z80_Version =			$A10001
Z80_Port_1_Data =		$A10002
Z80_Port_1_Control =		$A10008
Z80_Port_2_Control =		$A1000A
Z80_Expansion_Control =		$A1000C
Z80_Bus_Request =		$A11100
Z80_Reset =			$A11200

Security_Addr =			$A14000

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; simplifying macros

; tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM
dma68kToVDP macro source,dest,length,type
	lea	(VDP_control_port).l,a5
	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a5)
	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a5)
	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a5)
	move.w	#((dest)&$3FFF)|((type&1)<<15)|$4000,(a5)
	move.w	#$80|(((dest)&$C000)>>14)|((type&2)<<3),(DMA_data_thunk).w
	move.w	(DMA_data_thunk).w,(a5)
    endm
    ; values for the type argument
    enum VRAM=0,CRAM=1,VSRAM=2

; tells the VDP to fill a region of VRAM with a certain byte
dmaFillVRAM macro byte,addr,length
	lea	(VDP_control_port).l,a5
	move.w	#$8F01,(a5) ; VRAM pointer increment: $0001
	move.l	#(($9400|((((length)-1)&$FF00)>>8))<<16)|($9300|(((length)-1)&$FF)),(a5) ; DMA length ...
	move.w	#$9780,(a5) ; VRAM fill
	move.l	#$40000080|(((addr)&$3FFF)<<16)|(((addr)&$C000)>>14),(a5) ; Start at ...
	move.w	#(byte)<<8,(VDP_data_port).l ; Fill with byte
-	move.w	(a5),d1
	btst	#1,d1
	bne.s	- ; busy loop until the VDP is finished filling...
	move.w	#$8F02,(a5) ; VRAM pointer increment: $0002
    endm

; calculates initial loop counter value for a dbf loop
; that writes n bytes total at 4 bytes per iteration
bytesToLcnt function n,n>>2-1

; fills a region of 68k RAM with 0 (4 bytes at a time)
clearRAM macro addr,length
    if length&3
	fatal "clearRAM len must be divisible by 4, but was length"
    endif
	lea	(addr).w,a1
	moveq	#0,d0
	move.w	#bytesToLcnt(length),d1
-	move.l	d0,(a1)+
	dbf	d1,-
    endm

; tells the Z80 to stop, and waits for it to finish stopping (acquire bus)
stopZ80 macro
	move.w	#$100,(Z80_Bus_Request).l ; stop the Z80
-	btst	#0,(Z80_Bus_Request).l
	bne.s	- ; loop until it says it's stopped
    endm

; tells the Z80 to start again
startZ80 macro
	move.w	#0,(Z80_Bus_Request).l    ; start the Z80
    endm

; function to make a little-endian 16-bit pointer for the Z80 sound driver
z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80

; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
rom_ptr_z80 macro addr
		dc.w z80_ptr(addr)
	endm

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; start of ROM

StartOfRom:
    if * <> 0
	fatal "StartOfRom was $\{*} but it should be 0"
    endif
;Vectors:
	dc.l System_Stack, EntryPoint, ErrorTrap, ErrorTrap; 4
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 8
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 12
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 16
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 20
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 24
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 28
	dc.l H_Int,     ErrorTrap, V_Int,     ErrorTrap; 32
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 36
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 40
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 44
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 48
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 52
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 56
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 60
	dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap; 64
; byte_200:
Header:
	dc.b "SEGA GENESIS    " ; Console name
	dc.b "(C)SEGA 1992.SEP" ; Copyright/Date
;	dc.b "SONIC THE             HEDGEHOG 2                " ; Domestic name / International name (copy)
	dc.b "Hedgehog Abuse Simulatur 2016                   " ; Domestic name
	dc.b "Hedgehog Abuse Simulatur 2016                   " ; International name
	dc.b "GM 00001051-01"   ; Version
; word_18E
Checksum:
	dc.w $D951		; Checksum (patched later if incorrect)
	dc.b "J               " ; I/O Support
	dc.l StartOfRom		; ROM Start
; dword_1A4
ROMEndLoc:
	dc.l EndOfRom-1		; ROM End
	dc.l $FF0000		; RAM Start
	dc.l $FFFFFF		; RAM End
	dc.b "    "		; Backup RAM ID
	dc.l $20202020		; Backup RAM start address
	dc.l $20202020		; Backup RAM end address
	dc.b "            "	; Modem support
	dc.b "                                        "	; Notes
	dc.b "JUE             " ; Country
EndOfHeader:

; ===========================================================================
; Crash/Freeze the 68000. Note that the Z80 continues to run, so the music keeps playing.
; loc_200:
ErrorTrap:
	nop
	nop
	bra.s	ErrorTrap

; ===========================================================================
; loc_206:
EntryPoint:
	tst.l	(Z80_Port_1_Control).l	; test port A control
	bne.s	PortA_Ok
	tst.w	(Z80_Expansion_Control).l	; test port C control
; loc_214:
PortA_Ok:
	bne.s	PortC_OK ; skip the VDP and Z80 setup code if port A or C is ok...?
	lea	SetupValues(pc),a5
	movem.w	(a5)+,d5-d7
	movem.l	(a5)+,a0-a4
	move.b	Z80_Version-Z80_Bus_Request(a1),d0	; get hardware version
	andi.b	#$F,d0
	beq.s	SkipSecurity ; branch if hardware is older than Genesis III
	move.l	#'SEGA',Security_Addr-Z80_Bus_Request(a1) ; satisfy the TMSS
; loc_234:
SkipSecurity:
	move.w	(a4),d0	; check if VDP works
	moveq	#0,d0
	movea.l	d0,a6
	move.l	a6,usp	; set usp to $0
	moveq	#$17,d1 ; run the following loop $18 times
; loc_23E:
VDPInitLoop:
	move.b	(a5)+,d5	; add $8000 to value
	move.w	d5,(a4)	; move value to VDP register
	add.w	d7,d5	; next register
	dbf	d1,VDPInitLoop

	move.l	(a5)+,(a4)	; set VRAM write mode
	move.w	d0,(a3)	; clear the screen
	move.w	d7,(a1)	; stop the Z80
	move.w	d7,(a2)	; reset the Z80
; loc_250:
WaitForZ80:
	btst	d0,(a1)	; has the Z80 stopped?
	bne.s	WaitForZ80	; if not, branch
	moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
; loc_256:
Z80InitLoop:
	move.b	(a5)+,(a0)+
	dbf	d2,Z80InitLoop

	move.w	d0,(a2)
	move.w	d0,(a1)	; start the Z80
	move.w	d7,(a2)	; reset the Z80
; loc_262:
ClrRAMLoop:
	move.l	d0,-(a6)
	dbf	d6,ClrRAMLoop	; clear the entire RAM
	move.l	(a5)+,(a4)	; set VDP display mode and increment
	move.l	(a5)+,(a4)	; set VDP to CRAM write
	moveq	#$1F,d3
; loc_26E:
ClrCRAMLoop:
	move.l	d0,(a3)
	dbf	d3,ClrCRAMLoop	; clear the CRAM
	move.l	(a5)+,(a4)
	moveq	#$13,d4
; loc_278:
ClrVDPStuff:
	move.l	d0,(a3)
	dbf	d4,ClrVDPStuff
	moveq	#3,d5
; loc_280:
PSGInitLoop:
	move.b	(a5)+,$11(a3)	; reset the PSG
	dbf	d5,PSGInitLoop
	move.w	d0,(a2)
	movem.l	(a6),d0-a6	; clear all registers
	move	#$2700,sr	; set the sr
 ; loc_292:
PortC_OK: ;;
	bra.s	GameProgram
; ===========================================================================
; byte_294:
SetupValues:
	dc.w	$8000,$3FFF,$100

	dc.l	Z80_RAM
	dc.l	Z80_Bus_Request
	dc.l	Z80_Reset
	dc.l	VDP_data_port, VDP_control_port

	; values for VDP registers
	dc.b	  4, $14, $30, $3C
	dc.b	$07, $6C, $00, $00
	dc.b	$00, $00, $FF, $00
	dc.b	$81, $37, $00, $01
	dc.b	$01, $00, $00, $FF
	dc.b	$FF, $00, $00, $80

	dc.l	$40000080 ; value for VRAM write mode

	; Z80 instructions (not the sound driver; that gets loaded later)
	; I think this is basically unused but I've made some sense of it anyway...
Z80StartupCodeBegin: ; loc_2CA:
    if (*)+$26 < $10000
    CPU Z80 ; start compiling Z80 code
    phase 0 ; pretend we're at address 0
	xor     a	; clear a to 0
	ld      bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
	ld      de,zStartupCodeEndLoc+1	; initial destination address
	ld      hl,zStartupCodeEndLoc	; initial source address
	ld      sp,hl	; set the address the stack starts at
	ld      (hl),a	; set first byte of the stack to 0
	ldir    	; loop to fill the stack (entire remaining available Z80 RAM) with 0
	pop     ix	; clear ix
	pop     iy	; clear iy
	ld      i,a	; clear i
	ld      r,a	; clear r
	pop     de	; clear de
	pop     hl	; clear hl
	pop     af	; clear af
	ex      af,af'	; swap af with af'
	exx		; swap bc/de/hl with their shadow registers too
	pop     bc	; clear bc
	pop     de	; clear de
	pop     hl	; clear hl
	pop     af	; clear af
	ld      sp,hl	; clear sp
	di      	; clear iff1 (for interrupt handler)
	im      1	; interrupt handling mode = 1
	ld      (hl),0E9H ; replace the first instruction with a jump to itself
	jp      (hl)      ; jump to the first instruction (to stay there forever)
    zStartupCodeEndLoc:
    dephase ; stop pretending
    CPU 68000	; switch back to 68000 code
    padding off ; unfortunately our flags got reset so we have to set them again...
    listing off
    supmode on
    else ; due to an address range limitation I could work around but don't think is worth doing so:
;	message "Warning: using pre-assembled Z80 startup code."
    	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
    endif
Z80StartupCodeEnd:

	dc.w	$8104	; value for VDP display mode
	dc.w	$8F02	; value for VDP increment
	dc.l	$C0000000	; value for CRAM write mode
	dc.l	$40000010	; unknown (VSRAM?)

	dc.b	$9F,$BF,$DF,$FF	; values for PSG channel volumes
; ===========================================================================

	even
; loc_300:
GameProgram:
	tst.w	(VDP_control_port).l
; loc_306:
CheckSumCheck:
	move.w	(VDP_control_port).l,d1
	btst	#1,d1
	bne.s	CheckSumCheck
	btst	#6,(Z80_Expansion_Control+1).l
	beq.s	ChecksumTest
	cmpi.l	#'init',(Checksum_fourcc).w ; has checksum routine already run?
	beq.w	GameInit

; loc_328:
ChecksumTest:
    if skipChecksumCheck=0	; checksum code
	movea.l	#EndOfHeader,a0	; start checking bytes after the header ($200)
	movea.l	#ROMEndLoc,a1	; stop at end of ROM
	move.l	(a1),d0
	moveq	#0,d1
; loc_338:
ChecksumLoop:
	add.w	(a0)+,d1
	cmp.l	a0,d0
	bcc.s	ChecksumLoop
	movea.l	#Checksum,a1	; read the checksum
	cmp.w	(a1),d1	; compare correct checksum to the one in ROM
	bne.w	ChecksumError	; if they don't match, branch
    endif
;checksum_good:
	lea	(System_Stack).w,a6
	moveq	#0,d7
	move.w	#$7F,d6
-	move.l	d7,(a6)+
	dbf	d6,-

	move.b	(Z80_Version).l,d0
	andi.b	#$C0,d0
	move.b	d0,(Graphics_Flags).w
	move.l	#'init',(Checksum_fourcc).w ; set flag so checksum won't be run again
; loc_370:
GameInit:
	lea	($FF0000).l,a6
	moveq	#0,d7
	move.w	#$3F7F,d6
; loc_37C:
GameClrRAM:
	move.l	d7,(a6)+
	dbf	d6,GameClrRAM

	bsr.w	VDPSetupGame
	bsr.w	JmpTo_SoundDriverLoad
	bsr.w	JoypadInit
	move.b	#0,(Game_Mode).w	; => SegaScreen
; loc_394:
MainGameLoop:
	move.b	(Game_Mode).w,d0
	andi.w	#$3C,d0
	jsr	GameModesArray(pc,d0.w)
	bra.s	MainGameLoop
; ===========================================================================
; loc_3A2:
GameModesArray: ;;
	bra.w	SegaScreen		; $00 SEGA screen mode
	bra.w	TitleScreen		; $04 Title screen mode
	bra.w	Level			; $08 Demo mode
	bra.w	Level			; $0C Zone play mode
	bra.w	SpecialStage		; $10 Special stage play mode
	bra.w	ContinueScreen		; $14 Continue mode
	bra.w	TwoPlayerResults	; $18 2P results mode
	bra.w	LevelSelectMenu2P	; $1C 2P level select mode
	bra.w	JmpTo_EndingSequence	; $20 End sequence mode
	bra.w	OptionsMenu		; $24 Options mode
	bra.w	LevelSelectMenu		; $28 Level select mode
; ===========================================================================
; loc_3CE:
ChecksumError:
	move.l	d1,-(sp)
	bsr.w	VDPSetupGame
	move.l	(sp)+,d1
	move.l	#$C0000000,(VDP_control_port).l
	moveq	#$3F,d7
; loc_3E2:
Checksum_Red:
	move.w	#$E,(VDP_data_port).l
	dbf	d7,Checksum_Red
; loc_3EE:
ChecksumFailed_Loop:
	bra.s	ChecksumFailed_Loop
; ===========================================================================
; loc_3F0:
LevelSelectMenu2P: ;;
	jmp	MenuScreen.l
; ===========================================================================
; loc_3F6:
JmpTo_EndingSequence 
	jmp	EndingSequence.l
; ===========================================================================
; loc_3FC:
OptionsMenu: ;;
	jmp	MenuScreen.l
; ===========================================================================
; loc_402:
LevelSelectMenu: ;;
	jmp	MenuScreen.l
; ===========================================================================

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; vertical and horizontal interrupt handlers
; VERTICAL INTERRUPT HANDLER:
V_Int:
	movem.l	d0-a6,-(sp)
	tst.b	(Delay_Time).w
	beq.w	VintSub0

-	move.w	(VDP_control_port).l,d0
	andi.w	#8,d0
	beq.s	-

	move.l	#$40000010,(VDP_control_port).l	; VSRAM write address $0000
	move.l	(Vscroll_Factor).w,(VDP_data_port).l
	btst	#6,(Graphics_Flags).w
	beq.s	+

	move.w	#$700,d0
-	dbf	d0,- ; wait here in a loop doing nothing for a while...
+
	move.b	(Delay_Time).w,d0
	move.b	#0,(Delay_Time).w
	move.w	#1,($FFFFF644).w
	andi.w	#$3E,d0
	move.w	Vint_SwitchTbl(pc,d0.w),d0
	jsr	Vint_SwitchTbl(pc,d0.w)

VintRet:
	addq.l	#1,($FFFFFE0C).w
	movem.l	(sp)+,d0-a6
	rte
; ===========================================================================
Vint_SwitchTbl:
	dc.w VintSub0 - Vint_SwitchTbl
	dc.w VintSub2 - Vint_SwitchTbl	; 2
	dc.w VintSub4 - Vint_SwitchTbl	; 4
	dc.w VintSub6 - Vint_SwitchTbl	; 6
	dc.w VintSub8 - Vint_SwitchTbl	; 8
	dc.w VintSubA - Vint_SwitchTbl	; A
	dc.w VintSubC - Vint_SwitchTbl	; C
	dc.w VintSubE - Vint_SwitchTbl	; E
	dc.w VintSub10 - Vint_SwitchTbl	; 10
	dc.w VintSub12 - Vint_SwitchTbl	; 12
	dc.w VintSub14 - Vint_SwitchTbl	; 14
	dc.w VintSub16 - Vint_SwitchTbl	; 16
	dc.w VintSub18 - Vint_SwitchTbl	; 18
	dc.w VintSub1A - Vint_SwitchTbl	; 1A
; ===========================================================================

VintSub0:
	cmpi.b	#$88,(Game_Mode).w	; pre-level Demo Mode?
	beq.s	loc_4C4
	cmpi.b	#$8C,(Game_Mode).w	; pre-level Zone play mode?
	beq.s	loc_4C4
	cmpi.b	#8,(Game_Mode).w	; Demo Mode?
	beq.s	loc_4C4
	cmpi.b	#$C,(Game_Mode).w	; Zone play mode?
	beq.s	loc_4C4

	stopZ80			; stop the Z80
	bsr.w	sndDriverInput	; give input to the sound driver
	startZ80		; start the Z80

	bra.s	VintRet
; ---------------------------------------------------------------------------

loc_4C4:
	tst.b	(Water_flag).w
	beq.w	Vint0_noWater
	move.w	(VDP_control_port).l,d0
	btst	#6,(Graphics_Flags).w
	beq.s	+

	move.w	#$700,d0
-	dbf	d0,- ; do nothing for a while...
+
	move.w	#1,($FFFFF644).w

	stopZ80

	tst.b	(Water_move).w
	bne.s	loc_526

	dma68kToVDP Normal_palette,$0000,$80,CRAM

	bra.s	loc_54A
; ---------------------------------------------------------------------------

loc_526:
	dma68kToVDP Underwater_palette,$0000,$80,CRAM

loc_54A:
	move.w	(Hint_counter_reserve).w,(a5)
	move.w	#$8230,(VDP_control_port).l	; Set scroll A PNT base to $C000
	bsr.w	sndDriverInput

	startZ80

	bra.w	VintRet
; ---------------------------------------------------------------------------

Vint0_noWater:
	move.w	(VDP_control_port).l,d0
	move.l	#$40000010,(VDP_control_port).l	; VSRAM write address $0000
	move.l	(Vscroll_Factor).w,(VDP_data_port).l
	btst	#6,(Graphics_Flags).w
	beq.s	+

	move.w	#$700,d0
-	dbf	d0,- ; do nothing for a while...
+
	move.w	#1,($FFFFF644).w
	move.w	(Hint_counter_reserve).w,(VDP_control_port).l
	move.w	#$8230,(VDP_control_port).l		; Set scroll A PNT base to $C000
	move.l	($FFFFF61E).w,($FFFFEEEC).w

	stopZ80
	dma68kToVDP Sprite_Table,$F800,$280,VRAM
	bsr.w	sndDriverInput
	startZ80

	bra.w	VintRet
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

; This subroutine copies the H scroll table buffer (in main RAM) to the H scroll
; table (in VRAM).

VintSub2:
	bsr.w	sub_E98

	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM
	bsr.w	JmpTo_loc_3A68A
	tst.w	(Demo_Time_left).w
	beq.w	+
	subq.w	#1,(Demo_Time_left).w
+
	rts
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

VintSub14:
	move.b	($FFFFFE0F).w,d0
	andi.w	#$F,d0
	bne.s	+

	stopZ80
	bsr.w	ReadJoypads
	startZ80
+
	tst.w	(Demo_Time_left).w
	beq.w	+
	subq.w	#1,(Demo_Time_left).w
+
	rts
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

VintSub4:
	bsr.w	sub_E98
	bsr.w	ProcessDPLC
	tst.w	(Demo_Time_left).w
	beq.w	+
	subq.w	#1,(Demo_Time_left).w
+
	rts
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

VintSub6:
	bsr.w	sub_E98
	rts
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

VintSub10:
	cmpi.b	#$10,(Game_Mode).w	; Special Stage?
	beq.w	Vint10_specialStage

VintSub8:

	stopZ80

	bsr.w	ReadJoypads
	tst.b	($FFFFF622).w
	beq.s	loc_6F8
	lea	(VDP_control_port).l,a5
	tst.w	(Game_paused).w
	bne.w	loc_748
	subq.b	#1,($FFFFF622).w
	bne.s	+
	move.b	#0,($FFFFF623).w
+
	cmpi.b	#$10,($FFFFF622).w
	bcs.s	loc_6F8
	lea	(VDP_data_port).l,a6
	move.l	#$C0000000,(VDP_control_port).l	; CRAM write address $0000
	move.w	#$EEE,d0

	move.w	#$1F,d1
-	move.w	d0,(a6)
	dbf	d1,-

	move.l	#$C0420000,(VDP_control_port).l	; CRAM write address $0042

	move.w	#$1F,d1
-	move.w	d0,(a6)
	dbf	d1,-

	bra.s	loc_748
; ---------------------------------------------------------------------------

loc_6F8:
	tst.b	(Water_move).w
	bne.s	loc_724
	dma68kToVDP Normal_palette,$0000,$80,CRAM
	bra.s	loc_748
; ---------------------------------------------------------------------------

loc_724:

	dma68kToVDP Underwater_palette,$0000,$80,CRAM

loc_748:
	move.w	(Hint_counter_reserve).w,(a5)
	move.w	#$8230,(VDP_control_port).l	; Set scroll A PNT base to $C000

	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM
	dma68kToVDP Sprite_Table,$F800,$280,VRAM

	bsr.w	ProcessDMAQueue
	bsr.w	sndDriverInput

	startZ80

	movem.l	(Camera_RAM).w,d0-d7
	movem.l	d0-d7,($FFFFEE60).w
	movem.l	($FFFFEE20).w,d0-d7
	movem.l	d0-d7,($FFFFEE80).w
	movem.l	($FFFFEE50).w,d0-d3
	movem.l	d0-d3,($FFFFEEA0).w
	move.l	($FFFFF61E).w,($FFFFEEEC).w
	cmpi.b	#$5C,($FFFFF625).w
	bcc.s	DemoTime
	move.b	#1,($FFFFF64F).w
	rts

; ---------------------------------------------------------------------------
; Subroutine to run a demo for an amount of time
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_7E6: Demo_Time:
DemoTime:
	bsr.w	JmpTo_LoadTilesAsYouMove
	jsr	(HudUpdate).l
	bsr.w	ProcessDPLC2
	tst.w	(Demo_Time_left).w	; is there time left on the demo?
	beq.w	DemoTime_End    	; if not, branch
	subq.w	#1,(Demo_Time_left).w	; subtract 1 from time left

; return_800: Demo_TimeEnd:
DemoTime_End:
	rts
; End of function DemoTime

; ---------------------------------------------------------------------------

Vint10_specialStage:
	stopZ80

	bsr.w	ReadJoypads
	jsr	(sndDriverInput).l
	tst.b	($FFFFDB11).w
	beq.s	loc_84A

	dma68kToVDP Horiz_Scroll_Buf_2,$FC00,$380,VRAM
	bra.s	loc_86E
; ---------------------------------------------------------------------------
loc_84A:
	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM

loc_86E:
	startZ80
	rts
; ========================================================================>>>

VintSubA:
	stopZ80

	bsr.w	ReadJoypads
	bsr.w	sub_AE8

	dma68kToVDP Normal_palette,$0000,$80,CRAM
	dma68kToVDP Sprite_Table,$F800,$280,VRAM

	tst.b	($FFFFDB0F).w
	beq.s	loc_906

	dma68kToVDP Horiz_Scroll_Buf_2,$FC00,$380,VRAM
	bra.s	loc_92A
; ---------------------------------------------------------------------------

loc_906:
	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM

loc_92A:
	tst.b	($FFFFDB0E).w
	beq.s	loc_950
	moveq	#0,d0
	move.b	($FFFFDB0D).w,d0
	cmpi.b	#4,d0
	bge.s	loc_950
	add.b	d0,d0
	tst.b	($FFFFDB0C).w	; [($FFFFDB0D) * 2] = subroutine
	beq.s	+		; else
	addi.w	#8,d0		; ([($FFFFDB0D) * 2] + 8) = subroutine
+
	move.w	off_97A(pc,d0.w),d0
	jsr	off_97A(pc,d0.w)

loc_950:
	bsr.w	sub_B02
	addi.b	#1,($FFFFDB0D).w
	move.b	($FFFFDB0D).w,d0
	cmp.b	d1,d0
	blt.s	loc_994
	move.b	#0,($FFFFDB0D).w
	lea	(VDP_control_port).l,a6
	tst.b	($FFFFDB0C).w
	beq.s	loc_98A
	move.w	#$8230,(a6)
	bra.s	loc_98E
; ===========================================================================
off_97A:
	dc.w loc_A50-off_97A	; 0
	dc.w loc_A76-off_97A	; 1
	dc.w loc_A9C-off_97A	; 2
	dc.w loc_AC2-off_97A	; 3
	dc.w loc_9B8-off_97A	; 4
	dc.w loc_9DE-off_97A	; 5
	dc.w loc_A04-off_97A	; 6
	dc.w loc_A2A-off_97A	; 7
; ===========================================================================

loc_98A:
	move.w	#$8220,(a6)		; PNT A base: $8000

loc_98E:
	eori.b	#1,($FFFFDB0C).w

loc_994:
	bsr.w	ProcessDMAQueue
	jsr	(sndDriverInput).l

	startZ80

	bsr.w	ProcessDPLC2
	tst.w	(Demo_Time_left).w
	beq.w	+
	subq.w	#1,(Demo_Time_left).w
+	rts
; ---------------------------------------------------------------------------
; (!)
; these transfers have something to do with drawing the special stage track (hscroll?)
loc_9B8:
	dma68kToVDP PNT_Buffer,$C000,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_9DE:
	dma68kToVDP PNT_Buffer,$C700,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_A04:
	dma68kToVDP PNT_Buffer,$CE00,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_A2A:
	dma68kToVDP PNT_Buffer,$D500,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_A50:
	dma68kToVDP PNT_Buffer,$8000,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_A76:
	dma68kToVDP PNT_Buffer,$8700,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_A9C:
	dma68kToVDP PNT_Buffer,$8E00,$700,VRAM
	rts
; ---------------------------------------------------------------------------
loc_AC2:
	dma68kToVDP PNT_Buffer,$9500,$700,VRAM
	rts
; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_AE8:
	move.w	(VDP_control_port).l,d0
	move.l	#$40000010,(VDP_control_port).l	; VSRAM write address $0000
	move.l	(Vscroll_Factor).w,(VDP_data_port).l
	rts
; End of function sub_AE8


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_B02:
	move.w	($FFFFDB16).w,d0
	cmp.w	($FFFFDB12).w,d0
	beq.s	+
	move.l	($FFFFDB12).w,($FFFFDB16).w
	move.b	#0,($FFFFDB1F).w
+	subi.b	#1,($FFFFDB1F).w
	bgt.s	+
	lea	(byte_B46).l,a0
	move.w	($FFFFDB16).w,d0
	lsr.w	#1,d0
	move.b	(a0,d0.w),d1
	move.b	d1,($FFFFDB21).w
	move.b	d1,($FFFFDB1F).w
	subq.b	#1,($FFFFDB21).w
	rts
; ---------------------------------------------------------------------------
+
	move.b	($FFFFDB21).w,d1
	addq.b	#1,d1
	rts
; End of function sub_B02

; ===========================================================================
byte_B46:
	dc.b $3C
	dc.b $1E	; 1
	dc.b  $F	; 2
	dc.b  $A	; 3
	dc.b   8	; 4
	dc.b   6	; 5
	dc.b   5	; 6
	dc.b   0	; 7
; ===========================================================================

VintSub1A:
	stopZ80
	jsr	(ProcessDMAQueue).l
	startZ80
	rts
; ===========================================================================

VintSubC:
	stopZ80

	bsr.w	ReadJoypads
	tst.b	(Water_move).w
	bne.s	loc_BB2

	dma68kToVDP Normal_palette,$0000,$80,CRAM
	bra.s	loc_BD6
; ---------------------------------------------------------------------------

loc_BB2:
	dma68kToVDP Underwater_palette,$0000,$80,CRAM

loc_BD6:
	move.w	(Hint_counter_reserve).w,(a5)

	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM
	dma68kToVDP Sprite_Table,$F800,$280,VRAM

	bsr.w	ProcessDMAQueue
	jsr	(loc_15584).l
	jsr	(sndDriverInput).l

	startZ80

	movem.l	(Camera_RAM).w,d0-d7
	movem.l	d0-d7,($FFFFEE60).w
	movem.l	($FFFFEE50).w,d0-d1
	movem.l	d0-d1,($FFFFEEA0).w
	move.l	($FFFFF61E).w,($FFFFEEEC).w
	bsr.w	ProcessDPLC
	rts
; ===========================================================================

VintSubE:
	bsr.w	sub_E98
	addq.b	#1,($FFFFF628).w
	move.b	#$E,(Delay_Time).w
	rts
; ===========================================================================

VintSub12:
	bsr.w	sub_E98
	move.w	(Hint_counter_reserve).w,(a5)
	bra.w	ProcessDPLC
; ===========================================================================

VintSub18:
	stopZ80

	bsr.w	ReadJoypads

	dma68kToVDP Normal_palette,$0000,$80,CRAM
	dma68kToVDP Sprite_Table,$F800,$280,VRAM
	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM

	bsr.w	ProcessDMAQueue
	bsr.w	sndDriverInput
	movem.l	(Camera_RAM).w,d0-d7
	movem.l	d0-d7,($FFFFEE60).w
	movem.l	($FFFFEE50).w,d0-d3
	movem.l	d0-d3,($FFFFEEA0).w
	bsr.w	JmpTo_LoadTilesAsYouMove

	startZ80

	move.w	($FFFFF662).w,d0
	beq.s	return_D3A
	clr.w	($FFFFF662).w
	move.w	return_D3A(pc,d0.w),d0
	jsr	off_D3C(pc,d0.w)

return_D3A:
	rts
; ===========================================================================
off_D3C:
	dc.w loc_D40-off_D3C	; 1
	dc.w loc_D70-off_D3C	; 2
; ===========================================================================

loc_D40:
	dmaFillVRAM 0,$C000,$2000	; VRAM Fill $C000 with $2000 zeros
	rts
; ---------------------------------------------------------------------------

loc_D70:
	dmaFillVRAM 0,$4000,$2000
	dmaFillVRAM 0,$C000,$2000

	lea	(VDP_control_port).l,a6
	move.w	#$8B00,(a6)		; EXT-INT off, V scroll by screen, H scroll by screen
	move.w	#$8402,(a6)		; PNT B base: $8000
	move.w	#$9011,(a6)		; Scroll table size: 64x64
	lea	(Metablock_Table).l,a1
	move.l	#$50AC0003,d0
	moveq	#$16,d1
	moveq	#$E,d2
	bsr.w	ShowVDPGraphics
	rts
; ===========================================================================

VintSub16:
	stopZ80

	bsr.w	ReadJoypads

	dma68kToVDP Normal_palette,$0000,$80,CRAM
	dma68kToVDP Sprite_Table,$F800,$280,VRAM
	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM

	bsr.w	ProcessDMAQueue
	bsr.w	sndDriverInput

	startZ80

	bsr.w	ProcessDPLC
	tst.w	(Demo_Time_left).w
	beq.w	+
	subq.w	#1,(Demo_Time_left).w
+
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E98:
	stopZ80

	bsr.w	ReadJoypads
	tst.b	(Water_move).w
	bne.s	loc_EDA

	dma68kToVDP Normal_palette,$0000,$80,CRAM
	bra.s	loc_EFE
; ---------------------------------------------------------------------------

loc_EDA:
	dma68kToVDP Underwater_palette,$0000,$80,CRAM

loc_EFE:
	dma68kToVDP Sprite_Table,$F800,$280,VRAM
	dma68kToVDP Horiz_Scroll_Buf,$FC00,$380,VRAM

	bsr.w	sndDriverInput

	startZ80

	rts
; End of function sub_E98
; ||||||||||||||| E N D   O F   V - I N T |||||||||||||||||||||||||||||||||||

; ===========================================================================
; Start of H-INT code
H_Int:
	tst.w	($FFFFF644).w
	beq.w	return_FFE
	tst.w	(Two_player_mode).w
	beq.w	PalToCRAM
	move.w	#0,($FFFFF644).w
	move.l	a5,-(sp)
	move.l	d0,-(sp)

-	move.w	(VDP_control_port).l,d0	; loop start: Make sure V_BLANK is over
	andi.w	#4,d0
	beq.s	-	; loop end

	move.w	($FFFFF60C).w,d0
	andi.b	#$BF,d0
	move.w	d0,(VDP_control_port).l
	move.w	#$8228,(VDP_control_port).l
	move.l	#$40000010,(VDP_control_port).l
	move.l	($FFFFEEEC).w,(VDP_data_port).l

	stopZ80
	dma68kToVDP Sprite_Table_2,$F800,$280,VRAM
	startZ80

-	move.w	(VDP_control_port).l,d0
	andi.w	#4,d0
	beq.s	-

	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	move.l	(sp)+,d0
	movea.l	(sp)+,a5

return_FFE:
	rte


; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; game code

; ---------------------------------------------------------------------------
; loc_1000:
PalToCRAM:
	move	#$2700,sr
	move.w	#0,($FFFFF644).w
	movem.l	a0-a1,-(sp)
	lea	(VDP_data_port).l,a1
	lea	(Underwater_palette).w,a0 	; load palette from RAM
	move.l	#$C0000000,4(a1)	; set VDP to write to CRAM address $00
    rept 32
	move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
    endm
	move.w	#$8ADF,4(a1)	; Write %1101 %1111 to register 10 (interrupt every 224th line)
	movem.l	(sp)+,a0-a1
	tst.b	($FFFFF64F).w
	bne.s	loc_1072
	rte
; ===========================================================================

loc_1072:
	clr.b	($FFFFF64F).w
	movem.l	d0-a6,-(sp)
	bsr.w	DemoTime
	movem.l	(sp)+,d0-a6
	rte

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Input our music/sound selection to the sound driver.

sndDriverInput:
	lea	(Music_to_play&$00FFFFFF).l,a0
	lea	(Z80_RAM+zComRange).l,a1 ; $A01B80
	cmpi.b	#$80,8(a1)	; If this (zReadyFlag) isn't $80, the driver is processing a previous sound request.
	bne.s	loc_10C4	; So we'll wait until at least the next frame before putting anything in there.
	_move.b	0(a0),d0
	beq.s	loc_10A4
	_clr.b	0(a0)
	bra.s	loc_10AE
; ---------------------------------------------------------------------------

loc_10A4:
	move.b	4(a0),d0	; If there was something in Music_to_play_2, check what that was. Else, just go to the loop.
	beq.s	loc_10C4
	clr.b	4(a0)

loc_10AE:		; Check that the sound is not FE or FF
	move.b	d0,d1	; If it is, we need to put it in $A01B83 as $7F or $80 respectively
	subi.b	#$FE,d1
	bcs.s	loc_10C0
	addi.b	#$7F,d1
	move.b	d1,3(a1)
	bra.s	loc_10C4
; ---------------------------------------------------------------------------

loc_10C0:
	move.b	d0,8(a1)

loc_10C4:
	moveq	#4-1,d1
				; FFE4 (Music_to_play_2) goes to 1B8C (zMusicToPlay),
-	move.b	1(a0,d1.w),d0	; FFE3 goes to 1B8B, (unknown)
	beq.s	+		; FFE2 (SFX_to_play_2) goes to 1B8A (zSFXToPlay2),
	tst.b	9(a1,d1.w)	; FFE1 (SFX_to_play) goes to 1B89 (zSFXToPlay).
	bne.s	+
	clr.b	1(a0,d1.w)
	move.b	d0,9(a1,d1.w)
+
	dbf	d1,-
	rts
; End of function sndDriverInput


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_10E0:
JmpTo_LoadTilesAsYouMove 
	jmp	(LoadTilesAsYouMove).l
; End of function JmpTo_LoadTilesAsYouMove


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_3A68A 
	jmp	(loc_3A68A).l
; End of function JmpTo_loc_3A68A

; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
; ---------------------------------------------------------------------------
; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_10EC:
JoypadInit:
	stopZ80
	moveq	#$40,d0
	move.b	d0,(Z80_Port_1_Control+1).l	; init port 1 (joypad 1)
	move.b	d0,(Z80_Port_2_Control+1).l	; init port 2 (joypad 2)
	move.b	d0,(Z80_Expansion_Control+1).l	; init port 3 (extra)
	startZ80
	rts
; End of function JoypadInit

; ---------------------------------------------------------------------------
; Subroutine to read joypad input, and send it to the RAM
; ---------------------------------------------------------------------------
; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_111C:
ReadJoypads:
	lea	(Ctrl_1).w,a0	; address where joypad states are written
	lea	(Z80_Port_1_Data+1).l,a1	; first joypad port
	bsr.s	Joypad_Read		; do the first joypad
	addq.w	#2,a1			; do the second joypad
; End of function ReadJoypads


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_112A:
Joypad_Read:
	move.b	#0,(a1)
	nop
	nop
	move.b	(a1),d0
	lsl.b	#2,d0
	andi.b	#$C0,d0
	move.b	#$40,(a1)
	nop
	nop
	move.b	(a1),d1
	andi.b	#$3F,d1
	or.b	d1,d0
	not.b	d0
	move.b	(a0),d1
	eor.b	d0,d1
	move.b	d0,(a0)+
	and.b	d0,d1
	move.b	d1,(a0)+
	rts
; End of function Joypad_Read


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1158:
VDPSetupGame:
	lea	(VDP_control_port).l,a0
	lea	(VDP_data_port).l,a1
	lea	(VDPSetupArray).l,a2
	moveq	#$12,d7
; loc_116C:
VDP_Loop:
	move.w	(a2)+,(a0)
	dbf	d7,VDP_Loop	; set the VDP registers

	move.w	(VDPSetupArray+2).l,d0
	move.w	d0,($FFFFF60C).w
	move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 224th scanline
	moveq	#0,d0

	move.l	#$40000010,(VDP_control_port).l
	move.w	d0,(a1)
	move.w	d0,(a1)

	move.l	#$C0000000,(VDP_control_port).l

	move.w	#$3F,d7
; loc_11A0:
VDP_ClrCRAM:
	move.w	d0,(a1)
	dbf	d7,VDP_ClrCRAM

	clr.l	(Vscroll_Factor).w
	clr.l	($FFFFF61A).w
	move.l	d1,-(sp)

	dmaFillVRAM 0,$0000,$10000	; fill entire VRAM with 0

	move.l	(sp)+,d1
	rts
; End of function VDPSetupGame

; ===========================================================================
; word_11E2:
VDPSetupArray:
	dc.w $8004, $8134, $8230, $8328	; 3
	dc.w $8407, $857C, $8600, $8700	; 7
	dc.w $8800, $8900, $8A00, $8B00	; 11
	dc.w $8C81, $8D3F, $8E00, $8F02	; 15
	dc.w $9001, $9100, $9200	; 18

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1208:
ClearScreen:
	stopZ80

	dmaFillVRAM 0,$0000,$40		; Fill first $40 bytes of VRAM with 0
	dmaFillVRAM 0,$C000,$1000	; Clear Plane A pattern name table
	dmaFillVRAM 0,$E000,$1000	; Clear Plane B pattern name table

	tst.w	(Two_player_mode).w
	beq.s	+

	dmaFillVRAM 0,$A000,$1000
+
	clr.l	(Vscroll_Factor).w
	clr.l	($FFFFF61A).w

	clearRAM Sprite_Table,$284
	clearRAM Horiz_Scroll_Buf,$404

	startZ80
	rts
; End of function ClearScreen


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; JumpTo load the sound driver
; sub_130A:
JmpTo_SoundDriverLoad 
	nop
	jmp	(SoundDriverLoad).l
; End of function JmpTo_SoundDriverLoad

; ===========================================================================
; unused mostly-leftover subroutine to load the sound driver
; SoundDriverLoadS1:
	move.w	#$100,(Z80_Bus_Request).l ; stop the Z80
	move.w	#$100,(Z80_Reset).l ; reset the Z80
	lea	(Z80_RAM).l,a1
	move.b	#$F3,(a1)+
	move.b	#$F3,(a1)+
	move.b	#$C3,(a1)+
	move.b	#0,(a1)+
	move.b	#0,(a1)+
	move.w	#0,(Z80_Reset).l
	nop
	nop
	nop
	nop
	move.w	#$100,(Z80_Reset).l ; reset the Z80
	move.w	#0,(Z80_Bus_Request).l ; start the Z80
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; If Music_to_play is clear, move d0 into Music_to_play,
; else move d0 into Music_to_play_2.
; sub_135E:
PlayMusic:
	tst.b	(Music_to_play).w
	bne.s	+
	move.b	d0,(Music_to_play).w
	rts
+
	move.b	d0,(Music_to_play_2).w
	rts
; End of function PlayMusic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1370
PlaySound:
	move.b	d0,(SFX_to_play).w
	rts
; End of function PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; play a sound in alternating speakers (as in the ring collection sound)
; sub_1376:
PlaySoundStereo:
	move.b	d0,(SFX_to_play_2).w
	rts
; End of function PlaySoundStereo


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; play a sound if the source is onscreen
; sub_137C:
PlaySoundLocal:
	tst.b	render_flags(a0)
	bpl.s	+
	move.b	d0,(SFX_to_play).w
+
	rts
; End of function PlaySoundLocal

; ---------------------------------------------------------------------------
; Subroutine to pause the game
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1388:
PauseGame:
	nop
	tst.b	(Life_count).w	; do you have any lives left?
	beq.w	Unpause		; if not, branch
	tst.w	(Game_paused).w	; is game already paused?
	bne.s	+		; if yes, branch
	move.b	(Ctrl_1_Press).w,d0 ; is Start button pressed?
	or.b	(Ctrl_2_Press).w,d0 ; (either player)
	andi.b	#$80,d0
	beq.s	Pause_DoNothing	; if not, branch
+
	move.w	#1,(Game_paused).w	; freeze time
	move.b	#-2,(Music_to_play).w	; pause music

loc_13B2:
	move.b	#$10,(Delay_Time).w
	bsr.w	DelayProgram
	;tst.b	(Slow_motion_flag).w	; is slow-motion cheat on?
	;beq.s	Pause_ChkStart		; if not, branch
	btst	#6,(Ctrl_1_Press).w	; is button A pressed?
	beq.s	Pause_ChkBC		; if not, branch
	move.b	#4,(Game_Mode).w	; => TitleScreen
	nop
	bra.s	loc_13F2
; ===========================================================================
; loc_13D4:
Pause_ChkBC:
	btst	#4,(Ctrl_1_Held).w	; is button B pressed?
	bne.s	Pause_SlowMo		; if yes, branch
	btst	#5,(Ctrl_1_Press).w	; is button C pressed?
	bne.s	Pause_SlowMo		; if yes, branch
; loc_13E4:
Pause_ChkStart:
	move.b	(Ctrl_1_Press).w,d0	; is Start button pressed?
	or.b	(Ctrl_2_Press).w,d0	; (either player)
	andi.b	#$80,d0
	beq.s	loc_13B2	; if not, branch

loc_13F2:
	move.b	#-1,(Music_to_play).w
; loc_13F8:
Unpause:
	move.w	#0,(Game_paused).w
; return_13FE:
Pause_DoNothing:
	rts
; ===========================================================================
; loc_1400:
Pause_SlowMo:
	move.w	#1,(Game_paused).w
	move.b	#-1,(Music_to_play).w
	rts
; End of function PauseGame

; ---------------------------------------------------------------------------
; Subroutine to display patterns via the VDP
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_140E:
ShowVDPGraphics:
	lea	(VDP_data_port).l,a6
	move.l	#$800000,d4
-	move.l	d0,4(a6)
	move.w	d1,d3
-	move.w	(a1)+,(a6)
	dbf	d3,-
	add.l	d4,d0
	dbf	d2,--
	rts
; End of function ShowVDPGraphics

; ---------------------------------------------------------------------------
; Alternate subroutine to display patterns via the VDP
; (used for Special Stage background)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_142E:
ShowVDPGraphics2:
	lea	(VDP_data_port).l,a6
	move.l	#$1000000,d4
-	move.l	d0,4(a6)
	move.w	d1,d3
-	move.w	(a1)+,(a6)
	dbf	d3,-
	add.l	d4,d0
	dbf	d2,--
	rts
; End of function ShowVDPGraphics2


; ---------------------------------------------------------------------------
; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
; to be issued the next time ProcessDMAQueue is called.
; Can be called a maximum of 18 times before the buffer needs to be cleared
; by issuing the commands (this subroutine DOES check for overflow)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
QueueDMATransfer:
	movea.l	(VDP_Command_Buffer_Slot).w,a1
	cmpa.w	#VDP_Command_Buffer_Slot,a1
	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer

	; piece together some VDP commands and store them for later...
	move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
	move.b	d3,d0
	move.w	d0,(a1)+ ; store command

	move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
	lsr.w	#8,d3
	move.b	d3,d0
	move.w	d0,(a1)+ ; store command

	move.w	#$9500,d0 ; command to specify source address & $0001FE
	lsr.l	#1,d1
	move.b	d1,d0
	move.w	d0,(a1)+ ; store command

	move.w	#$9600,d0 ; command to specify source address & $01FE00
	lsr.l	#8,d1
	move.b	d1,d0
	move.w	d0,(a1)+ ; store command

	move.w	#$9700,d0 ; command to specify source address & $FE0000
	lsr.l	#8,d1
	move.b	d1,d0
	move.w	d0,(a1)+ ; store command

	andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
	lsl.l	#2,d2
	lsr.w	#2,d2
	swap	d2
	ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
	move.l	d2,(a1)+ ; store command

	move.l	a1,(VDP_Command_Buffer_Slot).w ; set the next free slot address
	cmpa.w	#VDP_Command_Buffer_Slot,a1
	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
	move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
; return_14AA:
QueueDMATransfer_Done:
	rts
; End of function QueueDMATransfer


; ---------------------------------------------------------------------------
; Subroutine for issuing all VDP commands that were queued
; (by earlier calls to QueueDMATransfer)
; Resets the queue when it's done
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
ProcessDMAQueue:
	lea	(VDP_control_port).l,a5
	lea	(VDP_Command_Buffer).w,a1
; loc_14B6:
ProcessDMAQueue_Loop:
	move.w	(a1)+,d0
	beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
	; issue a set of VDP commands...
	move.w	d0,(a5)		; transfer length
	move.w	(a1)+,(a5)	; transfer length
	move.w	(a1)+,(a5)	; source address
	move.w	(a1)+,(a5)	; source address
	move.w	(a1)+,(a5)	; source address
	move.w	(a1)+,(a5)	; destination
	move.w	(a1)+,(a5)	; destination
	cmpa.w	#VDP_Command_Buffer_Slot,a1
	bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
; loc_14CE:
ProcessDMAQueue_Done:
	move.w	#0,(VDP_Command_Buffer).w
	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
	rts
; End of function ProcessDMAQueue



; ------------------------------------------------------------------------
; START OF NEMESIS DECOMPRESSOR
; ------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to VRAM
; sub_14DE: NemDecA:
NemDec:
	movem.l	d0-a1/a3-a5,-(sp)
	lea	(NemDec_WriteAndStay).l,a3 ; write all data to the same location
	lea	(VDP_data_port).l,a4	   ; specifically, to the VDP data port
	bra.s	NemDecMain

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to RAM
; input: a4 = starting address of destination
; sub_14F0: NemDecB:
NemDecToRAM:
	movem.l	d0-a1/a3-a5,-(sp)
	lea	(NemDec_WriteAndAdvance).l,a3 ; advance to the next location after each write


; sub_14FA:
NemDecMain:
	lea	(Decomp_Buffer).w,a1
	move.w	(a0)+,d2
	lsl.w	#1,d2
	bcc.s	+
	adda.w	#NemDec_WriteAndStay_XOR-NemDec_WriteAndStay,a3
+	lsl.w	#2,d2
	movea.w	d2,a5
	moveq	#8,d3
	moveq	#0,d2
	moveq	#0,d4
	bsr.w	NemDecPrepare
	move.b	(a0)+,d5
	asl.w	#8,d5
	move.b	(a0)+,d5
	move.w	#$10,d6
	bsr.s	NemDecRun
	movem.l	(sp)+,d0-a1/a3-a5
	rts
; End of function NemDec


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; part of the Nemesis decompressor
; sub_1528:
NemDecRun:
	move.w	d6,d7
	subq.w	#8,d7
	move.w	d5,d1
	lsr.w	d7,d1
	cmpi.b	#-4,d1
	bcc.s	loc_1574
	andi.w	#$FF,d1
	add.w	d1,d1
	move.b	(a1,d1.w),d0
	ext.w	d0
	sub.w	d0,d6
	cmpi.w	#9,d6
	bcc.s	+
	addq.w	#8,d6
	asl.w	#8,d5
	move.b	(a0)+,d5
+	move.b	1(a1,d1.w),d1
	move.w	d1,d0
	andi.w	#$F,d1
	andi.w	#$F0,d0

loc_155E:
	lsr.w	#4,d0

loc_1560:
	lsl.l	#4,d4
	or.b	d1,d4
	subq.w	#1,d3
	bne.s	NemDec_WriteIter_Part2
	jmp	(a3) ; dynamic jump! to NemDec_WriteAndStay, NemDec_WriteAndAdvance, NemDec_WriteAndStay_XOR, or NemDec_WriteAndAdvance_XOR
; ===========================================================================
; loc_156A:
NemDec_WriteIter:
	moveq	#0,d4
	moveq	#8,d3
; loc_156E:
NemDec_WriteIter_Part2:
	dbf	d0,loc_1560
	bra.s	NemDecRun
; ===========================================================================

loc_1574:
	subq.w	#6,d6
	cmpi.w	#9,d6
	bcc.s	+
	addq.w	#8,d6
	asl.w	#8,d5
	move.b	(a0)+,d5
+
	subq.w	#7,d6
	move.w	d5,d1
	lsr.w	d6,d1
	move.w	d1,d0
	andi.w	#$F,d1
	andi.w	#$70,d0
	cmpi.w	#9,d6
	bcc.s	loc_155E
	addq.w	#8,d6
	asl.w	#8,d5
	move.b	(a0)+,d5
	bra.s	loc_155E
; End of function NemDecRun

; ===========================================================================
; loc_15A0:
NemDec_WriteAndStay:
	move.l	d4,(a4)
	subq.w	#1,a5
	move.w	a5,d4
	bne.s	NemDec_WriteIter
	rts
; ---------------------------------------------------------------------------
; loc_15AA:
NemDec_WriteAndStay_XOR:
	eor.l	d4,d2
	move.l	d2,(a4)
	subq.w	#1,a5
	move.w	a5,d4
	bne.s	NemDec_WriteIter
	rts
; ===========================================================================
; loc_15B6:
NemDec_WriteAndAdvance:
	move.l	d4,(a4)+
	subq.w	#1,a5
	move.w	a5,d4
	bne.s	NemDec_WriteIter
	rts

    if *-NemDec_WriteAndAdvance > NemDec_WriteAndStay_XOR-NemDec_WriteAndStay
	fatal "the code in NemDec_WriteAndAdvance must not be larger than the code in NemDec_WriteAndStay"
    endif
    org NemDec_WriteAndAdvance+NemDec_WriteAndStay_XOR-NemDec_WriteAndStay

; ---------------------------------------------------------------------------
; loc_15C0:
NemDec_WriteAndAdvance_XOR:
	eor.l	d4,d2
	move.l	d2,(a4)+
	subq.w	#1,a5
	move.w	a5,d4
	bne.s	NemDec_WriteIter
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Part of the Nemesis decompressor

; sub_15CC:
NemDecPrepare:
	move.b	(a0)+,d0

-	cmpi.b	#$FF,d0
	bne.s	+
	rts
; ---------------------------------------------------------------------------
+	move.w	d0,d7

loc_15D8:
	move.b	(a0)+,d0
	cmpi.b	#$80,d0
	bcc.s	-

	move.b	d0,d1
	andi.w	#$F,d7
	andi.w	#$70,d1
	or.w	d1,d7
	andi.w	#$F,d0
	move.b	d0,d1
	lsl.w	#8,d1
	or.w	d1,d7
	moveq	#8,d1
	sub.w	d0,d1
	bne.s	loc_1606
	move.b	(a0)+,d0
	add.w	d0,d0
	move.w	d7,(a1,d0.w)
	bra.s	loc_15D8
; ---------------------------------------------------------------------------
loc_1606:
	move.b	(a0)+,d0
	lsl.w	d1,d0
	add.w	d0,d0
	moveq	#1,d5
	lsl.w	d1,d5
	subq.w	#1,d5

-	move.w	d7,(a1,d0.w)
	addq.w	#2,d0
	dbf	d5,-
	bra.s	loc_15D8
; End of function NemDecPrepare

; ---------------------------------------------------------------------------
; END OF NEMESIS DECOMPRESSOR
; ---------------------------------------------------------------------------



; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (aka to queue pattern load requests)
; ---------------------------------------------------------------------------

; ARGUMENTS
; d0 = index of PLC list (see ArtLoadCues)

; NOTICE: This subroutine does not check for buffer overruns. The programmer
;	  (or hacker) is responsible for making sure that no more than
;	  21 load requests are copied into the buffer.
;    _________DO NOT PUT MORE THAN 21 LOAD REQUESTS IN A LIST!__________

; sub_161E: PLCLoad:
LoadPLC:
	movem.l	a1-a2,-(sp)
	lea	(ArtLoadCues).l,a1
	add.w	d0,d0
	move.w	(a1,d0.w),d0
	lea	(a1,d0.w),a1
	lea	(Plc_Buffer).w,a2

-	tst.l	(a2)
	beq.s	+ ; if it's zero, exit this loop
	addq.w	#6,a2
	bra.s	-
+
	move.w	(a1)+,d0
	bmi.s	+ ; if it's negative, skip the next loop

-	move.l	(a1)+,(a2)+
	move.w	(a1)+,(a2)+
	dbf	d0,-
+
	movem.l	(sp)+,a1-a2 ; a1=object
	rts
; End of function LoadPLC


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Queue pattern load requests, but clear the PLQ first

; ARGUMENTS
; d0 = index of PLC list (see ArtLoadCues)

; NOTICE: This subroutine does not check for buffer overruns. The programmer
;	  (or hacker) is responsible for making sure that no more than
;	  21 load requests are copied into the buffer.
;	  _________DO NOT PUT MORE THAN 21 LOAD REQUESTS IN A LIST!__________
; sub_1650:
LoadPLC2:
	movem.l	a1-a2,-(sp)
	lea	(ArtLoadCues).l,a1
	add.w	d0,d0
	move.w	(a1,d0.w),d0
	lea	(a1,d0.w),a1
	bsr.s	ClearPLC
	lea	(Plc_Buffer).w,a2
	move.w	(a1)+,d0
	bmi.s	+ ; if it's negative, skip the next loop

-	move.l	(a1)+,(a2)+
	move.w	(a1)+,(a2)+
	dbf	d0,-
+
	movem.l	(sp)+,a1-a2
	rts
; End of function LoadPLC2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Clear the pattern load queue ($FFF680 - $FFF700)

ClearPLC:
	lea	(Plc_Buffer).w,a2
	moveq	#$1F,d0

-	clr.l	(a2)+
	dbf	d0,-

	rts
; End of function ClearPLC

; ---------------------------------------------------------------------------
; Subroutine to use graphics listed in a pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_168A:
RunPLC_RAM:
	tst.l	(Plc_Buffer).w
	beq.s	return_16DE
	tst.w	($FFFFF6F8).w
	bne.s	return_16DE
	movea.l	(Plc_Buffer).w,a0
	lea	NemDec_WriteAndStay(pc),a3
	nop
	lea	(Decomp_Buffer).w,a1
	move.w	(a0)+,d2
	bpl.s	+
	adda.w	#NemDec_WriteAndStay_XOR-NemDec_WriteAndStay,a3
+
	andi.w	#$7FFF,d2
	move.w	d2,($FFFFF6F8).w
	bsr.w	NemDecPrepare
	move.b	(a0)+,d5
	asl.w	#8,d5
	move.b	(a0)+,d5
	moveq	#$10,d6
	moveq	#0,d0
	move.l	a0,(Plc_Buffer).w
	move.l	a3,($FFFFF6E0).w
	move.l	d0,($FFFFF6E4).w
	move.l	d0,($FFFFF6E8).w
	move.l	d0,($FFFFF6EC).w
	move.l	d5,($FFFFF6F0).w
	move.l	d6,($FFFFF6F4).w
return_16DE
	rts
; End of function RunPLC_RAM


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue

; sub_16E0:
ProcessDPLC:
	tst.w	($FFFFF6F8).w
	beq.w	return_1778
	move.w	#6,($FFFFF6FA).w
	moveq	#0,d0
	move.w	($FFFFF684).w,d0
	addi.w	#$C0,($FFFFF684).w
	bra.s	ProcessDPLC_Main

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue

; loc_16FC:
ProcessDPLC2:
	tst.w	($FFFFF6F8).w
	beq.s	return_1778
	move.w	#3,($FFFFF6FA).w
	moveq	#0,d0
	move.w	($FFFFF684).w,d0
	addi.w	#$60,($FFFFF684).w

; loc_1714:
ProcessDPLC_Main:
	lea	(VDP_control_port).l,a4
	lsl.l	#2,d0		; set up target VRAM address
	lsr.w	#2,d0
	ori.w	#$4000,d0
	swap	d0
	move.l	d0,(a4)
	subq.w	#4,a4
	movea.l	(Plc_Buffer).w,a0
	movea.l	($FFFFF6E0).w,a3
	move.l	($FFFFF6E4).w,d0
	move.l	($FFFFF6E8).w,d1
	move.l	($FFFFF6EC).w,d2
	move.l	($FFFFF6F0).w,d5
	move.l	($FFFFF6F4).w,d6
	lea	(Decomp_Buffer).w,a1

-	movea.w	#8,a5
	bsr.w	NemDec_WriteIter
	subq.w	#1,($FFFFF6F8).w
	beq.s	ProcessDPLC_Pop
	subq.w	#1,($FFFFF6FA).w
	bne.s	-

	move.l	a0,(Plc_Buffer).w
	move.l	a3,($FFFFF6E0).w
	move.l	d0,($FFFFF6E4).w
	move.l	d1,($FFFFF6E8).w
	move.l	d2,($FFFFF6EC).w
	move.l	d5,($FFFFF6F0).w
	move.l	d6,($FFFFF6F4).w

return_1778:
	rts

; ===========================================================================
; pop one request off the buffer so that the next one can be filled

; loc_177A:
ProcessDPLC_Pop:
	lea	(Plc_Buffer).w,a0
	moveq	#$15,d0

-	move.l	6(a0),(a0)+
	dbf	d0,-
	rts

; End of function ProcessDPLC


; ---------------------------------------------------------------------------
; Subroutine to execute a pattern load cue directly from the ROM
; rather than loading them into the queue first
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

RunPLC_ROM:
	lea	(ArtLoadCues).l,a1
	add.w	d0,d0
	move.w	(a1,d0.w),d0
	lea	(a1,d0.w),a1
	move.w	(a1)+,d1

-	movea.l	(a1)+,a0
	moveq	#0,d0
	move.w	(a1)+,d0
	lsl.l	#2,d0
	lsr.w	#2,d0
	ori.w	#$4000,d0
	swap	d0
	move.l	d0,(VDP_control_port).l
	bsr.w	NemDec
	dbf	d1,-

	rts
; End of function RunPLC_ROM

; ---------------------------------------------------------------------------
; Enigma Decompression Algorithm
; d0 = location in RAM to decompress to
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; EniDec_17BC:
EniDec:
	movem.l	d0-d7/a1-a5,-(sp)
	movea.w	d0,a3
	move.b	(a0)+,d0
	ext.w	d0
	movea.w	d0,a5
	move.b	(a0)+,d4
	lsl.b	#3,d4
	movea.w	(a0)+,a2
	adda.w	a3,a2
	movea.w	(a0)+,a4
	adda.w	a3,a4
	move.b	(a0)+,d5
	asl.w	#8,d5
	move.b	(a0)+,d5
	moveq	#$10,d6

loc_17DC:
	moveq	#7,d0
	move.w	d6,d7
	sub.w	d0,d7
	move.w	d5,d1
	lsr.w	d7,d1
	andi.w	#$7F,d1
	move.w	d1,d2
	cmpi.w	#$40,d1
	bcc.s	loc_17F6
	moveq	#6,d0
	lsr.w	#1,d2

loc_17F6:
	bsr.w	loc_192A
	andi.w	#$F,d2
	lsr.w	#4,d1
	add.w	d1,d1
	jmp	Enigma_JmpTable(pc,d1.w)
; End of function EniDec

; ===========================================================================

loc_1806:
	move.w	a2,(a1)+
	addq.w	#1,a2
	dbf	d2,loc_1806
	bra.s	loc_17DC
; ===========================================================================

loc_1810:
	move.w	a4,(a1)+
	dbf	d2,loc_1810
	bra.s	loc_17DC
; ===========================================================================

loc_1818:
	bsr.w	sub_187A

loc_181C:
	move.w	d1,(a1)+
	dbf	d2,loc_181C
	bra.s	loc_17DC
; ===========================================================================

loc_1824:
	bsr.w	sub_187A

loc_1828:
	move.w	d1,(a1)+
	addq.w	#1,d1
	dbf	d2,loc_1828
	bra.s	loc_17DC
; ===========================================================================

loc_1832:
	bsr.w	sub_187A

loc_1836:
	move.w	d1,(a1)+
	subq.w	#1,d1
	dbf	d2,loc_1836
	bra.s	loc_17DC
; ===========================================================================

loc_1840:
	cmpi.w	#$F,d2
	beq.s	loc_1862

loc_1846:
	bsr.w	sub_187A
	move.w	d1,(a1)+
	dbf	d2,loc_1846
	bra.s	loc_17DC
; ===========================================================================

Enigma_JmpTable: ;;
	bra.s	loc_1806 ; 0
	bra.s	loc_1806 ; 1
	bra.s	loc_1810 ; 2
	bra.s	loc_1810 ; 3
	bra.s	loc_1818 ; 4
	bra.s	loc_1824 ; 5
	bra.s	loc_1832 ; 6
	bra.s	loc_1840 ; 7
; ===========================================================================

loc_1862:
	subq.w	#1,a0
	cmpi.w	#$10,d6
	bne.s	loc_186C
	subq.w	#1,a0

loc_186C:
	move.w	a0,d0
	lsr.w	#1,d0
	bcc.s	loc_1874
	addq.w	#1,a0

loc_1874:
	movem.l	(sp)+,d0-d7/a1-a5
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_187A:
	move.w	a3,d3
	move.b	d4,d1
	add.b	d1,d1
	bcc.s	loc_188C
	subq.w	#1,d6
	btst	d6,d5
	beq.s	loc_188C
	ori.w	#$8000,d3

loc_188C:
	add.b	d1,d1
	bcc.s	loc_189A
	subq.w	#1,d6
	btst	d6,d5
	beq.s	loc_189A
	addi.w	#$4000,d3

loc_189A:
	add.b	d1,d1
	bcc.s	loc_18A8
	subq.w	#1,d6
	btst	d6,d5
	beq.s	loc_18A8
	addi.w	#$2000,d3

loc_18A8:
	add.b	d1,d1
	bcc.s	loc_18B6
	subq.w	#1,d6
	btst	d6,d5
	beq.s	loc_18B6
	ori.w	#$1000,d3

loc_18B6:
	add.b	d1,d1
	bcc.s	loc_18C4
	subq.w	#1,d6
	btst	d6,d5
	beq.s	loc_18C4
	ori.w	#$800,d3

loc_18C4:
	move.w	d5,d1
	move.w	d6,d7
	sub.w	a5,d7
	bcc.s	loc_18F4
	move.w	d7,d6
	addi.w	#$10,d6
	neg.w	d7
	lsl.w	d7,d1
	move.b	(a0),d5
	rol.b	d7,d5
	add.w	d7,d7
	and.w	word_190A-2(pc,d7.w),d5
	add.w	d5,d1

loc_18E2:
	move.w	a5,d0
	add.w	d0,d0
	and.w	word_190A-2(pc,d0.w),d1
	add.w	d3,d1
	move.b	(a0)+,d5
	lsl.w	#8,d5
	move.b	(a0)+,d5
	rts
; ===========================================================================

loc_18F4:
	beq.s	loc_1906
	lsr.w	d7,d1
	move.w	a5,d0
	add.w	d0,d0
	and.w	word_190A-2(pc,d0.w),d1
	add.w	d3,d1
	move.w	a5,d0
	bra.s	loc_192A
; ===========================================================================

loc_1906:
	moveq	#$10,d6
	bra.s	loc_18E2
; End of function sub_187A

; ===========================================================================
word_190A
	dc.w	 1
	dc.w	 3	; 1
	dc.w	 7	; 2
	dc.w	$F	; 3
	dc.w   $1F	; 4
	dc.w   $3F	; 5
	dc.w   $7F	; 6
	dc.w   $FF	; 7
	dc.w  $1FF	; 8
	dc.w  $3FF	; 9
	dc.w  $7FF	; 10
	dc.w  $FFF	; 11
	dc.w $1FFF	; 12
	dc.w $3FFF	; 13
	dc.w $7FFF	; 14
	dc.w $FFFF	; 15
; ===========================================================================

loc_192A:
	sub.w	d0,d6
	cmpi.w	#9,d6
	bcc.s	return_1938
	addq.w	#8,d6
	asl.w	#8,d5
	move.b	(a0)+,d5

return_1938:
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ------------------------------------------------------------------------
; KOSINSKI DECOMPRESSION PROCEDURE
; (sometimes called KOZINSKI decompression)

; This is the only procedure in the game that stores variables on the stack.

; ARGUMENTS:
; a0 = source address
; a1 = destination address
; ------------------------------------------------------------------------
; KozDec_193A:
KosDec:
	subq.l	#2,sp
	move.b	(a0)+,1(sp)
	move.b	(a0)+,(sp)
	move.w	(sp),d5
	moveq	#$F,d4

loc_1946:
	lsr.w	#1,d5
	move	sr,d6
	dbf	d4,+
	move.b	(a0)+,1(sp)
	move.b	(a0)+,(sp)
	move.w	(sp),d5
	moveq	#$F,d4
+
	move	d6,ccr
	bcc.s	loc_1960
	move.b	(a0)+,(a1)+
	bra.s	loc_1946
; ---------------------------------------------------------------------------

loc_1960:
	moveq	#0,d3
	lsr.w	#1,d5
	move	sr,d6
	dbf	d4,+
	move.b	(a0)+,1(sp)
	move.b	(a0)+,(sp)
	move.w	(sp),d5
	moveq	#$F,d4
+
	move	d6,ccr
	bcs.s	loc_19A4
	lsr.w	#1,d5
	dbf	d4,+
	move.b	(a0)+,1(sp)
	move.b	(a0)+,(sp)
	move.w	(sp),d5
	moveq	#$F,d4
+
	roxl.w	#1,d3
	lsr.w	#1,d5
	dbf	d4,+
	move.b	(a0)+,1(sp)
	move.b	(a0)+,(sp)
	move.w	(sp),d5
	moveq	#$F,d4
+
	roxl.w	#1,d3
	addq.w	#1,d3
	moveq	#-1,d2
	move.b	(a0)+,d2
	bra.s	loc_19BA
; ---------------------------------------------------------------------------

loc_19A4:
	move.b	(a0)+,d0
	move.b	(a0)+,d1
	moveq	#-1,d2
	move.b	d1,d2
	lsl.w	#5,d2
	move.b	d0,d2
	andi.w	#7,d1
	beq.s	loc_19C6
	move.b	d1,d3
	addq.w	#1,d3

loc_19BA:
	move.b	(a1,d2.w),d0
	move.b	d0,(a1)+
	dbf	d3,loc_19BA
	bra.s	loc_1946
; ---------------------------------------------------------------------------

loc_19C6:
	move.b	(a0)+,d1
	beq.s	loc_19D6
	cmpi.b	#1,d1
	beq.w	loc_1946
	move.b	d1,d3
	bra.s	loc_19BA
; ---------------------------------------------------------------------------

loc_19D6:
	addq.l	#2,sp
	rts
; End of function KosDec

; ===========================================================================
	nop




; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_19DC:
PalCycle_Load:
	bsr.w	PalCycle_SuperSonic
	moveq	#0,d2
	moveq	#0,d0
	move.b	(Current_Zone).w,d0	; use level number as index into palette cycles
	add.w	d0,d0			; (multiply by element size = 2 bytes)
	move.w	PalCycle(pc,d0.w),d0	; load animated palettes offset index into d0
	jmp	PalCycle(pc,d0.w)	; jump to PalCycle + offset index
; ---------------------------------------------------------------------------
	rts
; End of function PalCycle_Load

; ===========================================================================
; off_19F4:
PalCycle:
	dc.w PalCycle_EHZ - PalCycle	; 0
	dc.w PalCycle_Null - PalCycle	; 1
	dc.w PalCycle_Level2 - PalCycle	; 2
	dc.w PalCycle_Null - PalCycle	; 3
	dc.w PalCycle_MTZ - PalCycle	; 4
	dc.w PalCycle_MTZ - PalCycle	; 5
	dc.w PalCycle_WFZ - PalCycle	; 6
	dc.w PalCycle_HTZ - PalCycle	; 7
	dc.w PalCycle_HPZ - PalCycle	; 8
	dc.w PalCycle_Null - PalCycle	; 9
	dc.w PalCycle_OOZ - PalCycle	; 10
	dc.w PalCycle_MCZ - PalCycle	; 11
	dc.w PalCycle_CNZ - PalCycle	; 12
	dc.w PalCycle_CPZ - PalCycle	; 13
	dc.w PalCycle_CPZ - PalCycle	; 14
	dc.w PalCycle_ARZ - PalCycle	; 15
	dc.w PalCycle_WFZ - PalCycle	; 16

; ===========================================================================
; return_1A16:
PalCycle_Null:
	rts
; ===========================================================================

PalCycle_EHZ:
	lea	(word_1E7A).l,a0
	subq.w	#1,($FFFFF634).w
	bpl.s	return_1A44
	move.w	#7,($FFFFF634).w
	move.w	($FFFFF632).w,d0
	addq.w	#1,($FFFFF632).w
	andi.w	#3,d0
	lsl.w	#3,d0
	move.l	(a0,d0.w),(Normal_palette_line2+6).w
	move.l	4(a0,d0.w),(Normal_palette_line2+$1C).w

return_1A44:
	rts
; ===========================================================================

PalCycle_Level2:
	subq.w	#1,($FFFFF634).w
	bpl.s	return_1A74
	move.w	#2,($FFFFF634).w
	lea	(word_1F1A).l,a0
	move.w	($FFFFF632).w,d0
	subq.w	#2,($FFFFF632).w
	bcc.s	+
	move.w	#6,($FFFFF632).w
+	lea	(Normal_palette_line4+6).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)

return_1A74:
	rts
; ===========================================================================

PalCycle_MTZ:
	subq.w	#1,($FFFFF634).w
	bpl.s	++
	move.w	#$11,($FFFFF634).w
	lea	(byte_1F2A).l,a0
	move.w	($FFFFF632).w,d0
	addq.w	#2,($FFFFF632).w
	cmpi.w	#$C,($FFFFF632).w
	bcs.s	+
	move.w	#0,($FFFFF632).w
+	lea	(Normal_palette_line3+$A).w,a1
	move.w	(a0,d0.w),(a1)
+
	subq.w	#1,($FFFFF666).w
	bpl.s	++
	move.w	#2,($FFFFF666).w
	lea	(word_1F36).l,a0
	move.w	(Water_change_speed).w,d0
	addq.w	#2,(Water_change_speed).w
	cmpi.w	#6,(Water_change_speed).w
	bcs.s	+
	move.w	#0,(Water_change_speed).w
+	lea	(Normal_palette_line3+2).w,a1
	move.l	(a0,d0.w),(a1)+
	move.w	4(a0,d0.w),(a1)
+
	subq.w	#1,($FFFFF668).w
	bpl.s	++	; rts
	move.w	#9,($FFFFF668).w
	lea	(word_1F42).l,a0
	move.w	($FFFFF654).w,d0
	addq.w	#2,($FFFFF654).w
	cmpi.w	#$14,($FFFFF654).w
	bcs.s	+
	move.w	#0,($FFFFF654).w
+	lea	(Normal_palette_line3+$1E).w,a1
	move.w	(a0,d0.w),(a1)
+
	rts
; ===========================================================================

PalCycle_HTZ:
	lea	(word_1E9A).l,a0
	subq.w	#1,($FFFFF634).w
	bpl.s	+
	move.w	#0,($FFFFF634).w
	move.w	($FFFFF632).w,d0
	addq.w	#1,($FFFFF632).w
	andi.w	#$F,d0
	move.b	PalCycle_HTZ_LavaDelayData(pc,d0.w),($FFFFF635).w
	lsl.w	#3,d0
	move.l	(a0,d0.w),(Normal_palette_line2+6).w
	move.l	4(a0,d0.w),(Normal_palette_line2+$1C).w
+	rts
; ===========================================================================
; byte_1B40:
PalCycle_HTZ_LavaDelayData: ; number of frames between changes of the lava palette
	dc.b	$B, $B, $B, $A
	dc.b	 8, $A, $B, $B
	dc.b	$B, $B, $D, $F
	dc.b	$D, $B, $B, $B
; ===========================================================================

PalCycle_HPZ:
	subq.w	#1,($FFFFF634).w
	bpl.s	++	; rts
	move.w	#4,($FFFFF634).w
	lea	(word_1F56).l,a0
	move.w	($FFFFF632).w,d0
	subq.w	#2,($FFFFF632).w
	bcc.s	+
	move.w	#6,($FFFFF632).w
+	lea	(Normal_palette_line4+$12).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
	lea	(word_1F66).l,a0
	lea	(Underwater_palette_line4+$12).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
+	rts
; ===========================================================================

PalCycle_OOZ:
	subq.w	#1,($FFFFF634).w
	bpl.s	+	; rts
	move.w	#7,($FFFFF634).w
	lea	(word_1F76).l,a0
	move.w	($FFFFF632).w,d0
	addq.w	#2,($FFFFF632).w
	andi.w	#6,($FFFFF632).w
	lea	(Normal_palette_line3+$14).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
+	rts
; ===========================================================================

PalCycle_MCZ:
	tst.b	(Current_Boss_ID).w
	bne.s	+	; rts
	subq.w	#1,($FFFFF634).w
	bpl.s	+	; rts
	move.w	#1,($FFFFF634).w
	lea	(word_1F86).l,a0
	move.w	($FFFFF632).w,d0
	addq.w	#2,($FFFFF632).w
	andi.w	#6,($FFFFF632).w
	move.w	(a0,d0.w),(Normal_palette_line2+$16).w
+	rts
; ===========================================================================

PalCycle_CNZ:
	subq.w	#1,($FFFFF634).w
	bpl.w	+++
	move.w	#7,($FFFFF634).w
	lea	(word_1F8E).l,a0
	move.w	($FFFFF632).w,d0
	addq.w	#2,($FFFFF632).w
	cmpi.w	#6,($FFFFF632).w
	bcs.s	+
	move.w	#0,($FFFFF632).w
+	lea	(a0,d0.w),a0
	lea	(Normal_palette).w,a1
	_move.w	0(a0),$4A(a1)
	move.w	6(a0),$4C(a1)
	move.w	$C(a0),$4E(a1)
	move.w	$12(a0),$56(a1)
	move.w	$18(a0),$58(a1)
	move.w	$1E(a0),$5A(a1)
	lea	(word_1FB2).l,a0
	lea	(a0,d0.w),a0
	_move.w	0(a0),$64(a1)
	move.w	6(a0),$66(a1)
	move.w	$C(a0),$68(a1)
	lea	(word_1FC4).l,a0
	move.w	(New_Water_Level).w,d0
	addq.w	#2,(New_Water_Level).w
	cmpi.w	#$24,(New_Water_Level).w
	bcs.s	+
	move.w	#0,(New_Water_Level).w
+	lea	(Normal_palette_line4+$12).w,a1
	move.w	4(a0,d0.w),(a1)+
	move.w	2(a0,d0.w),(a1)+
	move.w	(a0,d0.w),(a1)+
+	tst.b	(Current_Boss_ID).w
	beq.w	return_1D14
	subq.w	#1,($FFFFF666).w
	bpl.w	return_1D14
	move.w	#3,($FFFFF666).w
	move.w	(Water_change_speed).w,d0
	addq.w	#2,(Water_change_speed).w
	cmpi.w	#6,(Water_change_speed).w
	bcs.s	+
	move.w	#0,(Water_change_speed).w
+	lea	(word_1FEC).l,a0
	lea	(a0,d0.w),a0
	lea	(Normal_palette).w,a1
	_move.w	0(a0),$24(a1)
	move.w	6(a0),$26(a1)
	move.w	$C(a0),$28(a1)
	lea	(word_1FFE).l,a0
	move.w	($FFFFF654).w,d0
	addq.w	#2,($FFFFF654).w
	cmpi.w	#$14,($FFFFF654).w
	bcs.s	+
	move.w	#0,($FFFFF654).w
+	move.w	(a0,d0.w),$3C(a1)
	lea	(word_2012).l,a0
	move.w	($FFFFF656).w,d0
	addq.w	#2,($FFFFF656).w
	andi.w	#$E,($FFFFF656).w
	move.w	(a0,d0.w),$3E(a1)

return_1D14:
	rts
; ===========================================================================

PalCycle_CPZ:
	subq.w	#1,($FFFFF634).w
	bpl.s	return_1D86
	move.w	#7,($FFFFF634).w
	lea	(word_2022).l,a0
	move.w	($FFFFF632).w,d0
	addq.w	#6,($FFFFF632).w
	cmpi.w	#$36,($FFFFF632).w
	bcs.s	+
	move.w	#0,($FFFFF632).w
+	lea	(Normal_palette_line4+$18).w,a1
	move.l	(a0,d0.w),(a1)+
	move.w	4(a0,d0.w),(a1)
	lea	(word_2058).l,a0
	move.w	(Water_change_speed).w,d0
	addq.w	#2,(Water_change_speed).w
	cmpi.w	#$2A,(Water_change_speed).w
	bcs.s	+
	move.w	#0,(Water_change_speed).w
+	move.w	(a0,d0.w),(Normal_palette_line4+$1E).w
	lea	(word_2082).l,a0
	move.w	($FFFFF654).w,d0
	addq.w	#2,($FFFFF654).w
	andi.w	#$1E,($FFFFF654).w
	move.w	(a0,d0.w),(Normal_palette_line3+$1E).w

return_1D86:
	rts
; ===========================================================================

PalCycle_ARZ:
	lea	(word_1E7A).l,a0
	subq.w	#1,($FFFFF634).w
	bpl.s	+	; rts
	move.w	#5,($FFFFF634).w
	move.w	($FFFFF632).w,d0
	addq.w	#1,($FFFFF632).w
	andi.w	#3,d0
	lsl.w	#3,d0
	lea	(Normal_palette_line3+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
+	rts
; ===========================================================================

PalCycle_WFZ:
	subq.w	#1,($FFFFF634).w
	bpl.s	+++
	move.w	#1,($FFFFF634).w
	lea	(word_20A2).l,a0
	tst.b	($FFFFF72E).w
	beq.s	+
	move.w	#5,($FFFFF634).w
	lea	(word_20C2).l,a0
+	move.w	($FFFFF632).w,d0
	addq.w	#8,($FFFFF632).w
	cmpi.w	#$20,($FFFFF632).w
	bcs.s	+
	move.w	#0,($FFFFF632).w
+	lea	(Normal_palette_line3+$E).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
+	subq.w	#1,($FFFFF666).w
	bpl.s	++	; subq.w
	move.w	#3,($FFFFF666).w
	lea	(word_20E2).l,a0
	move.w	(Water_change_speed).w,d0
	addq.w	#2,(Water_change_speed).w
	cmpi.w	#$44,(Water_change_speed).w
	bcs.s	+	; move.w
	move.w	#0,(Water_change_speed).w
+	move.w	(a0,d0.w),(Normal_palette_line3+$1C).w
+
	subq.w	#1,($FFFFF668).w
	bpl.s	++	; rts
	move.w	#5,($FFFFF668).w
	lea	(word_2126).l,a0
	move.w	($FFFFF654).w,d0
	addq.w	#2,($FFFFF654).w
	cmpi.w	#$18,($FFFFF654).w
	bcs.s	+
	move.w	#0,($FFFFF654).w
+	move.w	(a0,d0.w),(Normal_palette_line3+$1E).w
+
	rts
; ===========================================================================

; ----------------------------------------------------------------------------
; word_1E5A:
	BINCLUDE "art/palettes/Title Water.bin"; Title Screen Water palette (unused)
word_1E7A: BINCLUDE "art/palettes/EHZ ARZ Water.bin"; Emerald Hill/Aquatic Ruin Rotating Water palette
word_1E9A: BINCLUDE "art/palettes/Hill Top Lava.bin"; Hill Top Lava palette
word_1F1A: BINCLUDE "art/palettes/Wood Conveyor.bin"; Wood Conveyor Belts palette
byte_1F2A: BINCLUDE "art/palettes/MTZ Cycle 1.bin"; Metropolis Cycle #1 palette
word_1F36: BINCLUDE "art/palettes/MTZ Cycle 2.bin"; Metropolis Cycle #2 palette
word_1F42: BINCLUDE "art/palettes/MTZ Cycle 3.bin"; Metropolis Cycle #3 palette
word_1F56: BINCLUDE "art/palettes/HPZ Water Cycle.bin"; Hidden Palace Water Cycle
word_1F66: BINCLUDE "art/palettes/HPZ Underwater Cycle.bin"; Hidden Palace Underwater Cycle
word_1F76: BINCLUDE "art/palettes/OOZ Oil.bin"; Oil Ocean Oil palette
word_1F86: BINCLUDE "art/palettes/MCZ Lantern.bin"; Mystic Cave Lanterns
word_1F8E: BINCLUDE "art/palettes/CNZ Cycle 1.bin"; Casino Night Cycles 1 & 2
word_1FB2: BINCLUDE "art/palettes/CNZ Cycle 3.bin"; Casino Night Cycle 3
word_1FC4: BINCLUDE "art/palettes/CNZ Cycle 4.bin"; Casino Night Cycle 4
word_1FEC: BINCLUDE "art/palettes/unk_1FEC.bin"; Unknown palette
word_1FFE: BINCLUDE "art/palettes/unk_1FFE.bin"; Unknown palette
word_2012: BINCLUDE "art/palettes/unk_2012.bin"; Unknown palette
word_2022: BINCLUDE "art/palettes/CPZ Cycle 1.bin"; Chemical Plant Cycle 1
word_2058: BINCLUDE "art/palettes/CPZ Cycle 2.bin"; Chemical Plant Cycle 2
word_2082: BINCLUDE "art/palettes/CPZ Cycle 3.bin"; Chemical Plant Cycle 3
word_20A2: BINCLUDE "art/palettes/WFZ Fire Cycle.bin"; Wing Fortress Fire Cycle palette
word_20C2: BINCLUDE "art/palettes/unk_20C2.bin"; Unknown palette
word_20E2: BINCLUDE "art/palettes/CPZ Cycle 4.bin"; Chemical Plant Cycle 4
word_2126: BINCLUDE "art/palettes/unk_2126.bin"; Unknown palette
; ----------------------------------------------------------------------------


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_213E:
PalCycle_SuperSonic:
	move.b	(Super_Sonic_palette).w,d0
	beq.s	return_2186
	bmi.w	loc_21E6
	subq.b	#1,d0
	bne.s	loc_2188
	subq.b	#1,(Palette_frame_count).w
	bpl.s	return_2186
	move.b	#3,(Palette_frame_count).w
	lea	(Pal_2246).l,a0
	move.w	($FFFFF65C).w,d0
	addq.w	#8,($FFFFF65C).w
	cmpi.w	#$30,($FFFFF65C).w
	bcs.s	+
	move.b	#-1,(Super_Sonic_palette).w
	move.b	#0,(MainCharacter+obj_control).w
+	lea	(Normal_palette+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)

return_2186:
	rts
; ===========================================================================

loc_2188:
	subq.b	#1,(Palette_frame_count).w
	bpl.s	return_2186
	move.b	#3,(Palette_frame_count).w
	lea	(Pal_2246).l,a0
	move.w	($FFFFF65C).w,d0
	subq.w	#8,($FFFFF65C).w
	bcc.s	loc_21B0
	move.b	#0,($FFFFF65C).w
	move.b	#0,(Super_Sonic_palette).w
loc_21B0:
	lea	(Normal_palette+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
	lea	(Pal_22C6).l,a0
	cmpi.b	#$D,(Current_Zone).w
	beq.s	+
	cmpi.b	#$F,(Current_Zone).w
	bne.s	return_2186
	lea	(Pal_2346).l,a0
+	lea	(Underwater_palette+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
	rts
; ===========================================================================

loc_21E6:
	subq.b	#1,(Palette_frame_count).w
	bpl.s	return_2186
	move.b	#7,(Palette_frame_count).w
	lea	(Pal_2246).l,a0
	move.w	($FFFFF65C).w,d0
	addq.w	#8,($FFFFF65C).w
	cmpi.w	#$78,($FFFFF65C).w
	bcs.s	+
	move.w	#$30,($FFFFF65C).w
+	lea	(Normal_palette+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
	lea	(Pal_22C6).l,a0
	cmpi.b	#$D,(Current_Zone).w
	beq.s	+
	cmpi.b	#$F,(Current_Zone).w
	bne.w	return_2186
	lea	(Pal_2346).l,a0
+	lea	(Underwater_palette+4).w,a1
	move.l	(a0,d0.w),(a1)+
	move.l	4(a0,d0.w),(a1)
	rts
; End of function PalCycle_SuperSonic

; ===========================================================================
;----------------------------------------------------------------------------
;Palette for transformation to Super Sonic
;----------------------------------------------------------------------------
Pal_2246:	BINCLUDE	"art/palettes/Super Sonic transformation.bin"
;----------------------------------------------------------------------------
;Palette for transformation to Super Sonic while underwater in CPZ
;----------------------------------------------------------------------------
Pal_22C6:	BINCLUDE	"art/palettes/CPZWater SS transformation.bin"
;----------------------------------------------------------------------------
;Palette for transformation to Super Sonic while underwater in ARZ
;----------------------------------------------------------------------------
Pal_2346:	BINCLUDE	"art/palettes/ARZWater SS transformation.bin"

; ---------------------------------------------------------------------------
; Subroutine to fade out and fade in
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_23C6:
Pal_FadeTo:
	move.w	#$3F,($FFFFF626).w
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	moveq	#0,d1
	move.b	($FFFFF627).w,d0
; loc_23DE:
Pal_ToBlack:
	move.w	d1,(a0)+
	dbf	d0,Pal_ToBlack	; fill palette with $000 (black)
	move.w	#$15,d4

-	move.b	#$12,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.s	Pal_FadeIn
	bsr.w	RunPLC_RAM
	dbf	d4,-
	rts
; End of function Pal_FadeTo

; ---------------------------------------------------------------------------
; Palette fade-in subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_23FE:
Pal_FadeIn:
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	lea	(Second_palette).w,a1
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	adda.w	d0,a1
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_AddColor
	dbf	d0,-
	tst.b	(Water_flag).w
	beq.s	return_243C
	moveq	#0,d0
	lea	(Underwater_palette).w,a0
	lea	(Underwater_palette_2).w,a1
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	adda.w	d0,a1
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_AddColor
	dbf	d0,-

return_243C:
	rts
; End of function Pal_FadeIn


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_243E:
Pal_AddColor:
	move.w	(a1)+,d2
	move.w	(a0),d3
	cmp.w	d2,d3
	beq.s	loc_2466
	move.w	d3,d1
	addi.w	#$200,d1	; increase blue value
	cmp.w	d2,d1		; has blue reached threshold level?
	bhi.s	Pal_AddGreen	; if yes, branch
	move.w	d1,(a0)+	; update palette
	rts
; ===========================================================================
; loc_2454:
Pal_AddGreen:
	move.w	d3,d1
	addi.w	#$20,d1		; increase green value
	cmp.w	d2,d1
	bhi.s	Pal_AddRed
	move.w	d1,(a0)+	; update palette
	rts
; ===========================================================================
; loc_2462:
Pal_AddRed:
	addq.w	#2,(a0)+	; increase red value
	rts
; ===========================================================================

loc_2466:
	addq.w	#2,a0
	rts
; End of function Pal_AddColor


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_246A:
Pal_FadeFrom:
	move.w	#$3F,($FFFFF626).w
	move.w	#$15,d4

-	move.b	#$12,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.s	Pal_FadeOut
	bsr.w	RunPLC_RAM
	dbf	d4,-
	rts
; End of function Pal_FadeFrom

; ---------------------------------------------------------------------------
; Palette fade-out subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_248A:
Pal_FadeOut:
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_DecColor
	dbf	d0,-
	moveq	#0,d0
	lea	(Underwater_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_DecColor
	dbf	d0,-
	rts
; End of function Pal_FadeOut


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_24B8:
Pal_DecColor:
	move.w	(a0),d2
	beq.s	loc_24E4
	move.w	d2,d1
	andi.w	#$E,d1
	beq.s	Pal_DecGreen
	subq.w	#2,(a0)+	; decrease red value
	rts
; ===========================================================================
; loc_24C8:
Pal_DecGreen:
	move.w	d2,d1
	andi.w	#$E0,d1
	beq.s	Pal_DecBlue
	subi.w	#$20,(a0)+	; decrease green value
	rts
; ===========================================================================
; loc_24D6:
Pal_DecBlue:
	move.w	d2,d1
	andi.w	#$E00,d1
	beq.s	loc_24E4
	subi.w	#$200,(a0)+	; decrease blue value
	rts
; ===========================================================================

loc_24E4:
	addq.w	#2,a0
	rts
; End of function Pal_DecColor

; ---------------------------------------------------------------------------
; Subroutine to fill the palette with white
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_24E8:
Pal_MakeWhite:
	move.w	#$3F,($FFFFF626).w
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	move.w	#$EEE,d1
	move.b	($FFFFF627).w,d0

-	move.w	d1,(a0)+
	dbf	d0,-
	move.w	#$15,d4

-	move.b	#$12,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.s	Pal_WhiteToBlack
	bsr.w	RunPLC_RAM
	dbf	d4,-
	rts
; End of function Pal_MakeWhite


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2522:
Pal_WhiteToBlack:
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	lea	(Second_palette).w,a1
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	adda.w	d0,a1
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_DecColor2
	dbf	d0,-

	tst.b	(Water_flag).w
	beq.s	return_2560
	moveq	#0,d0
	lea	(Underwater_palette).w,a0
	lea	(Underwater_palette_2).w,a1
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	adda.w	d0,a1
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_DecColor2
	dbf	d0,-

return_2560:
	rts
; End of function Pal_WhiteToBlack


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2562:
Pal_DecColor2:
	move.w	(a1)+,d2
	move.w	(a0),d3
	cmp.w	d2,d3
	beq.s	loc_258E
	move.w	d3,d1
	subi.w	#$200,d1	; decrease blue value
	bcs.s	loc_257A
	cmp.w	d2,d1
	bcs.s	loc_257A
	move.w	d1,(a0)+
	rts
; ===========================================================================

loc_257A:
	move.w	d3,d1
	subi.w	#$20,d1	; decrease green value
	bcs.s	loc_258A
	cmp.w	d2,d1
	bcs.s	loc_258A
	move.w	d1,(a0)+
	rts
; ===========================================================================

loc_258A:
	subq.w	#2,(a0)+	; decrease red value
	rts
; ===========================================================================

loc_258E:
	addq.w	#2,a0
	rts
; End of function Pal_DecColor2

; ---------------------------------------------------------------------------
; Subroutine to make a white flash when you enter a special stage
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2592:
Pal_MakeFlash:
	move.w	#$3F,($FFFFF626).w
	move.w	#$15,d4

-	move.b	#$12,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.s	Pal_ToWhite
	bsr.w	RunPLC_RAM
	dbf	d4,-
	rts
; End of function Pal_MakeFlash


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_25B2:
Pal_ToWhite:
	moveq	#0,d0
	lea	(Normal_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_AddColor2
	dbf	d0,-
	moveq	#0,d0
	lea	(Underwater_palette).w,a0
	move.b	($FFFFF626).w,d0
	adda.w	d0,a0
	move.b	($FFFFF627).w,d0

-	bsr.s	Pal_AddColor2
	dbf	d0,-
	rts
; End of function Pal_ToWhite


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_25E0:
Pal_AddColor2:
	move.w	(a0),d2
	cmpi.w	#$EEE,d2
	beq.s	loc_261C
	move.w	d2,d1
	andi.w	#$E,d1
	cmpi.w	#$E,d1
	beq.s	loc_25F8
	addq.w	#2,(a0)+	; increase red value
	rts
; ===========================================================================

loc_25F8:
	move.w	d2,d1
	andi.w	#$E0,d1
	cmpi.w	#$E0,d1
	beq.s	loc_260A
	addi.w	#$20,(a0)+	; increase green value
	rts
; ===========================================================================

loc_260A:
	move.w	d2,d1
	andi.w	#$E00,d1
	cmpi.w	#$E00,d1
	beq.s	loc_261C
	addi.w	#$200,(a0)+	; increase blue value
	rts
; ===========================================================================

loc_261C:
	addq.w	#2,a0
	rts
; End of function Pal_AddColor2

; Unused - dead code/data for old SEGA screen:

; ===========================================================================
; PalCycle_Sega:
	tst.b	($FFFFF635).w
	bne.s	loc_2680
	lea	(Normal_palette_line2).w,a1
	lea	(Pal_Sega1).l,a0
	moveq	#5,d1
	move.w	($FFFFF632).w,d0

loc_2636:
	bpl.s	loc_2640
	addq.w	#2,a0
	subq.w	#1,d1
	addq.w	#2,d0
	bra.s	loc_2636
; ===========================================================================

loc_2640:
	move.w	d0,d2
	andi.w	#$1E,d2
	bne.s	loc_264A
	addq.w	#2,d0

loc_264A:
	cmpi.w	#$60,d0
	bcc.s	loc_2654
	move.w	(a0)+,(a1,d0.w)

loc_2654:
	addq.w	#2,d0
	dbf	d1,loc_2640
	move.w	($FFFFF632).w,d0
	addq.w	#2,d0
	move.w	d0,d2
	andi.w	#$1E,d2
	bne.s	loc_266A
	addq.w	#2,d0

loc_266A:
	cmpi.w	#$64,d0
	blt.s	loc_2678
	move.w	#$401,($FFFFF634).w
	moveq	#-$C,d0

loc_2678:
	move.w	d0,($FFFFF632).w
	moveq	#1,d0
	rts
; ===========================================================================

loc_2680:
	subq.b	#1,($FFFFF634).w
	bpl.s	loc_26D2
	move.b	#4,($FFFFF634).w
	move.w	($FFFFF632).w,d0
	addi.w	#$C,d0
	cmpi.w	#$30,d0
	bcs.s	loc_269E
	moveq	#0,d0
	rts
; ===========================================================================

loc_269E:
	move.w	d0,($FFFFF632).w
	lea	(Pal_Sega2).l,a0
	lea	(a0,d0.w),a0
	lea	(Normal_palette+4).w,a1
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	move.w	(a0)+,(a1)
	lea	(Normal_palette_line2).w,a1
	moveq	#0,d0
	moveq	#$2C,d1

loc_26BE:
	move.w	d0,d2
	andi.w	#$1E,d2
	bne.s	loc_26C8
	addq.w	#2,d0

loc_26C8:
	move.w	(a0),(a1,d0.w)
	addq.w	#2,d0
	dbf	d1,loc_26BE

loc_26D2:
	moveq	#1,d0
	rts

; ===========================================================================
;----------------------------------------------------------------------------
; Unused palette for the Sega logo
;----------------------------------------------------------------------------
; Pal_26D6:
Pal_Sega1:	BINCLUDE	"art/palettes/Unused Sega logo.bin"
;----------------------------------------------------------------------------
; Unused palette for the Sega logo (fading?)
;----------------------------------------------------------------------------
; Pal_26E2:
Pal_Sega2:	BINCLUDE	"art/palettes/Unused Sega logo 2.bin"

; end of dead code/data

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2712:
PalLoad1:
	lea	(PalPointers).l,a1
	lsl.w	#3,d0
	adda.w	d0,a1
	movea.l	(a1)+,a2
	movea.w	(a1)+,a3
	adda.w	#$80,a3
	move.w	(a1)+,d7

-	move.l	(a2)+,(a3)+
	dbf	d7,-
	rts
; End of function PalLoad1


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_272E:
PalLoad2:
	lea	(PalPointers).l,a1
	lsl.w	#3,d0
	adda.w	d0,a1
	movea.l	(a1)+,a2
	movea.w	(a1)+,a3
	move.w	(a1)+,d7

-	move.l	(a2)+,(a3)+
	dbf	d7,-
	rts
; End of function PalLoad2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2746:
PalLoad3_Water:
	lea	(PalPointers).l,a1
	lsl.w	#3,d0
	adda.w	d0,a1
	movea.l	(a1)+,a2
	movea.w	(a1)+,a3
	suba.l	#$A80,a3
	move.w	(a1)+,d7

-	move.l	(a2)+,(a3)+
	dbf	d7,-
	rts
; End of function PalLoad3_Water


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2764:
PalLoad4_Water:
	lea	(PalPointers).l,a1
	lsl.w	#3,d0
	adda.w	d0,a1
	movea.l	(a1)+,a2
	movea.w	(a1)+,a3
	suba.l	#$B00,a3
	move.w	(a1)+,d7

-	move.l	(a2)+,(a3)+
	dbf	d7,-
	rts
; End of function PalLoad4_Water

; ===========================================================================
;----------------------------------------------------------------------------
; Palette pointers
; (PALETTE DESCRIPTOR ARRAY)
; This struct array defines the palette to use for each level.
;----------------------------------------------------------------------------

palptr	macro	ptr,loc,size
	dc.l ptr	; Pointer to palette
	dc.w loc&$FFFF	; Location in ram to load palette into
	dc.w size	; Size of palette in (bytes / 4)
	endm

PalPointers:
	palptr Pal_SEGA,  Normal_palette, $1F
	palptr Pal_Title, Normal_palette_line2, 7
	palptr Pal_UNK1,  Normal_palette, $1F
	palptr Pal_BGND,  Normal_palette, $F
	palptr Pal_EHZ,   Normal_palette_line2, $17
	palptr Pal_EHZ,   Normal_palette_line2, $17
	palptr Pal_WZ,    Normal_palette_line2, $17
	palptr Pal_EHZ,   Normal_palette_line2, $17
	palptr Pal_MTZ,   Normal_palette_line2, $17
	palptr Pal_MTZ,   Normal_palette_line2, $17
	palptr Pal_WFZ,   Normal_palette_line2, $17
	palptr Pal_HTZ,   Normal_palette_line2, $17
	palptr Pal_HPZ,   Normal_palette_line2, $17
	palptr Pal_EHZ,   Normal_palette_line2, $17
	palptr Pal_OOZ,   Normal_palette_line2, $17
	palptr Pal_MCZ,   Normal_palette_line2, $17
	palptr Pal_CNZ,   Normal_palette_line2, $17
	palptr Pal_CPZ,   Normal_palette_line2, $17
	palptr Pal_DEZ,   Normal_palette_line2, $17
	palptr Pal_ARZ,   Normal_palette_line2, $17
	palptr Pal_SCZ,   Normal_palette_line2, $17
	palptr Pal_HPZ_U, Normal_palette, $1F
	palptr Pal_CPZ_U, Normal_palette, $1F
	palptr Pal_ARZ_U, Normal_palette, $1F
	palptr Pal_SS,    Normal_palette, $17
	palptr Pal_UNK2,  Normal_palette_line2, 7
	palptr Pal_UNK3,  Normal_palette_line2, 7
	palptr Pal_SS1,   Normal_palette_line4, 7
	palptr Pal_SS2,   Normal_palette_line4, 7
	palptr Pal_SS3,   Normal_palette_line4, 7
	palptr Pal_SS4,   Normal_palette_line4, 7
	palptr Pal_SS5,   Normal_palette_line4, 7
	palptr Pal_SS6,   Normal_palette_line4, 7
	palptr Pal_SS7,   Normal_palette_line4, 7
	palptr Pal_UNK4,  Normal_palette_line4, 7
	palptr Pal_UNK5,  Normal_palette_line4, 7
	palptr Pal_UNK6,  Normal_palette_line4, 7
	palptr Pal_OOZ_B, Normal_palette_line2, 7
	palptr Pal_Menu,  Normal_palette, $1F
	palptr Pal_UNK7,  Normal_palette, $1F

; ----------------------------------------------------------------------------
Pal_SEGA:  BINCLUDE "art/palettes/Sega screen.bin" ; SEGA screen palette (Sonic and initial background)
Pal_Title: BINCLUDE "art/palettes/Title screen.bin" ; Title screen Palette
Pal_UNK1:  BINCLUDE "art/palettes/Unknown 1.bin" ; Unknown palette 1 (leftover S1 level select palette?)
Pal_BGND:  BINCLUDE "art/palettes/SonicAndTails.bin" ; "Sonic and Miles" background palette (also usually the primary palette line)
Pal_EHZ:   BINCLUDE "art/palettes/EHZ.bin" ; Emerald Hill Zone palette
Pal_WZ:    BINCLUDE "art/palettes/Wood Zone.bin" ; Wood Zone palette
Pal_MTZ:   BINCLUDE "art/palettes/MTZ.bin" ; Metropolis Zone palette
Pal_WFZ:   BINCLUDE "art/palettes/WFZ.bin" ; Wing Fortress Zone palette
Pal_HTZ:   BINCLUDE "art/palettes/HTZ.bin" ; Hill Top Zone palette
Pal_HPZ:   BINCLUDE "art/palettes/HPZ.bin" ; Hidden Palace Zone palette
Pal_HPZ_U: BINCLUDE "art/palettes/HPZ underwater.bin" ; Hidden Palace Zone underwater palette
Pal_OOZ:   BINCLUDE "art/palettes/OOZ.bin" ; Oil Ocean Zone palette
Pal_MCZ:   BINCLUDE "art/palettes/MCZ.bin" ; Mystic Cave Zone palette
Pal_CNZ:   BINCLUDE "art/palettes/CNZ.bin" ; Casino Night Zone palette
Pal_CPZ:   BINCLUDE "art/palettes/CPZ.bin" ; Chemical Plant Zone palette
Pal_CPZ_U: BINCLUDE "art/palettes/CPZ underwater.bin" ; Chemical Plant Zone underwater palette
Pal_DEZ:   BINCLUDE "art/palettes/DEZ.bin" ; Death Egg Zone palette
Pal_ARZ:   BINCLUDE "art/palettes/ARZ.bin" ; Aquatic Ruin Zone palette
Pal_ARZ_U: BINCLUDE "art/palettes/ARZ underwater.bin" ; Aquatic Ruin Zone underwater palette
Pal_SCZ:   BINCLUDE "art/palettes/SCZ.bin" ; Sky Chase Zone palette
Pal_UNK2:  BINCLUDE "art/palettes/Unknown 2.bin" ; Unknown palette 2
Pal_UNK3:  BINCLUDE "art/palettes/Unknown 3.bin" ; Unknown palette 3
Pal_OOZ_B: BINCLUDE "art/palettes/OOZ Boss.bin" ; Oil Ocean Zone boss palette
Pal_Menu:  BINCLUDE "art/palettes/Menu.bin" ; Menu palette
Pal_SS:    BINCLUDE "art/palettes/Special Stage Main.bin" ; Special Stage palette
Pal_SS1:   BINCLUDE "art/palettes/Special Stage 1.bin" ; Special Stage 1 palette
Pal_SS2:   BINCLUDE "art/palettes/Special Stage 2.bin" ; Special Stage 2 palette
Pal_SS3:   BINCLUDE "art/palettes/Special Stage 3.bin" ; Special Stage 3 palette
Pal_SS4:   BINCLUDE "art/palettes/Special Stage 4.bin" ; Special Stage 4 palette
Pal_SS5:   BINCLUDE "art/palettes/Special Stage 5.bin" ; Special Stage 5 palette
Pal_SS6:   BINCLUDE "art/palettes/Special Stage 6.bin" ; Special Stage 6 palette
Pal_SS7:   BINCLUDE "art/palettes/Special Stage 7.bin" ; Special Stage 7 palette
Pal_UNK4:  BINCLUDE "art/palettes/Special Stage 1 2p.bin" ; Special Stage 1 2p palette
Pal_UNK5:  BINCLUDE "art/palettes/Special Stage 2 2p.bin" ; Special Stage 2 2p palette
Pal_UNK6:  BINCLUDE "art/palettes/Special Stage 3 2p.bin" ; Special Stage 3 2p palette
Pal_UNK7:  BINCLUDE "art/palettes/Special Stage Results Screen.bin" ; Special Stage Results Screen palette
; ===========================================================================
	nop




; ---------------------------------------------------------------------------
; Subroutine to delay the program by (Delay_Time) frames
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_3384:
DelayProgram:
	move	#$2300,sr

-	tst.b	(Delay_Time).w
	bne.s	-
	rts
; End of function DelayProgram


; ---------------------------------------------------------------------------
; Subroutine to generate a pseudo-random number in d0
; d0 = (RNG & $FFFF0000) | ((RNG*41 & $FFFF) + ((RNG*41 & $FFFF0000) >> 16))
; RNG = ((RNG*41 + ((RNG*41 & $FFFF) << 16)) & $FFFF0000) | (RNG*41 & $FFFF)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_3390:
RandomNumber:
	move.l	(RNG_seed).w,d1
	bne.s	+
	move.l	#$2A6D365A,d1 ; if the RNG is 0, reset it to this crazy number

	; set the high word of d0 to be the high word of the RNG
	; and multiply the RNG by 41
+	move.l	d1,d0
	asl.l	#2,d1
	add.l	d0,d1
	asl.l	#3,d1
	add.l	d0,d1

	; add the low word of the RNG to the high word of the RNG
	; and set the low word of d0 to be the result
	move.w	d1,d0
	swap	d1
	add.w	d1,d0
	move.w	d0,d1
	swap	d1

	move.l	d1,(RNG_seed).w
	rts
; End of function RandomNumber


; ---------------------------------------------------------------------------
; Subroutine to calculate sine and cosine of an angle
; d0 = input byte = angle (360 degrees == 256)
; d0 = output word = 255 * sine(angle)
; d1 = output word = 255 * cosine(angle)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_33B6:
CalcSine:
	andi.w	#$FF,d0
	add.w	d0,d0
	addi.w	#$80,d0
	move.w	Sine_Data(pc,d0.w),d1 ; cos
	subi.w	#$80,d0
	move.w	Sine_Data(pc,d0.w),d0 ; sin
	rts
; End of function CalcSine

; ===========================================================================
; word_33CE:
Sine_Data:	BINCLUDE	"misc/sinewave.bin"


; ---------------------------------------------------------------------------
; Subroutine to calculate arctangent of y/x
; d1 = input x
; d2 = input y
; d0 = output angle (360 degrees == 256)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_364E:
CalcAngle:
	movem.l	d3-d4,-(sp)
	moveq	#0,d3
	moveq	#0,d4
	move.w	d1,d3
	move.w	d2,d4
	or.w	d3,d4
	beq.s	loc_36AA ; special case return if x and y are both 0
	move.w	d2,d4

	tst.w	d3	; calculate absolute value of x
	bpl.w	+
	neg.w	d3
+
	tst.w	d4	; calculate absolute value of y
	bpl.w	+
	neg.w	d4
+
	cmp.w	d3,d4
	bcc.w	+
	lsl.l	#8,d4
	divu.w	d3,d4
	moveq	#0,d0
	move.b	Angle_Data(pc,d4.w),d0
	bra.s	++
+
	lsl.l	#8,d3
	divu.w	d4,d3
	moveq	#$40,d0
	sub.b	Angle_Data(pc,d3.w),d0
+
	tst.w	d1
	bpl.w	+
	neg.w	d0
	addi.w	#$80,d0
+
	tst.w	d2
	bpl.w	+
	neg.w	d0
	addi.w	#$100,d0
+
	movem.l	(sp)+,d3-d4
	rts
; ===========================================================================

loc_36AA:
	move.w	#$40,d0
	movem.l	(sp)+,d3-d4
	rts
; End of function CalcAngle

; ===========================================================================
; byte_36B4:
Angle_Data:	BINCLUDE	"misc/angles.bin"

; ===========================================================================
	nop




; loc_37B8:
SegaScreen:
	move.b	#$7D+$80,d0
	bsr.w	PlayMusic ; stop music
	bsr.w	ClearPLC
	bsr.w	Pal_FadeFrom

	clearRAM Misc_Variables,$100

	clearRAM Object_RAM,$2000 ; fill object RAM ($B000-$D5FF) with 0

	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8230,(a6)
	move.w	#$8405,(a6)
	move.w	#$8700,(a6)
	move.w	#$8B03,(a6)
	move.w	#$8C81,(a6)
	move.w	#$9003,(a6)
	clr.b	(Water_move).w
	clr.w	(Two_player_mode).w
	move	#$2700,sr
	move.w	($FFFFF60C).w,d0
	andi.b	#$BF,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	ClearScreen

	dmaFillVRAM 0,$C000,$2000 ; fill VRAM $C000 - $DFFF with zeroes

	move.l	#$40200000,(VDP_control_port).l
	lea	(ArtNem_SEGA).l,a0
	bsr.w	NemDec
	move.l	#$50000000,(VDP_control_port).l
	lea	(ArtNem_IntroTrails).l,a0
	bsr.w	NemDec
	move.l	#$51000000,(VDP_control_port).l
	lea	(ArtNem_SilverSonic).l,a0 ; ?? seems unused here
	bsr.w	NemDec
	lea	(Metablock_Table).l,a1
	lea	(MapEng_SEGA).l,a0
	move.w	#0,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60000002,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics3
	tst.b	(Graphics_Flags).w
	bmi.s	SegaScreen_Contin
	lea	(Object_RAM+$80).w,a1
	move.b	#$B1,(a1)	; load objB1 (sonic on the SEGA screen?) at $FFFFB080
	move.b	#$4E,subtype(a1) ; <== ObjB1_SubObjData
; loc_38CE:
SegaScreen_Contin:
	moveq	#0,d0
	bsr.w	PalLoad2
	move.w	#-$A,($FFFFF632).w
	move.w	#0,($FFFFF634).w
	move.w	#0,($FFFFF662).w
	move.w	#0,($FFFFF660).w
	lea	(Object_RAM+next_object).w,a1
	move.b	#$B0,(a1) ; load obj80 (sega screen?) at $FFFFB040
	move.b	#$4C,subtype(a1) ; <== ObjB0_SubObjData
	move.w	#$F0,(Demo_Time_left).w
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
; loc_390E:
Sega_WaitPalette:
	btst	#5,(Ctrl_1_Held).w	; is C held down?
	beq.s	+
	move.b	#$20,(Game_Mode).w	; => EndingSequence
	bsr.s	Sega_Remaining
	rts
+
	btst	#6,(Ctrl_1_Held).w	; is A held down?
	beq.s	+
	move.b	#$28,(Game_Mode).w	; => LevelSelect
	bsr.s	Sega_Remaining
	rts
+
	move.b	#2,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	JmpTo_RunObjects
	jsr	(BuildSprites).l
	tst.b	($FFFFF660).w
	beq.s	Sega_WaitPalette
	move.b	#$7A+$80,d0
	bsr.w	PlaySound	; play "SEGA" sound
	move.b	#2,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	#$B4,(Demo_Time_left).w
; loc_3940:
Sega_WaitEnd:
	move.b	#$14,(Delay_Time).w
	bsr.w	DelayProgram
	tst.w	(Demo_Time_left).w
	beq.s	Sega_GotoTitle
	move.b	(Ctrl_1_Press).w,d0	; is Start button pressed?
	or.b	(Ctrl_2_Press).w,d0	; (either player)
	andi.b	#$80,d0
	beq.s	Sega_WaitEnd		; if not, branch
; loc_395E:
Sega_GotoTitle:
	bsr.s	Sega_Remaining
	jmp	(SelbiSplash).l

;	move.b	#4,(Game_Mode).w	; => TitleScreen
;	move.w	#$000,d0
;	jmp	loc_9480

Sega_Remaining:
	clr.b	($FFFFF660).w

	clr.w	(Demo_Time_left).w

	move.b	#1,(Debug_mode_flag).w

	clr.w	($FFFFF660).w
	clr.w	($FFFFF662).w
	rts
; ---------------------------------------------------------------------------
; Subroutine that does the exact same thing as ShowVDPGraphics2
; (this one is used at the Sega screen)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_396E:
ShowVDPGraphics3:
	lea	(VDP_data_port).l,a6
	move.l	#$1000000,d4
-	move.l	d0,4(a6)
	move.w	d1,d3
-	move.w	(a1)+,(a6)
	dbf	d3,-
	add.l	d4,d0
	dbf	d2,--
	rts
; End of function ShowVDPGraphics3

; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_3990:
JmpTo_RunObjects 
	jmp	RunObjects.l
; End of function JmpTo_RunObjects

; ===========================================================================
	align 4
; ===========================================================================
; loc_3998:
TitleScreen:
	move.b	#$FD,d0
	bsr.w	PlayMusic
	bsr.w	ClearPLC
	bsr.w	Pal_FadeFrom
	move	#$2700,sr
	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$9001,(a6)
	move.w	#$9200,(a6)
	move.w	#$8B03,(a6)
	move.w	#$8720,(a6)
	clr.b	(Water_move).w
	move.w	#$8C81,(a6)
	bsr.w	ClearScreen

	clearRAM Sprite_Table_Input,$400	; fill $AC00-$AFFF with $0
	clearRAM Object_RAM,$2000		; fill object RAM ($B000-$D5FF) with $0
	clearRAM Misc_Variables,$100		; clear CPU player RAM and following variables
	clearRAM Camera_RAM,$100		; clear camera RAM and following variables

	;move.l	#$60000002,(VDP_control_port).l
	;lea	(ArtNem_CreditText).l,a0
	;bsr.w	NemDec
	;lea	(off_B2B0).l,a1
	;jsr	(loc_B272).l	; display "Sonic Team Presents" text

	clearRAM Second_palette,$80	; fill palette with 0 (black)
	moveq	#3,d0
	bsr.w	PalLoad1
	bsr.w	Pal_FadeTo
	move	#$2700,sr
	move.l	#$40000000,(VDP_control_port).l
	lea	(MapEng_Title).l,a0
	bsr.w	NemDec
	move.l	#$6A000000,(VDP_control_port).l
	lea	(MapEng_TitleSprites).l,a0
	bsr.w	NemDec
	move.l	#$7E400001,(VDP_control_port).l
	lea	(ArtNem_MenuJunk).l,a0
	bsr.w	NemDec
	move.l	#$40400002,(VDP_control_port).l
	lea	(ArtNem_Player1VS2).l,a0
	bsr.w	NemDec
	move.l	#$50000003,(VDP_control_port).l
	lea	(ArtNem_FontStuff).l,a0
	bsr.w	NemDec
	move.b	#0,(Last_star_pole_hit).w
	move.b	#0,(Last_star_pole_hit_2P).w
	move.w	#0,(Debug_placement_mode).w
	move.w	#0,(Demo_mode_flag).w
	move.w	#0,($FFFFFFDA).w
	move.w	#0,($FFFFF634).w
	move.w	#0,(Two_player_mode).w
	move.b	#0,(Level_started_flag).w
	bsr.w	Pal_FadeFrom
	move	#$2700,sr
	lea	(Metablock_Table).l,a1
	lea	(MapEng_TitleScreen).l,a0
	move.w	#$4000,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics
	lea	(Metablock_Table).l,a1
	lea	(MapEng_TitleBack).l,a0
	move.w	#$4000,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60500003,d0
	moveq	#$17,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics
	lea	(Metablock_Table).l,a1
	lea	(MapEng_TitleLogo).l,a0
	move.w	#$E000,d0
	bsr.w	EniDec

	lea	($FFFF0858).l,a1
	lea	(CopyrightText).l,a2
	moveq	#$A,d6
-	move.w	(a2)+,(a1)+	; load mappings for copyright 1992 sega message
	dbf	d6,-

	lea	(Metablock_Table).l,a1
	move.l	#$40000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics

	clearRAM Normal_palette,$100	; fill two palettes with 0 (black)

	moveq	#1,d0
	bsr.w	PalLoad1
	move.b	#1,(Debug_mode_flag).w
	move.w	#0,(Two_player_mode).w
	move.w	#$280,(Demo_Time_left).w
	clr.w	(Ctrl_1).w
	move.b	#$E,(Object_RAM+next_object).w ; load Obj0E (flashing intro star)
	move.b	#2,(Object_RAM+next_object+subtype).w
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	moveq	#0,d0
	bsr.w	LoadPLC2
	move.w	#0,(Correct_cheat_entries).w
	move.w	#0,(Correct_cheat_entries_2).w
	nop
	nop
	nop
	nop
	nop
	nop
	move.w	#4,(Sonic_Pos_Record_Index).w
	move.w	#0,(Sonic_Pos_Record_Buf).w

	lea	(Results_Data_2P).w,a1
	moveq	#$B,d0
-	move.w	#-1,(a1)+
	dbf	d0,-

	move.w	#-$280,(Camera_X_pos).w
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

; loc_3C14:
TitleScreen_Loop:

	move.b	#4,(Delay_Time).w
	bsr.w	DelayProgram
	jsr	(RunObjects).l
	bsr.w	JmpTo_SwScrl_Title
	jsr	(BuildSprites).l

	; write alternating 0s and 4s, 80 times, at every 4th word,
	; starting at Sprite_Table+6
	lea	(Sprite_Table+4).w,a1
	moveq	#0,d0
	moveq	#$4F,d6
-	tst.w	(a1)
	bne.s	+
	bchg	#2,d0
	move.w	d0,2(a1)
+	addq.w	#8,a1
	dbf	d6,-

	bsr.w	RunPLC_RAM
	bsr.w	TailsNameCheat
	tst.w	(Demo_Time_left).w
	beq.w	loc_3D2E
	tst.b	(Object_RAM+next_object+objoff_2F).w
	beq.w	TitleScreen_Loop
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	beq.w	TitleScreen_Loop ; loop until Start is pressed

	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w
	moveq	#0,d0
	move.w	d0,(Ring_count).w
	move.l	d0,(Timer).w
	move.l	d0,(Score).w
	move.w	d0,(Ring_count_2P).w
	move.l	d0,(Timer_2P).w
	move.l	d0,(Score_2P).w
	move.b	d0,(Continue_count).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	move.b	#$79+$80,d0 ; prepare to stop music (fade out)
	bsr.w	PlaySound
	moveq	#0,d0
	move.b	(Title_screen_option).w,d0
	bne.s	TitleScreen_CheckIfChose2P	; branch if not a 1-player game

	moveq	#0,d0
	move.w	d0,(Two_player_mode_copy).w
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Current_ZoneAndAct).w
	;tst.b	(Level_select_flag).w	; has level select cheat been entered?
	;beq.s	loc_3CE4		; if not, branch
	btst	#6,(Ctrl_1_Held).w	; is A held down?
	beq.s	loc_3CE4	 	; if not, branch
	move.b	#$28,(Game_Mode).w ; => LevelSelectMenu
	rts
; ---------------------------------------------------------------------------
loc_3CE4:
	move.w	d0,(Current_Special_Stage).w
	move.w	d0,(Got_Emerald).w
	move.l	d0,(Got_Emeralds_array).w
	move.l	d0,(Got_Emeralds_array+4).w
	rts
; ===========================================================================
; loc_3CF6:
TitleScreen_CheckIfChose2P:
	subq.b	#1,d0
	bne.s	TitleScreen_ChoseOptions

	moveq	#1,d1
	move.w	d1,(Two_player_mode_copy).w
	move.w	d1,(Two_player_mode).w
	moveq	#0,d0
	move.w	d0,(Got_Emerald).w
	move.l	d0,(Got_Emeralds_array).w
	move.l	d0,(Got_Emeralds_array+4).w
	move.b	#$1C,(Game_Mode).w ; => LevelSelectMenu2P
	move.b	#0,(Current_Zone_2P).w
	rts
; ---------------------------------------------------------------------------
; loc_3D20:
TitleScreen_ChoseOptions:
	move.b	#$24,(Game_Mode).w ; => OptionsMenu
	move.b	#0,(Options_menu_box).w
	rts
; ===========================================================================

loc_3D2E:
	move.b	#$79+$80,d0
	bsr.w	PlaySound
	move.w	(Demo_number).w,d0
	andi.w	#7,d0
	add.w	d0,d0
	move.w	DemoLevels(pc,d0.w),d0
	move.w	d0,(Current_ZoneAndAct).w
	addq.w	#1,(Demo_number).w
	cmpi.w	#4,(Demo_number).w
	bcs.s	+
	move.w	#0,(Demo_number).w
+
	move.w	#1,(Demo_mode_flag).w
	move.b	#8,(Game_Mode).w ; => Level (Demo mode)
	cmpi.w	#0,(Current_ZoneAndAct).w
	bne.s	+
	move.w	#1,(Two_player_mode).w
+
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w
	moveq	#0,d0
	move.w	d0,(Ring_count).w
	move.l	d0,(Timer).w
	move.l	d0,(Score).w
	move.w	d0,(Ring_count_2P).w
	move.l	d0,(Timer_2P).w
	move.l	d0,(Score_2P).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	rts
; ===========================================================================
; word_3DAC:
DemoLevels: ;zone,act
	dc.b    0,  0	; EHZ (2P)
	dc.b   $D,  0	; CPZ
	dc.b   $F,  0	; ARZ
	dc.b   $C,  0	; CNZ

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_3DB4:
TailsNameCheat:
	lea	(TailsNameCheat_Buttons).l,a0
	move.w	(Correct_cheat_entries).w,d0
	adda.w	d0,a0
	move.b	(Ctrl_1_Press).w,d0
	andi.b	#$F,d0
	beq.s	return_3DEC
	cmp.b	(a0),d0
	bne.s	loc_3DE6
	addq.w	#1,(Correct_cheat_entries).w
	tst.b	1(a0)
	bne.s	return_3DEC
	bchg	#7,(Graphics_Flags).w ; turn on the cheat that changes MILES to "TAILS"
	move.b	#$35+$80,d0 ; play the ring sound for a successfully entered cheat
	bsr.w	PlaySound

loc_3DE6:
	move.w	#0,(Correct_cheat_entries).w

return_3DEC:
	rts
; End of function TailsNameCheat

; ===========================================================================
; byte_3DEE:
TailsNameCheat_Buttons:
	dc.b	 1 ; up
	dc.b	 2 ; down
	dc.b	 2 ; down
	dc.b	 2 ; down
	dc.b	 1 ; up
	dc.b	 0
; ---------------------------------------------------------------------------------
; Nemesis compressed art
; 10 blocks
; Player 1 2 VS Text
; ---------------------------------------------------------------------------------
; ArtNem_3DF4:
ArtNem_Player1VS2:	BINCLUDE	"art/nemesis/1Player2VS.bin"

; word_3E82:
CopyrightText:
	dc.w  $68B	; (C)
	dc.w  $682	; 2
	dc.w  $680	; 0
	dc.w  $681	; 1
	dc.w  $685	; 5
	dc.w	 0	;
	dc.w  $6A0	; S
	dc.w  $692	; E
	dc.w  $699	; L
	dc.w  $68F	; B
	dc.w  $696	; I


;	dc.w  $68B	; (C)
;	dc.w	 0	;
;	dc.w  $681	; 1
;	dc.w  $689	; 9
;	dc.w  $689	; 9
;	dc.w  $682	; 2
;	dc.w	 0	;
;	dc.w  $6A0	; S
;	dc.w  $692	; E
;	dc.w  $694	; G
;	dc.w  $68E	; A

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_3E98:
JmpTo_SwScrl_Title 
	jmp	SwScrl_Title.l
; End of function JmpTo_SwScrl_Title

; ===========================================================================
	dc.w 0
;----------------------------------------------------------------------------
; 1P Music Playlist
;----------------------------------------------------------------------------
; byte_3EA0:
MusicList:
	dc.b   2+$80	; 0 ; EHZ
	dc.b   2+$80	; 1
	dc.b   5+$80	; 2
	dc.b   4+$80	; 3
	dc.b   5+$80	; 4 ; MTZ1,2
	dc.b   5+$80	; 5 ; MTZ3
	dc.b  $F+$80	; 6 ; WFZ
	dc.b   6+$80	; 7 ; HTZ
	dc.b $10+$80	; 8
	dc.b  $D+$80	; 9
	dc.b   4+$80	; 10 ; OOZ
	dc.b  $B+$80	; 11 ; MCZ
	dc.b  $9+$80	; 12 ; CNZ
	dc.b  $E+$80	; 13 ; CPZ
	dc.b  $A+$80	; 14 ; DEZ
	dc.b   7+$80	; 15 ; ARZ
	dc.b  $D+$80	; 16 ; SCZ
	dc.b   0	; 17
;----------------------------------------------------------------------------
; 2P Music Playlist
;----------------------------------------------------------------------------
; byte_3EB2:
MusicList2:
	dc.b  $C+$80	; 0  ; EHZ 2P
	dc.b   2+$80	; 1
	dc.b   5+$80	; 2
	dc.b   4+$80	; 3
	dc.b   5+$80	; 4
	dc.b   5+$80	; 5
	dc.b  $F+$80	; 6
	dc.b   6+$80	; 7
	dc.b $10+$80	; 8
	dc.b  $D+$80	; 9
	dc.b   4+$80	; 10
	dc.b   3+$80	; 11 ; MCZ 2P
	dc.b   8+$80	; 12 ; CNZ 2P
	dc.b  $E+$80	; 13
	dc.b  $A+$80	; 14
	dc.b   7+$80	; 15
	dc.b  $D+$80	; 16
	dc.b   0	; 17
; ===========================================================================

; ---------------------------------------------------------------------------
; Level
; DEMO AND ZONE LOOP (MLS values $08, $0C; bit 7 set indicates that load routine is running)
; ---------------------------------------------------------------------------
; loc_3EC4: XLevel::
Level:
	bset	#7,(Game_Mode).w ; add $80 to screen mode (for pre level sequence)
	tst.w	(Demo_mode_flag).w
	bmi.s	+
	move.b	#$79+$80,d0
	bsr.w	PlaySound	; fade out music
+
	bsr.w	ClearPLC
	bsr.w	Pal_FadeFrom
	tst.w	(Demo_mode_flag).w
	bmi.s	Level_ClrRam
	move	#$2700,sr
	bsr.w	ClearScreen
	jsr	(LoadTitleCard).l ; load title card patterns
	move	#$2300,sr
	moveq	#0,d0
	move.w	d0,(Timer_frames).w
	move.b	(Current_Zone).w,d0

	; multiply d0 by 12, the size of a level art load block
	add.w	d0,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0

	lea	(LevelArtPointers).l,a2
	lea	(a2,d0.w),a2
	moveq	#0,d0
	move.b	(a2),d0
	beq.s	+
	bsr.w	LoadPLC
+

	moveq	#1,d0
	bsr.w	LoadPLC
	bsr.w	sub_4450
	moveq	#6,d0
	tst.w	(Two_player_mode).w
	bne.s	+
	cmpi.w	#2,(Player_mode).w
	bne.s	Level_ClrRam
	addq.w	#1,d0
+
	tst.b	(Graphics_Flags).w
	bpl.s	+
	addq.w	#2,d0
+
	bsr.w	LoadPLC
; loc_3F48:
Level_ClrRam:
	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2400	; clear object RAM
	clearRAM $FFFFF628,$58
	clearRAM Misc_Variables,$100
	clearRAM $FFFFFE60,$50
	clearRAM $FFFFE700,$100

	cmpi.w	#$D01,(Current_ZoneAndAct).w	; CPZ 2
	beq.s	Level_InitWater
	cmpi.b	#$F,(Current_Zone).w		; ARZ
	beq.s	Level_InitWater
	cmpi.b	#8,(Current_Zone).w		; HPZ
	bne.s	+

Level_InitWater:
	move.b	#1,(Water_flag).w
	move.w	#0,(Two_player_mode).w
+
	lea	(VDP_control_port).l,a6
	move.w	#$8B03,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$857C,(a6)
	move.w	#$9001,(a6)
	move.w	#$8004,(a6)
	move.w	#$8720,(a6)
	move.w	#$8C81,(a6)
	tst.b	($FFFFFFD2).w
	beq.s	loc_4012
	btst	#5,(Ctrl_1_Held).w
	beq.s	+
	move.w	#$8C89,(a6)
+
	btst	#6,(Ctrl_1_Held).w
	beq.s	loc_4012
	move.b	#1,(Debug_mode_flag).w

loc_4012:
	move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 223rd scanline
	tst.w	(Two_player_mode).w
	beq.s	loc_402C
	move.w	#$8A6B,(Hint_counter_reserve).w	; H-INT every 108th scanline
	move.w	#$8014,(a6)
	move.w	#$8C87,(a6)

loc_402C:
	move.w	(Hint_counter_reserve).w,(a6)
	clr.w	(VDP_Command_Buffer).w
	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
	tst.b	(Water_flag).w	; does level have water?
	beq.s	Level_LoadPal	; if not, branch
	move.w	#$8014,(a6)
	moveq	#0,d0
	move.w	(Current_ZoneAndAct).w,d0
	subi.w	#$800,d0
	ror.b	#1,d0
	lsr.w	#6,d0
	andi.w	#$FFFE,d0
	lea	(WaterHeight).l,a1	; load water height array
	move.w	(a1,d0.w),d0
	move.w	d0,(Water_Level_1).w ; set water heights
	move.w	d0,(Water_Level_2).w
	move.w	d0,(Water_Level_3).w
	clr.b	(Water_routine).w	; clear water routine counter
	clr.b	(Water_move).w	; clear water movement
	move.b	#1,(Water_on).w	; enable water
; loc_407C:
Level_LoadPal:
	moveq	#3,d0
	bsr.w	PalLoad2	; load Sonic's palette line
	tst.b	(Water_flag).w	; does level have water?
	beq.s	Level_GetBgm	; if not, branch
	moveq	#$15,d0	; palette number $15
	cmpi.b	#8,(Current_Zone).w
	beq.s	Level_WaterPal ; branch if level is HPZ
	moveq	#$16,d0	; palette number $16
	cmpi.b	#$D,(Current_Zone).w
	beq.s	Level_WaterPal ; branch if level is CPZ
	moveq	#$17,d0	; palette number $17
; loc_409E:
Level_WaterPal:
	bsr.w	PalLoad3_Water	; load underwater palette (with d0)
	tst.b	(Last_star_pole_hit).w ; is it the start of the level?
	beq.s	Level_GetBgm	; if yes, branch
	move.b	(Saved_Water_move).w,(Water_move).w
; loc_40AE:
Level_GetBgm:
	tst.w	(Demo_mode_flag).w
	bmi.s	loc_4114
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	lea	MusicList(pc),a1
	tst.w	(Two_player_mode).w
	beq.s	Level_PlayBgm
	lea	MusicList2(pc),a1
; loc_40C8:
Level_PlayBgm:
	move.b	(a1,d0.w),d0	; load from music playlist
	move.w	d0,(Level_Music).w	; store level music
	bsr.w	PlayMusic	; play level music
	move.b	#$34,(Object_RAM+$80).w ; load Obj34 (level title card) at $FFFFB080

; loc_40DA:
Level_TtlCard:

	move.b	#$C,(Delay_Time).w
	bsr.w	DelayProgram
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	move.w	(Object_RAM+$80+x_pos).w,d0
	cmp.w	(Object_RAM+$80+$30).w,d0	; has title card sequence finished?
	bne.s	Level_TtlCard	; if not, branch
	tst.l	(Plc_Buffer).w	; are there any items in the pattern load cue?
	bne.s	Level_TtlCard	; if yes, branch
	move.b	#$C,(Delay_Time).w
	bsr.w	DelayProgram
	jsr	(Hud_Base).l

loc_4114:
	moveq	#0,d0	; load rings, HUD, etc.
	bsr.w	LoadPLC

	moveq	#3,d0
	bsr.w	PalLoad1	; load Sonic's palette line
	bsr.w	LevelSizeLoad
	bsr.w	JmpTo_DeformBgLayer
	clr.w	(Vscroll_Factor).w
	move.w	#-$E0,($FFFFF61E).w

	clearRAM Horiz_Scroll_Buf,$400

	bsr.w	sub_4E98
	bsr.w	JmpTo_loadZoneBlockMaps
	jsr	(loc_402D4).l
	bsr.w	JmpTo_loc_E300
	jsr	(FloorLog_Unk).l
	bsr.w	LoadCollisionIndexes
	bsr.w	WaterEffects
	bsr.w	InitPlayers

	move.l	#0,($FFFFF500).w	; reset hit counter (2 bytes, F500+F501), red hits frames (1 byte, F502), debug placement block flag (1 byte, F503)
	move.l	#0,($FFFFF504).w	; clear evened debug placement locations (X-pos and Y-pos, bytes each)
	move.l	#0,($FFFFF508).w	; reset fake debug mirror flags (1 byte), ?, ?, ?
	move.b	#0,(Debug_object).w	; clear debug list selection
	
	move.w	#0,(Ctrl_1_Logical).w
	move.w	#0,(Ctrl_2_Logical).w
	move.w	#0,(Ctrl_1).w
	move.w	#0,(Ctrl_2).w
	move.b	#1,(Control_Locked).w
	move.b	#1,($FFFFF7CF).w
	move.b	#0,(Level_started_flag).w
; Level_ChkWater:
	tst.b	(Water_flag).w	; does level have water?
	beq.s	+	; if not, branch
	move.b	#4,(Object_RAM+$380).w ; load Obj04 (water surface) at $FFFFB380
	move.w	#$60,(Object_RAM+$380+x_pos).w ; set horizontal offset
	move.b	#4,(Object_RAM+$3C0).w ; load Obj04 (water surface) at $FFFFB3C0
	move.w	#$120,(Object_RAM+$3C0+x_pos).w ; set different horizontal offset
+
	cmpi.b	#$D,(Current_Zone).w	; check if zone == CPZ
	bne.s	+			; branch if not
	move.b	#$7C,(Object_RAM+$340).w ; load Obj7C (CPZ pylon) at $FFFFB340
+
	cmpi.b	#$A,(Current_Zone).w	; check if zone == OOZ
	bne.s	Level_ClrHUD		; branch if not
	move.b	#7,(Object_RAM+$380).w ; load Obj07 (OOZ oil) at $FFFFB380
; Level_LoadObj: misnomer now
Level_ClrHUD:
	moveq	#0,d0
	tst.b	(Last_star_pole_hit).w	; are you starting from a lamppost?
	bne.s	Level_FromCheckpoint	; if yes, branch
	move.w	d0,(Ring_count).w	; clear rings
	move.l	d0,(Timer).w		; clear time
	move.b	d0,(Extra_life_flags).w	; clear extra lives counter
	move.w	d0,(Ring_count_2P).w	; ditto for player 2
	move.l	d0,(Timer_2P).w
	move.b	d0,(Extra_life_flags_2P).w
; loc_41E4:
Level_FromCheckpoint:
	move.b	d0,(Time_Over_flag).w
	move.b	d0,(Time_Over_flag_2P).w
	move.b	d0,($FFFFFF4E).w
	move.w	d0,($FFFFFF4C).w
	move.w	d0,(Debug_placement_mode).w
	move.w	d0,(Level_Inactive_flag).w
	move.b	d0,($FFFFF622).w
	move.b	d0,($FFFFF623).w
	move.w	d0,($FFFFFEF0).w
	move.w	d0,($FFFFFEF2).w
	move.w	d0,($FFFFFEF4).w
	move.w	d0,($FFFFFEF6).w
	move.w	d0,(Loser_Time_Left).w
	bsr.w	OscillateNumInit
	move.b	#1,(Update_HUD_score).w
	move.b	#1,(Update_HUD_rings).w
	move.b	#1,(Update_HUD_timer).w
	move.b	#1,(Update_HUD_timer_2P).w
	jsr	(loc_17AA4).l
	jsr	(RingsManager).l
	jsr	(SpecialCNZBumpers).l
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	JmpTo_loc_3FCC4
	bsr.w	SetLevelEndType
	move.w	#0,(Demo_button_index).w
	move.w	#0,(Demo_button_index_2P).w
	lea	(DemoScriptPointers).l,a1
	moveq	#0,d0
	move.b	(Current_Zone).w,d0	; load zone value
	lsl.w	#2,d0
	movea.l	(a1,d0.w),a1
	tst.w	(Demo_mode_flag).w
	bpl.s	loc_4290
	lea	(dword_498C).l,a1
	move.w	($FFFFFFF4).w,d0
	subq.w	#1,d0
	lsl.w	#2,d0
	movea.l	(a1,d0.w),a1

loc_4290:
	move.b	1(a1),(Demo_press_counter).w
	tst.b	(Current_Zone).w
	bne.s	loc_42A8
	lea	(Demo_EHZ_Tails).l,a1
	move.b	1(a1),(Demo_press_counter_2P).w

loc_42A8:
	move.w	#$668,(Demo_Time_left).w
	tst.w	(Demo_mode_flag).w
	bpl.s	loc_42C8
	move.w	#$21C,(Demo_Time_left).w
	cmpi.w	#4,($FFFFFFF4).w
	bne.s	loc_42C8
	move.w	#$1FE,(Demo_Time_left).w

loc_42C8:
	tst.b	(Water_flag).w
	beq.s	loc_42E8
	moveq	#$15,d0
	cmpi.b	#8,(Current_Zone).w
	beq.s	loc_42E4
	moveq	#$16,d0
	cmpi.b	#$D,(Current_Zone).w
	beq.s	loc_42E4
	moveq	#$17,d0

loc_42E4:
	bsr.w	PalLoad4_Water

loc_42E8:
	move.w	#-1,(Object_RAM+$80+$3E).w
	move.b	#$E,(Object_RAM+$1C0+routine).w
	move.w	#$A,(Object_RAM+$1C0+$34).w

-	move.b	#$C,(Delay_Time).w
	bsr.w	DelayProgram
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	tst.b	(Object_RAM+$140).w
	bne.s	-	; loop while the object at $FFFFB140 is still loaded

	lea	(Object_RAM+$80).w,a1
	move.b	#$16,routine(a1)
	move.w	#$2D,anim_frame_duration(a1)
	move.b	#$16,next_object+routine(a1)
	move.w	#$2D,next_object+anim_frame_duration(a1)
	tst.b	$80(a1)
	beq.s	+	; branch if an object has not been loaded at $FFFFB100
	move.b	#$16,$80+routine(a1)
	move.w	#$2D,$80+anim_frame_duration(a1)
+	move.b	#0,(Control_Locked).w
	move.b	#0,($FFFFF7CF).w
	move.b	#1,(Level_started_flag).w

; Level_StartGame: loc_435A:
	bclr	#7,(Game_Mode).w ; clear $80 from the game mode

; ---------------------------------------------------------------------------
; Main level loop (when all title card and loading sequences are finished)
; ---------------------------------------------------------------------------
; loc_4360:
Level_MainLoop:
	bsr.w	PauseGame
	move.b	#8,(Delay_Time).w
	bsr.w	DelayProgram
	addq.w	#1,(Timer_frames).w ; add 1 to level timer
	bsr.w	MoveSonicInDemo
	bsr.w	WaterEffects
	jsr	(RunObjects).l
	tst.w	(Level_Inactive_flag).w
	bne.w	Level
	bsr.w	JmpTo_DeformBgLayer
	bsr.w	UpdateWaterSurface
	jsr	(RingsManager).l
	cmpi.b	#$C,(Current_Zone).w	; is it CNZ?
	bne.s	+			; if not, branch past jsr
	jsr	(SpecialCNZBumpers).l
+
	bsr.w	JmpTo_loc_3FCC4
	bsr.w	PalCycle_Load
	bsr.w	RunPLC_RAM
	bsr.w	OscillateNumDo
	bsr.w	ChangeRingFrame
	bsr.w	CheckLoadSignpostArt
	jsr	(BuildSprites).l
	jsr	(loc_17AA4).l
	cmpi.b	#8,(Game_Mode).w	; check if in demo mode
	beq.s	loc_43DC
	cmpi.b	#$C,(Game_Mode).w	; check if in normal play mode
	beq.w	Level_MainLoop
	rts
; ---------------------------------------------------------------------------

loc_43DC:
	tst.w	(Level_Inactive_flag).w
	bne.s	loc_43FA
	tst.w	(Demo_Time_left).w
	beq.s	loc_43FA
	cmpi.b	#8,(Game_Mode).w
	beq.w	Level_MainLoop
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts
; ---------------------------------------------------------------------------

loc_43FA:
	cmpi.b	#8,(Game_Mode).w
	bne.s	loc_4408
	move.b	#0,(Game_Mode).w ; => SegaScreen

loc_4408:
	move.w	#$3C,(Demo_Time_left).w
	move.w	#$3F,($FFFFF626).w
	clr.w	($FFFFF794).w

loc_4418:
	move.b	#8,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	MoveSonicInDemo
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	jsr	(loc_17AA4).l
	subq.w	#1,($FFFFF794).w
	bpl.s	loc_4448
	move.w	#2,($FFFFF794).w
	bsr.w	Pal_FadeOut

loc_4448:
	tst.w	(Demo_Time_left).w
	bne.s	loc_4418
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_4450:
	cmpi.b	#$88,(Game_Mode).w ; pre-level demo mode?
	beq.s	+
	tst.w	(Two_player_mode).w
	bne.s	+
	move.w	(Player_option).w,(Player_mode).w
	rts
; ---------------------------------------------------------------------------
+	move.w	#0,(Player_mode).w
	rts
; End of function sub_4450


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_446E:
InitPlayers:
	move.w	(Player_mode).w,d0
	bne.s	InitPlayers_Alone ; branch if this isn't a Sonic and Tails game

	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFB000
	move.b	#8,(Sonic_Dust).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100

	cmpi.b	#6,(Current_Zone).w
	beq.s	return_44BC ; skip loading Tails if this is WFZ
	cmpi.b	#$E,(Current_Zone).w
	beq.s	return_44BC ; skip loading Tails if this is DEZ
	cmpi.b	#$10,(Current_Zone).w
	beq.s	return_44BC ; skip loading Tails if this is SCZ

	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
	subi.w	#$20,(Sidekick+x_pos).w
	addi.w	#4,(Sidekick+y_pos).w
	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140

return_44BC:
	rts
; ===========================================================================
; loc_44BE:
InitPlayers_Alone: ; either Sonic or Tails but not both
	subq.w	#1,d0
	bne.s	InitPlayers_TailsAlone ; branch if this is a Tails alone game

	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFB000
	move.b	#8,(Sonic_Dust).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
	rts
; ===========================================================================
; loc_44D0:
InitPlayers_TailsAlone:
	move.b	#2,(MainCharacter).w ; load Obj02 Tails object at $FFFFB000
	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD100
	addi.w	#4,(MainCharacter+y_pos).w
	rts
; End of function InitPlayers





; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; (the closest match I could find to this subroutine in Sonic 1 is Obj1B_Action)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_44E4:
UpdateWaterSurface:
	tst.b	(Water_flag).w
	beq.s	return_450C
	move.w	(Camera_X_pos).w,d1
	btst	#0,($FFFFFE05).w
	beq.s	loc_44FA
	addi.w	#$20,d1

loc_44FA:	; match obj x-position to screen position
	move.w	d1,d0
	addi.w	#$60,d0
	move.w	d0,(Object_RAM+$380+x_pos).w
	addi.w	#$120,d1
	move.w	d1,(Object_RAM+$3C0+x_pos).w

return_450C:
	rts
; End of function UpdateWaterSurface


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ---------------------------------------------------------------------------
; Subroutine to do special water effects
; ---------------------------------------------------------------------------
; sub_450E: ; LZWaterEffects:
WaterEffects:
	tst.b	(Water_flag).w
	beq.s	loc_456A
	tst.b	($FFFFEEDC).w
	bne.s	MoveWater
	cmpi.b	#6,(MainCharacter+routine).w
	bcc.s	MoveWater
	bsr.w	DynamicWater
; loc_4526: ; LZMoveWater:
MoveWater:
	clr.b	(Water_move).w
	moveq	#0,d0
	cmpi.b	#$F,(Current_Zone).w	; is level ARZ?
	beq.s	+		; if yes, branch
	move.b	($FFFFFE60).w,d0
	lsr.w	#1,d0
+
	add.w	(Water_Level_2).w,d0
	move.w	d0,(Water_Level_1).w
	move.w	(Water_Level_1).w,d0
	sub.w	(Camera_Y_pos).w,d0
	bcc.s	loc_455C
	tst.w	d0
	bpl.s	loc_455C
	move.b	#$DF,($FFFFF625).w
	move.b	#1,(Water_move).w

loc_455C:
	cmpi.w	#$DF,d0
	bcs.s	loc_4566
	move.w	#$DF,d0

loc_4566:
	move.b	d0,($FFFFF625).w

loc_456A:
	cmpi.b	#$A,(Current_Zone).w	; is the level OOZ?
	bne.s	+			; if not, branch
	bsr.w	OilSlides		; call oil slide routine
+
	cmpi.b	#6,(Current_Zone).w	; is the level WFZ?
	bne.s	+			; if not, branch
	bsr.w	WindTunnel		; call wind and block break routine
+
	rts
; End of function WaterEffects

; ===========================================================================
; word_4584:
WaterHeight:
	dc.w  $600, $600, $600, $600
	dc.w  $600, $600, $600, $600
	dc.w  $600, $600, $600, $710
	dc.w  $600, $600, $410, $510

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_45A4: ; LZDynamicWater:
DynamicWater:
	moveq	#0,d0
	move.w	(Current_ZoneAndAct).w,d0
	subi.w	#$800,d0
	ror.b	#1,d0
	lsr.w	#6,d0
	andi.w	#$FFFE,d0
	move.w	(Dynamic_water_routine_table,pc,d0.w),d0
	jsr	(Dynamic_water_routine_table,pc,d0.w)
	moveq	#0,d1
	move.b	(Water_on).w,d1
	move.w	(Water_Level_3).w,d0
	sub.w	(Water_Level_2).w,d0
	beq.s	return_45D6
	bcc.s	loc_45D2
	neg.w	d1

loc_45D2:
	add.w	d1,(Water_Level_2).w

return_45D6:
	rts
; End of function DynamicWater

; ===========================================================================
; off_45D8:
Dynamic_water_routine_table:
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 0
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 1
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 2
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 3
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 4
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 5
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 6
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 7
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 8
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 9
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 10
	dc.w DynamicWaterCPZ2 - Dynamic_water_routine_table; 11 ; the only one that does anything
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 12
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 13
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 14
	dc.w DynamicWaterNull - Dynamic_water_routine_table; 15
; ===========================================================================
; return_45F8:
DynamicWaterNull:
	rts
; ===========================================================================
; loc_45FA:
DynamicWaterCPZ2:
	cmpi.w	#$1DE0,(Camera_X_pos).w
	bcs.s	+
	move.w	#$510,(Water_Level_3).w
+
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_460A:
WindTunnel:
	tst.w	(Debug_placement_mode).w
	bne.w	return_46A6
	lea	(word_46A8).l,a2
	moveq	#1,d1
	lea	(MainCharacter).w,a1 ; a1=character

loc_461E:
	move.w	x_pos(a1),d0
	cmp.w	(a2),d0
	bcs.w	loc_4690
	cmp.w	4(a2),d0
	bcc.w	loc_4690
	move.w	y_pos(a1),d2
	cmp.w	2(a2),d2
	bcs.w	loc_4690
	cmp.w	6(a2),d2
	bcc.s	loc_4690
	tst.b	($FFFFF7C9).w
	bne.w	return_46A6
	cmpi.b	#4,routine(a1)
	bcc.s	loc_46A2
	move.b	#1,($FFFFF7C7).w
	subi.w	#4,x_pos(a1)
	move.w	#-$400,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.b	#$F,anim(a1)
	bset	#1,status(a1)
	btst	#0,(Ctrl_1_Held).w
	beq.s	+
	subq.w	#1,y_pos(a1)
+
	btst	#1,(Ctrl_1_Held).w
	beq.s	+
	addq.w	#1,y_pos(a1)
+
	rts
; ===========================================================================

loc_4690:
	addq.w	#8,a2
	dbf	d1,loc_461E

	tst.b	($FFFFF7C7).w
	beq.s	return_46A6
	move.b	#0,anim(a1)

loc_46A2:
	clr.b	($FFFFF7C7).w

return_46A6:
	rts
; End of function WindTunnel

; ===========================================================================
word_46A8:
	dc.w $1510,$400	; 1
	dc.w $1AF0,$580	; 3
	dc.w $20F0,$618	; 5
	dc.w $2500,$680	; 7

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_46B8:
OilSlides:
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	(Ctrl_1_Held_Logical).w,d2
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
	move.b	(Ctrl_2_Held_Logical).w,d2
+
	btst	#1,status(a1)
	bne.s	loc_46FE
	move.w	y_pos(a1),d0
	add.w	d0,d0
	andi.w	#$F00,d0
	move.w	x_pos(a1),d1
	lsr.w	#7,d1
	andi.w	#$7F,d1
	add.w	d1,d0
	lea	(Level_Layout).w,a2
	move.b	(a2,d0.w),d0
	lea	MoveSonicInDemo(pc),a2
	moveq	#$1F,d1

loc_46F6:
	cmp.b	-(a2),d0
	dbeq	d1,loc_46F6
	beq.s	loc_4712

loc_46FE:
	tst.b	status_secondary(a1)
	bpl.s	return_4710
	move.w	#5,move_lock(a1)
	andi.b	#$7F,status_secondary(a1)

return_4710:
	rts
; ===========================================================================

loc_4712:
	lea	(byte_47DE).l,a2
	move.b	(a2,d1.w),d0
	beq.s	loc_476E
	move.b	inertia(a1),d1
	tst.b	d0
	bpl.s	loc_4732
	cmp.b	d0,d1
	ble.s	loc_473C
	subi.w	#$40,inertia(a1)
	bra.s	loc_473C
; ===========================================================================

loc_4732:
	cmp.b	d0,d1
	bge.s	loc_473C
	addi.w	#$40,inertia(a1)

loc_473C:
	bclr	#0,status(a1)
	tst.b	d1
	bpl.s	loc_474C
	bset	#0,status(a1)

loc_474C:
	move.b	#$1B,anim(a1)
	ori.b	#$80,status_secondary(a1)
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	return_476C
	move.w	#$F0,d0
	jsr	(PlaySound).l

return_476C:
	rts
; ===========================================================================

loc_476E:
	move.w	#4,d1
	move.w	inertia(a1),d0
	btst	#2,d2
	beq.s	loc_4790
	move.b	#0,anim(a1)
	bset	#0,status(a1)
	sub.w	d1,d0
	tst.w	d0
	bpl.s	loc_4790
	sub.w	d1,d0

loc_4790:
	btst	#3,d2
	beq.s	loc_47AA
	move.b	#0,anim(a1)
	bclr	#0,status(a1)
	add.w	d1,d0
	tst.w	d0
	bmi.s	loc_47AA
	add.w	d1,d0

loc_47AA:
	move.w	#4,d1
	tst.w	d0
	beq.s	loc_47D2
	bmi.s	loc_47C4
	sub.w	d1,d0
	bhi.s	+
	move.w	#0,d0
	move.b	#5,anim(a1)
+
	bra.s	loc_47D2
; ===========================================================================

loc_47C4:
	add.w	d1,d0
	bhi.s	loc_47D2
	move.w	#0,d0
	move.b	#5,anim(a1)

loc_47D2:

	move.w	d0,inertia(a1)
	ori.b	#$80,status_secondary(a1)
	rts
; End of function OilSlides

; ===========================================================================
byte_47DE:
	dc.b  -8, -8, -8,  8,  8,  0,  0,  0, -8, -8,  0,  8,  8,  8,  0,  8
	dc.b   8,  8,  0, -8,  0,  0, -8,  8, -8, -8, -8,  8,  8,  8, -8, -8; 16
	dc.b $2F,$30,$31,$33,$35,$38,$3A,$3C,$63,$64,$83,$90,$91,$93,$A1,$A3; 32
	dc.b $BD,$C7,$C8,$CE,$D7,$D8,$E6,$EB,$EC,$ED,$F1,$F2,$F3,$F4,$FA,$FD; 48




; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_481E:
MoveSonicInDemo:
	tst.w	(Demo_mode_flag).w	; is demo mode on?
	bne.w	MoveDemo_On	; if yes, branch
	rts
; ---------------------------------------------------------------------------
; demo recording routine
; (unused/dead code, but obviously used during development)
; ---------------------------------------------------------------------------
; MoveDemo_Record: loc_4828:
	; calculate output location of recorded player 1 demo?
	lea	(DemoScriptPointers).l,a1
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	lsl.w	#2,d0
	movea.l	(a1,d0.w),a1
	move.w	(Demo_button_index).w,d0
	adda.w	d0,a1

	move.b	(Ctrl_1_Held).w,d0	; load input of player 1
	cmp.b	(a1),d0		; is same button held?
	bne.s	loc_4856	; if not, branch
	addq.b	#1,1(a1)	; increment press length counter
	cmpi.b	#$FF,1(a1)	; is button held too long?
	beq.s	loc_4856	; if yes, branch
	bra.s	MoveDemo_Record_P2	; go to player 2
; ===========================================================================

loc_4856:
	move.b	d0,2(a1)	; store last button press
	move.b	#0,3(a1)	; reset hold length counter
	addq.w	#2,(Demo_button_index).w ; advance to next button press
	andi.w	#$3FF,(Demo_button_index).w ; wrap at max button press changes 1024
; loc_486A:
MoveDemo_Record_P2:
	cmpi.b	#0,(Current_Zone).w
	bne.s	return_48A8
	lea	($FEC000).l,a1	; output location of recorded player 2 demo? (unknown)
	move.w	(Demo_button_index_2P).w,d0
	adda.w	d0,a1
	move.b	(Ctrl_2_Held).w,d0	; load input of player 2
	cmp.b	(a1),d0		; is same button held?
	bne.s	loc_4894	; if not, branch
	addq.b	#1,1(a1)	; increment press length counter
	cmpi.b	#$FF,1(a1)	; is button held too long?
	beq.s	loc_4894	; if yes, branch
	bra.s	return_48A8
; ===========================================================================

loc_4894:
	move.b	d0,2(a1)	; store last button press
	move.b	#0,3(a1)	; reset hold length counter
	addq.w	#2,(Demo_button_index_2P).w ; advance to next button press
	andi.w	#$3FF,(Demo_button_index_2P).w ; wrap at max button press changes 1024

return_48A8:
	rts
	; end of inactive recording code
; ===========================================================================
	; continue with MoveSonicInDemo:

; loc_48AA:
MoveDemo_On:
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	beq.s	loc_48C4
	tst.w	(Demo_mode_flag).w
	bmi.s	loc_48C4
	move.b	#4,(Game_Mode).w ; => TitleScreen

loc_48C4:
	lea	(DemoScriptPointers).l,a1 ; load pointer to input data
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
	bne.s	MoveDemo_On_P1		; if yes, branch
	moveq	#6,d0
; loc_48DA:
MoveDemo_On_P1:
	lsl.w	#2,d0
	movea.l	(a1,d0.w),a1

	move.w	(Demo_button_index).w,d0
	adda.w	d0,a1	; a1 now points to the current button press data
	move.b	(a1),d0	; load button press
	lea	(Ctrl_1_Held).w,a0
	move.b	d0,d1
	moveq	#0,d2 ; this was modified from (a0) to #0 in Rev01 of Sonic 1 to nullify the following line
	eor.b	d2,d0	; does nothing now (used to let you hold a button to prevent Sonic from jumping in demos)
	move.b	d1,(a0)+ ; save button press data from demo to Ctrl_1_Held
	and.b	d1,d0	; does nothing now
	move.b	d0,(a0)+ ; save the same thing to Ctrl_1_Press
	subq.b	#1,(Demo_press_counter).w  ; decrement counter until next press
	bcc.s	MoveDemo_On_P2	   ; if it isn't 0 yet, branch
	move.b	3(a1),(Demo_press_counter).w ; reset counter to length of next press
	addq.w	#2,(Demo_button_index).w ; advance to next button press
; loc_4908:
MoveDemo_On_P2:
	cmpi.b	#0,(Current_Zone).w
	bne.s	MoveDemo_On_SkipP2 ; if it's not the EHZ demo, branch to skip player 2
	lea	(Demo_EHZ_Tails).l,a1

	; same as the corresponding remainder of MoveDemo_On_P1, but for player 2
	move.w	(Demo_button_index_2P).w,d0
	adda.w	d0,a1
	move.b	(a1),d0
	lea	(Ctrl_2_Held).w,a0
	move.b	d0,d1
	moveq	#0,d2
	eor.b	d2,d0
	move.b	d1,(a0)+
	and.b	d1,d0
	move.b	d0,(a0)+
	subq.b	#1,(Demo_press_counter_2P).w
	bcc.s	return_493E
	move.b	3(a1),(Demo_press_counter_2P).w
	addq.w	#2,(Demo_button_index_2P).w

return_493E:
	rts
; ===========================================================================
; loc_4940:
MoveDemo_On_SkipP2:
	move.w	#0,(Ctrl_2).w
	rts
; End of function MoveSonicInDemo

; ===========================================================================
; ---------------------------------------------------------------------------
; DEMO SCRIPT POINTERS

; Contains an array of pointers to the script controlling the players actions
; to use for each level.
; ---------------------------------------------------------------------------
; off_4948:
DemoScriptPointers:
	dc.l Demo_EHZ	; $00
	dc.l Demo_EHZ	; $01
	dc.l Demo_EHZ	; $02
	dc.l Demo_EHZ	; $03
	dc.l Demo_EHZ	; $04
	dc.l Demo_EHZ	; $05
	dc.l Demo_EHZ	; $06
	dc.l Demo_EHZ	; $07
	dc.l Demo_EHZ	; $08
	dc.l Demo_EHZ	; $09
	dc.l Demo_EHZ	; $0A
	dc.l Demo_EHZ	; $0B
	dc.l Demo_CNZ	; $0C
	dc.l Demo_CPZ	; $0D
	dc.l Demo_EHZ	; $0E
	dc.l Demo_ARZ	; $0F
	dc.l Demo_EHZ	; $10
; ---------------------------------------------------------------------------
dword_498C:
	dc.l   $8B0837
	dc.l   $42085C	; 1
	dc.l   $6A085F	; 2
	dc.l   $2F082C	; 3
	dc.l   $210803	; 4
	dc.l $28300808	; 5
	dc.l   $2E0815	; 6
	dc.l	$F0846	; 7
	dc.l   $1A08FF	; 8
	dc.l  $8CA0000	; 9
	dc.l	     0	; 10
	dc.l	     0	; 11




; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_49BC:
LoadCollisionIndexes:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	lsl.w	#2,d0
	move.l	#Primary_Collision,(Collision_addr).w
	move.w	d0,-(sp)
	movea.l	Off_ColP(pc,d0.w),a0
	lea	(Primary_Collision).w,a1
	bsr.w	KosDec
	move.w	(sp)+,d0
	movea.l	Off_ColS(pc,d0.w),a0
	lea	(Secondary_Collision).w,a1
	bra.w	KosDec
; End of function LoadCollisionIndexes

; ===========================================================================
; ---------------------------------------------------------------------------
; Pointers to primary collision indexes

; Contains an array of pointers to the primary collision index data for each
; level. 1 pointer for each level, pointing the primary collision index.
; ---------------------------------------------------------------------------
Off_ColP:
	dc.l ColP_EHZHTZ
	dc.l Off_Level		; 1
	dc.l ColP_MTZ		; 2
	dc.l Off_Level		; 3
	dc.l ColP_MTZ		; 4
	dc.l ColP_MTZ		; 5
	dc.l ColP_WFZSCZ	; 6
	dc.l ColP_EHZHTZ	; 7
	dc.l ColP_OOZ		; 8
	dc.l Off_Level		; 9
	dc.l ColP_OOZ		; 10
	dc.l ColP_MCZ		; 11
	dc.l ColP_CNZ		; 12
	dc.l ColP_CPZDEZ	; 13
	dc.l ColP_CPZDEZ	; 14
	dc.l ColP_ARZ		; 15
	dc.l ColP_WFZSCZ	; 16
; ---------------------------------------------------------------------------
; Pointers to secondary collision indexes

; Contains an array of pointers to the secondary collision index data for
; each level. 1 pointer for each level, pointing the secondary collision
; index.
; ---------------------------------------------------------------------------
Off_ColS:
	dc.l ColS_EHZHTZ
	dc.l Off_Level	; 1
	dc.l ColP_MTZ	; 2
	dc.l Off_Level	; 3
	dc.l ColP_MTZ	; 4
	dc.l ColP_MTZ	; 5
	dc.l ColS_WFZSCZ	; 6
	dc.l ColS_EHZHTZ	; 7
	dc.l ColP_OOZ	; 8
	dc.l Off_Level	; 9
	dc.l ColP_OOZ	; 10
	dc.l ColP_MCZ	; 11
	dc.l ColS_CNZ	; 12
	dc.l ColS_CPZDEZ	; 13
	dc.l ColS_CPZDEZ	; 14
	dc.l ColS_ARZ	; 15
	dc.l ColS_WFZSCZ	; 16




; ---------------------------------------------------------------------------
; Oscillating number subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4A70:
OscillateNumInit:
	lea	($FFFFFE5E).w,a1
	lea	(Osc_Data).l,a2
	moveq	#$20,d1
; loc_4A7C:
Osc_Loop:
	move.w	(a2)+,(a1)+
	dbf	d1,Osc_Loop
	rts
; End of function OscillateNumInit

; ===========================================================================
; word_4A84:
Osc_Data:
	dc.w   $7D, $80	; baseline values
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $80
	dc.w	 0, $3848
	dc.w   $EE, $2080
	dc.w   $B4, $3080
	dc.w  $10E, $5080
	dc.w  $1C2, $7080
	dc.w  $276, $80
	dc.w	 0, $4000
	dc.w   $FE

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4AC6:
OscillateNumDo:
	tst.w	(Two_player_mode).w
	bne.s	+
	cmpi.b	#6,(MainCharacter+routine).w
	bcc.s	return_4B22
+	lea	($FFFFFE5E).w,a1
	lea	(Osc_Data2).l,a2
	move.w	(a1)+,d3
	moveq	#$F,d1

loc_4AE2:
	move.w	(a2)+,d2
	move.w	(a2)+,d4
	btst	d1,d3
	bne.s	loc_4B02
	move.w	2(a1),d0
	add.w	d2,d0
	move.w	d0,2(a1)
	_add.w	d0,0(a1)
	_cmp.b	0(a1),d4
	bhi.s	loc_4B18
	bset	d1,d3
	bra.s	loc_4B18
; ===========================================================================

loc_4B02:
	move.w	2(a1),d0
	sub.w	d2,d0
	move.w	d0,2(a1)
	_add.w	d0,0(a1)
	_cmp.b	0(a1),d4
	bls.s	loc_4B18
	bclr	d1,d3

loc_4B18:
	addq.w	#4,a1
	dbf	d1,loc_4AE2
	move.w	d3,($FFFFFE5E).w

return_4B22:
	rts
; End of function OscillateNumDo

; ===========================================================================
; word_4B24:
Osc_Data2:
	dc.w	 2, $10
	dc.w	 2, $18
	dc.w	 2, $20
	dc.w	 2, $30
	dc.w	 4, $20
	dc.w	 8,   8
	dc.w	 8, $40
	dc.w	 4, $40
	dc.w	 2, $38
	dc.w	 2, $38
	dc.w	 2, $20
	dc.w	 3, $30
	dc.w	 5, $50
	dc.w	 7, $70
	dc.w	 2, $40
	dc.w	 2, $40




; ---------------------------------------------------------------------------
; Subroutine to change global object animation variables (like rings)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4B64:
ChangeRingFrame:
	subq.b	#1,(Logspike_anim_counter).w
	bpl.s	+
	move.b	#$B,(Logspike_anim_counter).w
	subq.b	#1,(Logspike_anim_frame).w ; animate unused log spikes
	andi.b	#7,(Logspike_anim_frame).w
+
	subq.b	#1,(Rings_anim_counter).w
	bpl.s	+
	move.b	#7,(Rings_anim_counter).w
	addq.b	#1,(Rings_anim_frame).w ; animate rings in the level (obj25)
	andi.b	#3,(Rings_anim_frame).w
+
	subq.b	#1,(Unknown_anim_counter).w
	bpl.s	+
	move.b	#7,(Unknown_anim_counter).w
	addq.b	#1,(Unknown_anim_frame).w ; animate nothing (deleted special stage object is my best guess)
	cmpi.b	#6,(Unknown_anim_frame).w
	bcs.s	+
	move.b	#0,(Unknown_anim_frame).w
+
	tst.b	(Ring_spill_anim_counter).w
	beq.s	+	; rts
	moveq	#0,d0
	move.b	(Ring_spill_anim_counter).w,d0
	add.w	(Ring_spill_anim_accum).w,d0
	move.w	d0,(Ring_spill_anim_accum).w
	rol.w	#7,d0
	andi.w	#3,d0
	move.b	d0,(Ring_spill_anim_frame).w ; animate scattered rings (obj37)
	subq.b	#1,(Ring_spill_anim_counter).w
+
	rts
; End of function ChangeRingFrame




; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4BD2:
SetLevelEndType:
	move.w	#0,(Level_Has_Signpost).w	; set level type to non-signpost
	tst.w	(Two_player_mode).w	; is it two-player competitive mode?
	bne.s	LevelEnd_SetSignpost	; if yes, branch
	cmpi.w	#$001,(Current_ZoneAndAct).w
	beq.w	return_4C46		; if EHZ2, return
	cmpi.w	#$500,(Current_ZoneAndAct).w
	beq.w	return_4C46		; if MTZ3, return
	cmpi.w	#$600,(Current_ZoneAndAct).w
	beq.w	return_4C46		; if WFZ, return
	cmpi.w	#$701,(Current_ZoneAndAct).w
	beq.w	return_4C46		; if HTZ2, return
	cmpi.w	#$A01,(Current_ZoneAndAct).w
	beq.w	return_4C46		; if OOZ2, return
	cmpi.w	#$B01,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if MCZ2, return
	cmpi.w	#$C01,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if CNZ2, return
	cmpi.w	#$D01,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if CPZ2, return
	cmpi.w	#$E00,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if DEZ, return
	cmpi.w	#$F01,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if ARZ2, return
	cmpi.w	#$1000,(Current_ZoneAndAct).w
	beq.s	return_4C46		; if SCZ, return

; loc_4C40:
LevelEnd_SetSignpost:
	move.w	#1,(Level_Has_Signpost).w	; set level type to signpost

return_4C46:
	rts
; End of function SetLevelEndType


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4C48:
CheckLoadSignpostArt:
	tst.w	(Level_Has_Signpost).w
	beq.s	return_4CA6
	tst.w	(Debug_placement_mode).w
	bne.s	return_4CA6
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Max_X_pos).w,d1
	subi.w	#$100,d1
	cmp.w	d1,d0
	blt.s	SignpostUpdateTailsBounds
	tst.b	(Update_HUD_timer).w
	beq.s	SignpostUpdateTailsBounds
	cmp.w	(Camera_Min_X_pos).w,d1
	beq.s	SignpostUpdateTailsBounds
	move.w	d1,(Camera_Min_X_pos).w ; prevent camera from scrolling back to the left
	tst.w	(Two_player_mode).w
	bne.s	return_4CA6
	moveq	#$27,d0 ; <== PLC_1F
	bra.w	LoadPLC2		; load signpost art
; ---------------------------------------------------------------------------
; loc_4C80:
SignpostUpdateTailsBounds:
	tst.w	(Two_player_mode).w
	beq.s	return_4CA6
	move.w	($FFFFEE20).w,d0
	move.w	(Tails_Max_X_pos).w,d1
	subi.w	#$100,d1
	cmp.w	d1,d0
	blt.s	return_4CA6
	tst.b	(Update_HUD_timer_2P).w
	beq.s	return_4CA6
	cmp.w	(Tails_Min_X_pos).w,d1
	beq.s	return_4CA6
	move.w	d1,(Tails_Min_X_pos).w ; prevent Tails from going past new left boundary

return_4CA6:
	rts
; End of function CheckLoadSignpostArt




; ===========================================================================
; ---------------------------------------------------------------------------
; EHZ Demo Script (Sonic)
; ---------------------------------------------------------------------------
	; buttons,duration, buttons,duration, buttons,duration, etc.
; byte_4CA8: Demo_Def:
Demo_EHZ:
	dc.b   0,$4B,  8,$42,$28,  8,  8,$3E,$28,  5,  8,$AF,$28,  9,  8,$45
	dc.b   0,$1D,  4, $E,  0,  4,  4,  4,  0,  8,  4,$3E,  0,  4,  8,$66
	dc.b   0,$61,  8,$11,  0,$21,  2,  7,$22,  6,  2, $D,  0,$3B,  8,  9
	dc.b   0,$1D,  2,  6,$22,  6,  2,  1,  0, $E,  8,$FF,  8,$2E,  0,$22
	dc.b $20,  7,$28, $F,  8,  2,  0,$2F,$28,$23,  8,$BD,  0, $B,  4,$13
	dc.b   0,$16,  2,  2,$22,  6,  2,  2,  0,$63,$80,  0,$40,  0,  0,  0
; ---------------------------------------------------------------------------
; EHZ Demo Script (Tails)
; ---------------------------------------------------------------------------
; byte_4D08:
Demo_EHZ_Tails:
	dc.b   0,$3B,  8, $F,  9,$43,$29,  6,  9,  6,  8,$C9,  0,$11,  8,  1
	dc.b $28,  8,  8,$52,  0,$11,  8, $A,$28, $E,  8,$23,  0, $A,$20,  4
	dc.b   0, $D,  8,$55,  0,$1E,  8,$5A,  0,$10,  8,$FF,  8,$C0,  0,$20
	dc.b   4, $D,  0, $D,$20,  4,$28, $F,$20,  5,  0, $C,  4,  5,  0,$5E
	dc.b   8,$73,  0,$18,  4,$44,  0,  8,  2,$30,  0,  8,  8, $D,  0,$23
	dc.b   8,$27,  0,  4,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
; ---------------------------------------------------------------------------
; CNZ Demo Script
; ---------------------------------------------------------------------------
Demo_CNZ:
	dc.b   0,$48,  8,$10,  9,  0,  8,  1,  9,  6,  8,$60,$28,  5,$20,  1
	dc.b   0,  8,  4,  2,  6,  3,  4,  1,  0,$19,  8,$11,$28,$19,$20,  4
	dc.b $28,$23,  8,$1A,  0,  7,  4,$10,  0, $E,  8,$77,$28,$16,$20,  0
	dc.b   0, $F,  4,$11,  0,  7,  8,$52,  0,$6F,  8,$74,  0,$37,  8,$16
	dc.b   0,  4,  4,$26,  0, $C,  4,$12,  0,$69,$20,$10,$28,  2,$2A,  5
	dc.b  $A,$14,  8,  5,  0,  5,  4, $C,  0,$48,  4,  9,  0,$1E,  8,  6
	dc.b   0,$2F,  4,  1,  0,$FF,  0,$4F,  8,  0,$28, $B,  8,$2A,  0,$5E
; ---------------------------------------------------------------------------
; CPZ Demo Script
; ---------------------------------------------------------------------------
Demo_CPZ:
	dc.b   0,$46,  8,$1B,$28,  7,  8,  9,  0,$1B,  8, $D,$28,$28,  8,$FF
	dc.b   8,$E7, $A,  4,  2,  1,  4,$33,  6,$67,  4,  0,  0,$15,$20,  0
	dc.b $24,  7,  4, $E,  0,$17,  8,  1, $A,  1,  8, $C,  0,$1F,$28,  6
	dc.b   8, $A,  0,$1B,  4, $D,  0,$1C,  4,  6,  0,$FF,  0,$DF,  8, $E
	dc.b   0,$1C,  4,  2,  0,$25,  8,  6,  0,  6,$20,  4,  0,$28,  4,$11
	dc.b   0,$17,  8,$19,  0,$10,  4,$2D,  0,$13,$80,  0,$40,  0,  0,  0
; ---------------------------------------------------------------------------
; ARZ Demo Script
; ---------------------------------------------------------------------------
Demo_ARZ:
	dc.b   0,$42,  8,$4A,$28,  8,  8,$4F,$28, $B,  8,  5,  0,$1A,  8,$60
	dc.b $28,$14,  8,$54,  0,$40,  8,  4,  9,  0,  8,$5B,  0,$46,  8,$3B
	dc.b $28,  8,  8,$27,  0, $A,  8,$92,$28,$32,  8,$22,  0,$22,  8,$4C
	dc.b   0,$1E,  4,  1,  5,  2,  4,  0,  0, $A,  4, $C,  0,$10,  8,  5
	dc.b   0,$61,  8,  3,$28,  5,  8,$16,  0,$1B,  8,$56,$28, $A,  8,$16
	dc.b   0,$15,  8, $C,  0,$2B,$20,  1,$28,$1A,  8,$82,  0, $B,$80,  0

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||




sub_4E98:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	lea	(LevelArtPointers).l,a2
	lea	(a2,d0.w),a2
	move.l	(a2)+,d0
	andi.l	#$FFFFFF,d0
	movea.l	d0,a0
	lea	(Metablock_Table).l,a1
	bsr.w	KosDec
	move.w	a1,d3
	cmpi.b	#7,(Current_Zone).w
	bne.s	loc_4EE4
	lea	(ArtKos_HTZ).l,a0
	lea	($FFFF3F80).l,a1
	bsr.w	KosDec
	move.w	#$6FC0,d3

loc_4EE4:
	cmpi.b	#6,(Current_Zone).w
	bne.s	loc_4F00
	lea	(ArtKos_WFZ).l,a0
	lea	($FFFF60E0).l,a1
	bsr.w	KosDec
	move.w	#$6F20,d3

loc_4F00:
	cmpi.b	#$E,(Current_Zone).w
	bne.s	loc_4F0C
	move.w	#$64C0,d3

loc_4F0C:
	move.w	d3,d7
	andi.w	#$FFF,d3
	lsr.w	#1,d3
	rol.w	#4,d7
	andi.w	#$F,d7

loc_4F1A:
	move.w	d7,d2
	lsl.w	#7,d2
	lsl.w	#5,d2
	move.l	#$FFFFFF,d1
	move.w	d2,d1
	jsr	(QueueDMATransfer).l
	move.w	d7,-(sp)
	move.b	#$C,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	RunPLC_RAM
	move.w	(sp)+,d7
	move.w	#$800,d3
	dbf	d7,loc_4F1A
	rts
; End of function sub_4E98

; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loadZoneBlockMaps 
	jmp	loadZoneBlockMaps.l
; End of function JmpTo_loadZoneBlockMaps


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4F52:
JmpTo_DeformBgLayer 

	jmp	DeformBgLayer.l
; End of function JmpTo_DeformBgLayer


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_3FCC4 

	jmp	loc_3FCC4.l
; End of function JmpTo_loc_3FCC4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_E300 
	jmp	loc_E300.l
; End of function JmpTo_loc_E300

; ===========================================================================
; loc_4F64:
SpecialStage:
	cmpi.b	#7,(Current_Special_Stage).w
	bcs.s	+
	move.b	#0,(Current_Special_Stage).w
+	move.w	#$4A+$80,d0 ; play that funky special stage entry sound
	bsr.w	PlaySound
	move.b	#$79+$80,d0 ; fade out the music
	bsr.w	PlayMusic
	bsr.w	Pal_MakeFlash
	tst.w	(Two_player_mode).w
	beq.s	loc_4F98
	move.w	#0,(Two_player_mode).w
	st	(System_Stack).w ; set to -1
	bra.s	loc_4F9C
; ===========================================================================

loc_4F98:
	sf	(System_Stack).w ; set to 0
; (!)
loc_4F9C:
	move	#$2700,sr		; Mask all interrupts
	lea	(VDP_control_port).l,a6
	move.w	#$8B03,(a6)		; EXT-INT disabled, V scroll by screen, H scroll by line
	move.w	#$8004,(a6)		; H-INT disabled
	move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 224th scanline
	move.w	#$8230,(a6)		; PNT A base: $C000
	move.w	#$8405,(a6)		; PNT B base: $A000
	move.w	#$8C08,(a6)		; H res 32 cells, no interlace, S/H enabled
	move.w	#$9003,(a6)		; Scroll table size: 128x32
	move.w	#$8700,(a6)		; Background palette/color: 0/0
	move.w	#$8D3F,(a6)		; H scroll table base: $FC00
	move.w	#$857C,(a6)		; Sprite attribute table base: $F800
	move.w	($FFFFF60C).w,d0
	andi.b	#$BF,d0
	move.w	d0,(VDP_control_port).l

; /------------------------------------------------------------------------\
; | We're gonna zero-fill a bunch of VRAM regions. This was done by macro, |
; | so there's gonna be a lot of wasted cycles.                            |
; \------------------------------------------------------------------------/

	dmaFillVRAM 0,$8000,$2000 ; clear Plane A pattern name table 1
	dmaFillVRAM 0,$C000,$2000 ; clear Plane A pattern name table 2
	dmaFillVRAM 0,$A000,$2000 ; clear Plane B pattern name table
	dmaFillVRAM 0,$FC00,$380  ; clear Horizontal scroll table

	clr.l	(Vscroll_Factor).w
	clr.l	($FFFFF61A).w
	clr.b	($FFFFDB23).w

; /------------------------------------------------------------------------\
; | Now we clear out some regions in main RAM where we want to store some  |
; | of our data structures.                                                |
; \------------------------------------------------------------------------/
	clearRAM Sprite_Table,$284	; Sprite attribute table buffer
	clearRAM Horiz_Scroll_Buf,$404	; H scroll table buffer, $404 bytes
	clearRAM PNT_Buffer,$C04	; PNT buffer
	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2000

	move	#$2300,sr
	lea	(VDP_control_port).l,a6
	move.w	#$8F02,(a6)		; VRAM pointer increment: $0002
	bsr.w	ssInitTableBuffers
	bsr.w	ssLdComprsdData
	move.w	#0,($FFFFDB0A).w
	moveq	#$3C,d0
	bsr.w	RunPLC_ROM
	clr.b	(Level_started_flag).w
	move.l	#0,(Camera_X_pos).w	; probably means something else in this context
	move.l	#0,(Camera_Y_pos).w
	move.l	#0,($FFFFEEF0).w
	move.l	#0,($FFFFEEF4).w
	cmpi.w	#1,(Player_mode).w
	bgt.s	loc_514C
	move.b	#9,(MainCharacter).w ; load Obj09 (special stage Sonic)
	tst.w	(Player_mode).w
	bne.s	loc_5152

loc_514C:
	move.b	#$10,(Sidekick).w ; load Obj10 (special stage Tails)

loc_5152:
	move.b	#$5E,(Object_RAM+$80).w ; load Obj5E (special stage HUD)
	move.b	#$5F,(Object_RAM+$C0).w ; load Obj5F (special stage banner)
	move.b	#$87,(Object_RAM+$100).w ; load Obj87 (special stage ring count)
	move.w	#$80,($FFFFF73E).w
	move.w	#$36,($FFFFF740).w
	bsr.w	sub_6D52
	bsr.w	sub_6DD4
	bsr.w	sub_77A2
	move.l	#$C0000,($FFFFDB12).w
	clr.w	(Ctrl_1_Logical).w
	clr.w	(Ctrl_2_Logical).w

-	move.b	#$A,(Delay_Time).w
	bsr.w	DelayProgram
	move.b	($FFFFDB0D).w,d0
	bne.s	-

	bsr.w	sub_5604

-	move.b	#$A,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	sub_5604
	bsr.w	sub_5514
	bsr.w	sub_5534
	move.b	($FFFFDB1F).w,d0
	subq.w	#1,d0
	bne.s	-
	
	jsr	(loc_3561E).l
	bsr.w	sub_6DE4
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	move.b	#$1A,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	#$92,d0
	bsr.w	PlayMusic
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_MakeWhite

-	bsr.w	PauseGame
	move.w	(Ctrl_1).w,(Ctrl_1_Logical).w
	move.w	(Ctrl_2).w,(Ctrl_2_Logical).w
	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
	bne.w	loc_541A		; if yes, branch
	move.b	#$A,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	sub_5604
	bsr.w	sub_7650
	bsr.w	sub_5514
	bsr.w	sub_5534
	bsr.w	sub_6DE4
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	tst.b	($FFFFDB23).w
	beq.s	-

	moveq	#$3D,d0
	bsr.w	LoadPLC

loc_5250:
	bsr.w	PauseGame
	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
	bne.w	loc_541A		; if yes, branch
	move.b	#$A,(Delay_Time).w
	bsr.w	DelayProgram
	bsr.w	sub_5604
	bsr.w	sub_7650
	bsr.w	sub_5514
	bsr.w	sub_5534
	bsr.w	sub_6DE4
	bsr.w	sub_543A
	tst.b	($FFFFDB87).w
	beq.s	loc_52A0
	move.w	(Ctrl_1).w,d0
	andi.w	#$8080,d0
	move.w	d0,(Ctrl_1_Logical).w
	move.w	(Ctrl_2).w,d0
	andi.w	#$8080,d0
	move.w	d0,(Ctrl_2_Logical).w
	bra.s	loc_52AC
; ===========================================================================

loc_52A0:
	move.w	(Ctrl_1).w,(Ctrl_1_Logical).w
	move.w	(Ctrl_2).w,(Ctrl_2_Logical).w

loc_52AC:
	jsr	(RunObjects).l
	tst.b	($FFFFDB86).w
	bne.s	loc_52C4
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	bra.s	loc_5250
; ===========================================================================

loc_52C4:
	andi.b	#7,(Emerald_count).w
	tst.b	(System_Stack).w
	beq.s	loc_52E2
	lea	($FFFFFFA0).w,a0
	move.w	(a0)+,d0
	add.w	(a0)+,d0
	add.w	(a0)+,d0
	add.w	(a0)+,d0
	add.w	(a0)+,d0
	add.w	(a0)+,d0
	bra.s	loc_52EA
; ===========================================================================

loc_52E2:
	move.w	(Ring_count).w,d0
	add.w	(Ring_count_2P).w,d0

loc_52EA:
	cmp.w	($FFFFDB9A).w,d0
	bne.s	loc_52F4
	st	($FFFFFF42).w

loc_52F4:
	bsr.w	Pal_MakeFlash
	tst.w	(Two_player_mode_copy).w
	bne.w	loc_540C
	move	#$2700,sr
	lea	(VDP_control_port).l,a6
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$9001,(a6)
	move.w	#$8C81,(a6)
	bsr.w	ClearScreen
	bsr.w	JmpTo_Hud_Base
	clr.w	(VDP_Command_Buffer).w
	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
	move	#$2300,sr
	moveq	#$27,d0
	bsr.w	PalLoad2
	moveq	#0,d0
	bsr.w	LoadPLC2
	move.l	#$40400000,d0
	lea	word_7822(pc),a0
	bsr.w	JmpTo_loc_157A4
	move.l	#$72000002,(VDP_control_port).l
	lea	(ArtNem_SpecialStageResults).l,a0
	bsr.w	NemDec
	move.w	(Player_mode).w,d0
	beq.s	loc_5374
	subq.w	#1,d0
	beq.s	loc_5370
	clr.w	(Ring_count).w
	bra.s	loc_5374
; ===========================================================================

loc_5370:
	clr.w	(Ring_count_2P).w

loc_5374:

	move.w	(Ring_count).w,(Bonus_Countdown_1).w
	move.w	(Ring_count_2P).w,(Bonus_Countdown_2).w
	clr.w	($FFFFFF8E).w
	tst.b	(Got_Emerald).w
	beq.s	loc_5390
	move.w	#1000,($FFFFFF8E).w

loc_5390:
	move.b	#1,(Update_HUD_score).w
	move.b	#1,(Update_Bonus_score).w
	move.w	#$9A,d0
	jsr	(PlaySound).l

	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2000

	move.b	#$6F,(Object_RAM+$800).w ; load Obj6F (special stage results) at $FFFFB800

loc_53CC:

	move.b	#8,(Delay_Time).w
	bsr.w	DelayProgram
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	tst.w	(Level_Inactive_flag).w
	beq.s	loc_53CC
	tst.l	(Plc_Buffer).w
	bne.s	loc_53CC
	move.w	#$CA,d0
	bsr.w	PlaySound
	bsr.w	Pal_MakeFlash
	tst.w	(Two_player_mode_copy).w
	bne.s	loc_540C
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	rts
; ===========================================================================

loc_540C:
	move.w	#3,(Results_Screen_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	rts
; ===========================================================================

loc_541A:
	move.b	#-1,(Music_to_play).w
	move.b	#8,(Delay_Time).w
	bra.w	DelayProgram




; ===========================================================================
; ---------------------------------------------------------------------------
; Animated color of the twinking stars in the special stage background
; ---------------------------------------------------------------------------
; loc_542A: Pal_UNK8:
Pal_SpecialStageStars:	dc.w  $EEE, $CCC, $AAA,	$888, $888, $AAA, $CCC,	$EEE

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_543A:
	move.b	($FFFFFE0F).w,d0
	andi.b	#3,d0
	bne.s	loc_5470
	move.b	($FFFFDB9E).w,d0
	addi.b	#1,($FFFFDB9E).w
	andi.w	#7,d0
	add.w	d0,d0
	move.w	Pal_SpecialStageStars(pc,d0.w),(Normal_palette+$1C).w
	move.b	($FFFFDB9F).w,d0
	addi.b	#1,($FFFFDB9F).w
	andi.w	#7,d0
	add.w	d0,d0
	move.w	Pal_SpecialStageStars(pc,d0.w),(Normal_palette+$1E).w

loc_5470:
	cmpi.b	#6,(Current_Special_Stage).w
	bne.s	loc_5482
	cmpi.b	#3,($FFFFFE17).w
	beq.w	loc_54DC

loc_5482:
	tst.b	($FFFFDB98).w
	beq.s	return_54BA
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	bne.s	return_54BA
	move.b	($FFFFDB99).w,d0
	addi.b	#1,($FFFFDB99).w
	andi.b	#3,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	move.w	word_54C4(pc,d0.w),(Normal_palette_line4+$16).w
	move.w	word_54C6(pc,d0.w),(Normal_palette_line4+$18).w
	move.w	word_54C8(pc,d0.w),(Normal_palette_line4+$1A).w

return_54BA:
	rts
; ===========================================================================
; special stage rainbow blinking sprite palettes... (chaos emerald colors?)
;word_54BC:
		dc.w   $0EE, $0C0, $0EE, $0C0
word_54C4:	dc.w   $0EE
word_54C6:	dc.w   $0CC
word_54C8:	dc.w   $088, $0E0, $0C0, $080, $EE0, $CC0, $880, $E0E, $C0C, $808
; ===========================================================================

loc_54DC:
	tst.b	($FFFFDB87).w
	beq.s	loc_5482
	moveq	#0,d0
	move.b	($FFFFFE0F).w,d0
	andi.b	#1,d0
	bne.w	loc_5482
	move.w	(Ring_count).w,d2
	add.w	(Ring_count_2P).w,d2
	cmp.w	($FFFFDB8C).w,d2
	blt.w	loc_5482
	lea	(Normal_palette+2).w,a0
	movea.l	a0,a1
	move.w	(a0)+,d0
	moveq	#$B,d1

loc_550A:
	move.w	(a0)+,(a1)+
	dbf	d1,loc_550A
	move.w	d0,(a1)
	rts
; End of function sub_543A


;|||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_5514:
	cmpi.b	#4,($FFFFDB0D).w
	bne.s	return_5532
	movea.l	#$FFFF6A60,a0
	moveq	#0,d0
	move.b	($FFFFDB10).w,d0
	add.w	d0,d0
	adda.w	(a0,d0.w),a0
	move.l	a0,($FFFFDB82).w

return_5532:
	rts
; End of function sub_5514


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_5534:
	cmpi.b	#4,($FFFFDB0D).w
	bne.w	return_55DC
	moveq	#0,d0
	move.b	($FFFFDB0A).w,d0
	cmp.b	($FFFFDB4C).w,d0
	beq.w	return_55DC
	move.b	d0,($FFFFDB4C).w
	movea.l	($FFFFDB8E).w,a1
	move.b	(a1,d0.w),d3
	andi.w	#$7F,d3
	lea	(byte_55FE).l,a0
	move.b	(a0,d3.w),d3
	add.w	d3,d3
	add.w	d3,d3
	movea.l	($FFFFDB88).w,a0

loc_556E:
	bsr.w	sub_6F8E
	bne.s	return_55DC
	moveq	#0,d0
	move.b	(a0)+,d0
	bmi.s	loc_55B2
	move.b	d0,d1
	andi.b	#$40,d1
	bne.s	loc_559A
	addq.w	#1,($FFFFDB9A).w
	move.b	#$60,(a1)
	add.w	d0,d0
	add.w	d0,d0
	add.w	d3,d0
	move.w	d0,$30(a1)
	move.b	(a0)+,$26(a1)
	bra.s	loc_556E
; ===========================================================================

loc_559A:
	andi.w	#$3F,d0
	move.b	#$61,(a1)
	add.w	d0,d0
	add.w	d0,d0
	add.w	d3,d0
	move.w	d0,$30(a1)
	move.b	(a0)+,$26(a1)
	bra.s	loc_556E
; ===========================================================================

loc_55B2:
	move.l	a0,($FFFFDB88).w
	addq.b	#1,d0
	beq.s	return_55DC
	addq.b	#1,d0
	beq.s	loc_55D8
	addq.b	#1,d0
	beq.s	loc_55CC
	st	($FFFFDB95).w
	sf	($FFFFDBA0).w
	bra.s	loc_55D8
; ===========================================================================

loc_55CC:
	tst.b	(System_Stack).w
	bne.s	loc_55D8
	move.b	#$59,(a1)
	rts
; ===========================================================================

loc_55D8:
	move.b	#$5A,(a1)

return_55DC:
	rts
; End of function sub_5534

; ===========================================================================
dword_55DE:
	dc.l $40000002
	dc.l $47000002	; 1
	dc.l $4E000002	; 2
	dc.l $55000002	; 3
	dc.l $40000003	; 4
	dc.l $47000003	; 5
	dc.l $4E000003	; 6
	dc.l $55000003	; 7
byte_55FE:
	dc.b $18
	dc.b $18	; 1
	dc.b  $C	; 2
	dc.b $10	; 3
	dc.b  $B	; 4
	dc.b   0	; 5

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_5604:
	moveq	#0,d0
	move.b	($FFFFDB0D).w,d0
	cmpi.b	#4,d0
	bge.w	loc_6C0A
	add.w	d0,d0
	add.w	d0,d0
	bne.w	loc_56D2
	move.l	($FFFFDB2C).w,($FFFFDB28).w
	move.b	($FFFFDB10).w,($FFFFDB39).w
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	moveq	#0,d4
	move.b	($FFFFDB0A).w,d1
	move.b	($FFFFDB0B).w,d2
	movea.l	($FFFFDB8E).w,a1
	move.b	(a1,d1.w),d3
	andi.b	#$7F,d3
	move.b	d3,($FFFFDB08).w
	move.w	d3,d1
	add.w	d3,d3
	lea	(Ani_SpecialStageTrack).l,a1
	adda.w	(a1,d3.w),a1
	adda.w	d2,a1
	moveq	#0,d4
	move.b	(a1),d4
	move.b	d4,($FFFFDB10).w
	lsl.w	#2,d4
	lea	(Map_SpecialStageTrack).l,a1
	movea.l	(a1,d4.w),a0
	movea.l	a0,a1
	moveq	#0,d2
	move.b	(a0)+,d2
	move.b	(a0)+,d2
	move.b	(a0)+,d2
	lsl.w	#8,d2
	move.b	(a0)+,d2
	addq.w	#4,d2
	adda.w	d2,a1
	movea.l	a1,a2
	moveq	#0,d2
	move.b	(a1)+,d2
	move.b	(a1)+,d2
	move.b	(a1)+,d2
	lsl.w	#8,d2
	move.b	(a1)+,d2
	addq.w	#4,d2
	adda.w	d2,a2
	move.b	(a2)+,d2
	move.b	(a2)+,d2
	move.b	(a2)+,d2
	move.b	(a2)+,d2
	move.l	a0,($FFFFDB00).w
	move.l	a0,($FFFFDB2C).w
	move.l	a1,($FFFFDB04).w
	move.l	a2,($FFFFDB3A).w
	lea	byte_55FE(pc),a4
	move.b	(a4,d1.w),d2
	move.b	($FFFFDB0B).w,($FFFFDB09).w
	addi.b	#1,($FFFFDB0B).w
	cmp.b	($FFFFDB0B).w,d2
	bne.s	loc_56D2
	move.b	#0,($FFFFDB0B).w
	move.b	($FFFFDB0A).w,($FFFFDB22).w
	addi.b	#1,($FFFFDB0A).w

loc_56D2:
	tst.b	($FFFFDB0C).w
	beq.s	loc_56DC
	addi.w	#$10,d0

loc_56DC:
	lea	dword_55DE(pc),a3
	movea.l	(a3,d0.w),a3
	move.l	a3,(VDP_control_port).l
	lea	(VDP_data_port).l,a6
	bsr.w	loc_6C0A
	movea.l	($FFFFDB00).w,a0
	movea.l	($FFFFDB04).w,a1
	movea.l	($FFFFDB3A).w,a2
	lea	($FFFFDB3E).w,a3
	movem.w	(a3)+,d2-d7
	lea	(word_651E).l,a3
	lea	(byte_69E6).l,a4
	movea.w	#-8,a5
	moveq	#0,d0
	tst.b	($FFFFDB0E).w
	bne.w	loc_5D8A

loc_5722:

	adda.w	#1,a5
	cmpa.w	#0,a5
	beq.w	loc_5D58

loc_572E:

	moveq	#0,d1
	subq.w	#1,d7
	bpl.s	loc_5738
	move.b	(a0)+,d6
	moveq	#7,d7

loc_5738:
	add.b	d6,d6
	bcc.s	loc_5788
	subq.b	#1,d5
	bpl.s	loc_5744
	move.b	(a1)+,d4
	moveq	#7,d5

loc_5744:
	add.b	d4,d4
	bcc.s	loc_5768
	moveq	#$A,d0
	sub.b	d5,d0
	subq.b	#3,d0
	add.w	d0,d0
	move.w	off_5758(pc,d0.w),d0
	jmp	off_5758(pc,d0.w)
; ===========================================================================
off_5758:
	dc.w loc_58FE-off_5758
	dc.w loc_58D4-off_5758	; 1
	dc.w loc_58AA-off_5758	; 2
	dc.w loc_5880-off_5758	; 3
	dc.w loc_5856-off_5758	; 4
	dc.w loc_5836-off_5758	; 5
	dc.w loc_5806-off_5758	; 6
	dc.w loc_57DE-off_5758	; 7
; ===========================================================================

loc_5768:
	moveq	#6,d0
	sub.b	d5,d0
	addq.b	#1,d0
	add.w	d0,d0
	move.w	off_5778(pc,d0.w),d0
	jmp	off_5778(pc,d0.w)
; ===========================================================================
off_5778:
	dc.w loc_5A1A-off_5778
	dc.w loc_5A02-off_5778	; 1
	dc.w loc_59DC-off_5778	; 2
	dc.w loc_59B6-off_5778	; 3
	dc.w loc_5990-off_5778	; 4
	dc.w loc_596A-off_5778	; 5
	dc.w loc_5944-off_5778	; 6
	dc.w loc_5928-off_5778	; 7
; ===========================================================================

loc_5788:
	subq.b	#1,d3
	bpl.s	loc_579C
	move.b	(a2)+,d2
	cmpi.b	#-1,d2
	bne.s	loc_579A
	moveq	#0,d3
	bra.w	loc_5722
; ===========================================================================

loc_579A:
	moveq	#7,d3

loc_579C:
	add.b	d2,d2
	bcc.s	loc_57BE
	moveq	#7,d0
	sub.b	d3,d0
	add.b	d0,d0
	move.w	off_57AE(pc,d0.w),d0
	jmp	off_57AE(pc,d0.w)
; ===========================================================================
off_57AE:
	dc.w loc_5BCE-off_57AE
	dc.w loc_5B92-off_57AE	; 1
	dc.w loc_5B56-off_57AE	; 2
	dc.w loc_5B1A-off_57AE	; 3
	dc.w loc_5ADE-off_57AE	; 4
	dc.w loc_5AA2-off_57AE	; 5
	dc.w loc_5A66-off_57AE	; 6
	dc.w loc_5A34-off_57AE	; 7
; ===========================================================================

loc_57BE:
	moveq	#6,d0
	sub.b	d3,d0
	addq.b	#1,d0
	add.b	d0,d0
	move.w	off_57CE(pc,d0.w),d0
	jmp	off_57CE(pc,d0.w)
; ===========================================================================
off_57CE:
	dc.w loc_5D34-off_57CE

	dc.w loc_5D12-off_57CE	; 1
	dc.w loc_5CE2-off_57CE	; 2
	dc.w loc_5CB2-off_57CE	; 3
	dc.w loc_5C82-off_57CE	; 4
	dc.w loc_5C52-off_57CE	; 5
	dc.w loc_5C22-off_57CE	; 6
	dc.w loc_5BFC-off_57CE	; 7
; ===========================================================================

loc_57DE:
	moveq	#0,d0
	move.b	(a1)+,d0
	lsl.w	#2,d0
	move.b	(a1)+,d4
	rol.b	#2,d4
	move.b	d4,d1
	andi.b	#3,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#6,d5
	bra.w	loc_572E
; ===========================================================================

loc_5806:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$200,d0
	move.b	(a1)+,d1
	lsl.w	#1,d1
	or.w	d1,d0
	move.b	(a1)+,d4
	rol.b	#1,d4
	move.b	d4,d1
	andi.b	#1,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#7,d5
	bra.w	loc_572E
; ===========================================================================

loc_5836:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$300,d0
	move.b	(a1)+,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#0,d5
	bra.w	loc_572E
; ===========================================================================

loc_5856:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$380,d0
	move.b	(a1)+,d4
	ror.b	#1,d4
	move.b	d4,d1
	andi.b	#$7F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#1,d5
	bra.w	loc_572E
; ===========================================================================

loc_5880:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3C0,d0
	move.b	(a1)+,d4
	ror.b	#2,d4
	move.b	d4,d1
	andi.b	#$3F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#2,d5
	bra.w	loc_572E
; ===========================================================================

loc_58AA:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3E0,d0
	move.b	(a1)+,d4
	ror.b	#3,d4
	move.b	d4,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#3,d5
	bra.w	loc_572E
; ===========================================================================

loc_58D4:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3F0,d0
	move.b	(a1)+,d4
	ror.b	#4,d4
	move.b	d4,d1
	andi.b	#$F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#4,d5
	bra.w	loc_572E
; ===========================================================================

loc_58FE:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3F8,d0
	move.b	(a1)+,d4
	rol.b	#3,d4
	move.b	d4,d1
	andi.b	#7,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#5,d5
	bra.w	loc_572E
; ===========================================================================

loc_5928:
	move.b	(a1)+,d4
	ror.b	#2,d4
	move.b	d4,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#2,d5
	bra.w	loc_572E
; ===========================================================================

loc_5944:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$20,d0
	move.b	(a1)+,d4
	ror.b	#3,d4
	move.b	d4,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#3,d5
	bra.w	loc_572E
; ===========================================================================

loc_596A:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$30,d0
	move.b	(a1)+,d4
	ror.b	#4,d4
	move.b	d4,d1
	andi.b	#$F,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#4,d5
	bra.w	loc_572E
; ===========================================================================

loc_5990:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$38,d0
	move.b	(a1)+,d4
	rol.b	#3,d4
	move.b	d4,d1
	andi.b	#7,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#5,d5
	bra.w	loc_572E
; ===========================================================================

loc_59B6:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$3C,d0
	move.b	(a1)+,d4
	rol.b	#2,d4
	move.b	d4,d1
	andi.b	#3,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#6,d5
	bra.w	loc_572E
; ===========================================================================

loc_59DC:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$3E,d0
	move.b	(a1)+,d4
	rol.b	#1,d4
	move.b	d4,d1
	andi.b	#1,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#7,d5
	bra.w	loc_572E
; ===========================================================================

loc_5A02:
	lsr.b	#2,d4
	andi.w	#$3F,d4
	add.w	d4,d4
	move.w	(a3,d4.w),d4
	ori.w	#$6000,d4
	move.w	d4,(a6)
	moveq	#0,d5
	bra.w	loc_572E
; ===========================================================================

loc_5A1A:
	ror.b	#2,d4
	move.b	d4,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	ori.w	#$6000,d0
	move.w	d0,(a6)
	moveq	#1,d5
	bra.w	loc_572E
; ===========================================================================

loc_5A34:
	move.b	(a2)+,d2
	ror.b	#1,d2
	move.b	d2,d0
	andi.w	#$7F,d0
	moveq	#1,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5A5C:
	move.w	d1,(a6)
	dbf	d0,loc_5A5C
	bra.w	loc_572E
; ===========================================================================

loc_5A66:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$40,d1
	move.b	(a2)+,d2
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	or.b	d1,d0
	moveq	#2,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5A98:
	move.w	d1,(a6)
	dbf	d0,loc_5A98
	bra.w	loc_572E
; ===========================================================================

loc_5AA2:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$60,d1
	move.b	(a2)+,d2
	ror.b	#3,d2
	move.b	d2,d0
	andi.w	#$1F,d0
	or.b	d1,d0
	moveq	#3,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5AD4:
	move.w	d1,(a6)
	dbf	d0,loc_5AD4
	bra.w	loc_572E
; ===========================================================================

loc_5ADE:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$70,d1
	move.b	(a2)+,d2
	ror.b	#4,d2
	move.b	d2,d0
	andi.w	#$F,d0
	or.b	d1,d0
	moveq	#4,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5B10:
	move.w	d1,(a6)
	dbf	d0,loc_5B10
	bra.w	loc_572E
; ===========================================================================

loc_5B1A:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$78,d1
	move.b	(a2)+,d2
	rol.b	#3,d2
	move.b	d2,d0
	andi.w	#7,d0
	or.b	d1,d0
	moveq	#5,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5B4C:
	move.w	d1,(a6)
	dbf	d0,loc_5B4C
	bra.w	loc_572E
; ===========================================================================

loc_5B56:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$7C,d1
	move.b	(a2)+,d2
	rol.b	#2,d2
	move.b	d2,d0
	andi.w	#3,d0
	or.b	d1,d0
	moveq	#6,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5B88:
	move.w	d1,(a6)
	dbf	d0,loc_5B88
	bra.w	loc_572E
; ===========================================================================

loc_5B92:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$7E,d1
	move.b	(a2)+,d2
	rol.b	#1,d2
	move.b	d2,d0
	andi.w	#1,d0
	or.b	d1,d0
	moveq	#7,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5722
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5BC4:
	move.w	d1,(a6)
	dbf	d0,loc_5BC4
	bra.w	loc_572E
; ===========================================================================

loc_5BCE:
	lsr.b	#1,d2
	andi.w	#$7F,d2
	moveq	#0,d3
	cmpi.b	#$7F,d2
	beq.w	loc_5722
	addi.w	#$40,d2
	add.w	d2,d2
	add.w	d2,d2
	move.w	(a4,d2.w),d1
	move.w	2(a4,d2.w),d0
	ori.w	#$E000,d1

loc_5BF2:
	move.w	d1,(a6)
	dbf	d0,loc_5BF2
	bra.w	loc_572E
; ===========================================================================

loc_5BFC:
	move.b	(a2)+,d2
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#2,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5C18:
	move.w	d1,(a6)
	dbf	d0,loc_5C18
	bra.w	loc_572E
; ===========================================================================

loc_5C22:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$20,d0
	move.b	(a2)+,d2
	ror.b	#3,d2
	move.b	d2,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	moveq	#3,d3
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5C48:
	move.w	d1,(a6)
	dbf	d0,loc_5C48
	bra.w	loc_572E
; ===========================================================================

loc_5C52:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$30,d0
	move.b	(a2)+,d2
	ror.b	#4,d2
	move.b	d2,d1
	andi.b	#$F,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#4,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5C78:
	move.w	d1,(a6)
	dbf	d0,loc_5C78
	bra.w	loc_572E
; ===========================================================================

loc_5C82:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$38,d0
	move.b	(a2)+,d2
	rol.b	#3,d2
	move.b	d2,d1
	andi.b	#7,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#5,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5CA8:
	move.w	d1,(a6)
	dbf	d0,loc_5CA8
	bra.w	loc_572E
; ===========================================================================

loc_5CB2:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$3C,d0
	move.b	(a2)+,d2
	rol.b	#2,d2
	move.b	d2,d1
	andi.b	#3,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#6,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5CD8:
	move.w	d1,(a6)
	dbf	d0,loc_5CD8
	bra.w	loc_572E
; ===========================================================================

loc_5CE2:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$3E,d0
	move.b	(a2)+,d2
	rol.b	#1,d2
	move.b	d2,d1
	andi.b	#1,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#7,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5D08:
	move.w	d1,(a6)
	dbf	d0,loc_5D08
	bra.w	loc_572E
; ===========================================================================

loc_5D12:
	lsr.b	#2,d2
	andi.w	#$3F,d2
	add.w	d2,d2
	add.w	d2,d2
	moveq	#0,d3
	move.w	(a4,d2.w),d1
	move.w	2(a4,d2.w),d0
	ori.w	#$E000,d1

loc_5D2A:
	move.w	d1,(a6)
	dbf	d0,loc_5D2A
	bra.w	loc_572E
; ===========================================================================

loc_5D34:
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#1,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_5D4E:
	move.w	d1,(a6)
	dbf	d0,loc_5D4E
	bra.w	loc_572E
; ===========================================================================

loc_5D58:
	cmpi.b	#3,($FFFFDB0D).w
	beq.s	loc_5D76
	move.l	a0,($FFFFDB00).w
	move.l	a1,($FFFFDB04).w
	move.l	a2,($FFFFDB3A).w
	lea	($FFFFDB4A).w,a3
	movem.w	d2-d7,-(a3)
	rts
; ===========================================================================

loc_5D76:
	lea	($FFFFDB3E).w,a2
	moveq	#0,d0
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	rts
; ===========================================================================

loc_5D8A:
	adda.w	#1,a5
	cmpa.w	#0,a5
	beq.w	loc_5D58
	lea	(PNT_Buffer).w,a6
	swap	d0
	addi.w	#$100,d0
	andi.w	#$F00,d0
	adda.w	d0,a6
	swap	d0

loc_5DA8:

	moveq	#0,d1
	subq.w	#1,d7
	bpl.s	loc_5DB2
	move.b	(a0)+,d6
	moveq	#7,d7

loc_5DB2:
	add.b	d6,d6
	bcc.s	loc_5E06
	subq.b	#1,d5
	bpl.s	loc_5DBE
	move.b	(a1)+,d4
	moveq	#7,d5

loc_5DBE:
	add.b	d4,d4
	bcc.s	loc_5DE4
	move.w	#$A,d0
	sub.b	d5,d0
	subq.b	#3,d0
	add.w	d0,d0
	move.w	off_5DD4(pc,d0.w),d0
	jmp	off_5DD4(pc,d0.w)
; ===========================================================================
off_5DD4:
	dc.w loc_5F82-off_5DD4
	dc.w loc_5F58-off_5DD4	; 1
	dc.w loc_5F2E-off_5DD4	; 2
	dc.w loc_5F04-off_5DD4	; 3
	dc.w loc_5EDA-off_5DD4	; 4
	dc.w loc_5EBA-off_5DD4	; 5
	dc.w loc_5E8A-off_5DD4	; 6
	dc.w loc_5E60-off_5DD4	; 7
; ===========================================================================

loc_5DE4:
	move.w	#6,d0
	sub.b	d5,d0
	addq.b	#1,d0
	add.w	d0,d0
	move.w	off_5DF6(pc,d0.w),d0
	jmp	off_5DF6(pc,d0.w)
; ===========================================================================
off_5DF6:
	dc.w loc_609E-off_5DF6
	dc.w loc_6086-off_5DF6	; 1
	dc.w loc_6060-off_5DF6	; 2
	dc.w loc_603A-off_5DF6	; 3
	dc.w loc_6014-off_5DF6	; 4
	dc.w loc_5FEE-off_5DF6	; 5
	dc.w loc_5FC8-off_5DF6	; 6
	dc.w loc_5FAC-off_5DF6	; 7
; ===========================================================================

loc_5E06:
	subq.b	#1,d3
	bpl.s	loc_5E1A
	move.b	(a2)+,d2
	cmpi.b	#-1,d2
	bne.s	loc_5E18
	moveq	#0,d3
	bra.w	loc_5D8A
; ===========================================================================

loc_5E18:
	moveq	#7,d3

loc_5E1A:
	add.b	d2,d2
	bcc.s	loc_5E3E
	move.w	#7,d0
	sub.b	d3,d0
	add.b	d0,d0
	move.w	off_5E2E(pc,d0.w),d0
	jmp	off_5E2E(pc,d0.w)
; ===========================================================================
off_5E2E:
	dc.w loc_6252-off_5E2E
	dc.w loc_6216-off_5E2E	; 1
	dc.w loc_61DA-off_5E2E	; 2
	dc.w loc_619E-off_5E2E	; 3
	dc.w loc_6162-off_5E2E	; 4
	dc.w loc_6126-off_5E2E	; 5
	dc.w loc_60EA-off_5E2E	; 6
	dc.w loc_60B8-off_5E2E	; 7
; ===========================================================================

loc_5E3E:
	move.w	#6,d0
	sub.b	d3,d0
	addq.b	#1,d0
	add.b	d0,d0
	move.w	off_5E50(pc,d0.w),d0
	jmp	off_5E50(pc,d0.w)
; ===========================================================================
off_5E50:
	dc.w loc_63B8-off_5E50
	dc.w loc_6396-off_5E50	; 1
	dc.w loc_6366-off_5E50	; 2
	dc.w loc_6336-off_5E50	; 3
	dc.w loc_6306-off_5E50	; 4
	dc.w loc_62D6-off_5E50	; 5
	dc.w loc_62A6-off_5E50	; 6
	dc.w loc_6280-off_5E50	; 7
; ===========================================================================

loc_5E60:
	move.w	#0,d0
	move.b	(a1)+,d0
	lsl.w	#2,d0
	move.b	(a1)+,d4
	rol.b	#2,d4
	move.b	d4,d1
	andi.b	#3,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#6,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5E8A:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$200,d0
	move.b	(a1)+,d1
	lsl.w	#1,d1
	or.w	d1,d0
	move.b	(a1)+,d4
	rol.b	#1,d4
	move.b	d4,d1
	andi.b	#1,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#7,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5EBA:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$300,d0
	move.b	(a1)+,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#0,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5EDA:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$380,d0
	move.b	(a1)+,d4
	ror.b	#1,d4
	move.b	d4,d1
	andi.b	#$7F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#1,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5F04:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3C0,d0
	move.b	(a1)+,d4
	ror.b	#2,d4
	move.b	d4,d1
	andi.b	#$3F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#2,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5F2E:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3E0,d0
	move.b	(a1)+,d4
	ror.b	#3,d4
	move.b	d4,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#3,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5F58:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3F0,d0
	move.b	(a1)+,d4
	ror.b	#4,d4
	move.b	d4,d1
	andi.b	#$F,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#4,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5F82:
	move.b	d4,d0
	lsl.w	#2,d0
	andi.w	#$3F8,d0
	move.b	(a1)+,d4
	rol.b	#3,d4
	move.b	d4,d1
	andi.b	#7,d1
	or.b	d1,d0
	addi.w	#$40,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#5,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5FAC:
	move.b	(a1)+,d4
	ror.b	#2,d4
	move.b	d4,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#2,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5FC8:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$20,d0
	move.b	(a1)+,d4
	ror.b	#3,d4
	move.b	d4,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#3,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_5FEE:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$30,d0
	move.b	(a1)+,d4
	ror.b	#4,d4
	move.b	d4,d1
	andi.b	#$F,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#4,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_6014:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$38,d0
	move.b	(a1)+,d4
	rol.b	#3,d4
	move.b	d4,d1
	andi.b	#7,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#5,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_603A:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$3C,d0
	move.b	(a1)+,d4
	rol.b	#2,d4
	move.b	d4,d1
	andi.b	#3,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#6,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_6060:
	move.b	d4,d0
	lsr.b	#2,d0
	andi.w	#$3E,d0
	move.b	(a1)+,d4
	rol.b	#1,d4
	move.b	d4,d1
	andi.b	#1,d1
	or.b	d1,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#7,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_6086:
	lsr.b	#2,d4
	andi.w	#$3F,d4
	add.w	d4,d4
	move.w	(a3,d4.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#0,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_609E:
	ror.b	#2,d4
	move.b	d4,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	move.w	(a3,d0.w),d0
	eori.w	#$6800,d0
	move.w	d0,-(a6)
	moveq	#1,d5
	bra.w	loc_5DA8
; ===========================================================================

loc_60B8:
	move.b	(a2)+,d2
	ror.b	#1,d2
	move.b	d2,d0
	andi.w	#$7F,d0
	moveq	#1,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_60E0:
	move.w	d1,-(a6)
	dbf	d0,loc_60E0
	bra.w	loc_5DA8
; ===========================================================================

loc_60EA:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$40,d1
	move.b	(a2)+,d2
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	or.b	d1,d0
	moveq	#2,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_611C:
	move.w	d1,-(a6)
	dbf	d0,loc_611C
	bra.w	loc_5DA8
; ===========================================================================

loc_6126:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$60,d1
	move.b	(a2)+,d2
	ror.b	#3,d2
	move.b	d2,d0
	andi.w	#$1F,d0
	or.b	d1,d0
	moveq	#3,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_6158:
	move.w	d1,-(a6)
	dbf	d0,loc_6158
	bra.w	loc_5DA8
; ===========================================================================

loc_6162:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$70,d1
	move.b	(a2)+,d2
	ror.b	#4,d2
	move.b	d2,d0
	andi.w	#$F,d0
	or.b	d1,d0
	moveq	#4,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_6194:
	move.w	d1,-(a6)
	dbf	d0,loc_6194
	bra.w	loc_5DA8
; ===========================================================================

loc_619E:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$78,d1
	move.b	(a2)+,d2
	rol.b	#3,d2
	move.b	d2,d0
	andi.w	#7,d0
	or.b	d1,d0
	moveq	#5,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_61D0:
	move.w	d1,-(a6)
	dbf	d0,loc_61D0
	bra.w	loc_5DA8
; ===========================================================================

loc_61DA:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$7C,d1
	move.b	(a2)+,d2
	rol.b	#2,d2
	move.b	d2,d0
	andi.w	#3,d0
	or.b	d1,d0
	moveq	#6,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_620C:
	move.w	d1,-(a6)
	dbf	d0,loc_620C
	bra.w	loc_5DA8
; ===========================================================================

loc_6216:
	move.b	d2,d1
	lsr.b	#1,d1
	andi.b	#$7E,d1
	move.b	(a2)+,d2
	rol.b	#1,d2
	move.b	d2,d0
	andi.w	#1,d0
	or.b	d1,d0
	moveq	#7,d3
	cmpi.b	#$7F,d0
	beq.w	loc_5D8A
	addi.w	#$40,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_6248:
	move.w	d1,-(a6)
	dbf	d0,loc_6248
	bra.w	loc_5DA8
; ===========================================================================

loc_6252:
	lsr.b	#1,d2
	andi.w	#$7F,d2
	moveq	#0,d3
	cmpi.b	#$7F,d2
	beq.w	loc_5D8A
	addi.w	#$40,d2
	add.w	d2,d2
	add.w	d2,d2
	move.w	(a4,d2.w),d1
	move.w	2(a4,d2.w),d0
	ori.w	#$E000,d1

loc_6276:
	move.w	d1,-(a6)
	dbf	d0,loc_6276
	bra.w	loc_5DA8
; ===========================================================================

loc_6280:
	move.b	(a2)+,d2
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#2,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_629C:
	move.w	d1,-(a6)
	dbf	d0,loc_629C
	bra.w	loc_5DA8
; ===========================================================================

loc_62A6:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$20,d0
	move.b	(a2)+,d2
	ror.b	#3,d2
	move.b	d2,d1
	andi.b	#$1F,d1
	or.b	d1,d0
	moveq	#3,d3
	add.w	d0,d0
	add.w	d0,d0
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_62CC:
	move.w	d1,-(a6)
	dbf	d0,loc_62CC
	bra.w	loc_5DA8
; ===========================================================================

loc_62D6:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$30,d0
	move.b	(a2)+,d2
	ror.b	#4,d2
	move.b	d2,d1
	andi.b	#$F,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#4,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_62FC:
	move.w	d1,-(a6)
	dbf	d0,loc_62FC
	bra.w	loc_5DA8
; ===========================================================================

loc_6306:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$38,d0
	move.b	(a2)+,d2
	rol.b	#3,d2
	move.b	d2,d1
	andi.b	#7,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#5,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_632C:
	move.w	d1,-(a6)
	dbf	d0,loc_632C
	bra.w	loc_5DA8
; ===========================================================================

loc_6336:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$3C,d0
	move.b	(a2)+,d2
	rol.b	#2,d2
	move.b	d2,d1
	andi.b	#3,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#6,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_635C:
	move.w	d1,-(a6)
	dbf	d0,loc_635C
	bra.w	loc_5DA8
; ===========================================================================

loc_6366:
	move.b	d2,d0
	lsr.b	#2,d0
	andi.w	#$3E,d0
	move.b	(a2)+,d2
	rol.b	#1,d2
	move.b	d2,d1
	andi.b	#1,d1
	or.b	d1,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#7,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_638C:
	move.w	d1,-(a6)
	dbf	d0,loc_638C
	bra.w	loc_5DA8
; ===========================================================================

loc_6396:
	lsr.b	#2,d2
	andi.w	#$3F,d2
	add.w	d2,d2
	add.w	d2,d2
	moveq	#0,d3
	move.w	(a4,d2.w),d1
	move.w	2(a4,d2.w),d0
	ori.w	#$E000,d1

loc_63AE:
	move.w	d1,-(a6)
	dbf	d0,loc_63AE
	bra.w	loc_5DA8
; ===========================================================================

loc_63B8:
	ror.b	#2,d2
	move.b	d2,d0
	andi.w	#$3F,d0
	add.w	d0,d0
	add.w	d0,d0
	moveq	#1,d3
	move.w	(a4,d0.w),d1
	move.w	2(a4,d0.w),d0
	ori.w	#$E000,d1

loc_63D2:
	move.w	d1,-(a6)
	dbf	d0,loc_63D2
	bra.w	loc_5DA8

; ===========================================================================
; frames of animation of the special stage track
; this chooses how objects curve along the track as well as which track frame to draw
; off_63DC:
Ani_SpecialStageTrack:
	dc.w SSTrackAni_TurnThenRise - Ani_SpecialStageTrack ; 0
	dc.w SSTrackAni_TurnThenDrop - Ani_SpecialStageTrack ; 1
	dc.w SSTrackAni_TurnThenStraight - Ani_SpecialStageTrack ; 2
	dc.w SSTrackAni_Straight - Ani_SpecialStageTrack ; 3
	dc.w SSTrackAni_StraightThenTurn - Ani_SpecialStageTrack ; 4
; byte_63E6:
SSTrackAni_TurnThenRise:
	dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
	dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, $A, $B, $C, $D, $E, $F,$10 ; rise
; byte_63FE:
SSTrackAni_TurnThenDrop:
	dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
	dc.b $15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$21,$22,$23,$24,$25 ; drop
; byte_6416:
SSTrackAni_TurnThenStraight:
	dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
	dc.b $2C,$2D,$2E,$2F,$30 ; exit turn
; byte_6422:
SSTrackAni_Straight:
	dc.b $11,$12,$13,$14,$11,$12,$13,$14 ; straight
	dc.b $11,$12,$13,$14,$11,$12,$13,$14 ; straight
; byte_6432:
SSTrackAni_StraightThenTurn:
	dc.b $11,$12,$13,$14 ; straight
	dc.b $31,$32,$33,$34,$35,$36,$37 ; enter turn

	even

; ===========================================================================
; pointers to the mappings for each frame of the special stage track
; indexed into by the numbers used in the above animations
; off_643E:
Map_SpecialStageTrack:
	dc.l MapSpec_Rise1	;   0
	dc.l MapSpec_Rise2	;   1
	dc.l MapSpec_Rise3	;   2
	dc.l MapSpec_Rise4	;   3
	dc.l MapSpec_Rise5	;   4
	dc.l MapSpec_Rise6	;   5
	dc.l MapSpec_Rise7	;   6
	dc.l MapSpec_Rise8	;   7
	dc.l MapSpec_Rise9	;   8
	dc.l MapSpec_Rise10	;   9
	dc.l MapSpec_Rise11	;  $A
	dc.l MapSpec_Rise12	;  $B
	dc.l MapSpec_Rise13	;  $C
	dc.l MapSpec_Rise14	;  $D
	dc.l MapSpec_Rise15	;  $E
	dc.l MapSpec_Rise16	;  $F
	dc.l MapSpec_Rise17	; $10
	dc.l MapSpec_Straight1	; $11
	dc.l MapSpec_Straight2	; $12
	dc.l MapSpec_Straight3	; $13
	dc.l MapSpec_Straight4	; $14
	dc.l MapSpec_Drop1	; $15
	dc.l MapSpec_Drop2	; $16
	dc.l MapSpec_Drop3	; $17
	dc.l MapSpec_Drop4	; $18
	dc.l MapSpec_Drop5	; $19
	dc.l MapSpec_Drop6	; $1A
	dc.l MapSpec_Drop7	; $1B
	dc.l MapSpec_Drop8	; $1C
	dc.l MapSpec_Drop9	; $1D
	dc.l MapSpec_Drop10	; $1E
	dc.l MapSpec_Drop11	; $1F
	dc.l MapSpec_Drop12	; $20
	dc.l MapSpec_Drop13	; $21
	dc.l MapSpec_Drop14	; $22
	dc.l MapSpec_Drop15	; $23
	dc.l MapSpec_Drop16	; $24
	dc.l MapSpec_Drop17	; $25
	dc.l MapSpec_Turning1	; $26
	dc.l MapSpec_Turning2	; $27
	dc.l MapSpec_Turning3	; $28
	dc.l MapSpec_Turning4	; $29
	dc.l MapSpec_Turning5	; $2A
	dc.l MapSpec_Turning6	; $2B
	dc.l MapSpec_Unturn1	; $2C
	dc.l MapSpec_Unturn2	; $2D
	dc.l MapSpec_Unturn3	; $2E
	dc.l MapSpec_Unturn4	; $2F
	dc.l MapSpec_Unturn5	; $30
	dc.l MapSpec_Turn1	; $31
	dc.l MapSpec_Turn2	; $32
	dc.l MapSpec_Turn3	; $33
	dc.l MapSpec_Turn4	; $34
	dc.l MapSpec_Turn5	; $35
	dc.l MapSpec_Turn6	; $36
	dc.l MapSpec_Turn7	; $37

word_651E:                      
	dc.w $8001,$8007,$802C,$800B,$8024,$8824,$8039,$882B
	dc.w $805D,$885D,$802B,$804A,$8049,$8037,$8849,$8045; 8
	dc.w $8845,$883A,$8048,$8850,$8036,$8837,$803A,$8050; 16
	dc.w $8842,$8042,$8815,$801D,$804B,$8817,$8848,$8836; 24
	dc.w $8038,$884B,$8015,$8021,$8017,$8033,$801A,$802A; 32
	dc.w $805E,$8028,$8030,$8821,$8838,$881A,$8025,$885E; 40
	dc.w $8825,$8833,$8003,$8814,$8014,$8004,$804E,$8803; 48
	dc.w $800C,$882A,$8002,$8051,$8040,$803D,$8019,$8052; 56
	dc.w $8009,$805A,$8830,$884E,$8852,$8851,$8809,$8840; 64
	dc.w $802F,$885A,$8818,$8034,$8819,$882F,$883D,$803E; 72
	dc.w $8018,$880C,$8012,$8804,$8026,$8834,$8805,$803B; 80
	dc.w $883E,$883B,$8000,$8802,$8005,$800D,$8055,$80AF; 88
	dc.w $801C,$801B,$880D,$8016,$8812,$801F,$8832,$8013; 96
	dc.w $8092,$8826,$8010,$804D,$8047,$8892,$8800,$8062; 104
	dc.w $8066,$8090,$8008,$887C,$8867,$88F7,$800E,$8060; 112
	dc.w $8032,$8094,$881C,$8905,$88B0,$8059,$800F,$8067; 120
	dc.w $8068,$8894,$807C,$80B0,$80B1,$8006,$8841,$8087; 128
	dc.w $8093,$80CC,$881F,$8868,$8041,$808F,$8890,$80C2; 136
	dc.w $8813,$88C2,$805C,$8064,$80D8,$881B,$88CC,$8811; 144
	dc.w $8855,$88E2,$88F3,$8044,$88D8,$8085,$80A1,$80C1; 152
	dc.w $8119,$8889,$880A,$8822; 160
	dc.w $803F,$805B,$807F,$8886,$8808,$8080,$8866,$88E0
	dc.w $88C1,$8020,$8022,$8054,$80D2,$8859,$88B1,$8860; 8
	dc.w $8919,$88A4,$888F,$800A,$8061,$8075,$8095,$80B6; 16
	dc.w $80E0,$8810,$8898,$885B,$88D2,$8816,$8053,$8091; 24
	dc.w $8096,$80A4,$80DD,$80E6,$887A,$884D,$88E6,$8011; 32
	dc.w $8057,$807A,$8086,$809E,$80DA,$8058,$80DC,$80E3; 40
	dc.w $8863,$803C,$8056,$8069,$807E,$80AE,$80B5,$80B8; 48
	dc.w $80CD,$80FB,$80FF,$885C,$88CD,$8874,$88EA,$88FF; 56
	dc.w $88B5,$8043,$806C,$8074,$8077,$8089,$8097,$809F; 64
	dc.w $80A0,$8113,$811B,$8878,$880F,$88E1,$88FB,$8928; 72
	dc.w $8063,$8084,$808D,$80CB,$80D7,$80E9,$8128,$8138; 80
	dc.w $88AE,$88EC,$8031,$804C,$80E2,$80EA,$8864,$8029; 88
	dc.w $802D,$806D,$8078,$8088,$80B4,$80BE,$80CF,$80E1; 96
	dc.w $80E4,$8854,$88D6,$88D7,$8861,$892B,$8847,$8035; 104
	dc.w $806A,$8072,$8073,$8098,$80D5,$80D6,$8116,$811E; 112
	dc.w $8126,$8127,$812F,$815D,$8869,$8888,$8875,$8897; 120
	dc.w $88B4,$88D1,$88D4,$88D5,$88CB,$88E4,$8891,$8862; 128
	dc.w $8806,$88B8,$8065,$806E,$8071,$807D,$80D1,$80E7; 136
	dc.w $80F9,$8108,$812E,$814B,$8881,$8885,$8877,$887E; 144
	dc.w $8895,$88DF,$8887,$886C,$88F5,$8908,$8879,$886D; 152
	dc.w $892A,$88AA,$801E,$8027,$8046,$805F,$8070,$8079; 160
	dc.w $809A,$80AA,$80C3,$80D3,$80D4,$80DE,$80DF,$80F8; 168
	dc.w $8100,$8101,$812B,$8133,$8136,$8143,$8151,$882E; 176
	dc.w $889E,$8899,$88D3,$88DD,$88DE,$88E9,$88EF,$88F0; 184
	dc.w $88F8,$8927,$88BE,$8896,$804F,$806F,$8081,$808B; 192
	dc.w $808E,$809C,$80A3,$80B3,$80C0,$80CE,$80F0,$80F1; 200
	dc.w $80F5,$80F7,$8102,$8104,$8105,$8109,$810C,$8114; 208
	dc.w $8118,$8120,$8124,$8125,$812A,$8130,$8132,$8137; 216
	dc.w $8159,$8165,$883F,$886B,$8880,$8853,$88C6,$88CF; 224
	dc.w $88D9,$88DC,$8856,$88B6,$88F9,$8902,$8904,$8915; 232
	dc.w $886A,$8913,$8872,$8835,$8938,$895D,$8943,$8023; 240
	dc.w $8076,$807B,$808A,$809D,$80A6,$80A8,$80AC,$80B2; 248
	dc.w $80B7,$80BB,$80BC,$80BD,$80C6,$80E5,$80E8,$80EE; 256
	dc.w $80F4,$810A,$810D,$8111,$8115,$811A,$811F,$8122; 264
	dc.w $8123,$8139,$813A,$813C,$8142,$8144,$8147,$8148; 272
	dc.w $815E,$815F,$8163,$8168,$816A,$816C,$8170,$88E5; 280
	dc.w $88CE,$88EE,$88F1,$8884,$88FD,$8900,$88B9,$8917; 288
	dc.w $8871,$8909,$890D,$8865,$8925,$8922,$8831,$883C; 296
	dc.w $890F,$88C5,$8933,$8937,$891F,$802E,$806B,$8082; 304
	dc.w $8083,$808C,$8099,$809B,$80A2,$80A5,$80A7,$80A9; 312
	dc.w $80AB,$80AD,$80B9,$80BA,$80BF,$80C4,$80C5,$80C7; 320
	dc.w $80C8,$80C9,$80CA,$80D0,$80D9,$80DB,$80EB,$80EC; 328
	dc.w $80ED,$80EF,$80F2,$80F3,$80F6,$80FA,$80FC,$80FD; 336
	dc.w $80FE,$8103,$8106,$8107,$810B,$810E,$810F,$8110; 344
	dc.w $8112,$8117,$811C,$811D,$8121,$8129,$812C,$812D; 352
	dc.w $8131,$8134,$8135,$813B,$813D,$813E,$813F,$8140; 360
	dc.w $8141,$8145,$8146,$8149,$814A,$814C,$814D,$814E; 368
	dc.w $814F,$8150,$8152,$8153,$8154,$8155,$8156,$8157; 376
	dc.w $8158,$815A,$815B,$815C,$8160,$8161,$8162,$8164; 384
	dc.w $8166,$8167,$8169,$816B,$816D,$816E,$816F,$8171; 392
	dc.w $8172,$8173,$886E,$887D,$88C3,$88DB,$88E7,$88E8; 400
	dc.w $88EB,$88ED,$88F2,$88F6,$88FA,$88FC,$88FE,$882D; 408
	dc.w $8903,$8906,$8907,$890B,$8873,$889A,$8929,$892C; 416
	dc.w $892D,$8911,$893C,$8920,$8946,$88A9,$889C,$8916; 424
	dc.w $894F,$894C,$886F,$8958,$8956,$8959,$895A,$8961; 432
	dc.w $887B,$8966,$891C,$8918,$88A0,$88A3,$8967,$88A1; 440
byte_69E6:
	dc.b   0,  7,  0,  1,  0,  1,  0,  1,  0,$4A,  0,  1,  0,$39,  0,  3
	dc.b   0,  1,  0,  5,  0,$28,  0,  7,  0,$2C,  0,  1,  0,  1,  0,  2; 16
	dc.b   0,$28,  0,  5,  0,$39,  0,  1,  0,$28,  0,  9,  0,  1,  0,  4; 32
	dc.b   0,$28,  0,  6,  0,$28,  0,  3,  0,$4A,  0,  2,  0,  1,  0,  3; 48
	dc.b   0,$28,  0,  4,  0,$39,  0,  2,  0,$39,  0,  4,  0,  1,  0,  6; 64
	dc.b   0,  7,  0,  2,  0,$2C,  0,  2,  0,$28,  0,  1,  0,$1D,  0,  1; 80
	dc.b   0,$28,  0,  8,  0,$28,  0,  2,  0,  7,  0,  3,  0,  1,  0,  7; 96
	dc.b   0,$28,  0, $B,  0,$39,  0,  5,  0,$1D,  0,  3,  0,$1D,  0,  4; 112
	dc.b   0,$1D,  0,  2,  0,$1D,  0,  5,  0,$28,  0, $D,  0, $B,  0,  1; 128
	dc.b   0,$28,  0, $A,  0,$39,  0,  6,  0,$39,  0,  7,  0,$2C,  0,  3; 144
	dc.b   0,$1D,  0,  9,  0,$4A,  0,  3,  0,$1D,  0,  7,  0,$28,  0, $F; 160
	dc.b   0,$1D,  0, $B,  0,$1D,  0,$11,  0,$1D,  0, $D,  0,$1D,  0,  8; 176
	dc.b   0,$28,  0,$11,  0,$1D,  0,  6,  0, $B,  0,  2,  0,$1D,  0,$15; 192
	dc.b   0,$28,  0, $C,  0,$1D,  0, $A,  0,$28,  0, $E,  0,  1,  0,  8; 208
	dc.b   0,$1D,  0, $F,  0,$28,  0,$10,  0,  7,  0,  6,  0,$1D,  0,$13; 224
	dc.b   0,$4A,  0,  4,  0,$1D,  0,$17,  0,  7,  0,  4,  0, $B,  0,  3; 240
	dc.b   0,$1D,  0,$1B,  0,$4A,  0,  6,  0,$1D,  0,$1D,  0,$4A,  0,  5; 256
	dc.b   0,  1,  0,  9,  0,  7,  0,  5,  0,$1D,  0,$1E,  0,$1D,  0,$19; 272
	dc.b   0,  1,  0,$11,  0,$1D,  0, $C,  0,$1D,  0,$7F,  0,$2C,  0,  4; 288
	dc.b   0,$1D,  0, $E,  0,$1D,  0,$1C,  0,$4A,  0, $A,  0,$1D,  0,$1A; 304
	dc.b   0,$4A,  0,  7,  0,$1D,  0,$18,  0, $B,  0,  4,  0,$1D,  0,$12; 320
	dc.b   0,$1D,  0,$10,  0,  1,  0, $F,  0, $B,  0,  5,  0,  1,  0, $D; 336
	dc.b   0,  1,  0,$13,  0,$4A,  0,  9,  0,$4A,  0, $B,  0,$4A,  0, $C; 352
	dc.b   0,$2C,  0,  5,  0,$1D,  0,$14,  0, $B,  0,  7,  0,$1D,  0,$16; 368
	dc.b   0,  1,  0, $C,  0,  1,  0, $E,  0,$4A,  0,  8,  0,$1D,  0,$5F; 384
	dc.b   0,  1,  0, $A,  0, $B,  0,  6,  0, $B,  0,  8,  0, $B,  0, $A; 400
	dc.b   0,$39,  0,  8,  0, $B,  0,  9,  0,$2C,  0,  6,  0,  1,  0,$10; 416
	dc.b   0, $B,  0, $C,  0,  1,  0, $B,  0,  1,  0,$12,  0,  7,  0,  7; 432
	dc.b   0,$1D,  0,$1F,  0,$28,  0,$12,  0, $B,  0, $B,  0,$2C,  0,  7; 448
	dc.b   0,$2C,  0, $B,  0,$1D,  0,$23,  0,  1,  0,$15,  0,$2C,  0,  8; 464
	dc.b   0,$1D,  0,$2E,  0,$1D,  0,$3F,  0,  1,  0,$14,  0, $B,  0, $D; 480
	dc.b   0,$2C,  0,  9,  0,$2C,  0, $A,  0,$1D,  0,$25,  0,$1D,  0,$55; 496
	dc.b   0,$1D,  0,$71,  0,$1D,  0,$7C,  0,$4A,  0, $D,  0,$2C,  0, $C; 512
	dc.b   0,$2C,  0, $F,  0,$2C,  0,$10,$FF,$FB,$FF,$FB,$FF,$FA,$FF,$FA; 528
	dc.b $FF,$FA,$FF,$FA	; 544
; ===========================================================================
; (!)
loc_6C0A:
	move.b	($FFFFDB0F).w,($FFFFDB11).w
	moveq	#0,d1
	movea.l	($FFFFDB00).w,a0	; Frame mappings pointer?
	cmpa.l	#MapSpec_Straight2,a0	; straight path frame 2
	blt.s	loc_6C4A
	cmpa.l	#MapSpec_Straight3,a0	; straight path frame 3
	bge.s	loc_6C4A
	movea.l	($FFFFDB8E).w,a5
	move.b	($FFFFDB0A).w,d1
	move.b	(a5,d1.w),d1
	bpl.s	loc_6C88

loc_6C34:
	st	($FFFFDB0E).w
	move.b	($FFFFDB0D).w,d0
	cmp.b	($FFFFDB21).w,d0
	blt.w	return_6C9A
	st	($FFFFDB0F).w
	rts
; ===========================================================================

loc_6C4A:
	cmpa.l	#MapSpec_Rise14,a0
	blt.s	loc_6C6A
	cmpa.l	#MapSpec_Rise15,a0
	bge.s	loc_6C6A
	movea.l	($FFFFDB8E).w,a5
	move.b	($FFFFDB0A).w,d1
	move.b	(a5,d1.w),d1
	bpl.s	loc_6C88
	bra.s	loc_6C34
; ===========================================================================

loc_6C6A:
	cmpa.l	#MapSpec_Drop6,a0
	blt.s	return_6C9A
	cmpa.l	#MapSpec_Drop7,a0
	bge.s	return_6C9A
	movea.l	($FFFFDB8E).w,a5
	move.b	($FFFFDB0A).w,d1
	move.b	(a5,d1.w),d1
	bmi.s	loc_6C34

loc_6C88:
	sf	($FFFFDB0E).w
	move.b	($FFFFDB0D).w,d0
	cmp.b	($FFFFDB21).w,d0
	blt.s	return_6C9A
	sf	($FFFFDB0F).w

return_6C9A:
	rts
; End of function sub_5604


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Initialize the PNT and H scroll table buffers.

ssInitTableBuffers:
	lea	(Horiz_Scroll_Buf).w,a1
	lea	(Horiz_Scroll_Buf_2).w,a2
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	move.w	#-$100,d1
	move.w	#-$200,d2
	move.w	#-$300,d3
	swap	d1
	swap	d2
	swap	d3
	moveq	#$1F,d4

-	move.l	d0,(a1)+
	move.l	d0,(a1)+
	move.l	d1,(a1)+
	move.l	d1,(a1)+
	move.l	d2,(a1)+
	move.l	d2,(a1)+
	move.l	d3,(a1)+
	move.l	d3,(a1)+
	move.l	d3,(a2)+
	move.l	d3,(a2)+
	move.l	d2,(a2)+
	move.l	d2,(a2)+
	move.l	d1,(a2)+
	move.l	d1,(a2)+
	move.l	d0,(a2)+
	move.l	d0,(a2)+
	dbf	d4,-
	rts
; End of function ssInitTableBuffers


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Load compressed special stage data into RAM, or VRAM for the art.

ssLdComprsdData:
	lea	(ArtKos_Special).l,a0
	lea	(Metablock_Table).l,a1
	bsr.w	KosDec
	move.l	#$40000000,(VDP_control_port).l	; VRAM write address $0000
	lea	(VDP_data_port).l,a1
	movea.l	#Metablock_Table,a0
	move.w	(a0)+,d0
	subq.w	#1,d0

-	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0),(a1)
	move.l	(a0)+,(a1)
	dbf	d0,-

	lea	(MiscKoz_SpecialPerspective).l,a0
	lea	($FFFF6A60).l,a1
	bsr.w	KosDec
	lea	(MiscKoz_SpecialLevelLayout).l,a0
	lea	($FFFF855C).w,a4
	bsr.w	NemDecToRAM
	lea	(MiscKoz_SpecialObjectLocations).l,a0
	lea	($FFFF8778).w,a1
	bsr.w	KosDec
	rts
; End of function ssLdComprsdData


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6D52:
	move	#$2700,sr
	movea.l	#Metablock_Table,a1
	lea	(MapEng_SpecialBackBottom).l,a0
	move.w	#$700,d0
	bsr.w	EniDec
	movea.l	#$FFFF0400,a1
	lea	(MapEng_SpecialBack).l,a0
	move.w	#$700,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60000002,d0
	moveq	#$1F,d1
	moveq	#$1F,d2
	bsr.w	ShowVDPGraphics2
	lea	(Metablock_Table).l,a1
	move.l	#$60400002,d0
	moveq	#$1F,d1
	moveq	#$1F,d2
	bsr.w	ShowVDPGraphics2
	lea	(Metablock_Table).l,a1
	move.l	#$60800002,d0
	moveq	#$1F,d1
	moveq	#$1F,d2
	bsr.w	ShowVDPGraphics2
	lea	(Metablock_Table).l,a1
	move.l	#$60C00002,d0
	moveq	#$1F,d1
	moveq	#$1F,d2
	bsr.w	ShowVDPGraphics2
	move	#$2300,sr
	rts
; End of function sub_6D52


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6DD4:
	lea	(ArtNem_SpecialSonicAndTails).l,a0
	lea	($FF0000).l,a4
	bra.w	NemDecToRAM
; End of function sub_6DD4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6DE4:
	bsr.w	sub_6E3C
	bsr.w	sub_6EE0
	rts
; End of function sub_6DE4

; ===========================================================================
; special stage background scrolling control data
off_6DEE:
	dc.w byte_6E04-off_6DEE
	dc.w byte_6E09-off_6DEE	; 1
	dc.w byte_6E0E-off_6DEE	; 2
	dc.w byte_6E13-off_6DEE	; 3
	dc.w byte_6E18-off_6DEE	; 4
	dc.w byte_6E1D-off_6DEE	; 5
	dc.w byte_6E22-off_6DEE	; 6
	dc.w byte_6E27-off_6DEE	; 7
	dc.w byte_6E2C-off_6DEE	; 8
	dc.w byte_6E31-off_6DEE	; 9
	dc.w byte_6E36-off_6DEE	; 10
byte_6E04:	dc.b   2,  2,  2,  2,  2
byte_6E09:	dc.b   4,  4,  5,  4,  5
byte_6E0E:	dc.b  $B, $B, $B, $B, $C
byte_6E13:	dc.b   0,  0,  1,  0,  0
byte_6E18:	dc.b   1,  1,  1,  1,  1
byte_6E1D:	dc.b   9,  9,  8,  9,  9
byte_6E22:	dc.b   9,  9,  9,  9, $A
byte_6E27:	dc.b   7,  7,  6,  7,  7
byte_6E2C:	dc.b   0,  1,  1,  1,  0
byte_6E31:	dc.b   4,  3,  3,  3,  4
byte_6E36:	dc.b   0,  0,$FF,  0,  0
	even

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6E3C:
	moveq	#0,d7
	moveq	#0,d6
	moveq	#0,d0
	move.b	($FFFFDB09).w,d2
	move.b	($FFFFDB08).w,d0
	add.w	d0,d0
	move.w	off_6E54(pc,d0.w),d0
	jmp	off_6E54(pc,d0.w)
; End of function sub_6E3C

; ===========================================================================
off_6E54:
	dc.w loc_6E5E-off_6E54
	dc.w loc_6E5E-off_6E54	; 1
	dc.w loc_6E5E-off_6E54	; 2
	dc.w return_6E86-off_6E54; 3
	dc.w return_6E86-off_6E54; 4
; ===========================================================================

loc_6E5E:
	moveq	#0,d1
	cmpi.b	#1,d2
	blt.s	loc_6E88
	moveq	#2,d1
	cmpi.b	#2,d2
	blt.s	loc_6E88
	moveq	#4,d1
	cmpi.b	#$A,d2
	blt.s	loc_6E88
	moveq	#2,d1
	cmpi.b	#$B,d2
	blt.s	loc_6E88
	moveq	#0,d1
	cmpi.b	#$C,d2
	blt.s	loc_6E88

return_6E86:
	rts
; ===========================================================================

loc_6E88:
	moveq	#0,d0
	moveq	#0,d2
	move.b	($FFFFDB0D).w,d0
	lea	off_6DEE(pc),a0
	adda.w	(a0,d1.w),a0
	move.b	(a0,d0.w),d2
	tst.b	($FFFFDB11).w
	bne.s	loc_6EAA
	tst.b	($FFFFDB0F).w
	beq.s	loc_6EBE
	bra.s	loc_6EB6
; ===========================================================================

loc_6EAA:
	tst.b	($FFFFDB0F).w
	bne.s	loc_6EBE
	lea	($FFFFE002).w,a1
	bra.s	loc_6ECE
; ===========================================================================

loc_6EB6:
	lea	($FFFFD702).w,a1
	neg.w	d2
	bra.s	loc_6ECE
; ===========================================================================

loc_6EBE:
	lea	($FFFFE002).w,a1
	tst.b	($FFFFDB0F).w
	beq.s	loc_6ECE
	lea	($FFFFD702).w,a1
	neg.w	d2

loc_6ECE:
	move.w	#$FF,d0

loc_6ED2:
	sub.w	d2,(a1)+
	adda.l	#2,a1
	dbf	d0,loc_6ED2
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6EE0:
	move.w	($FFFFF618).w,($FFFFDB34).w
	moveq	#0,d7
	moveq	#0,d0
	moveq	#0,d2
	move.b	($FFFFDB09).w,d2
	move.b	($FFFFDB08).w,d0
	add.w	d0,d0
	move.w	off_6EFE(pc,d0.w),d0
	jmp	off_6EFE(pc,d0.w)
; End of function sub_6EE0

; ===========================================================================
off_6EFE:
	dc.w loc_6F0A-off_6EFE
	dc.w loc_6F2A-off_6EFE	; 1
	dc.w return_6F08-off_6EFE; 2
	dc.w loc_6F4C-off_6EFE	; 3
	dc.w return_6F08-off_6EFE; 4
; ===========================================================================

return_6F08:
	rts
; ===========================================================================

loc_6F0A:
	move.b	byte_6F12(pc,d2.w),d1
	bpl.s	loc_6F6A
	rts
; ===========================================================================
; unknown (something to do with special stage background)
byte_6F12:
	dc.b  -1
	dc.b  -1	; 1
	dc.b  -1	; 2
	dc.b  -1	; 3
	dc.b  -1	; 4
	dc.b  -1	; 5
	dc.b  -1	; 6
	dc.b  -1	; 7
	dc.b  -1	; 8
	dc.b  -1	; 9
	dc.b   8	; 10
	dc.b   8	; 11
	dc.b   2	; 12
	dc.b   4	; 13
	dc.b   4	; 14
	dc.b   4	; 15
	dc.b   4	; 16
	dc.b   4	; 17
	dc.b   4	; 18
	dc.b  $A	; 19
	dc.b  $C	; 20
	dc.b  $E	; 21
	dc.b $12	; 22
	dc.b $10	; 23
; ===========================================================================

loc_6F2A:
	st	d7
	move.b	byte_6F34(pc,d2.w),d1
	bpl.s	loc_6F6A
	rts
; ===========================================================================
; unknown
byte_6F34:
	dc.b  -1
	dc.b  -1	; 1
	dc.b  -1	; 2
	dc.b  -1	; 3
	dc.b  -1	; 4
	dc.b  -1	; 5
	dc.b  -1	; 6
	dc.b  -1	; 7
	dc.b  -1	; 8
	dc.b  -1	; 9
	dc.b  -1	; 10
	dc.b $10	; 11
	dc.b $12	; 12
	dc.b  $E	; 13
	dc.b  $C	; 14
	dc.b  $A	; 15
	dc.b   4	; 16
	dc.b   4	; 17
	dc.b   4	; 18
	dc.b   4	; 19
	dc.b   4	; 20
	dc.b   4	; 21
	dc.b   2	; 22
	dc.b   0	; 23
; ===========================================================================

loc_6F4C:
	tst.b	($FFFFDB87).w
	bne.s	return_6F58
	move.b	byte_6F5A(pc,d2.w),d1
	bpl.s	loc_6F6A

return_6F58:
	rts
; ===========================================================================
byte_6F5A:
	dc.b   6
	dc.b   6	; 1
	dc.b $14	; 2
	dc.b $14	; 3
	dc.b   6	; 4
	dc.b   6	; 5
	dc.b $14	; 6
	dc.b $14	; 7
	dc.b   6	; 8
	dc.b   6	; 9
	dc.b $14	; 10
	dc.b $14	; 11
	dc.b   6	; 12
	dc.b   6	; 13
	dc.b $14	; 14
	dc.b $14	; 15
; ===========================================================================

loc_6F6A:
	moveq	#0,d0
	moveq	#0,d2
	move.b	($FFFFDB0D).w,d0
	lea	off_6DEE(pc),a0
	adda.w	(a0,d1.w),a0
	move.b	(a0,d0.w),d2
	tst.b	d7
	bpl.s	loc_6F88
	add.w	d2,($FFFFF618).w
	rts
; ===========================================================================

loc_6F88:
	sub.w	d2,($FFFFF618).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_6F8E:
	lea	(Object_RAM+$200).w,a1
	move.w	#$76,d5

loc_6F96:
	tst.b	(a1)
	beq.s	return_6FA2
	lea	next_object(a1),a1 ; a1=object
	dbf	d5,loc_6F96

return_6FA2:
	rts
; End of function sub_6F8E

; ===========================================================================

loc_6FA4:
	movea.l	a0,a1
	move.w	#$CFC0,d5
	sub.w	a0,d5
	lsr.w	#6,d5
	subq.w	#1,d5
	bcs.s	return_6FBE

loc_6FB2:
	tst.b	(a1)
	beq.s	return_6FBE
	lea	$40(a1),a1
	dbf	d5,loc_6FB2

return_6FBE:
	rts


; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5E - HUD from Special Stage
; ----------------------------------------------------------------------------
; Sprite_6FC0:
Obj5E:
	move.b	routine(a0),d0
	bne.w	JmpTo_DisplaySprite
	move.l	#Obj5E_MapUnc_7070,mappings(a0)
	move.w	#$1FA,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#0,priority(a0)
	move.b	#1,routine(a0)
	bset	#6,render_flags(a0)
	moveq	#0,d1
	tst.b	(System_Stack).w
	beq.s	loc_7002
	addq.w	#6,d1
	tst.b	(Graphics_Flags).w
	bpl.s	loc_7012
	addq.w	#1,d1
	bra.s	loc_7012
; ---------------------------------------------------------------------------

loc_7002:
	move.w	(Player_mode).w,d1
	andi.w	#3,d1
	tst.b	(Graphics_Flags).w
	bpl.s	loc_7012
	addq.w	#3,d1 ; set special stage tails name to "TAILS" instead of MILES

loc_7012:
	add.w	d1,d1
	moveq	#0,d2
	moveq	#0,d3
	lea	(off_7042).l,a1
	lea	$10(a0),a2
	adda.w	(a1,d1.w),a1
	move.b	(a1)+,d3
	move.b	d3,objoff_F(a0)
	subq.w	#1,d3
	moveq	#0,d0
	move.b	(a1)+,d0

loc_7032:
	move.w	d0,(a2,d2.w)
	move.b	(a1)+,5(a2,d2.w)
	addq.w	#6,d2
	dbf	d3,loc_7032
	rts
; ===========================================================================
; unknown
off_7042:
	dc.w byte_7052-off_7042
	dc.w byte_7057-off_7042	; 1
	dc.w byte_705A-off_7042	; 2
	dc.w byte_705D-off_7042	; 3
	dc.w byte_7062-off_7042	; 4
	dc.w byte_7065-off_7042	; 5
	dc.w byte_7068-off_7042	; 6
	dc.w byte_706C-off_7042	; 7
byte_7052:	dc.b   3,$80,  0,  1,  3
byte_7057:	dc.b   1,$D4,  0
byte_705A:	dc.b   1,$38,  1
byte_705D:	dc.b   3,$80,  0,  2,  3
byte_7062:	dc.b   1,$D4,  0
byte_7065:	dc.b   1,$38,  2
byte_7068:	dc.b   2,$80,  0,  1
byte_706C:	dc.b   2,$80,  0,  2
; -----------------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------------
Obj5E_MapUnc_7070:	BINCLUDE "mappings/sprite/obj5E.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5F - Start banner/"Ending controller" from Special Stage
; ----------------------------------------------------------------------------
; Sprite_70F0:
Obj5F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_70FE(pc,d0.w),d1
	jmp	off_70FE(pc,d1.w)
; ===========================================================================
off_70FE:
	dc.w loc_714A-off_70FE
	dc.w loc_718A-off_70FE	; 1
	dc.w loc_71B4-off_70FE	; 2
	dc.w loc_710A-off_70FE	; 3
	dc.w return_723E-off_70FE; 4
	dc.w loc_7218-off_70FE	; 5
; ===========================================================================

loc_710A:
	moveq	#0,d0
	move.b	angle(a0),d0
	bsr.w	CalcSine
	muls.w	objoff_14(a0),d0
	muls.w	objoff_14(a0),d1
	asr.w	#8,d0
	asr.w	#8,d1
	add.w	d1,x_pos(a0)
	add.w	d0,y_pos(a0)
	cmpi.w	#0,x_pos(a0)
	blt.w	JmpTo_DeleteObject
	cmpi.w	#$100,x_pos(a0)
	bgt.w	JmpTo_DeleteObject
	cmpi.w	#0,y_pos(a0)
	blt.w	JmpTo_DeleteObject
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_714A:
	tst.b	(System_Stack).w
	beq.s	loc_7158
	move.w	#8,d0
	bsr.w	JmpTo_loc_35DAA

loc_7158:
	move.w	#$80,x_pos(a0)
	move.w	#-$40,y_pos(a0)
	move.w	#$100,y_vel(a0)
	move.l	#Obj5F_MapUnc_7240,mappings(a0)
	move.w	#$38A,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#2,routine(a0)

loc_718A:
	bsr.w	JmpTo_ObjectMove
	cmpi.w	#$48,y_pos(a0)
	blt.w	JmpTo_DisplaySprite
	move.w	#0,y_vel(a0)
	move.w	#$48,y_pos(a0)
	move.b	#4,routine(a0)
	move.b	#$F,objoff_2A(a0)
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_71B4:
	subi.b	#1,objoff_2A(a0)
	bne.w	JmpTo_DisplaySprite
	moveq	#6,d6

; WARNING: the build script needs editing if you rename this label
word_728C_user: lea	(Obj5F_MapUnc_7240+$4C).l,a2 ; word_728C

	moveq	#2,d3
	move.w	#8,objoff_14(a0)
	move.b	#6,routine(a0)

loc_71D4:
	bsr.w	sub_6F8E
	bne.s	loc_7206
	moveq	#0,d0
	move.w	#$F,d1

loc_71E0:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_71E0
	move.b	d3,mapping_frame(a1)
	addq.w	#1,d3
	move.w	#-$28,d2
	move.w	8(a2),d1
	bsr.w	CalcAngle
	move.b	d0,angle(a1)
	lea	$A(a2),a2

loc_7206:
	dbf	d6,loc_71D4
	move.b	#$A,routine(a0)
	move.w	#$1E,objoff_2A(a0)
	rts
; ===========================================================================

loc_7218:
	subi.w	#1,objoff_2A(a0)
	bpl.s	return_723C
	tst.b	(System_Stack).w
	beq.s	loc_7230
	move.w	#$A,d0
	bsr.w	JmpTo_loc_35DAA
	bra.s	loc_7234
; ===========================================================================

loc_7230:
	bsr.w	JmpTo_loc_35CE2

loc_7234:
	st	($FFFFDB23).w
	bra.w	JmpTo_DeleteObject
; ===========================================================================

return_723C:
	rts
; ===========================================================================

return_723E:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
; WARNING: the build script needs editing if you rename this label
;	   or if you change the meaning of frame 2 in these mappings
Obj5F_MapUnc_7240:	BINCLUDE "mappings/sprite/obj5F_a.bin"
; -----------------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------------
Obj5F_MapUnc_72D2:	BINCLUDE "mappings/sprite/obj5F_b.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 87 - Number of rings in Special Stage
; ----------------------------------------------------------------------------
; Sprite_7356:
Obj87:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_7364(pc,d0.w),d1
	jmp	off_7364(pc,d1.w)
; ===========================================================================
off_7364:
	dc.w loc_736C-off_7364
	dc.w loc_7480-off_7364	; 1
	dc.w loc_753E-off_7364	; 2
	dc.w loc_75DE-off_7364	; 3
; ===========================================================================

loc_736C:
	move.b	#2,objoff_A(a0)
	move.l	#Obj5F_MapUnc_72D2,mappings(a0)
	move.w	#$41FA,art_tile(a0)
	move.b	#4,render_flags(a0)
	bset	#6,render_flags(a0)
	move.b	#2,objoff_F(a0)
	move.w	#$20,d0
	moveq	#0,d1
	lea	$10(a0),a1
	move.w	#$48,(a1)
	move.w	d0,2(a1)
	move.w	d1,4(a1)
	move.w	#$E0,2+mappings(a1)
	move.w	d0,8(a1)
	move.w	d1,$A(a1)
	move.w	d0,$E(a1)
	move.w	d0,$14(a1)
	move.w	d0,$1A(a1)
	move.w	d0,$20(a1)
	tst.b	(System_Stack).w
	bne.s	loc_742A
	cmpi.w	#0,(Player_mode).w
	beq.s	loc_73E0
	subi.b	#1,objoff_F(a0)
	move.w	#$94,(a1)
	rts
; ===========================================================================

loc_73E0:
	bsr.w	sub_6F8E
	bne.s	return_7428
	move.b	#$87,(a1) ; load obj87
	move.b	#4,objoff_A(a1)
	move.l	#Obj5F_MapUnc_72D2,mappings(a1)
	move.w	#$41FA,art_tile(a1)
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#1,objoff_F(a1)
	lea	$10(a1),a2
	move.w	#$80,(a2)
	move.w	d0,2(a2)
	move.w	d1,4(a2)
	move.w	d0,8(a2)
	move.w	d0,$E(a2)

return_7428:
	rts
; ===========================================================================

loc_742A:
	bsr.w	sub_6F8E
	bne.s	return_7428
	move.b	#$87,(a1) ; load obj87
	move.b	#6,objoff_A(a1)
	move.l	#Obj5F_MapUnc_72D2,mappings(a1)
	move.w	#$41FA,art_tile(a1)
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#0,objoff_F(a1)
	lea	$10(a1),a2
	move.w	#$2C,d0
	move.w	#$A,d1
	move.w	d0,2(a2)
	move.w	d1,4(a2)
	move.w	d0,8(a2)
	move.w	d1,$A(a2)
	move.w	d0,$E(a2)
	move.w	d1,$10(a2)
	rts
; ===========================================================================

loc_7480:
	moveq	#0,d0
	moveq	#0,d3
	moveq	#0,d5
	lea	$10(a0),a1
	movea.l	a1,a2
	addq.w	#5,a2
	cmpi.w	#2,(Player_mode).w
	beq.s	loc_74EA
	move.b	(MainCharacter+jumping).w,d0
	beq.s	loc_74A4
	addq.w	#1,d3
	move.b	d0,(a2)
	lea	6(a2),a2

loc_74A4:
	move.b	(MainCharacter+interact).w,d0
	tst.b	d3
	bne.s	loc_74B0
	tst.b	d0
	beq.s	loc_74B8

loc_74B0:
	addq.w	#1,d3
	move.b	d0,(a2)
	lea	6(a2),a2

loc_74B8:
	addq.w	#1,d3
	move.b	(MainCharacter+layer).w,(a2)
	lea	6(a2),a2
	move.w	d3,d4
	subq.w	#1,d4
	move.w	#$48,d1
	tst.w	(Player_mode).w
	beq.s	loc_74D4
	addi.w	#$54,d1

loc_74D4:
	move.w	d1,(a1,d5.w)
	addi.w	#8,d1
	addq.w	#6,d5
	dbf	d4,loc_74D4
	cmpi.w	#1,(Player_mode).w
	beq.s	loc_7536

loc_74EA:
	moveq	#0,d0
	moveq	#0,d4
	move.b	(Sidekick+jumping).w,d0
	beq.s	loc_74FC
	addq.w	#1,d4
	move.b	d0,(a2)
	lea	6(a2),a2

loc_74FC:
	move.b	(Sidekick+interact).w,d0
	tst.b	d4
	bne.s	+
	tst.b	d0
	beq.s	loc_7510
+
	addq.w	#1,d4
	move.b	d0,(a2)
	lea	6(a2),a2

loc_7510:
	move.b	(Sidekick+layer).w,(a2)
	addq.w	#1,d4
	add.w	d4,d3
	subq.w	#1,d4
	move.w	#$E0,d1
	tst.w	(Player_mode).w
	beq.s	loc_7528
	subi.w	#$44,d1

loc_7528:
	move.w	d1,(a1,d5.w)
	addi.w	#8,d1
	addq.w	#6,d5
	dbf	d4,loc_7528

loc_7536:
	move.b	d3,objoff_F(a0)
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_753E:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#1,d3
	move.b	(MainCharacter+layer).w,d0
	add.b	(Sidekick+layer).w,d0
	move.b	(MainCharacter+interact).w,d1
	add.b	(Sidekick+interact).w,d1
	move.b	(MainCharacter+jumping).w,d2
	add.b	(Sidekick+jumping).w,d2
	cmpi.b	#$A,d0
	bcs.s	+
	addq.w	#1,d1
	subi.b	#$A,d0
+
	tst.b	d1
	beq.s	loc_7586
	cmpi.b	#$A,d1
	bcs.s	+
	addi.b	#1,d2
	subi.b	#$A,d1
+
	addq.w	#1,d3
	tst.b	d2
	beq.s	loc_758C
	addq.w	#1,d3
	bra.s	loc_758C
; ===========================================================================

loc_7586:
	tst.b	d2
	beq.s	loc_758C
	addq.w	#2,d3

loc_758C:
	lea	$10(a0),a1
	move.b	d3,objoff_F(a0)
	cmpi.b	#2,d3
	blt.s	loc_75BC
	beq.s	loc_75C8
	move.w	#$78,(a1)
	move.b	d2,5(a1)
	move.w	#$80,6(a1)
	move.b	d1,$B(a1)
	move.w	#$88,$C(a1)
	move.b	d0,$11(a1)
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_75BC:
	move.w	#$80,(a1)
	move.b	d0,5(a1)
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_75C8:
	move.w	#$7C,(a1)
	move.b	d1,5(a1)
	move.w	#$84,6(a1)
	move.b	d0,$B(a1)
	bra.w	JmpTo_DisplaySprite
; ===========================================================================

loc_75DE:
	move.b	($FFFFDB93).w,d0
	bne.s	loc_75E6
	rts
; ===========================================================================

loc_75E6:
	lea	$10(a0),a1
	moveq	#0,d2
	move.b	d0,d1
	andi.b	#$F0,d0
	beq.s	loc_761C
	addq.w	#1,d2
	move.w	#$20,(a1)
	lea	6(a1),a1
	subi.b	#$10,d0
	beq.s	loc_761C
	addq.w	#1,d2
	move.w	#$30,(a1)
	lea	6(a1),a1
	subi.b	#$10,d0
	beq.s	loc_761C
	addq.w	#1,d2
	move.w	#$40,(a1)
	bra.s	loc_7648
; ===========================================================================

loc_761C:
	andi.b	#$F,d1
	beq.s	loc_7648
	addq.w	#1,d2
	move.w	#$B8,(a1)
	lea	6(a1),a1
	subi.b	#1,d1
	beq.s	loc_7648
	addq.w	#1,d2
	move.w	#$C8,(a1)
	lea	6(a1),a1
	subi.b	#1,d1
	beq.s	loc_7648
	addq.w	#1,d2
	move.w	#$D8,(a1)

loc_7648:
	move.b	d2,objoff_F(a0)
	bra.w	JmpTo_DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_7650:
	move.b	($FFFFDB0D).w,d0
	cmp.b	($FFFFDB21).w,d0
	beq.s	loc_765C
	rts
; ===========================================================================

loc_765C:
	moveq	#0,d0
	move.b	($FFFFDB10).w,d0
	add.w	d0,d0
	lea	SSCurveOffsets(pc,d0.w),a2
	move.b	(a2)+,d0
	tst.b	($FFFFDB0E).w
	beq.s	+
	neg.b	d0
+
	ext.w	d0
	addi.w	#$80,d0
	move.w	d0,($FFFFF73E).w
	move.b	(a2),d0
	ext.w	d0
	addi.w	#$36,d0
	move.w	d0,($FFFFF740).w
	rts
; End of function sub_7650

; ===========================================================================
; Position offsets to sort-of rotate the plane sonic/tails are in
; when the special stage track is curving, so they follow it better.
; Each word seems to be (x_offset, y_offset)
SSCurveOffsets: ; word_768A:
	dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0
	dc.b   9, -$A,     0,-$1C,     0,-$1C,     0,-$20,     0,-$24,    0,-$2A,    0,-$10 ; upward curve?
	dc.b   0,   6,     0,  $E,     0, $10,     0, $12,     0, $12,    9, $12
	dc.b   0,   0,     0,   0,     0,   0,     0,   0
	dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0
	dc.b  $B,  $C,     0,  $C,     0, $12,     0,  $A,     0,   8,    0,   2,    0, $10 ; downward curve?
	dc.b   0,-$20,     0,-$1F,     0,-$1E,     0,-$1B,     0,-$18,    0, -$E
	dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0,   $13,   0
	dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0,   $13,   0
	dc.b  $B,   0,     0,   0,     0,   0,     0,   0
	dc.b   0,   0,     0,   0,     0,   0,     3,   0 ; 112
; ===========================================================================

loc_76FA:
	moveq	#0,d1
	moveq	#1,d2
	move.w	(Current_Special_Stage).w,d0
	move.b	d0,d1
	lsr.w	#8,d0
	add.w	d0,d0
	add.w	d0,d0
	add.w	d1,d0
	tst.w	(Player_mode).w
	bne.s	loc_7718
	move.b	Misc_7756(pc,d0.w),d1
	bra.s	loc_771C
; ===========================================================================

loc_7718:
	move.b	Misc_7772(pc,d0.w),d1

loc_771C:
	move.w	d1,($FFFFDB8C).w
	moveq	#0,d0
	cmpi.w	#$64,d1
	blt.s	+
	addq.w	#1,d2
	subi.w	#$64,d1
	move.w	#$100,d0
	cmpi.w	#$64,d1
	blt.s	+
	subi.w	#$64,d1
	addi.w	#$100,d0
+
	divu.w	#$A,d1
	lsl.w	#4,d1
	or.b	d1,d0
	swap	d1
	or.b	d1,d0
	move.w	d0,d1
	addi.w	#1,(Current_Special_Stage).w
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic and Tails games
;
; This array stores the number of rings you need to get to complete each round
; of each special stage, while playing with both sonic and tails. 4 bytes per
; stage, corresponding to the four possible parts of the level. Last part is unused.
; ----------------------------------------------------------------------------
Misc_7756:
	dc.b  40, 80,140,120	; 4
	dc.b  50,100,140,150	; 8
	dc.b  60,110,160,170	; 12
	dc.b  40,100,150,160	; 16
	dc.b  55,110,200,200	; 20
	dc.b  80,140,220,220	; 24
	dc.b 100,190,210,210	; 28
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic or Tails alone games
;
; This array stores the number of rings you need to get to complete each round
; of each special stage, while playing with either sonic or tails. 4 bytes per
; stage, corresponding to the four possible parts of the level. Last part is unused.
; ----------------------------------------------------------------------------
Misc_7772:
	dc.b  30, 70,130,110	; 4
	dc.b  50,100,140,140	; 8
	dc.b  50,110,160,160	; 12
	dc.b  40,110,150,150	; 16
	dc.b  50, 90,160,160	; 20
	dc.b  80,140,210,210	; 24
	dc.b 100,150,190,190	; 28

; special stage palette table?
word_778E:
	dc.w   $1B	; 0
	dc.w   $1C	; 1
	dc.w   $1D	; 2
	dc.w   $1E	; 3
	dc.w   $1F	; 4
	dc.w   $20	; 5
	dc.w   $21	; 6
	dc.w   $22	; 7
	dc.w   $23	; 8
	dc.w   $24	; 9

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_77A2:
	clr.b	($FFFFFE17).w
	move.b	#-1,($FFFFDB4C).w
	move.w	#0,(Ring_count).w
	move.w	#0,(Ring_count_2P).w
	move.b	#0,($FFFFFF42).w
	move.b	#0,(Got_Emerald).w
	move.b	#4,($FFFFDB9F).w
	lea	($FFFFFFA0).w,a2
	moveq	#0,d0
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	move.w	d0,(a2)+
	moveq	#$18,d0
	bsr.w	PalLoad1
	lea	word_778E(pc),a1
	moveq	#0,d0
	move.b	(Current_Special_Stage).w,d0
	add.w	d0,d0
	move.w	d0,d1
	tst.b	(System_Stack).w
	beq.s	+
	cmpi.b	#4,d0
	bcs.s	+
	addi.w	#6,d0
+
	move.w	(a1,d0.w),d0
	bsr.w	PalLoad1
	lea	($FFFF8778).w,a0
	adda.w	(a0,d1.w),a0
	move.l	a0,($FFFFDB88).w
	lea	($FFFF855C).w,a0
	adda.w	(a0,d1.w),a0
	move.l	a0,($FFFFDB8E).w
	rts
; End of function sub_77A2

; ===========================================================================
; unknown
word_7822:
	dc.w	 4
	dc.w  $804	; 1
	dc.w  $C04	; 2
	dc.w $1404	; 3
	dc.w $1804	; 4
	dc.w $1C02	; 5
	dc.w $2604	; 6
	dc.w $2A06	; 7
	dc.w $3004	; 8
	dc.w $3804	; 9
	dc.w $3C04	; 10
	dc.w $4004	; 11
	dc.w $4404	; 12
	dc.w $4C06	; 13
	dc.w $5A02	; 14
	dc.w $FFFF	; 15
; ===========================================================================
	nop

JmpTo_DisplaySprite 
	jmp	DisplaySprite.l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_157A4 
	jmp	loc_157A4.l
; End of function JmpTo_loc_157A4

; ===========================================================================

JmpTo_DeleteObject 
	jmp	DeleteObject.l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_35CE2 
	jmp	loc_35CE2.l
; End of function JmpTo_loc_35CE2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_35DAA 
	jmp	loc_35DAA.l
; End of function JmpTo_loc_35DAA


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_7862:
JmpTo_ObjectMove 
	jmp	ObjectMove.l
; End of function JmpTo_ObjectMove


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_Hud_Base 
	jmp	Hud_Base.l
; End of function JmpTo_Hud_Base




; ===========================================================================
	align 4
; ===========================================================================

; ----------------------------------------------------------------------------
; Continue Screen
; ----------------------------------------------------------------------------
; loc_7870:
ContinueScreen:
	bsr.w	Pal_FadeFrom
	move	#$2700,sr
	move.w	($FFFFF60C).w,d0
	andi.b	#-$41,d0
	move.w	d0,(VDP_control_port).l
	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8700,(a6)
	bsr.w	ClearScreen

	clearRAM Object_RAM,$2000

	bsr.w	sub_7A04
	move.l	#$60000002,(VDP_control_port).l
	lea	(ArtNem_ContinueTails).l,a0
	bsr.w	NemDec
	move.l	#$64800002,(VDP_control_port).l
	lea	(ArtNem_MiniSonic).l,a0
	cmpi.w	#2,(Player_mode).w
	bne.s	+
	lea	(ArtNem_MiniTails).l,a0
+
	bsr.w	NemDec
	moveq	#$A,d1
	jsr	(ContScrCounter).l
	moveq	#$1B,d0
	bsr.w	PalLoad1
	move.w	#0,(Second_palette).w
	move.b	#-$64,d0
	bsr.w	PlayMusic
	move.w	#$293,(Demo_Time_left).w
	clr.b	(Level_started_flag).w
	clr.l	($FFFFEEF0).w
	move.l	#$1000000,($FFFFEEF4).w
	move.b	#$DB,(MainCharacter).w ; load ObjDB (sonic on continue screen)
	move.b	#$DB,(Sidekick).w ; load ObjDB (tails on continue screen)
	move.b	#6,(Sidekick+routine).w ; => ObjDB_Tails_Init
	move.b	#$DA,(Object_RAM+$80).w ; load ObjDA (continue screen text)
	move.b	#$DA,(Object_RAM+$C0).w ; load ObjDA (continue screen text?)
	move.b	#4,(Object_RAM+$C0+routine).w ; => loc_7AD0
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

loc_7960:
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	cmpi.b	#4,(MainCharacter+routine).w
	bcc.s	loc_798E
	move	#$2700,sr
	move.w	(Demo_Time_left).w,d1
	divu.w	#$3C,d1
	andi.l	#$F,d1
	jsr	(ContScrCounter).l
	move	#$2300,sr

loc_798E:
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	cmpi.w	#$180,(Sidekick+x_pos).w
	bcc.s	loc_79BA
	cmpi.b	#4,(MainCharacter+routine).w
	bcc.s	loc_7960
	tst.w	(Demo_Time_left).w
	bne.w	loc_7960
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts
; ===========================================================================

loc_79BA:
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w
	moveq	#0,d0
	move.w	d0,(Ring_count).w
	move.l	d0,(Timer).w
	move.l	d0,(Score).w
	move.b	d0,(Last_star_pole_hit).w
	move.w	d0,(Ring_count_2P).w
	move.l	d0,(Timer_2P).w
	move.l	d0,(Score_2P).w
	move.b	d0,(Last_star_pole_hit_2P).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	subq.b	#1,(Continue_count).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_7A04:
	move.l	#$70000002,(VDP_control_port).l
	lea	(ArtNem_TitleCard).l,a0
	bsr.w	NemDec
	lea	(Level_Layout).w,a4
	lea	(ArtNem_TitleCard2).l,a0
	bsr.w	NemDecToRAM
	lea	(word_7A5E).l,a0
	move.l	#$72000002,(VDP_control_port).l
	lea	(Level_Layout).w,a1
	lea	(VDP_data_port).l,a6

loc_7A40:
	moveq	#0,d0
	move.b	(a0)+,d0
	bmi.s	return_7A5C
	lsl.w	#5,d0
	lea	(a1,d0.w),a2
	moveq	#0,d1
	move.b	(a0)+,d1
	lsl.w	#3,d1
	subq.w	#1,d1

-	move.l	(a2)+,(a6)
	dbf	d1,-

	bra.s	loc_7A40
; ===========================================================================

return_7A5C:
	rts
; End of function sub_7A04

; ===========================================================================
word_7A5E:
	dc.w  $804
	dc.w $4004	; 1
	dc.w $1C02	; 2
	dc.w $4404	; 3
	dc.w $FFFF	; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object DA - Continue text
; ----------------------------------------------------------------------------
; loc_7A68:
ObjDA: ; (screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj_DA_subtbl(pc,d0.w),d1
	jmp	Obj_DA_subtbl(pc,d1.w)
; ===========================================================================
Obj_DA_subtbl:
	dc.w loc_7A7E-Obj_DA_subtbl
	dc.w JmpTo2_DisplaySprite-Obj_DA_subtbl	; 1
	dc.w loc_7AD0-Obj_DA_subtbl	; 2
	dc.w loc_7B46-Obj_DA_subtbl	; 3
; ===========================================================================

loc_7A7E:
	addq.b	#2,routine(a0)
	move.l	#ObjDA_MapUnc_7CB6,mappings(a0)
	move.w	#$8500,art_tile(a0)
	bsr.w	JmpTo_Adjust2PArtPointer
	move.b	#0,render_flags(a0)
	move.b	#$3C,width_pixels(a0)
	move.w	#$120,x_pixel(a0)
	move.w	#$C0,y_pixel(a0)

JmpTo2_DisplaySprite 
	jmp	DisplaySprite.l
; ===========================================================================
word_7AB2:
	dc.w  $116, $12A, $102,	$13E,  $EE, $152,  $DA,	$166
	dc.w   $C6, $17A,  $B2,	$18E,  $9E, $1A2,  $8A;	8
; ===========================================================================

loc_7AD0:
	movea.l	a0,a1
	lea	word_7AB2(pc),a2
	moveq	#0,d1
	move.b	(Continue_count).w,d1
	subq.b	#2,d1
	bcc.s	loc_7AE6
	jmp	DeleteObject.l
; ===========================================================================

loc_7AE6:
	moveq	#1,d3
	cmpi.b	#$E,d1
	bcs.s	+
	moveq	#0,d3
	moveq	#$E,d1
+
	move.b	d1,d2
	andi.b	#1,d2

loc_7AF8:
	_move.b	#$DA,0(a1) ; load objDA
	move.w	(a2)+,x_pixel(a1)
	tst.b	d2
	beq.s	+
	subi.w	#$A,x_pixel(a1)
+
	move.w	#$D0,y_pixel(a1)
	move.b	#4,mapping_frame(a1)
	move.b	#6,routine(a1)
	move.l	#$7CB6,mappings(a1)
	move.w	#$8524,art_tile(a1)
	bsr.w	JmpTo_Adjust2PArtPointer2
	move.b	#0,render_flags(a1)
	lea	next_object(a1),a1 ; load obj addr
	dbf	d1,loc_7AF8
	lea	-next_object(a1),a1 ; load obj addr
	move.b	d3,subtype(a1)

loc_7B46:
	tst.b	subtype(a0)
	beq.s	loc_7B66
	cmpi.b	#4,(MainCharacter+routine).w
	bcs.s	loc_7B66
	move.b	($FFFFFE0F).w,d0
	andi.b	#1,d0
	bne.s	loc_7B66
	tst.w	(MainCharacter+x_vel).w
	bne.s	JmpTo2_DeleteObject
	rts
; ===========================================================================

loc_7B66:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$F,d0
	bne.s	JmpTo3_DisplaySprite
	bchg	#0,mapping_frame(a0)

JmpTo3_DisplaySprite 
	jmp	DisplaySprite.l
; ===========================================================================

JmpTo2_DeleteObject 
	jmp	DeleteObject.l
; ===========================================================================
; ----------------------------------------------------------------------------
; Object DB - Sonic lying down or Tails nagging (on the continue screen)
; ----------------------------------------------------------------------------
; Sprite_7B82:
ObjDB:
	; a0=character
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	ObjDB_States(pc,d0.w),d1
	jsr	ObjDB_States(pc,d1.w)
	jmp	DisplaySprite.l
; ===========================================================================
; off_7B96:
ObjDB_States:
	dc.w ObjDB_Sonic_Init - ObjDB_States	; 0
	dc.w ObjDB_Sonic_Wait - ObjDB_States	; 2
	dc.w ObjDB_Sonic_Run - ObjDB_States	; 4
	dc.w ObjDB_Tails_Init - ObjDB_States	; 6
	dc.w ObjDB_Tails_Wait - ObjDB_States	; 8
	dc.w ObjDB_Tails_Run - ObjDB_States	;$A
; ===========================================================================
; loc_7BA2:
ObjDB_Sonic_Init:
	addq.b	#2,routine(a0) ; => ObjDB_Sonic_Wait
	move.w	#$9C,x_pos(a0)
	move.w	#$19C,y_pos(a0)
	move.l	#Mapunc_Sonic,mappings(a0)
	move.w	#$780,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#2,priority(a0)
	move.b	#$20,anim(a0)

; loc_7BD2:
ObjDB_Sonic_Wait:
	tst.b	(Ctrl_1_Press).w
	bmi.s	ObjDB_Sonic_StartRunning
	jsr	(Sonic_Animate).l
	jmp	(LoadSonicDynPLC).l
; ---------------------------------------------------------------------------
; loc_7BE4:
ObjDB_Sonic_StartRunning:
	addq.b	#2,routine(a0) ; => ObjDB_Sonic_Run
	move.b	#$21,anim(a0)
	clr.w	inertia(a0)
	move.b	#$60+$80,d0 ; super peel-out sound
	bsr.w	PlaySound

; loc_7BFA:
ObjDB_Sonic_Run:
	cmpi.w	#$800,inertia(a0)
	bne.s	loc_7C0A
	move.w	#$1000,x_vel(a0)
	bra.s	loc_7C10
; ---------------------------------------------------------------------------
loc_7C0A:
	addi.w	#$20,inertia(a0)
loc_7C10:
	jsr	(ObjectMove).l
	jsr	(Sonic_Animate).l
	jmp	(LoadSonicDynPLC).l
; ===========================================================================
; loc_7C22:
ObjDB_Tails_Init:
	addq.b	#2,routine(a0) ; => ObjDB_Tails_Wait
	move.w	#$B8,x_pos(a0)
	move.w	#$1A0,y_pos(a0)
	move.l	#ObjDA_MapUnc_7CB6,mappings(a0)
	move.w	#$500,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#2,priority(a0)
	move.b	#0,anim(a0)

; loc_7C52:
ObjDB_Tails_Wait:
	tst.b	(Ctrl_1_Press).w
	bmi.s	ObjDB_Tails_StartRunning
	lea	(off_7CB0).l,a1
	jmp	AnimateSprite.l
; ---------------------------------------------------------------------------
; loc_7C64:
ObjDB_Tails_StartRunning:
	addq.b	#2,routine(a0) ; => ObjDB_Tails_Run
	move.l	#MapUnc_Tails,mappings(a0)
	move.w	#$7A0,art_tile(a0)
	move.b	#0,anim(a0)
	clr.w	inertia(a0)
	move.b	#$60+$80,d0 ; super peel-out sound
	bsr.w	PlaySound

; loc_7C88:
ObjDB_Tails_Run:
	cmpi.w	#$720,inertia(a0)
	bne.s	loc_7C98
	move.w	#$1000,x_vel(a0)
	bra.s	loc_7C9E
; ---------------------------------------------------------------------------
loc_7C98:
	addi.w	#$18,inertia(a0)
loc_7C9E:
	jsr	(ObjectMove).l
	jsr	(Tails_Animate).l
	jmp	(LoadTailsDynPLC).l
; ===========================================================================
; animation script for continue screen Tails nagging
off_7CB0:	dc.w byte_7CB2-off_7CB0
byte_7CB2:	dc.b   9,  2,  3,$FF
	even
; -------------------------------------------------------------------------------
; Sprite mappings for text, countdown, stars, and Tails on the continue screen
; Art starts at $A000 in VRAM
; -------------------------------------------------------------------------------
ObjDA_MapUnc_7CB6:	BINCLUDE	"mappings/sprite/objDA.bin"

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2.l
; End of function JmpTo_Adjust2PArtPointer2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer.l
; End of function JmpTo_Adjust2PArtPointer




; ===========================================================================
; loc_7D50:
TwoPlayerResults:
	bsr.w	Pal_FadeFrom
	move	#$2700,sr
	move.w	($FFFFF60C).w,d0
	andi.b	#-$41,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	ClearScreen
	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$8230,(a6)
	move.w	#$8700,(a6)
	move.w	#$8C81,(a6)
	move.w	#$9001,(a6)

	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2000

	move.l	#$42000000,(VDP_control_port).l
	lea	(ArtNem_FontStuff).l,a0
	bsr.w	NemDec
	move.l	#$4E000000,(VDP_control_port).l
	lea	(ArtNem_1P2PWins).l,a0
	bsr.w	NemDec
	lea	(Metablock_Table).l,a1
	lea	(MapEng_MenuBack).l,a0
	move.w	#$6000,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics
	move.w	(Results_Screen_2P).w,d0
	add.w	d0,d0
	add.w	d0,d0
	add.w	d0,d0
	lea	TwoPlayerResultsPointers(pc),a2
	movea.l	(a2,d0.w),a0
	movea.l	4(a2,d0.w),a2
	lea	(Metablock_Table).l,a1
	move.w	#0,d0
	bsr.w	EniDec
	jsr	(a2)	; dynamic call! to Setup2PResults_Act, Setup2PResults_Zone, Setup2PResults_Game, Setup2PResults_SpecialAct, or Setup2PResults_SpecialZone, assuming the pointers in TwoPlayerResultsPointers have not been changed
	lea	(Metablock_Table).l,a1
	move.l	#$40000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	ShowVDPGraphics
	clr.w	(VDP_Command_Buffer).w
	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
	clr.b	(Level_started_flag).w
	clr.w	($FFFFF7F0).w
	lea	(word_87C6).l,a2
	bsr.w	JmpTo_Dynamic_Normal
	moveq	#0,d0
	bsr.w	LoadPLC2
	moveq	#$26,d0
	bsr.w	PalLoad1
	moveq	#0,d0
	move.b	#-$7F,d0
	cmp.w	(Level_Music).w,d0
	beq.s	+
	move.w	d0,(Level_Music).w
	bsr.w	PlayMusic
+
	move.w	#$707,(Demo_Time_left).w
	clr.w	(Two_player_mode).w
	clr.l	(Camera_X_pos).w
	clr.l	(Camera_Y_pos).w
	clr.l	(Vscroll_Factor).w
	clr.l	($FFFFF61E).w
	clr.l	($FFFFEEEC).w
	move.b	#$21,(MainCharacter).w
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

-	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	lea	(word_87C6).l,a2
	bsr.w	JmpTo_Dynamic_Normal
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	bsr.w	RunPLC_RAM
	tst.l	(Plc_Buffer).w
	bne.s	-
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	beq.s	-
	
	move.w	(Results_Screen_2P).w,d0
	bne.w	loc_7FB2
	tst.b	(Current_Act).w
	bne.s	loc_7F3C
	addq.b	#1,(Current_Act).w
	move.b	#1,(Current_Act_2P).w
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	move.b	#0,(Last_star_pole_hit).w
	move.b	#0,(Last_star_pole_hit_2P).w
	moveq	#1,d0
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Two_player_mode_copy).w
	moveq	#0,d0
	move.l	d0,(Score).w
	move.l	d0,(Score_2P).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	rts
; ===========================================================================

loc_7F3C:
	move.b	#2,(Current_Act_2P).w
	bsr.w	sub_84A4
	lea	(SS_Total_Won).w,a4
	clr.w	(a4)
	bsr.s	sub_7F9A
	bsr.s	sub_7F9A
	move.b	(a4),d1
	sub.b	1(a4),d1
	beq.s	loc_7F66
	move.w	#1,(Results_Screen_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	rts
; ===========================================================================

loc_7F66:
	move.b	(Current_Zone_2P).w,d0
	addq.b	#1,d0
	move.b	d0,(Current_Special_Stage).w
	move.w	#3,(Results_Screen_2P).w
	move.b	#1,($FFFFF7CD).w
	move.b	#$10,(Game_Mode).w ; => SpecialStage
	moveq	#1,d0
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Two_player_mode_copy).w
	move.b	#0,(Last_star_pole_hit).w
	move.b	#0,(Last_star_pole_hit_2P).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_7F9A:
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	beq.s	loc_7FAE
	bcs.s	loc_7FAA
	addq.b	#1,(a4)
	bra.s	loc_7FAE
; ===========================================================================

loc_7FAA:
	addq.b	#1,1(a4)

loc_7FAE:
	addq.w	#2,a5
	rts
; End of function sub_7F9A

; ===========================================================================

loc_7FB2:
	subq.w	#1,d0
	bne.s	loc_8020

loc_7FB6:
	lea	(Results_Data_2P).w,a4
	moveq	#0,d0
	moveq	#0,d1
	move.w	(a4)+,d0
	add.l	d0,d1
	move.w	(a4)+,d0
	add.l	d0,d1
	addq.w	#2,a4
	move.w	(a4)+,d0
	add.l	d0,d1
	move.w	(a4)+,d0
	add.l	d0,d1
	addq.w	#2,a4
	move.w	(a4)+,d0
	add.l	d0,d1
	move.w	(a4)+,d0
	add.l	d0,d1
	addq.w	#2,a4
	move.w	(a4)+,d0
	add.l	d0,d1
	move.w	(a4)+,d0
	add.l	d0,d1
	swap	d1
	tst.w	d1
	bne.s	loc_7FF8
	move.w	#2,(Results_Screen_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	rts
; ===========================================================================

loc_7FF8:
	tst.w	(Game_Over_2P).w
	beq.s	loc_8018
	lea	(Results_Data_2P).w,a1
	moveq	#$B,d0

loc_8004:
	move.w	#-1,(a1)+
	dbf	d0,loc_8004
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w

loc_8018:
	move.b	#$1C,(Game_Mode).w ; => LevelSelectMenu2P
	rts
; ===========================================================================

loc_8020:
	subq.w	#1,d0
	bne.s	loc_802C
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts
; ===========================================================================

loc_802C:
	subq.w	#1,d0
	bne.w	BranchTo_loc_7FB6
	cmpi.b	#3,(Current_Zone_2P).w
	beq.s	loc_8048
	move.w	#1,(Results_Screen_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	rts
; ===========================================================================

loc_8048:
	tst.b	(Current_Act_2P).w
	beq.s	loc_806C
	cmpi.b	#2,(Current_Act_2P).w
	beq.s	loc_80AC
	bsr.w	sub_84A4
	lea	(SS_Total_Won).w,a4
	clr.w	(a4)
	bsr.s	sub_8094
	bsr.s	sub_8094
	move.b	(a4),d1
	sub.b	1(a4),d1
	bne.s	loc_80AC

loc_806C:
	addq.b	#1,(Current_Act_2P).w
	addq.b	#1,(Current_Special_Stage).w
	move.w	#3,(Results_Screen_2P).w
	move.b	#1,($FFFFF7CD).w
	move.b	#$10,(Game_Mode).w ; => SpecialStage
	move.w	#1,(Two_player_mode).w
	move.w	#0,(Level_Music).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8094:
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	beq.s	loc_80A8
	bcs.s	loc_80A4
	addq.b	#1,(a4)
	bra.s	loc_80A8
; ===========================================================================

loc_80A4:
	addq.b	#1,1(a4)

loc_80A8:
	addq.w	#2,a5
	rts
; End of function sub_8094

; ===========================================================================

loc_80AC:
	move.w	#4,(Results_Screen_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	rts
; ===========================================================================
; loc_80BA:
BranchTo_loc_7FB6 
	bra.w	loc_7FB6

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 21 - Score/Rings/Time display (in 2P results)
; ----------------------------------------------------------------------------
; Sprite_80BE:
Obj21: ; (screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj21_States(pc,d0.w),d1
	jmp	Obj21_States(pc,d1.w)
; ===========================================================================
; JmpTbl_80CC
Obj21_States:
	dc.w Obj21_Init - Obj21_States	; 0
	dc.w Obj21_Main - Obj21_States	; 2
; ---------------------------------------------------------------------------
; word_80D0:
Obj21_PositionTable: ; x, y
	dc.w $F0, $148
	dc.w $F0, $130
	dc.w $E0, $148
	dc.w $F0, $148
	dc.w $F0, $148
; ===========================================================================
; loc_80E4:
Obj21_Init:
	addq.b	#2,routine(a0) ; => Obj21_Main
	move.w	(Results_Screen_2P).w,d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	Obj21_PositionTable(pc,d0.w),x_pixel(a0) ; and y_pixel(a0)
	move.l	#Obj21_MapUnc_8146,mappings(a0)
 	move.w	#$70,art_tile(a0)
	bsr.w	JmpTo2_Adjust2PArtPointer
	move.b	#0,render_flags(a0)
	move.b	#0,priority(a0)
	moveq	#2,d1
	move.b	(SS_Total_Won).w,d0	; d0 = SS_Total_Won_1P
	sub.b	(SS_Total_Won+1).w,d0	;    - SS_Total_Won_2P
	beq.s	loc_8128
	bcs.s	loc_8126
	moveq	#0,d1
	bra.s	loc_8128
; ---------------------------------------------------------------------------

loc_8126:
	moveq	#1,d1

loc_8128:
	move.b	d1,mapping_frame(a0)

; loc_812C:
Obj21_Main:
	andi.w	#$7FF,art_tile(a0)
	btst	#3,($FFFFFE0F).w
	beq.s	JmpTo4_DisplaySprite
	ori.w	#$2000,art_tile(a0)

JmpTo4_DisplaySprite 
	jmp	DisplaySprite.l
; ===========================================================================
; --------------------------------------------------------------------------
; sprite mappings
; --------------------------------------------------------------------------
Obj21_MapUnc_8146:	BINCLUDE "mappings/sprite/obj21.bin"
; ===========================================================================

; loc_819A:
Setup2PResults_Act:
	move.w	#$1F2,d2
	moveq	#0,d0
	bsr.w	sub_8672
	move.w	#$216,d2
	moveq	#0,d1
	move.b	(Current_Act_2P).w,d1
	addq.b	#1,d1
	bsr.w	sub_86B0
	move.w	#$33E,d2
	move.l	(Score).w,d1
	bsr.w	sub_86F6
	move.w	#$352,d2
	move.l	(Score_2P).w,d1
	bsr.w	sub_86F6
	move.w	#$3DA,d2
	moveq	#0,d0
	move.w	(Timer_minute_word).w,d1
	bsr.w	sub_86B0
	move.w	#$3E0,d2
	moveq	#0,d1
	move.b	(Timer_second).w,d1
	bsr.w	sub_86B0
	move.w	#$3E6,d2
	moveq	#0,d1
	move.b	(Timer_centisecond).w,d1
	mulu.w	#$1B0,d1
	lsr.l	#8,d1
	bsr.w	sub_86B0
	move.w	#$3EE,d2
	moveq	#0,d0
	move.w	(Timer_minute_word_2P).w,d1
	bsr.w	sub_86B0
	move.w	#$3F4,d2
	moveq	#0,d1
	move.b	(Timer_second_2P).w,d1
	bsr.w	sub_86B0
	move.w	#$3FA,d2
	moveq	#0,d1
	move.b	(Timer_centisecond_2P).w,d1
	mulu.w	#$1B0,d1
	lsr.l	#8,d1
	bsr.w	sub_86B0
	move.w	#$486,d2
	moveq	#0,d0
	move.w	(Ring_count).w,d1
	bsr.w	sub_86B0
	move.w	#$49A,d2
	move.w	(Ring_count_2P).w,d1
	bsr.w	sub_86B0
	move.w	#$526,d2
	moveq	#0,d0
	move.w	($FFFFFEF0).w,d1
	bsr.w	sub_86B0
	move.w	#$53A,d2
	move.w	($FFFFFEF2).w,d1
	bsr.w	sub_86B0
	move.w	#$5C6,d2
	moveq	#0,d0
	move.w	($FFFFFEF4).w,d1
	bsr.w	sub_86B0
	move.w	#$5DA,d2
	move.w	($FFFFFEF6).w,d1
	bsr.w	sub_86B0
	bsr.w	sub_8476
	move.w	#$364,d2
	move.w	#$6000,d0
	move.l	(Score).w,d1
	sub.l	(Score_2P).w,d1
	bsr.w	sub_8652
	move.w	#$404,d2
	move.l	(Timer_2P).w,d1
	sub.l	(Timer).w,d1
	bsr.w	sub_8652
	move.w	#$4A4,d2
	moveq	#0,d1
	move.w	(Ring_count).w,d1
	sub.w	(Ring_count_2P).w,d1
	bsr.w	sub_8652
	move.w	#$544,d2
	moveq	#0,d1
	move.w	($FFFFFEF0).w,d1
	sub.w	($FFFFFEF2).w,d1
	bsr.w	sub_8652
	move.w	#$5E4,d2
	moveq	#0,d1
	move.w	($FFFFFEF4).w,d1
	sub.w	($FFFFFEF6).w,d1
	bsr.w	sub_8652
	move.w	#$706,d2
	moveq	#0,d0
	moveq	#0,d1
	move.b	(a4),d1
	bsr.w	sub_86B0
	move.w	#$70E,d2
	moveq	#0,d1
	move.b	1(a4),d1
	bsr.w	sub_86B0
	move.w	(a4),(SS_Total_Won).w
	rts
; ===========================================================================
; loc_82FA:
Setup2PResults_Zone:
	move.w	#$242,d2
	moveq	#0,d0
	bsr.w	sub_8672
	bsr.w	sub_84A4
	lea	(SS_Total_Won).w,a4
	clr.w	(a4)
	move.w	#$398,d6
	bsr.w	sub_854A
	move.w	#$488,d6
	bsr.w	sub_854A
	move.w	#$618,d6
	bsr.w	sub_854A
	rts
; ===========================================================================
; loc_8328:
Setup2PResults_Game:
	lea	(Results_Data_2P).w,a5
	lea	(SS_Total_Won).w,a4
	clr.w	(a4)
	move.w	#$208,d6
	bsr.w	sub_84C4
	move.w	#$258,d6
	bsr.w	sub_84C4
	move.w	#$2A8,d6
	bsr.w	sub_84C4
	move.w	#$348,d6
	bsr.w	sub_84C4
	move.w	#$398,d6
	bsr.w	sub_84C4
	move.w	#$3E8,d6
	bsr.w	sub_84C4
	move.w	#$488,d6
	bsr.w	sub_84C4
	move.w	#$4D8,d6
	bsr.w	sub_84C4
	move.w	#$528,d6
	bsr.w	sub_84C4
	move.w	#$5C8,d6
	bsr.w	sub_84C4
	move.w	#$618,d6
	bsr.w	sub_84C4
	move.w	#$668,d6
	bsr.w	sub_84C4
	move.w	#$70A,d2
	moveq	#0,d0
	moveq	#0,d1
	move.b	(a4),d1
	bsr.w	sub_86B0
	move.w	#$710,d2
	moveq	#0,d1
	move.b	1(a4),d1
	bsr.w	sub_86B0
	rts
; ===========================================================================
; loc_83B0:
Setup2PResults_SpecialAct:
	move.w	#$266,d2
	moveq	#0,d1
	move.b	(Current_Act_2P).w,d1
	addq.b	#1,d1
	bsr.w	sub_86B0
	move.w	#$4D6,d2
	moveq	#0,d0
	move.w	($FFFFFFA0).w,d1
	bsr.w	sub_86B0
	move.w	#$4E6,d2
	move.w	($FFFFFFA2).w,d1
	bsr.w	sub_86B0
	move.w	#$576,d2
	moveq	#0,d0
	move.w	($FFFFFFA4).w,d1
	bsr.w	sub_86B0
	move.w	#$586,d2
	move.w	($FFFFFFA6).w,d1
	bsr.w	sub_86B0
	move.w	#$616,d2
	moveq	#0,d0
	move.w	($FFFFFFA8).w,d1
	bsr.w	sub_86B0
	move.w	#$626,d2
	move.w	($FFFFFFAA).w,d1
	bsr.w	sub_86B0
	bsr.w	sub_8476
	move.w	#$6000,d0
	move.w	#$4F0,d2
	moveq	#0,d1
	move.w	($FFFFFFA0).w,d1
	sub.w	($FFFFFFA2).w,d1
	bsr.w	sub_8652
	move.w	#$590,d2
	moveq	#0,d1
	move.w	($FFFFFFA4).w,d1
	sub.w	($FFFFFFA6).w,d1
	bsr.w	sub_8652
	move.w	#$630,d2
	moveq	#0,d1
	move.w	($FFFFFFA8).w,d1
	sub.w	($FFFFFFAA).w,d1
	bsr.w	sub_8652
	move.w	(a4),(SS_Total_Won).w
	rts
; ===========================================================================
; loc_8452:
Setup2PResults_SpecialZone:
	bsr.w	sub_84A4
	lea	(SS_Total_Won).w,a4
	clr.w	(a4)
	move.w	#$4D4,d6
	bsr.w	sub_85CE
	move.w	#$574,d6
	bsr.w	sub_85CE
	move.w	#$614,d6
	bsr.w	sub_85CE
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8476:
	lea	(EHZ_Results_2P).w,a4
	move.b	(Current_Zone_2P).w,d0
	beq.s	loc_8494
	lea	(MCZ_Results_2P).w,a4
	subq.b	#1,d0
	beq.s	loc_8494
	lea	(CNZ_Results_2P).w,a4
	subq.b	#1,d0
	beq.s	loc_8494
	lea	(SS_Results_2P).w,a4

loc_8494:
	moveq	#0,d0
	move.b	(Current_Act_2P).w,d0
	add.w	d0,d0
	lea	(a4,d0.w),a4
	clr.w	(a4)
	rts
; End of function sub_8476


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_84A4:
	lea	(EHZ_Results_2P).w,a5
	move.b	(Current_Zone_2P).w,d0
	beq.s	return_84C2
	lea	(MCZ_Results_2P).w,a5
	subq.b	#1,d0
	beq.s	return_84C2
	lea	(CNZ_Results_2P).w,a5
	subq.b	#1,d0
	beq.s	return_84C2
	lea	(SS_Results_2P).w,a5

return_84C2:
	rts
; End of function sub_84A4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_84C4:
	move.w	(a5),d0
	bmi.s	loc_84FC
	move.w	d6,d2
	moveq	#0,d0
	moveq	#0,d1
	move.b	(a5),d1
	bsr.w	sub_86B0
	addq.w	#8,d6
	move.w	d6,d2
	moveq	#0,d1
	move.b	1(a5),d1
	bsr.w	sub_86B0
	addi.w	#$12,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; ===========================================================================

loc_84FC:
	addq.w	#4,d6
	not.w	d0
	bne.s	loc_8522
	lea	(byte_87AC).l,a1
	move.w	d6,d2
	bsr.w	loc_8698
	addi.w	#$16,d6
	move.w	d6,d2
	lea	(byte_87C1).l,a1
	bsr.w	loc_8698
	addq.w	#2,a5
	rts
; ===========================================================================

loc_8522:
	moveq	#0,d0
	lea	(byte_8798).l,a1
	move.w	d6,d2
	bsr.w	loc_8698
	addi.w	#$16,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; End of function sub_84C4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_854A:
	move.w	(a5),d0
	bmi.s	loc_8582
	move.w	d6,d2
	moveq	#0,d0
	moveq	#0,d1
	move.b	(a5),d1
	bsr.w	sub_86B0
	addq.w	#8,d6
	move.w	d6,d2
	moveq	#0,d1
	move.b	1(a5),d1
	bsr.w	sub_86B0
	addi.w	#$C,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; ===========================================================================

loc_8582:
	not.w	d0
	bne.s	loc_85A6
	lea	(byte_87AC).l,a1
	move.w	d6,d2
	bsr.w	loc_8698
	addi.w	#$14,d6
	move.w	d6,d2
	lea	(byte_87C1).l,a1
	bsr.w	loc_8698
	addq.w	#2,a5
	rts
; ===========================================================================

loc_85A6:
	moveq	#0,d0
	lea	(byte_8798).l,a1
	move.w	d6,d2
	bsr.w	loc_8698
	addi.w	#$14,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; End of function sub_854A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_85CE:
	move.w	(a5),d0
	bmi.s	loc_8608
	move.w	d6,d2
	moveq	#0,d0
	moveq	#0,d1
	move.b	(a5),d1
	bsr.w	sub_86B0
	addi.w	#$C,d6
	move.w	d6,d2
	moveq	#0,d1
	move.b	1(a5),d1
	bsr.w	sub_86B0
	addi.w	#$10,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; ===========================================================================

loc_8608:
	not.w	d0
	bne.s	loc_862C
	lea	(byte_87AC).l,a1
	move.w	d6,d2
	addq.w	#4,d2
	bsr.w	loc_8698
	addi.w	#$14,d6
	move.w	d6,d2
	lea	(byte_87C1).l,a1
	bsr.s	loc_8698
	addq.w	#2,a5
	rts
; ===========================================================================

loc_862C:
	moveq	#0,d0
	lea	(byte_8798).l,a1
	move.w	d6,d2
	bsr.s	loc_8698
	addi.w	#$14,d6
	move.w	d6,d2
	move.w	#$6000,d0
	moveq	#0,d1
	move.b	(a5),d1
	sub.b	1(a5),d1
	bsr.w	sub_8652
	addq.w	#2,a5
	rts
; End of function sub_85CE


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8652:
	lea	(byte_87B4).l,a1
	beq.s	BranchTo_loc_8698
	bcs.s	loc_8666
	lea	(byte_87B9).l,a1
	addq.b	#1,(a4)
	bra.s	BranchTo_loc_8698
; ===========================================================================

loc_8666:
	lea	(byte_87BD).l,a1
	addq.b	#1,1(a4)

BranchTo_loc_8698 
	bra.s	loc_8698
; End of function sub_8652


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8672:
	lea	(byte_874A).l,a1
	move.b	(Current_Zone_2P).w,d1
	beq.s	loc_8698
	lea	(byte_8757).l,a1
	subq.b	#1,d1
	beq.s	loc_8698
	lea	(byte_8764).l,a1
	subq.b	#1,d1
	beq.s	loc_8698
	lea	(byte_8771).l,a1

loc_8698:
	lea	(Metablock_Table).l,a2
	lea	(a2,d2.w),a2
	moveq	#0,d1
	move.b	(a1)+,d1

loc_86A6:
	move.b	(a1)+,d0
	move.w	d0,(a2)+
	dbf	d1,loc_86A6
	rts
; End of function sub_8672


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_86B0:
	lea	(Metablock_Table).l,a2
	lea	(a2,d2.w),a2
	lea	(word_86F0).l,a3
	moveq	#0,d2
	moveq	#2,d5

loc_86C4:
	moveq	#0,d3
	move.w	(a3)+,d4

loc_86C8:
	sub.w	d4,d1
	bcs.s	loc_86D0
	addq.w	#1,d3
	bra.s	loc_86C8
; ---------------------------------------------------------------------------

loc_86D0:
	add.w	d4,d1
	tst.w	d5
	beq.s	loc_86E0
	tst.w	d3
	beq.s	loc_86DC
	moveq	#1,d2

loc_86DC:
	tst.w	d2
	beq.s	loc_86E8

loc_86E0:
	addi.b	#$10,d3
	move.b	d3,d0
	move.w	d0,(a2)

loc_86E8:
	addq.w	#2,a2
	dbf	d5,loc_86C4
	rts
; End of function sub_86B0

; ===========================================================================
word_86F0:
	dc.w   $64
	dc.w	$A	; 1
	dc.w	 1	; 2

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_86F6:
	lea	(Metablock_Table).l,a2
	lea	(a2,d2.w),a2
	lea	(word_8732).l,a3
	moveq	#0,d2
	moveq	#5,d5

loc_870A:
	moveq	#0,d3
	move.l	(a3)+,d4

loc_870E:
	sub.l	d4,d1
	bcs.s	loc_8716
	addq.w	#1,d3
	bra.s	loc_870E
; ===========================================================================

loc_8716:
	add.l	d4,d1
	tst.w	d3
	beq.s	loc_871E
	moveq	#1,d2

loc_871E:
	tst.w	d2
	beq.s	loc_872A
	addi.b	#$10,d3
	move.b	d3,d0
	move.w	d0,(a2)

loc_872A:
	addq.w	#2,a2
	dbf	d5,loc_870A
	rts
; End of function sub_86F6

; ===========================================================================
word_8732:
	dc.w	 1
	dc.w $86A0	; 1
	dc.w	 0	; 2
	dc.w $2710	; 3
	dc.w	 0	; 4
	dc.w  $3E8	; 5
	dc.w	 0	; 6
	dc.w   $64	; 7
	dc.w	 0	; 8
	dc.w	$A	; 9
	dc.w	 0	; 10
	dc.w	 1	; 11

	; set the character set for menu text
	charset '@',"\27\30\31\32\33\34\35\36\37\38\39\40\41\42\43\44\45\46\47\48\49\50\51\52\53\54\55"
	charset '0',"\16\17\18\19\20\21\22\23\24\25"
	charset '*',$1A
	charset ':',$1C
	charset '.',$1D
	charset ' ',0

	; 2-player mode menu text
	
byte_874A:	dc.b  $B,"EMERALD HILL"
byte_8757:	dc.b  $B," MYSTIC CAVE"
byte_8764:	dc.b  $B,"CASINO NIGHT"
byte_8771:	dc.b  $C,"SPECIAL STAGE"
byte_877F:	dc.b  $B,"   SPECIAL  "
byte_878C:	dc.b   4,"ZONE "
byte_8792:	dc.b   4,"STAGE"
byte_8798:	dc.b   8,"GAME OVER"
		dc.b   8,"TIME OVER"
byte_87AC:	dc.b   6,"NO GAME"
byte_87B4:	dc.b   3,"TIED"
byte_87B9:	dc.b   2," 1P"
byte_87BD:	dc.b   2," 2P"
byte_87C1:	dc.b   3,"    "

	charset ; reset character set

; ------------------------------------------------------------------------
; MENU ANIMATION SCRIPT
; ------------------------------------------------------------------------
word_87C6:
	dc.w   0
; Sonic/Miles animated background
	dc.l $FF<<24|ArtUnc_MenuBack
	dc.w $20
	dc.b 6
	dc.b $A
	dc.b   0,$C7
	dc.b  $A,  5	; 2
	dc.b $14,  5	; 4
	dc.b $1E,$C7	; 6
	dc.b $14,  5	; 8
	dc.b  $A,  5	; 10

; off_87DC:
TwoPlayerResultsPointers:
	dc.l Map_2PActResults
	dc.l Setup2PResults_Act
	dc.l Map_2PZoneResults
	dc.l Setup2PResults_Zone
	dc.l Map_2PGameResults
	dc.l Setup2PResults_Game
	dc.l Map_2PSpecialStageActResults
	dc.l Setup2PResults_SpecialAct
	dc.l Map_2PSpecialStageZoneResults
	dc.l Setup2PResults_SpecialZone

; 2P single act results screen (enigma compressed)
; byte_8804:
Map_2PActResults:	BINCLUDE "mappings/misc/2P Act Results.bin"

; 2P zone results screen (enigma compressed)
; byte_88CE:
Map_2PZoneResults:	BINCLUDE "mappings/misc/2P Zone Results.bin"

; 2P game results screen (after all 4 zones) (enigma compressed)
; byte_8960:
Map_2PGameResults:	BINCLUDE "mappings/misc/2P Game Results.bin"

; 2P special stage act results screen (enigma compressed)
; byte_8AA4:
Map_2PSpecialStageActResults:	BINCLUDE "mappings/misc/2P Special Stage Act Results.bin"

; 2P special stage zone results screen (enigma compressed)
; byte_8B30:
Map_2PSpecialStageZoneResults:	BINCLUDE "mappings/misc/2P Special Stage Zone Results.bin"
	
; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer.l
; End of function JmpTo2_Adjust2PArtPointer


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Attributes: thunk

JmpTo_Dynamic_Normal 
	jmp	Dynamic_Normal.l
; End of function JmpTo_Dynamic_Normal




; ===========================================================================
; loc_8BD4:
MenuScreen:
	bsr.w	Pal_FadeFrom
	move	#$2700,sr
	move.w	($FFFFF60C).w,d0
	andi.b	#-$41,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	ClearScreen
	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$8230,(a6)
	move.w	#$8700,(a6)
	move.w	#$8C81,(a6)
	move.w	#$9001,(a6)

	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2000

	clr.w	(VDP_Command_Buffer).w
	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
	move.l	#$42000000,(VDP_control_port).l
	lea	(ArtNem_FontStuff).l,a0
	bsr.w	NemDec
	move.l	#$4E000000,(VDP_control_port).l
	lea	(ArtNem_MenuBox).l,a0
	bsr.w	NemDec
	move.l	#$52000000,(VDP_control_port).l
	lea	(ArtNem_LevelSelectPics).l,a0
	bsr.w	NemDec
	lea	(Metablock_Table).l,a1
	lea	(MapEng_MenuBack).l,a0
	move.w	#$6000,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$60000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	JmpTo_ShowVDPGraphics

	cmpi.b	#$24,(Game_Mode).w	; options menu?
	beq.w	MenuScreen_Options	; if yes, branch

	cmpi.b	#$28,(Game_Mode).w	; level select menu?
	beq.w	MenuScreen_LevelSelect	; if yes, branch

	lea	(Metablock_Table).l,a1
	lea	(MapEng_LevSel2P).l,a0
	move.w	#$70,d0
	bsr.w	EniDec
	lea	($FFFF0198).l,a1
	lea	(MapEng_LevSel2P).l,a0
	move.w	#$2070,d0
	bsr.w	EniDec
	lea	($FFFF0330).l,a1
	lea	(MapEng_LevSelIcon).l,a0
	move.w	#$90,d0
	bsr.w	EniDec
	lea	($FFFF0498).l,a2
	moveq	#$F,d1

loc_8CF8:
	move.w	#$207B,(a2)+
	dbf	d1,loc_8CF8
	bsr.w	sub_8E7E
	addq.b	#1,(Current_Zone_2P).w
	andi.b	#3,(Current_Zone_2P).w
	bsr.w	sub_8F1C
	addq.b	#1,(Current_Zone_2P).w
	andi.b	#3,(Current_Zone_2P).w
	bsr.w	sub_8F1C
	addq.b	#1,(Current_Zone_2P).w
	andi.b	#3,(Current_Zone_2P).w
	bsr.w	sub_8F1C
	addq.b	#1,(Current_Zone_2P).w
	andi.b	#3,(Current_Zone_2P).w
	clr.w	(Player_mode).w
	clr.b	(Current_Act_2P).w
	clr.w	(Results_Screen_2P).w
	clr.b	(Level_started_flag).w
	clr.w	($FFFFF7F0).w
	clr.w	(Game_Over_2P).w
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	moveq	#$26,d0
	bsr.w	PalLoad1
	lea	(Normal_palette_line3).w,a1
	lea	(Second_palette_line3).w,a2
	moveq	#7,d1

loc_8D6A:
	move.l	(a1),(a2)+
	clr.l	(a1)+
	dbf	d1,loc_8D6A
	move.b	#-$6F,d0
	bsr.w	JmpTo_PlayMusic
	move.w	#$707,(Demo_Time_left).w
	clr.w	(Two_player_mode).w
	clr.l	(Camera_X_pos).w
	clr.l	(Camera_Y_pos).w
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

loc_8DA8:
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move	#$2700,sr
	bsr.w	sub_8F1C
	bsr.w	sub_8E5A
	bsr.w	sub_8E7E
	move	#$2300,sr
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	bne.s	loc_8DE2
	bra.w	loc_8DA8
; ===========================================================================

loc_8DE2:
	bsr.w	sub_8EFE
	bmi.s	loc_8DF4
	move.w	#$ED,d0
	bsr.w	JmpTo_PlaySound
	bra.w	loc_8DA8
; ===========================================================================

loc_8DF4:
	moveq	#0,d0
	move.b	(Current_Zone_2P).w,d0
	add.w	d0,d0
	move.w	word_8E52(pc,d0.w),d0
	bmi.s	loc_8E3A
	move.w	d0,(Current_ZoneAndAct).w
	move.w	#1,(Two_player_mode).w
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	move.b	#0,(Last_star_pole_hit).w
	move.b	#0,(Last_star_pole_hit_2P).w
	moveq	#0,d0
	move.l	d0,(Score).w
	move.l	d0,(Score_2P).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	rts
; ===========================================================================

loc_8E3A:
	move.b	#4,(Current_Special_Stage).w
	move.b	#$10,(Game_Mode).w ; => SpecialStage
	moveq	#1,d0
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Two_player_mode_copy).w
	rts
; ===========================================================================
word_8E52:
	dc.w	 0
	dc.w  $B00	; 1
	dc.w  $C00	; 2
	dc.w $FFFF	; 3

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8E5A:
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	move.b	d0,d1
	andi.b	#3,d0
	beq.s	loc_8E70
	bchg	#1,(Current_Zone_2P).w

loc_8E70:
	andi.b	#$C,d1
	beq.s	return_8E7C
	bchg	#0,(Current_Zone_2P).w

return_8E7C:
	rts
; End of function sub_8E5A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8E7E:
	moveq	#0,d0
	move.b	(Current_Zone_2P).w,d0
	lsl.w	#4,d0
	lea	(off_8F7E).l,a3
	lea	(a3,d0.w),a3
	move.w	#$6000,d0
	lea	($FFFF0048).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF0094).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF00D8).l,a2
	movea.l	4(a3),a1
	bsr.w	sub_8EFE
	bmi.s	loc_8EC2
	lea	($FFFF0468).l,a1

loc_8EC2:
	moveq	#2,d1

loc_8EC4:
	move.l	(a1)+,(a2)+
	move.l	(a1)+,(a2)+
	lea	$1A(a2),a2
	dbf	d1,loc_8EC4
	lea	(Metablock_Table).l,a1
	move.l	(a3)+,d0
	moveq	#$10,d1
	moveq	#$B,d2
	bsr.w	JmpTo_ShowVDPGraphics
	lea	(Pal_LevelIcons).l,a1
	moveq	#0,d0
	move.b	(a3),d0
	lsl.w	#5,d0
	lea	(a1,d0.w),a1
	lea	(Normal_palette_line3).w,a2
	moveq	#7,d1

loc_8EF6:
	move.l	(a1)+,(a2)+
	dbf	d1,loc_8EF6
	rts
; End of function sub_8E7E


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8EFE:
	moveq	#0,d0
	move.b	(Current_Zone_2P).w,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	add.w	d0,d0
	lea	(Results_Data_2P).w,a5
	lea	(a5,d0.w),a5
	move.w	(a5),d0
	add.w	2(a5),d0
	rts
; End of function sub_8EFE


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8F1C:
	moveq	#0,d0
	move.b	(Current_Zone_2P).w,d0
	lsl.w	#4,d0
	lea	(off_8F7E).l,a3
	lea	(a3,d0.w),a3
	moveq	#0,d0
	lea	($FFFF01E0).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF022C).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF0270).l,a2
	lea	($FFFF0498).l,a1
	bsr.w	sub_8EFE
	bmi.s	loc_8F60
	lea	($FFFF0468).l,a1

loc_8F60:
	moveq	#2,d1

loc_8F62:
	move.l	(a1)+,(a2)+
	move.l	(a1)+,(a2)+
	lea	$1A(a2),a2
	dbf	d1,loc_8F62
	lea	($FFFF0198).l,a1
	move.l	(a3)+,d0
	moveq	#$10,d1
	moveq	#$B,d2
	bra.w	JmpTo_ShowVDPGraphics
; End of function sub_8F1C

; ===========================================================================
off_8F7E:
	dc.l byte_874A
	dc.l byte_878C
	dc.w $4104
	dc.w 3
	dc.w $FF
	dc.w $330
	dc.l byte_8757
	dc.l byte_878C
	dc.w $412C
	dc.w 3
	dc.w $5FF
	dc.w $3A8
	dc.l byte_8764
	dc.l byte_878C
	dc.w $4784
	dc.w 3
	dc.w $6FF
	dc.w $3C0
	dc.l byte_877F
	dc.l byte_8792
	dc.w $47AC
	dc.w 3
	dc.w $CFF
	dc.w $450

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_8FBE:
	moveq	#0,d1
	move.b	(a1)+,d1

loc_8FC2:
	move.b	(a1)+,d0
	move.w	d0,(a2)+
	dbf	d1,loc_8FC2
	rts
; End of function sub_8FBE

; ===========================================================================
; loc_8FCC:
MenuScreen_Options:
	lea	(Metablock_Table).l,a1
	lea	(MapEng_Options).l,a0
	move.w	#$70,d0
	bsr.w	EniDec
	lea	($FFFF0160).l,a1
	lea	(MapEng_Options).l,a0
	move.w	#$2070,d0
	bsr.w	EniDec
	clr.b	(Options_menu_box).w
	bsr.w	sub_9186
	addq.b	#1,(Options_menu_box).w
	bsr.w	loc_91F8
	addq.b	#1,(Options_menu_box).w
	bsr.w	loc_91F8
	clr.b	(Options_menu_box).w
	clr.b	(Level_started_flag).w
	clr.w	($FFFFF7F0).w
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	moveq	#$26,d0
	bsr.w	PalLoad1
	move.b	#-$6F,d0
	bsr.w	JmpTo_PlayMusic
	clr.w	(Two_player_mode).w
	clr.l	(Camera_X_pos).w
	clr.l	(Camera_Y_pos).w
	clr.w	(Correct_cheat_entries).w
	clr.w	(Correct_cheat_entries_2).w
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

loc_9060:
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move	#$2700,sr
	bsr.w	loc_91F8
	bsr.w	sub_90E0
	bsr.w	sub_9186
	move	#$2300,sr
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	bne.s	loc_909A
	bra.w	loc_9060
; ===========================================================================

loc_909A:
	move.b	(Options_menu_box).w,d0
	bne.s	loc_90B6
	moveq	#0,d0
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Two_player_mode_copy).w
	move.w	d0,(Current_ZoneAndAct).w
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	rts
; ===========================================================================

loc_90B6:
	subq.b	#1,d0
	bne.s	loc_90D8
	moveq	#1,d0
	move.w	d0,(Two_player_mode).w
	move.w	d0,(Two_player_mode_copy).w
	move.b	#$1C,(Game_Mode).w ; => LevelSelectMenu2P
	move.b	#0,(Current_Zone_2P).w
	move.w	#0,(Player_mode).w
	rts
; ===========================================================================

loc_90D8:
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_90E0:
	moveq	#0,d2
	move.b	(Options_menu_box).w,d2
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	btst	#0,d0
	beq.s	loc_90FC
	subq.b	#1,d2
	bcc.s	loc_90FC
	move.b	#2,d2

loc_90FC:
	btst	#1,d0
	beq.s	loc_910C
	addq.b	#1,d2
	cmpi.b	#3,d2
	bcs.s	loc_910C
	moveq	#0,d2

loc_910C:
	move.b	d2,(Options_menu_box).w
	lsl.w	#2,d2
	move.b	word_917A(pc,d2.w),d3
	movea.l	word_917A(pc,d2.w),a1
	move.w	(a1),d2
	btst	#2,d0
	beq.s	loc_9128
	subq.b	#1,d2
	bcc.s	loc_9128
	move.b	d3,d2

loc_9128:
	btst	#3,d0
	beq.s	loc_9136
	addq.b	#1,d2
	cmp.b	d3,d2
	bls.s	loc_9136
	moveq	#0,d2

loc_9136:
	btst	#6,d0
	beq.s	loc_9146
	addi.b	#$10,d2
	cmp.b	d3,d2
	bls.s	loc_9146
	moveq	#0,d2

loc_9146:
	move.w	d2,(a1)
	cmpi.b	#2,(Options_menu_box).w
	bne.s	return_9178
	andi.w	#$30,d0
	beq.s	return_9178
	move.w	(Sound_test_sound).w,d0
	addi.w	#$80,d0
	bsr.w	JmpTo_PlayMusic
	lea	(level_select_cheat).l,a0
	lea	(byte_97B7).l,a2
	lea	(Level_select_flag).w,a1
	moveq	#0,d2
	bsr.w	loc_9746

return_9178:
	rts
; End of function sub_90E0

; ===========================================================================
word_917A:
	dc.w $2FF
	dc.w Player_option	; 1
	dc.w $1FF	; 2
	dc.w Two_player_items	; 3
	dc.w $7FFF	; 4
	dc.w Sound_test_sound	; 5

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_9186:
	bsr.w	loc_9268
	moveq	#0,d1
	move.b	(Options_menu_box).w,d1
	lsl.w	#3,d1
	lea	(off_92BA).l,a3
	lea	(a3,d1.w),a3
	move.w	#$6000,d0
	lea	($FFFF0030).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF00B6).l,a2
	moveq	#0,d1
	cmpi.b	#2,(Options_menu_box).w
	beq.s	loc_91CE
	move.b	(Options_menu_box).w,d1
	lsl.w	#2,d1
	lea	word_917A(pc),a1
	movea.l	(a1,d1.w),a1
	move.w	(a1),d1
	lsl.w	#2,d1

loc_91CE:
	movea.l	(a4,d1.w),a1
	bsr.w	sub_8FBE
	cmpi.b	#2,(Options_menu_box).w
	bne.s	loc_91E8
	lea	($FFFF00C2).l,a2
	bsr.w	loc_9296

loc_91E8:
	lea	(Metablock_Table).l,a1
	move.l	(a3)+,d0
	moveq	#$15,d1
	moveq	#7,d2
	bra.w	JmpTo_ShowVDPGraphics
; ===========================================================================

loc_91F8:
	bsr.w	loc_9268
	moveq	#0,d1
	move.b	(Options_menu_box).w,d1
	lsl.w	#3,d1
	lea	(off_92BA).l,a3
	lea	(a3,d1.w),a3
	moveq	#0,d0
	lea	($FFFF0190).l,a2
	movea.l	(a3)+,a1
	bsr.w	sub_8FBE
	lea	($FFFF0216).l,a2
	moveq	#0,d1
	cmpi.b	#2,(Options_menu_box).w
	beq.s	loc_923E
	move.b	(Options_menu_box).w,d1
	lsl.w	#2,d1
	lea	word_917A(pc),a1
	movea.l	(a1,d1.w),a1
	move.w	(a1),d1
	lsl.w	#2,d1

loc_923E:
	movea.l	(a4,d1.w),a1
	bsr.w	sub_8FBE
	cmpi.b	#2,(Options_menu_box).w
	bne.s	loc_9258
	lea	($FFFF0222).l,a2
	bsr.w	loc_9296

loc_9258:
	lea	($FFFF0160).l,a1
	move.l	(a3)+,d0
	moveq	#$15,d1
	moveq	#7,d2
	bra.w	JmpTo_ShowVDPGraphics
; ===========================================================================

loc_9268:
	lea	(off_92D2).l,a4
	tst.b	(Graphics_Flags).w
	bpl.s	loc_927A
	lea	(off_92DE).l,a4

loc_927A:
	tst.b	(Options_menu_box).w
	beq.s	loc_9286
	lea	(off_92EA).l,a4

loc_9286:
	cmpi.b	#2,(Options_menu_box).w
	bne.s	return_9294
	lea	(off_92F2).l,a4

return_9294:
	rts
; ===========================================================================

loc_9296:
	move.w	(Sound_test_sound).w,d1
	move.b	d1,d2
	lsr.b	#4,d1
	bsr.s	loc_92A2
	move.b	d2,d1

loc_92A2:
	andi.w	#$F,d1
	cmpi.b	#$A,d1
	bcs.s	loc_92B0
	addi.b	#4,d1

loc_92B0:
	addi.b	#$10,d1
	move.b	d1,d0
	move.w	d0,(a2)+
	rts
; ===========================================================================
off_92BA:
	dc.l byte_97CA
	dc.w $4192
	dc.w 3
	dc.l byte_982C
	dc.w $4592
	dc.w 3
	dc.l byte_985E
	dc.w $4992
	dc.w 3
off_92D2:
	dc.l byte_97DC
	dc.l byte_97FC
	dc.l byte_980C
off_92DE:
	dc.l byte_97EC
	dc.l byte_97FC
	dc.l byte_981C
off_92EA:
	dc.l byte_983E
	dc.l byte_984E
off_92F2:
	dc.l byte_9870
; ===========================================================================
; loc_92F6:
MenuScreen_LevelSelect:
	lea	(Metablock_Table).l,a1
	lea	(MapEng_LevSel).l,a0
	move.w	#0,d0
	bsr.w	EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$40000003,d0
	moveq	#$27,d1
	moveq	#$1B,d2
	bsr.w	JmpTo_ShowVDPGraphics
	moveq	#0,d3
	bsr.w	loc_965A
	lea	($FFFF08C0).l,a1
	lea	(MapEng_LevSelIcon).l,a0
	move.w	#$90,d0
	bsr.w	EniDec
	bsr.w	loc_9688
	clr.w	(Player_mode).w
	clr.w	(Results_Screen_2P).w
	clr.b	(Level_started_flag).w
	clr.w	($FFFFF7F0).w
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	moveq	#$26,d0
	bsr.w	PalLoad1
	lea	(Normal_palette_line3).w,a1
	lea	(Second_palette_line3).w,a2
	moveq	#7,d1

loc_9366:
	move.l	(a1),(a2)+
	clr.l	(a1)+
	dbf	d1,loc_9366
	move.b	#-$6F,d0
	bsr.w	JmpTo_PlayMusic
	move.w	#$707,(Demo_Time_left).w
	clr.w	(Two_player_mode).w
	clr.l	(Camera_X_pos).w
	clr.l	(Camera_Y_pos).w
	clr.w	(Correct_cheat_entries).w
	clr.w	(Correct_cheat_entries_2).w
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l
	bsr.w	Pal_FadeTo

loc_93AC:
	move.b	#$16,(Delay_Time).w
	bsr.w	DelayProgram
	move	#$2700,sr
	moveq	#0,d3
	bsr.w	loc_95B8
	bsr.w	LevSelControls
	move.w	#$6000,d3
	bsr.w	loc_95B8
	bsr.w	loc_9688
	move	#$2300,sr
	lea	(word_87C6).l,a2
	bsr.w	JmpTo2_Dynamic_Normal
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$80,d0
	bne.s	loc_93F0
	bra.w	loc_93AC
; ===========================================================================

loc_93F0:
	move.w	(Level_select_zone).w,d0
	add.w	d0,d0
	move.w	Misc_9454(pc,d0.w),d0
	bmi.w	loc_944C
	cmpi.w	#$4000,d0
	bne.s	loc_9480
	move.b	#$10,(Game_Mode).w ; => SpecialStage
	clr.w	(Current_ZoneAndAct).w
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w
	moveq	#0,d0
	move.w	d0,(Ring_count).w
	move.l	d0,(Timer).w
	move.l	d0,(Score).w
	move.w	d0,(Ring_count_2P).w
	move.l	d0,(Timer_2P).w
	move.l	d0,(Score_2P).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	move.w	(Player_option).w,(Player_mode).w
	rts
; ===========================================================================

loc_944C:
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts
; ===========================================================================
; -----------------------------------------------------------------------------
; Level Select Level Order

; One entry per item in the level select menu. Just set the value for the item
; you want to link to the level/act number of the level you want to load when
; the player selects that item.
; -----------------------------------------------------------------------------
Misc_9454:
	dc.w	 0
	dc.w	 1	; 1
	dc.w  $D00	; 2
	dc.w  $D01	; 3
	dc.w  $F00	; 4
	dc.w  $F01	; 5
	dc.w  $C00	; 6
	dc.w  $C01	; 7
	dc.w  $700	; 8
	dc.w  $701	; 9
	dc.w  $B00	; 10
	dc.w  $B01	; 11
	dc.w  $A00	; 12
	dc.w  $A01	; 13
	dc.w  $400	; 14
	dc.w  $401	; 15
	dc.w  $500	; 16
	dc.w $1000	; 17
	dc.w  $600	; 18
	dc.w  $E00	; 19
	dc.w $4000	; 20
	dc.w $FFFF	; 21
; ===========================================================================

loc_9480:
	andi.w	#$3FFF,d0
	move.w	d0,(Current_ZoneAndAct).w
	move.b	#$C,(Game_Mode).w ; => Level (Zone play mode)
	move.b	#3,(Life_count).w
	move.b	#3,(Life_count_2P).w
	moveq	#0,d0
	move.w	d0,(Ring_count).w
	move.l	d0,(Timer).w
	move.l	d0,(Score).w
	move.w	d0,(Ring_count_2P).w
	move.l	d0,(Timer_2P).w
	move.l	d0,(Score_2P).w
	move.b	d0,(Continue_count).w
	move.l	#5000,(Next_Extra_life_score).w
	move.l	#5000,(Next_Extra_life_score_2P).w
	move.b	#-7,d0
	bsr.w	JmpTo_PlaySound
	moveq	#0,d0
	move.w	d0,(Two_player_mode_copy).w
	move.w	d0,(Two_player_mode).w
	rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Change what you're selecting in the level select
; ---------------------------------------------------------------------------
; loc_94DC:
LevSelControls:
	move.b	(Ctrl_1_Press).w,d1
	andi.b	#3,d1
	bne.s	loc_94EC
	subq.w	#1,($FFFFFF80).w
	bpl.s	loc_9522

loc_94EC:
	move.w	#$B,($FFFFFF80).w
	move.b	(Ctrl_1_Held).w,d1
	andi.b	#3,d1
	beq.s	loc_9522
	move.w	(Level_select_zone).w,d0
	btst	#0,d1
	beq.s	loc_950C
	subq.w	#1,d0
	bcc.s	loc_950C
	moveq	#$15,d0

loc_950C:
	btst	#1,d1
	beq.s	loc_951C
	addq.w	#1,d0
	cmpi.w	#$16,d0
	bcs.s	loc_951C
	moveq	#0,d0

loc_951C:
	move.w	d0,(Level_select_zone).w
	rts
; ===========================================================================

loc_9522:
	cmpi.w	#$15,(Level_select_zone).w
	bne.s	loc_958A
	move.w	(Sound_test_sound).w,d0
	move.b	(Ctrl_1_Press).w,d1
	btst	#2,d1
	beq.s	loc_953E
	subq.b	#1,d0
	bcc.s	loc_953E
	moveq	#$7F,d0

loc_953E:
	btst	#3,d1
	beq.s	loc_954E
	addq.b	#1,d0
	cmpi.w	#$80,d0
	bcs.s	loc_954E
	moveq	#0,d0

loc_954E:
	btst	#6,d1
	beq.s	loc_955C
	addi.b	#$10,d0
	andi.b	#$7F,d0

loc_955C:
	move.w	d0,(Sound_test_sound).w
	andi.w	#$30,d1
	beq.s	return_9588
	move.w	(Sound_test_sound).w,d0
	addi.w	#$80,d0
	bsr.w	JmpTo_PlayMusic
	lea	(debug_cheat).l,a0
	lea	(byte_97C5).l,a2
	lea	($FFFFFFD2).w,a1
	moveq	#1,d2
	bsr.w	loc_9746

return_9588:
	rts
; ===========================================================================

loc_958A:
	move.b	(Ctrl_1_Press).w,d1
	andi.b	#$C,d1
	beq.s	return_95A0
	move.w	(Level_select_zone).w,d0
	move.b	byte_95A2(pc,d0.w),d0
	move.w	d0,(Level_select_zone).w

return_95A0:
	rts
; ===========================================================================
byte_95A2:
	dc.b $E
	dc.b $F		; 1
	dc.b $11	; 2
	dc.b $11	; 3
	dc.b $12	; 4
	dc.b $12	; 5
	dc.b $13	; 6
	dc.b $13	; 7
	dc.b $14	; 8
	dc.b $14	; 9
	dc.b $15	; 10
	dc.b $15	; 11
	dc.b $C		; 12
	dc.b $D		; 13
	dc.b 0		; 14
	dc.b 1		; 15
	dc.b 1		; 16
	dc.b 2		; 17
	dc.b 4		; 18
	dc.b 6		; 19
	dc.b 8		; 20
	dc.b $A		; 21
; ===========================================================================

loc_95B8:
	lea	(Metablock_Table).l,a4
	lea	(byte_96EE).l,a5
	lea	(VDP_data_port).l,a6
	moveq	#0,d0
	move.w	(Level_select_zone).w,d0
	lsl.w	#2,d0
	lea	(a5,d0.w),a3
	moveq	#0,d0
	move.b	(a3),d0
	mulu.w	#$50,d0
	moveq	#0,d1
	move.b	1(a3),d1
	add.w	d1,d0
	lea	(a4,d0.w),a1
	moveq	#0,d1
	move.b	(a3),d1
	lsl.w	#7,d1
	add.b	1(a3),d1
	addi.w	#-$4000,d1
	lsl.l	#2,d1
	lsr.w	#2,d1
	ori.w	#$4000,d1
	swap	d1
	move.l	d1,4(a6)
	moveq	#$D,d2

loc_9608:
	move.w	(a1)+,d0
	add.w	d3,d0
	move.w	d0,(a6)
	dbf	d2,loc_9608
	addq.w	#2,a3
	moveq	#0,d0
	move.b	(a3),d0
	beq.s	loc_964C
	mulu.w	#$50,d0
	moveq	#0,d1
	move.b	1(a3),d1
	add.w	d1,d0
	lea	(a4,d0.w),a1
	moveq	#0,d1
	move.b	(a3),d1
	lsl.w	#7,d1
	add.b	1(a3),d1
	addi.w	#-$4000,d1
	lsl.l	#2,d1
	lsr.w	#2,d1
	ori.w	#$4000,d1
	swap	d1
	move.l	d1,4(a6)
	move.w	(a1)+,d0
	add.w	d3,d0
	move.w	d0,(a6)

loc_964C:
	cmpi.w	#$15,(Level_select_zone).w
	bne.s	return_9658
	bsr.w	loc_965A

return_9658:
	rts
; ===========================================================================

loc_965A:
	move.l	#$49440003,(VDP_control_port).l
	move.w	(Sound_test_sound).w,d0
	move.b	d0,d2
	lsr.b	#4,d0
	bsr.s	loc_9670
	move.b	d2,d0

loc_9670:
	andi.w	#$F,d0
	cmpi.b	#$A,d0
	bcs.s	loc_967E
	addi.b	#4,d0

loc_967E:
	addi.b	#$10,d0
	add.w	d3,d0
	move.w	d0,(a6)
	rts
; ===========================================================================

loc_9688:
	move.w	(Level_select_zone).w,d0
	lea	(byte_96D8).l,a3
	lea	(a3,d0.w),a3
	lea	($FFFF08C0).l,a1
	moveq	#0,d0
	move.b	(a3),d0
	lsl.w	#3,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	lea	(a1,d0.w),a1
	move.l	#$4B360003,d0
	moveq	#3,d1
	moveq	#2,d2
	bsr.w	JmpTo_ShowVDPGraphics
	lea	(Pal_LevelIcons).l,a1
	moveq	#0,d0
	move.b	(a3),d0
	lsl.w	#5,d0
	lea	(a1,d0.w),a1
	lea	(Normal_palette_line3).w,a2
	moveq	#7,d1

loc_96D0:
	move.l	(a1)+,(a2)+
	dbf	d1,loc_96D0
	rts
; ===========================================================================
; unknown
byte_96D8:
	dc.b   0,0	; 1
	dc.b   7,7	; 3
	dc.b   8,8	; 5
	dc.b   6,6	; 7
	dc.b   2,2	; 9
	dc.b   5,5	; 11
	dc.b   4,4	; 13
	dc.b   1,1	; 15
	dc.b   1,9	; 17
	dc.b  $A,$B	; 19
	dc.b  $C,$E	; 21
byte_96EE:
	dc.b   3,  6,  3,$24,  3,  6,  4,$24,  6,  6,  6,$24,  6,  6,  7,$24
	dc.b   9,  6,  9,$24,  9,  6, $A,$24, $C,  6, $C,$24, $C,  6, $D,$24; 16
	dc.b  $F,  6, $F,$24, $F,  6,$10,$24,$12,  6,$12,$24,$12,  6,$13,$24; 32
	dc.b $15,  6,$15,$24,$15,  6,$16,$24,  3,$2C,  3,$48,  3,$2C,  4,$48; 48
	dc.b   3,$2C,  5,$48,  6,$2C,  0,  0,  9,$2C,  0,  0, $C,$2C,  0,  0; 64
	dc.b  $F,$2C,  0,  0,$12,$2C,$12,$48; 80
; ===========================================================================

loc_9746:
	move.w	(Correct_cheat_entries).w,d0
	adda.w	d0,a0
	move.w	(Sound_test_sound).w,d0
	cmp.b	(a0),d0
	bne.s	loc_976A
	addq.w	#1,(Correct_cheat_entries).w
	tst.b	1(a0)
	bne.s	loc_9770
	move.w	#$101,(a1)
	move.b	#$35+$80,d0 ; ring sound on correct cheat entry
	bsr.w	JmpTo_PlaySound

loc_976A:
	move.w	#0,(Correct_cheat_entries).w

loc_9770:
	move.w	(Correct_cheat_entries_2).w,d0
	adda.w	d0,a2
	move.w	(Sound_test_sound).w,d0
	cmp.b	(a2),d0
	bne.s	loc_97AA
	addq.w	#1,(Correct_cheat_entries_2).w
	tst.b	1(a2)
	bne.s	return_97B0
	tst.w	d2
	bne.s	loc_979C
	move.b	#$F,(Continue_count).w
	move.b	#$3F,d0
	bsr.w	JmpTo_PlayMusic
	bra.s	loc_97AA
; ===========================================================================

loc_979C:
	move.w	#7,(Got_Emerald).w
	move.b	#-$63,d0
	bsr.w	JmpTo_PlayMusic

loc_97AA:
	move.w	#0,(Correct_cheat_entries_2).w

return_97B0:
	rts
; ===========================================================================
level_select_cheat:	dc.b $19, $65,   9, $17,   0
byte_97B7:	dc.b   1,   1,   2,   4,   0
debug_cheat:	dc.b   1,   9,   9,   2,   1,   1,   2,   4,   0
byte_97C5:	dc.b   4,   1,   2,   6,   0

	; set the character set for menu text
	charset '@',"\27\30\31\32\33\34\35\36\37\38\39\40\41\42\43\44\45\46\47\48\49\50\51\52\53\54\55"
	charset '0',"\16\17\18\19\20\21\22\23\24\25"
	charset '*',$1A
	charset ':',$1C
	charset '.',$1D
	charset ' ',0

	; options screen menu text

byte_97CA:	dc.b $10,"* PLAYER SELECT *"
byte_97DC:	dc.b  $E,"SONIC AND MILES"
byte_97EC:	dc.b  $E,"SONIC AND TAILS"
byte_97FC:	dc.b  $E,"SONIC ALONE    "
byte_980C:	dc.b  $E,"MILES ALONE    "
byte_981C:	dc.b  $E,"TAILS ALONE    "
byte_982C:	dc.b $10,"* VS MODE ITEMS *"
byte_983E:	dc.b  $E,"ALL KINDS ITEMS"
byte_984E:	dc.b  $E,"TELEPORT ONLY  "
byte_985E:	dc.b $10,"*  SOUND TEST   *"
byte_9870:	dc.b  $E,"      0"
		dc.b $10,"       "

	charset ; reset character set

; level select picture palettes
; byte_9880:
Pal_LevelIcons:	BINCLUDE "art/palettes/Level Select Icons.bin"

; 2-player level select screen mappings (Enigma compressed)
; byte_9A60:
MapEng_LevSel2P:	BINCLUDE "mappings/misc/Level Select 2P.bin"

; options screen mappings (Enigma compressed)
; byte_9AB2:
MapEng_Options:	BINCLUDE "mappings/misc/Options Screen.bin"

; level select screen mappings (Enigma compressed)
; byte_9ADE:
MapEng_LevSel:	BINCLUDE "mappings/misc/Level Select.bin"

; 1P and 2P level select icon mappings (Enigma compressed)
; byte_9C32:
MapEng_LevSelIcon:	BINCLUDE "mappings/misc/Level Select Icons.bin"

; ===========================================================================
JmpTo_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo_PlayMusic 
	jmp	(PlayMusic).l
; ===========================================================================
; loc_9C70:
JmpTo_ShowVDPGraphics 
	jmp	(ShowVDPGraphics).l
; End of function sub_9186


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Attributes: thunk

JmpTo2_Dynamic_Normal 
	jmp	Dynamic_Normal.l
; End of function JmpTo2_Dynamic_Normal




; ===========================================================================
; loc_9C7C:
EndingSequence:
	clearRAM Object_RAM,$2000
	clearRAM Misc_Variables,$100
	clearRAM Camera_RAM,$100

	move	#$2700,sr
	move.w	($FFFFF60C).w,d0
	andi.b	#-$41,d0
	move.w	d0,(VDP_control_port).l

	stopZ80
	dmaFillVRAM 0,$C000,$1000 ; clear Plane A pattern name table
	clr.l	(Vscroll_Factor).w
	clr.l	($FFFFF61A).w
	startZ80

	lea	(VDP_control_port).l,a6
	move.w	#$8B03,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$857C,(a6)
	move.w	#$9001,(a6)
	move.w	#$8004,(a6)
	move.w	#$8720,(a6)
	move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 224th scanline
	move.w	(Hint_counter_reserve).w,(a6)
	clr.b	(Super_Sonic_flag).w
	cmpi.b	#7,(Emerald_count).w
	bne.s	loc_9D64
	cmpi.w	#2,(Player_mode).w
	beq.s	loc_9D64
	st	(Super_Sonic_flag).w
	move.b	#-1,(Super_Sonic_palette).w
	move.b	#$F,(Palette_frame_count).w
	move.w	#$30,($FFFFF65C).w

loc_9D64:
	moveq	#0,d0
	cmpi.w	#2,(Player_mode).w
	beq.s	loc_9D78
	tst.b	(Super_Sonic_flag).w
	bne.s	loc_9D7A
	bra.w	loc_9D7C

; ===========================================================================

loc_9D78:
	addq.w	#2,d0

loc_9D7A:
	addq.w	#2,d0

loc_9D7C:
	move.w	d0,($FFFFF750).w
	bsr.w	sub_ABE2
	bsr.w	sub_AC30
	move.l	#$6AC00000,(VDP_control_port).l
	lea	(ArtNem_EndingFinalTornado).l,a0
	bsr.w	JmpTo_NemDec
	move.l	#$65000001,(VDP_control_port).l
	lea	(ArtNem_EndingPics).l,a0
	bsr.w	JmpTo_NemDec
	move.l	#$52600002,(VDP_control_port).l
	lea	(ArtNem_EndingMiniTornado).l,a0
	bsr.w	JmpTo_NemDec
	move.l	#$60000002,(VDP_control_port).l
	lea	(ArtNem_Tornado).l,a0
	bsr.w	JmpTo_NemDec
	move.l	#$69E00002,(VDP_control_port).l
	lea	(ArtNem_Clouds).l,a0
	bsr.w	JmpTo_NemDec
	move.w	#$E00,(Current_ZoneAndAct).w
	move	#$2300,sr
	moveq	#-$6B,d0
	bsr.w	JmpTo2_PlayMusic
	move.l	#$EEE0EEE,d1
	lea	(Normal_palette).w,a1
	moveq	#$1F,d0

loc_9E08:
	move.l	d1,(a1)+
	dbf	d0,loc_9E08
	lea	(Pal_AC7E).l,a1
	lea	(Second_palette).w,a2
	moveq	#$1F,d0

loc_9E1A:
	move.l	(a1)+,(a2)+
	dbf	d0,loc_9E1A
	clr.b	($FFFFEEBD).w
	moveq	#0,d0
	move.w	d0,(Debug_placement_mode).w
	move.w	d0,(Level_Inactive_flag).w
	move.w	d0,(Timer_frames).w
	move.w	d0,(Camera_X_pos).w
	move.w	d0,(Camera_Y_pos).w
	move.w	d0,($FFFFEEF0).w
	move.w	d0,($FFFFEEF4).w
	move.w	d0,($FFFFEE08).w
	move.w	#$C8,($FFFFEE0C).w
	move.l	d0,(Vscroll_Factor).w
	move.b	d0,($FFFFEE42).w
	move.b	d0,($FFFFEE43).w
	move.w	d0,($FFFFF662).w
	move.w	d0,($FFFFF660).w

	clearRAM Horiz_Scroll_Buf,$404

	move.w	#$7FFF,($FFFFF634).w
	lea	(Object_RAM+$100).w,a1
	move.b	#$CA,(a1) ; load objCA (end of game cutscene) at $FFFFB100
	move.b	#6,routine(a1)
	move.w	#$60,objoff_3C(a1)
	move.w	#1,objoff_30(a1)
	cmpi.w	#4,($FFFFF750).w
	bne.s	loc_9EA4
	move.w	#$10,objoff_2E(a1)
	move.w	#$100,objoff_3C(a1)

loc_9EA4:
	move.b	#$18,(Delay_Time).w
	bsr.w	DelayProgram
	move.w	($FFFFF60C).w,d0
	ori.b	#$40,d0
	move.w	d0,(VDP_control_port).l

loc_9EBC:
	move.b	#$18,(Delay_Time).w
	bsr.w	DelayProgram
	addq.w	#1,(Timer_frames).w
	jsr	(RandomNumber).l
	jsr	(RunObjects).l
	jsr	(BuildSprites).l
	tst.b	($FFFFF661).w
	beq.s	loc_9EE6
	bsr.w	JmpTo_PalCycle_Load

loc_9EE6:
	bsr.w	sub_9EF4
	tst.w	(Level_Inactive_flag).w
	beq.w	loc_9EBC
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_9EF4:
	tst.b	($FFFFF660).w
	beq.w	return_A0BE
	bsr.w	Pal_FadeFrom
	lea	(VDP_control_port).l,a6
	move.w	#$8004,(a6)
	move.w	#$8230,(a6)
	move.w	#$8407,(a6)
	move.w	#$9001,(a6)
	move.w	#$9200,(a6)
	move.w	#$8B03,(a6)
	move.w	#$8700,(a6)
	clr.b	(Water_move).w
	move.w	#$8C81,(a6)
	bsr.w	JmpTo_ClearScreen

	clearRAM Sprite_Table_Input,$400
	clearRAM Object_RAM,$2000
	clearRAM Misc_Variables,$100
	clearRAM Camera_RAM,$100

	clr.b	($FFFFEEBD).w
	moveq	#0,d0
	move.w	d0,(Level_Inactive_flag).w
	move.w	d0,(Timer_frames).w
	move.w	d0,(Camera_X_pos).w
	move.w	d0,(Camera_Y_pos).w
	move.w	d0,($FFFFEEF0).w
	move.w	d0,($FFFFEEF4).w
	move.w	d0,($FFFFEE08).w
	move.w	d0,($FFFFEE0C).w
	move.l	d0,(Vscroll_Factor).w
	move.b	d0,($FFFFEE42).w
	move.b	d0,($FFFFEE43).w
	move.w	d0,($FFFFF662).w
	move.w	d0,($FFFFF660).w

	clearRAM Horiz_Scroll_Buf,$404

	moveq	#-$62,d0
	bsr.w	JmpTo2_PlaySound
	clr.w	(Second_palette).w
	move.w	#$EEE,(Second_palette+$C).w
	move.w	#$EE,(Second_palette_line2+$C).w
	move.l	#$40200000,(VDP_control_port).l
	lea	(ArtNem_CreditText).l,a0
	bsr.w	JmpTo_NemDec
	clr.w	($FFFFFF4C).w

loc_9FE6:
	bsr.w	JmpTo_ClearScreen
	bsr.w	sub_B262
	bsr.w	Pal_FadeTo
	move.w	#$18E,d0
	btst	#6,(Graphics_Flags).w
	beq.s	loc_A002
	move.w	#$144,d0

loc_A002:
	move.b	#$18,(Delay_Time).w
	bsr.w	DelayProgram
	dbf	d0,loc_A002
	bsr.w	Pal_FadeFrom
	lea	(off_B2CA).l,a1
	addq.w	#1,($FFFFFF4C).w
	move.w	($FFFFFF4C).w,d0
	lsl.w	#2,d0
	move.l	(a1,d0.w),d0
	bpl.s	loc_9FE6
	bsr.w	Pal_FadeFrom
	bsr.w	JmpTo_ClearScreen
	move.l	#$40000000,(VDP_control_port).l
	lea	(ArtNem_EndingTitle).l,a0
	bsr.w	JmpTo_NemDec
	lea	(byte_B23A).l,a0
	lea	(Metablock_Table).l,a1
	move.w	#0,d0
	bsr.w	JmpTo_EniDec
	lea	(Metablock_Table).l,a1
	move.l	#$45980003,d0
	moveq	#$F,d1
	moveq	#5,d2
	bsr.w	JmpTo2_ShowVDPGraphics
	clr.w	($FFFFFF4C).w
	bsr.w	sub_A0C0
	move.w	#$3B,d0

loc_A07A:
	move.b	#$18,(Delay_Time).w
	bsr.w	DelayProgram
	dbf	d0,loc_A07A
	move.w	#$257,d6

loc_A08C:
	move.b	#$18,(Delay_Time).w
	bsr.w	DelayProgram
	addq.w	#1,($FFFFFF4C).w
	bsr.w	sub_A0C0
	cmpi.w	#$5E,($FFFFFF4C).w
	bcs.s	loc_A08C
	move.b	(Ctrl_1_Press).w,d1
	andi.b	#$F0,d1
	bne.s	loc_A0B4
	dbf	d6,loc_A08C

loc_A0B4:
	st	(Level_Inactive_flag).w
	move.b	#0,(Game_Mode).w ; => SegaScreen

return_A0BE:
	rts
; End of function sub_9EF4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_A0C0:
	lea	(Normal_palette+2).w,a2
	move.w	($FFFFFF4C).w,d0
	cmpi.w	#$24,d0
	bcc.s	return_A0BE
	btst	#0,d0
	bne.s	return_A0BE
	lsr.w	#1,d0
	move.b	byte_A0EC(pc,d0.w),d0
	mulu.w	#$18,d0
	lea	pal_A0FE(pc,d0.w),a1
	moveq	#5,d0

loc_A0E4:
	move.l	(a1)+,(a2)+
	dbf	d0,loc_A0E4
	rts
; End of function sub_A0C0

; ===========================================================================
byte_A0EC:
	dc.b   0
	dc.b   1	; 1
	dc.b   2	; 2
	dc.b   3	; 3
	dc.b   4	; 4
	dc.b   3	; 5
	dc.b   2	; 6
	dc.b   1	; 7
	dc.b   0	; 8
	dc.b   5	; 9
	dc.b   6	; 10
	dc.b   7	; 11
	dc.b   8	; 12
	dc.b   7	; 13
	dc.b   6	; 14
	dc.b   5	; 15
	dc.b   0	; 16
	dc.b   0	; 17

; some palette cycle for the ending sequence
pal_A0FE:	BINCLUDE	"art/palettes/Ending Cycle.bin"

; ===========================================================================
; ----------------------------------------------------------------------------
; Object CA - Cut scene at end of game
; ----------------------------------------------------------------------------
; Sprite_A1D6:
ObjCA:
	addq.w	#1,objoff_32(a0)
	cmpi.w	#4,($FFFFF750).w
	beq.s	loc_A1FA
	cmpi.w	#2,($FFFFF750).w
	bne.s	loc_A1FA
	st	(Super_Sonic_flag).w
	move.w	#$100,(Ring_count).w
	move.b	#-1,(Super_Sonic_palette).w

loc_A1FA:

	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_A208(pc,d0.w),d1
	jmp	off_A208(pc,d1.w)
; ===========================================================================
off_A208:
	dc.w loc_A218-off_A208
	dc.w loc_A240-off_A208	; 1
	dc.w loc_A24E-off_A208	; 2
	dc.w loc_A240-off_A208	; 3
	dc.w loc_A256-off_A208	; 4
	dc.w loc_A30A-off_A208	; 5
	dc.w loc_A34C-off_A208	; 6
	dc.w loc_A38E-off_A208	; 7
; ===========================================================================

loc_A218:
	moveq	#4,d0
	move.w	#$180,d1
	btst	#6,(Graphics_Flags).w
	beq.s	sub_A22A
	move.w	#$100,d1

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_A22A:

	lea	(Object_RAM+$C0).w,a1
	move.b	#$C9,(a1) ; load objC9 (palette change handler) at $FFFFB0C0
	move.b	d0,subtype(a1)
	addq.b	#2,routine(a0)
	move.w	d1,objoff_3C(a0)
	rts
; End of function sub_A22A

; ===========================================================================

loc_A240:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_A248
	rts
; ===========================================================================

loc_A248:
	addq.b	#2,routine(a0)
	rts
; ===========================================================================

loc_A24E:
	moveq	#6,d0
	move.w	#$80,d1
	bra.s	sub_A22A
; ===========================================================================

loc_A256:
	move.w	objoff_2E(a0),d0
	cmpi.w	#$10,d0
	bcc.s	loc_A2AC
	addq.w	#4,objoff_2E(a0)
	clr.b	routine(a0)
	move.l	a0,-(sp)
	movea.l	off_A29C(pc,d0.w),a0
	lea	(Metablock_Table).l,a1
	move.w	#$328,d0
	bsr.w	JmpTo_EniDec
	move	#$2700,sr
	lea	(Metablock_Table).l,a1
	move.l	#$441C0003,d0
	moveq	#$B,d1
	moveq	#8,d2
	bsr.w	JmpTo2_ShowVDPGraphics
	move	#$2300,sr
	movea.l	(sp)+,a0 ; load 0bj address
	rts
; ===========================================================================
off_A29C:
	dc.l MapEng_Ending1
	dc.l MapEng_Ending2
	dc.l MapEng_Ending3
	dc.l MapEng_Ending4
; ===========================================================================

loc_A2AC:
	move.w	#2,($FFFFF662).w
	st	(Control_Locked).w
	st	($FFFFF661).w
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	($FFFFF750).w,d0
	move.w	off_A2DA(pc,d0.w),d0
	jsr	off_A2DA(pc,d0.w)
	move.w	#$80,d1
	bsr.w	sub_A22A
	move.w	#$40,objoff_3C(a0)
	rts
; ===========================================================================
off_A2DA:
	dc.w loc_A2E0-off_A2DA
	dc.w loc_A2EE-off_A2DA	; 1
	dc.w loc_A2F2-off_A2DA	; 2
; ===========================================================================

loc_A2E0:
	moveq	#8,d0

loc_A2E2:
	move.b	#1,(a1) ; load Sonic object
	move.b	#$81,$2A(a1)
	rts
; ===========================================================================

loc_A2EE:
	moveq	#$C,d0
	bra.s	loc_A2E2
; ===========================================================================

loc_A2F2:
	moveq	#$E,d0
	move.b	#2,(a1) ; load Tails object
	move.b	#$81,$2A(a1)
	move.b	#5,(Object_RAM+$80).w ; load Obj05 (Tails' tails) at $FFFFB080
	move.w	a1,(Object_RAM+$80+parent).w
	rts
; ===========================================================================

loc_A30A:
	subq.w	#1,objoff_3C(a0)
	bpl.s	loc_A320
	moveq	#$A,d0
	move.w	#$80,d1
	bsr.w	sub_A22A
	move.w	#$C0,objoff_3C(a0)

loc_A320:
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	#$F,anim(a1)
	move.w	#$A0,x_pos(a1)
	move.w	#$50,y_pos(a1)
	cmpi.w	#2,($FFFFF750).w
	bne.s	return_A34A
	move.b	#0,anim(a1)
	move.w	#$1000,inertia(a1)

return_A34A:
	rts
; ===========================================================================

loc_A34C:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_A366
	moveq	#0,d4
	moveq	#0,d5
	move.w	#0,($FFFFEEB0).w
	move.w	#$100,($FFFFEEB2).w
	bra.w	SwScrl_DEZ
; ===========================================================================

loc_A366:
	addq.b	#2,routine(a0)
	move.w	#$100,objoff_3C(a0)
	cmpi.w	#4,($FFFFF750).w
	bne.s	return_A38C
	move.w	#$880,objoff_3C(a0)
	btst	#6,(Graphics_Flags).w
	beq.s	return_A38C
	move.w	#$660,objoff_3C(a0)

return_A38C:

	rts
; ===========================================================================

loc_A38E:
	btst	#6,(Graphics_Flags).w
	beq.s	loc_A3A2
	cmpi.w	#$E40,objoff_32(a0)
	beq.s	loc_A3BE
	bra.w	loc_A3AA
; ===========================================================================

loc_A3A2:
	cmpi.w	#$E40+$300,objoff_32(a0)
	beq.s	loc_A3BE

loc_A3AA:
	subq.w	#1,objoff_3C(a0)
	bne.s	+
	lea	(dword_AD62).l,a2
	bsr.w	JmpTo_loc_367D0
+
	bra.w	loc_AB9C
; ===========================================================================

loc_A3BE:

	addq.b	#2,routine(a0)
	st	($FFFFF660).w
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CC - Trigger for rescue plane and birds from ending sequence
; ----------------------------------------------------------------------------
; Sprite_A3C8:
ObjCC:
	bsr.w	JmpTo_loc_3AF58
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	loc_A3DA(pc,d0.w),d1
	jmp	loc_A3DA(pc,d1.w)
; ===========================================================================

loc_A3DA:
	ori.b	#$7C,d4
	lea	(ObjB2_SubObjData).l,a1
	bsr.w	JmpTo_LoadSubObject_Part3
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_A3FC
	move.b	#4,mapping_frame(a0)
	move.b	#1,anim(a0)

loc_A3FC:
	move.w	#-$10,x_pos(a0)
	move.w	#$C0,y_pos(a0)
	move.w	#$100,x_vel(a0)
	move.w	#-$80,y_vel(a0)
	move.b	#$14,objoff_35(a0)
	move.b	#3,priority(a0)
	move.w	#4,($FFFFF662).w
	move.l	a0,-(sp)
	lea	(MapEng_EndingTailsPlane).l,a0
	cmpi.w	#4,($FFFFF750).w
	bne.s	loc_A43C
	lea	(MapEng_EndingSonicPlane).l,a0

loc_A43C:
	lea	(Metablock_Table).l,a1
	move.w	#$8156,d0
	bsr.w	JmpTo_EniDec
	movea.l	(sp)+,a0 ; load 0bj address
	move.w	#$C00,(Normal_palette_line3).w
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================
	; unused/dead code ; a0=object
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_A468(pc,d0.w),d1
	jsr	off_A468(pc,d1.w)
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================
off_A468:
	dc.w loc_A474-off_A468
	dc.w loc_A4B6-off_A468	; 1
	dc.w loc_A5A6-off_A468	; 2
	dc.w loc_A6C6-off_A468	; 3
	dc.w loc_A7DE-off_A468	; 4
	dc.w loc_A83E-off_A468	; 5
; ===========================================================================

loc_A474:	; fuck with Sonic
	cmpi.w	#$80,x_pos(a0)	; $A0
	;beq.s	loc_A48A
	bne.s	+
	move.w	#$600,x_vel(a0)
	move.b	#$7D+$80,d0	; stop music
	jsr	PlaySound
+	bsr.w	JmpTo2_ObjectMove

loc_A480:

	lea	(off_3AFDC).l,a1
	bra.w	JmpTo_AnimateSprite
; ===========================================================================

loc_A48A:
	addq.b	#2,routine_secondary(a0)
	move.w	#$480,objoff_3C(a0)
	btst	#6,(Graphics_Flags).w
	beq.s	loc_A4A2
	move.w	#$3D0,objoff_3C(a0)

loc_A4A2:
	move.w	#$40,objoff_32(a0)
	st	(Object_RAM+$100+$34).w
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	bra.s	loc_A480
; ===========================================================================

loc_A4B6:
	bsr.w	sub_ABBA
	bsr.w	sub_A524
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_A4C6
	bra.s	loc_A480
; ===========================================================================

loc_A4C6:
	addq.b	#2,routine_secondary(a0)
	move.w	#2,objoff_3C(a0)
	clr.w	objoff_32(a0)
	clr.b	mapping_frame(a0)
	cmpi.w	#2,($FFFFF750).w
	beq.s	loc_A4F4
	move.b	#7,mapping_frame(a0)
	cmpi.w	#4,($FFFFF750).w
	bne.s	loc_A4F4
	move.b	#$18,mapping_frame(a0)

loc_A4F4:

	clr.b	anim(a0)
	clr.b	anim_frame(a0)
	clr.b	anim_frame_duration(a0)
	move.l	#ObjCF_MapUnc_ADA2,mappings(a0)
	move.w	#0,art_tile(a0)
	jsr	(Adjust2PArtPointer).l
	subi.w	#$14,x_pos(a0)
	addi.w	#$14,y_pos(a0)
	bra.w	sub_A58C

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_A524:
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	($FFFFF750).w,d0
	move.w	off_A534(pc,d0.w),d0
	jmp	off_A534(pc,d0.w)
; End of function sub_A524

; ===========================================================================
off_A534:
	dc.w loc_A53A-off_A534
	dc.w loc_A55C-off_A534	; 1
	dc.w loc_A582-off_A534	; 2
; ===========================================================================

loc_A53A:
	move.w	y_pos(a0),d0
	subi.w	#$1C,d0

loc_A542:
	move.w	d0,y_pos(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.l	#$1000505,mapping_frame(a1)
	move.w	#$100,anim_frame_duration(a1)
	rts
; ===========================================================================

loc_A55C:
	tst.w	objoff_32(a0)
	beq.s	loc_A574
	subq.w	#1,objoff_32(a0)
	addi.l	#$8000,x_pos(a1)
	addq.w	#1,y_pos(a1)
	rts
; ===========================================================================

loc_A574:
	move.w	#$C0,x_pos(a1)
	move.w	#$90,y_pos(a1)
	rts
; ===========================================================================

loc_A582:
	move.w	y_pos(a0),d0
	subi.w	#$18,d0
	bra.s	loc_A542

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_A58C:

	tst.b	(Super_Sonic_flag).w
	bne.w	return_A38C

loc_A594:

	lea	(MainCharacter).w,a1 ; a1=character
	move.w	#$200,x_pos(a1)
	move.w	#0,y_pos(a1)
	rts
; End of function sub_A58C

; ===========================================================================

loc_A5A6:
	bsr.s	sub_A58C
	subq.w	#1,objoff_3C(a0)
	bpl.s	return_A5E6
	move.w	#2,objoff_3C(a0)
	move.w	objoff_32(a0),d0
	cmpi.w	#$1C,d0
	bcc.s	loc_A5E8
	addq.w	#1,objoff_32(a0)
	move.w	($FFFFF750).w,d1
	move.w	off_A5FC(pc,d1.w),d1
	lea	off_A5FC(pc,d1.w),a1
	move.b	(a1,d0.w),mapping_frame(a0)
	add.w	d0,d0
	add.w	d0,d0
	move.l	word_A656(pc,d0.w),d1
	move.w	d1,y_pos(a0)
	swap	d1
	move.w	d1,x_pos(a0)

return_A5E6:
	rts
; ===========================================================================

loc_A5E8:
	addq.b	#2,routine_secondary(a0)
	move.w	#$60,objoff_3C(a0)
	clr.b	objoff_31(a0)
	clr.w	objoff_32(a0)
	rts
; ===========================================================================
off_A5FC:
	dc.w byte_A602-off_A5FC
	dc.w byte_A61E-off_A5FC	; 1
	dc.w byte_A63A-off_A5FC	; 2
byte_A602:
	dc.b   7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9, $A, $A
	dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B; 16
byte_A61E:
	dc.b   0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3
	dc.b   3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4; 16
byte_A63A:
	dc.b $18,$18,$18,$18,$19,$19,$19,$19,$19,$19,$19,  9,  9,  9, $A, $A
	dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B; 16
word_A656:
	dc.w   $A0,  $70,  $B0,	 $70,  $B6,  $71,  $BC,	 $72
	dc.w   $C4,  $74,  $C8,	 $75,  $CA,  $76,  $CC,	 $77; 8
	dc.w   $CE,  $78,  $D0,	 $79,  $D2,  $7A,  $D4,	 $7B; 16
	dc.w   $D6,  $7C,  $D9,	 $7E,  $DC,  $81,  $DE,	 $84; 24
	dc.w   $E1,  $87,  $E4,	 $8B,  $E7,  $8F,  $EC,	 $94; 32
	dc.w   $F0,  $99,  $F5,	 $9D,  $F9,  $A4, $100,	 $AC; 40
	dc.w  $108,  $B8, $112,	 $C4, $11F,  $D3, $12C,	 $FA; 48
; ===========================================================================

loc_A6C6:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_A720
	tst.b	(Super_Sonic_flag).w
	beq.s	return_A70A
	subq.b	#1,objoff_31(a0)
	bpl.s	return_A70A
	addq.b	#3,objoff_31(a0)
	move.w	objoff_32(a0),d0
	addq.w	#4,objoff_32(a0)
	cmpi.w	#$78,d0
	bcc.s	return_A70A
	cmpi.w	#$C,d0
	bcs.s	loc_A70C
	bsr.w	loc_A594
	move.l	word_A766(pc,d0.w),d1
	move.w	d1,y_pos(a0)
	swap	d1
	move.w	d1,x_pos(a0)
	lsr.w	#2,d0
	move.b	byte_A748(pc,d0.w),mapping_frame(a0)

return_A70A:

	rts
; ===========================================================================

loc_A70C:
	move.l	word_A766(pc,d0.w),d0
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	d0,y_pos(a1)
	swap	d0
	move.w	d0,x_pos(a1)
	rts
; ===========================================================================

loc_A720:
	addq.b	#2,routine_secondary(a0)
	clr.w	objoff_3C(a0)
	clr.w	objoff_32(a0)
	lea	(dword_AD6E).l,a2
	bsr.w	JmpTo_loc_367D0
	tst.b	(Super_Sonic_flag).w
	bne.w	return_A38C
	lea	(dword_AD6A).l,a2
	bra.w	JmpTo_loc_367D0
; ===========================================================================
byte_A748:
	dc.b $12,$12,$12,$12,$12,$12,$12,$13,$13,$13,$13,$13,$13,$14,$14,$14
	dc.b $14,$15,$15,$15,$16,$16,$16,$16,$16,$16,$16,$16,$16,  0; 16
word_A766:
	dc.w   $C0
	dc.w   $90	; 1
	dc.w   $B0	; 2
	dc.w   $91	; 3
	dc.w   $A8	; 4
	dc.w   $92	; 5
	dc.w   $9B	; 6
	dc.w   $96	; 7
	dc.w   $99	; 8
	dc.w   $98	; 9
	dc.w   $98	; 10
	dc.w   $99	; 11
	dc.w   $99	; 12
	dc.w   $9A	; 13
	dc.w   $9B	; 14
	dc.w   $9C	; 15
	dc.w   $9F	; 16
	dc.w   $9E	; 17
	dc.w   $A4	; 18
	dc.w   $A0	; 19
	dc.w   $AC	; 20
	dc.w   $A2	; 21
	dc.w   $B7	; 22
	dc.w   $A5	; 23
	dc.w   $C4	; 24
	dc.w   $A8	; 25
	dc.w   $D3	; 26
	dc.w   $AB	; 27
	dc.w   $DE	; 28
	dc.w   $AE	; 29
	dc.w   $E8	; 30
	dc.w   $B0	; 31
	dc.w   $EF	; 32
	dc.w   $B2	; 33
	dc.w   $F4	; 34
	dc.w   $B5	; 35
	dc.w   $F9	; 36
	dc.w   $B8	; 37
	dc.w   $FC	; 38
	dc.w   $BB	; 39
	dc.w   $FE	; 40
	dc.w   $BE	; 41
	dc.w   $FF	; 42
	dc.w   $C0	; 43
	dc.w  $100	; 44
	dc.w   $C2	; 45
	dc.w  $101	; 46
	dc.w   $C5	; 47
	dc.w  $102	; 48
	dc.w   $C8	; 49
	dc.w  $102	; 50
	dc.w   $CC	; 51
	dc.w  $101	; 52
	dc.w   $D1	; 53
	dc.w   $FD	; 54
	dc.w   $D7	; 55
	dc.w   $F9	; 56
	dc.w   $DE	; 57
	dc.w   $F9	; 58
	dc.w  $118	; 59
; ===========================================================================

loc_A7DE:
	bsr.w	loc_A594
	subq.w	#1,objoff_3C(a0)
	bpl.s	return_A80C
	move.w	#2,objoff_3C(a0)
	move.w	objoff_32(a0),d0
	cmpi.w	#$1C,d0
	bcc.s	loc_A80E
	addq.w	#4,objoff_32(a0)
	lea	word_A822(pc,d0.w),a1
	move.w	(a1)+,d0
	add.w	d0,(Horiz_Scroll_Buf).w
	move.w	(a1)+,d0
	add.w	d0,(Vscroll_Factor).w

return_A80C:
	rts
; ===========================================================================

loc_A80E:
	addq.b	#2,routine_secondary(a0)
	bset	#3,status(a0)
	clr.b	objoff_31(a0)
	clr.w	objoff_32(a0)
	rts
; ===========================================================================
word_A822:
	dc.w $FFC6
	dc.w   $88	; 1
	dc.w $FFF4	; 2
	dc.w   $22	; 3
	dc.w $FFF8	; 4
	dc.w   $10	; 5
	dc.w $FFFC	; 6
	dc.w	 8	; 7
	dc.w $FFFE	; 8
	dc.w	 4	; 9
	dc.w $FFFF	; 10
	dc.w	 2	; 11
	dc.w $FFFF	; 12
	dc.w	 2	; 13
; ===========================================================================

loc_A83E:
	tst.b	(Super_Sonic_flag).w
	beq.w	return_A38C
	move.b	#$17,mapping_frame(a0)
	subq.b	#1,objoff_31(a0)
	bpl.s	return_A872
	addq.b	#3,objoff_31(a0)
	move.w	objoff_32(a0),d0
	cmpi.w	#$20,d0
	bcc.s	return_A872
	addq.w	#4,objoff_32(a0)
	move.l	word_A874(pc,d0.w),d1
	move.w	d1,y_pos(a0)
	swap	d1
	move.w	d1,x_pos(a0)

return_A872:

	rts
; ===========================================================================
word_A874:
	dc.w   $60
	dc.w   $88	; 1
	dc.w   $50	; 2
	dc.w   $68	; 3
	dc.w   $44	; 4
	dc.w   $46	; 5
	dc.w   $3C	; 6
	dc.w   $36	; 7
	dc.w   $36	; 8
	dc.w   $2A	; 9
	dc.w   $33	; 10
	dc.w   $24	; 11
	dc.w   $31	; 12
	dc.w   $20	; 13
	dc.w   $30	; 14
	dc.w   $1E	; 15
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CE - Sonic and Tails jumping off the plane from ending sequence
; ----------------------------------------------------------------------------
; Sprite_A894:
ObjCE:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_A8A2(pc,d0.w),d1
	jmp	off_A8A2(pc,d1.w)
; ===========================================================================
off_A8A2:
	dc.w loc_A8AA-off_A8A2
	dc.w loc_A902-off_A8A2	; 1
	dc.w loc_A936-off_A8A2	; 2
	dc.w BranchTo_JmpTo5_DisplaySprite-off_A8A2	; 3
; ===========================================================================

loc_A8AA:
	lea	(ObjB3_SubObjData).l,a1
	bsr.w	JmpTo_LoadSubObject_Part3
	move.l	#ObjCF_MapUnc_ADA2,mappings(a0)
	move.w	#$8000,art_tile(a0)
	move.b	#1,priority(a0)
	jsr	(Adjust2PArtPointer).l
	move.b	#$C,mapping_frame(a0)
	cmpi.w	#4,($FFFFF750).w
	bne.s	loc_A8E8
	move.b	#$F,mapping_frame(a0)
	move.w	#$A000,art_tile(a0)

loc_A8E8:
	move.w	#$E8,d0
	move.w	d0,x_pos(a0)
	move.w	d0,objoff_30(a0)
	move.w	#$118,d0
	move.w	d0,y_pos(a0)
	move.w	d0,objoff_32(a0)
	rts
; ===========================================================================

loc_A902:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#3,status(a1)
	bne.s	loc_A92A

loc_A90E:
	move.w	objoff_30(a0),d0
	add.w	(Horiz_Scroll_Buf).w,d0
	move.w	d0,x_pos(a0)
	move.w	objoff_32(a0),d0
	sub.w	(Vscroll_Factor).w,d0
	move.w	d0,y_pos(a0)

BranchTo_JmpTo5_DisplaySprite 
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================

loc_A92A:
	addq.b	#2,routine(a0)
	clr.w	objoff_3C(a0)
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================

loc_A936:
	subq.w	#1,objoff_3C(a0)
	bpl.s	BranchTo2_JmpTo5_DisplaySprite
	move.w	#4,objoff_3C(a0)
	move.w	objoff_34(a0),d0
	cmpi.w	#4,d0
	bcc.s	loc_A978
	addq.w	#2,objoff_34(a0)
	lea	byte_A980(pc,d0.w),a1
	cmpi.w	#2,($FFFFF750).w
	bne.s	loc_A960
	lea	byte_A984(pc,d0.w),a1

loc_A960:
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d0,x_pos(a0)
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d0,y_pos(a0)
	addq.b	#1,mapping_frame(a0)

BranchTo2_JmpTo5_DisplaySprite 
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================

loc_A978:
	addq.b	#2,routine(a0)
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================
byte_A980:
	dc.b $F8
	dc.b   0	; 1
	dc.b $BC	; 2
	dc.b $C8	; 3
byte_A984:
	dc.b $F8
	dc.b   0	; 1
	dc.b $B0	; 2
	dc.b $C0	; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CF - "Plane's helixes" from ending sequence
; ----------------------------------------------------------------------------
; Sprite_A988:
ObjCF:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_A996(pc,d0.w),d1
	jmp	off_A996(pc,d1.w)
; ===========================================================================
off_A996:
	dc.w loc_A99A-off_A996
	dc.w loc_A9E4-off_A996	; 1
; ===========================================================================

loc_A99A:
	lea	(ObjB3_SubObjData).l,a1
	bsr.w	JmpTo_LoadSubObject_Part3
	move.l	#ObjCF_MapUnc_ADA2,mappings(a0)
	move.w	#$8000,art_tile(a0)
	move.b	#3,priority(a0)
	jsr	(Adjust2PArtPointer).l
	move.b	#5,mapping_frame(a0)
	move.b	#2,anim(a0)
	move.w	#$10F,d0
	move.w	d0,x_pos(a0)
	move.w	d0,objoff_30(a0)
	move.w	#$15E,d0
	move.w	d0,y_pos(a0)
	move.w	d0,objoff_32(a0)
	rts
; ===========================================================================

loc_A9E4:
	lea	(off_AD82).l,a1
	bsr.w	JmpTo_AnimateSprite
	bra.w	loc_A90E
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CB - Background clouds from ending sequence
; ----------------------------------------------------------------------------
; Sprite_A9F2:
ObjCB:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_AA00(pc,d0.w),d1
	jmp	off_AA00(pc,d1.w)
; ===========================================================================
off_AA00:
	dc.w loc_AA06-off_AA00
	dc.w loc_AA76-off_AA00	; 1
	dc.w loc_AA8A-off_AA00	; 2
; ===========================================================================

loc_AA06:
	lea	(ObjB3_SubObjData).l,a1
	bsr.w	JmpTo_LoadSubObject_Part3
	move.w	art_tile(a0),d0
	andi.w	#$1FFF,d0
	ori.w	#$6000,d0
	move.w	d0,art_tile(a0)
	move.b	#$30,width_pixels(a0)
	move.l	(RNG_seed).w,d0
	ror.l	#1,d0
	move.l	d0,(RNG_seed).w
	move.w	d0,d1
	andi.w	#3,d0
	move.b	byte_AA6A(pc,d0.w),mapping_frame(a0)
	add.w	d0,d0
	move.w	word_AA6E(pc,d0.w),y_vel(a0)
	tst.b	(Object_RAM+$100+$34).w
	beq.s	loc_AA5A
	andi.w	#$FF,d1
	move.w	d1,y_pos(a0)
	move.w	#$150,x_pos(a0)
	rts
; ===========================================================================

loc_AA5A:
	andi.w	#$1FF,d1
	move.w	d1,x_pos(a0)
	move.w	#$100,y_pos(a0)
	rts
; ===========================================================================
byte_AA6A:
	dc.b   0
	dc.b   1	; 1
	dc.b   2	; 2
	dc.b   0	; 3
word_AA6E:
	dc.w $FD00
	dc.w $FE00	; 1
	dc.w $FF00	; 2
	dc.w $FD00	; 3
; ===========================================================================

loc_AA76:
	tst.b	(Object_RAM+$100+$34).w
	beq.s	loc_AA8A
	addq.b	#2,routine(a0)
	move.w	y_vel(a0),x_vel(a0)
	clr.w	y_vel(a0)

loc_AA8A:

	bsr.w	JmpTo2_ObjectMove
	tst.b	(Object_RAM+$100+$34).w
	beq.s	loc_AAA2
	cmpi.w	#-$20,x_pos(a0)
	blt.w	JmpTo3_DeleteObject
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================

loc_AAA2:
	tst.w	y_pos(a0)
	bmi.w	JmpTo3_DeleteObject
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CD - Birds from ending sequence
; ----------------------------------------------------------------------------
; Sprite_AAAE:
ObjCD:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_AABC(pc,d0.w),d1
	jmp	off_AABC(pc,d1.w)
; ===========================================================================
off_AABC:
	dc.w loc_AAC0-off_AABC
	dc.w loc_AB0E-off_AABC	; 1
; ===========================================================================

loc_AAC0:
	lea	(Obj28_SubObjData).l,a1
	bsr.w	JmpTo_LoadSubObject_Part3
	move.l	(RNG_seed).w,d0
	ror.l	#3,d0
	move.l	d0,(RNG_seed).w
	move.l	d0,d1
	andi.w	#$7F,d0
	move.w	#-$A0,d2
	add.w	d0,d2
	move.w	d2,x_pos(a0)
	ror.l	#3,d1
	andi.w	#$FF,d1
	moveq	#8,d2
	add.w	d1,d2
	move.w	d2,y_pos(a0)
	move.w	#$100,x_vel(a0)
	moveq	#$20,d0
	cmpi.w	#$20,d1
	bcs.s	loc_AB02
	neg.w	d0

loc_AB02:
	move.w	d0,y_vel(a0)
	move.w	#$C0,objoff_3C(a0)
	rts
; ===========================================================================

loc_AB0E:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_AB2E(pc,d0.w),d1
	jsr	off_AB2E(pc,d1.w)
	bsr.w	JmpTo2_ObjectMove
	lea	(byte_AD7C).l,a1
	bsr.w	JmpTo_AnimateSprite
	bra.w	JmpTo5_DisplaySprite
; ===========================================================================
off_AB2E:
	dc.w loc_AB34-off_AB2E
	dc.w loc_AB5C-off_AB2E	; 1
	dc.w loc_AB8E-off_AB2E	; 2
; ===========================================================================

loc_AB34:
	subq.w	#1,objoff_3C(a0)
	bpl.s	return_AB5A
	addq.b	#2,routine_secondary(a0)
	move.w	y_vel(a0),objoff_2E(a0)
	clr.w	x_vel(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.w	#$80,y_vel(a0)
	move.w	#$180,objoff_3C(a0)

return_AB5A:
	rts
; ===========================================================================

loc_AB5C:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_AB76
	move.w	y_pos(a0),d0
	moveq	#-4,d1
	cmp.w	objoff_32(a0),d0
	bcc.s	loc_AB70
	neg.w	d1

loc_AB70:
	add.w	d1,y_vel(a0)
	rts
; ===========================================================================

loc_AB76:
	addq.b	#2,routine_secondary(a0)
	move.w	#-$100,x_vel(a0)
	move.w	objoff_2E(a0),y_vel(a0)
	move.w	#$C0,objoff_3C(a0)
	rts
; ===========================================================================

loc_AB8E:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_AB96
	rts
; ===========================================================================

loc_AB96:
	addq.w	#4,sp
	bra.w	JmpTo3_DeleteObject
; ===========================================================================

loc_AB9C:
	subq.w	#1,objoff_30(a0)
	bpl.s	return_ABB8
	move.l	(RNG_seed).w,d0
	andi.w	#$1F,d0
	move.w	d0,objoff_30(a0)
	lea	(dword_AD5E).l,a2
	bsr.w	JmpTo_loc_367D0

return_ABB8:
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_ABBA:
	subq.w	#1,objoff_30(a0)
	bpl.s	return_ABE0
	tst.b	objoff_35(a0)
	beq.s	return_ABE0
	subq.b	#1,objoff_35(a0)
	move.l	(RNG_seed).w,d0
	andi.w	#$F,d0
	move.w	d0,objoff_30(a0)
	lea	(dword_AD66).l,a2
	bsr.w	JmpTo_loc_367D0

return_ABE0:
	rts
; End of function sub_ABBA


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_ABE2:
	move.w	($FFFFF750).w,d0
	move.w	off_ABEE(pc,d0.w),d0
	jmp	off_ABEE(pc,d0.w)
; End of function sub_ABE2

; ===========================================================================
off_ABEE:
	dc.w loc_ABF4-off_ABEE
	dc.w loc_AC08-off_ABEE	; 1
	dc.w loc_AC1C-off_ABEE	; 2
; ===========================================================================

loc_ABF4:
	move.l	#$43200000,(VDP_control_port).l
	lea	(ArtNem_EndingSonic).l,a0
	bra.w	JmpTo_NemDec
; ===========================================================================

loc_AC08:
	move.l	#$43200000,(VDP_control_port).l
	lea	(ArtNem_EndingSuperSonic).l,a0
	bra.w	JmpTo_NemDec
; ===========================================================================

loc_AC1C:
	move.l	#$43200000,(VDP_control_port).l
	lea	(ArtNem_EndingTails).l,a0
	bra.w	JmpTo_NemDec

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_AC30:
	move.w	($FFFFF750).w,d0
	move.w	off_AC3C(pc,d0.w),d0
	jmp	off_AC3C(pc,d0.w)
; End of function sub_AC30

; ===========================================================================
off_AC3C:
	dc.w loc_AC42-off_AC3C
	dc.w loc_AC56-off_AC3C	; 1
	dc.w loc_AC6A-off_AC3C	; 2
; ===========================================================================

loc_AC42:
	move.l	#$72800002,(VDP_control_port).l
	lea	(ArtNem_Bird).l,a0
	bra.w	JmpTo_NemDec
; ===========================================================================

loc_AC56:
	move.l	#$72800002,(VDP_control_port).l
	lea	(ArtNem_Eagle).l,a0
	bra.w	JmpTo_NemDec
; ===========================================================================

loc_AC6A:
	move.l	#$72800002,(VDP_control_port).l
	lea	(ArtNem_Chicken).l,a0
	bra.w	JmpTo_NemDec
; ===========================================================================
Pal_AC7E:	BINCLUDE	"art/palettes/Ending Sonic.bin"
Pal_AC9E:	BINCLUDE	"art/palettes/Ending Sonic Far.bin"
Pal_ACDE:	BINCLUDE	"art/palettes/Ending Background.bin"
Pal_AD1E:	BINCLUDE	"art/palettes/Ending Photos.bin"
Pal_AD3E:	BINCLUDE	"art/palettes/Ending Super Sonic.bin"

dword_AD5E:	dc.l $3ECB00
dword_AD62:	dc.l $3ECC00
dword_AD66:	dc.l $3ECD00
dword_AD6A:	dc.l $3ECE00
dword_AD6E:	dc.l $3ECF00

; off_AD72:
Obj28_SubObjData:
	dc.l Obj28_MapUnc_11E1C
	dc.w $594
	dc.b 4,2,8,0

byte_AD7C:
	dc.b   0
	dc.b   2	; 1
	dc.b   5	; 2
	dc.b   0	; 3
	dc.b   1	; 4
	dc.b $FF	; 5

; animation script
off_AD82:	dc.w byte_AD88-off_AD82
		dc.w byte_AD8E-off_AD82	; 1
		dc.w byte_AD9E-off_AD82	; 2
byte_AD88:	dc.b   3,  0,  0,  1,$FA,  0
byte_AD8E:	dc.b   3,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  4,$FA,  0
byte_AD9E:	dc.b   1,  5,  6,$FF
	even
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjCF_MapUnc_ADA2:	BINCLUDE "mappings/sprite/objCF.bin"
; --------------------------------------------------------------------------------------
; Unknown Enigma compressed data
; --------------------------------------------------------------------------------------
byte_B23A:
	dc.b   7,  1,  0,  1,  0,  1, $A,  0,$18,$10,  0,$C1,$80,  6, $A,$81
	dc.b $40, $B,  2,  0,$58,$88,  3,$86,$4C,$A4,  1,$C3,$40,$52,  1,$C0; 16
	dc.b $14,$21,$13,$C2,$80,$97,$FC,  0; 32

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_B262:
	lea	off_B2CA(pc),a1
	move.w	($FFFFFF4C).w,d0
	lsl.w	#2,d0
	move.l	(a1,d0.w),d0
	movea.l	d0,a1

loc_B272:
	move	#$2700,sr
	lea	(VDP_data_port).l,a6

loc_B27C:
	move.l	(a1)+,d0
	bmi.s	loc_B298
	movea.l	d0,a2
	move.w	(a1)+,d0
	bsr.s	sub_B29E
	move.l	d0,4(a6)
	move.b	(a2)+,d0
	lsl.w	#8,d0

loc_B28E:
	move.b	(a2)+,d0
	bmi.s	BranchTo_loc_B27C
	move.w	d0,(a6)
	bra.s	loc_B28E
; ===========================================================================

BranchTo_loc_B27C 
	bra.s	loc_B27C
; ===========================================================================

loc_B298:
	move	#$2300,sr
	rts
; End of function sub_B262


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_B29E:
	andi.l	#$FFFF,d0
	lsl.l	#2,d0
	lsr.w	#2,d0
	ori.w	#$4000,d0
	swap	d0
	rts
; End of function sub_B29E

; ===========================================================================

; macro for declaring pointer/position structures for intro/credit text
creditsPtrs macro addr,pos
	if "addr"<>""
		dc.l addr
		dc.w pos
		shift
		shift
		creditsPtrs ALLARGS
	else
		dc.w -1
	endif
    endm

; intro text pointers (one intro screen)
off_B2B0: creditsPtrs	byte_BD1A,$C49E, byte_BCEE,$C622, \
			byte_BCF6,$C786, byte_BCE9,$C924

; credits screen pointer table
off_B2CA:
	dc.l off_B322, off_B336, off_B34A, off_B358	; 3
	dc.l off_B366, off_B374, off_B388, off_B3A8	; 7
	dc.l off_B3C2, off_B3DC, off_B3F0, off_B41C	; 11
	dc.l off_B436, off_B450, off_B45E, off_B490	; 15
	dc.l off_B4B0, off_B4C4, off_B4F0, off_B51C	; 19
	dc.l off_B548, -1				; 21

; credits text pointers for each screen of credits
off_B322: creditsPtrs	byte_BC46,$C59C, byte_BC51,$C5B0, byte_BC55,$C784
off_B336: creditsPtrs	byte_B55C,$C586, byte_B56F,$C5AC, byte_B581,$C78C
off_B34A: creditsPtrs	byte_B56F,$C598, byte_B59F,$C78E
off_B358: creditsPtrs	byte_B5BC,$C598, byte_B5CD,$C78C
off_B366: creditsPtrs	byte_B5EB,$C58A, byte_B60C,$C78E
off_B374: creditsPtrs	byte_B628,$C510, byte_B642,$C708, byte_B665,$C814
off_B388: creditsPtrs	byte_B67B,$C408, byte_B69C,$C522, byte_B6A4,$C612, byte_B6BC,$C808, byte_B6DE,$C910
off_B3A8: creditsPtrs	byte_B6F8,$C496, byte_B70B,$C592, byte_B723,$C794, byte_B738,$C886
off_B3C2: creditsPtrs	byte_B75C,$C488, byte_B642,$C688, byte_B77E,$C78E, byte_B799,$C88E
off_B3DC: creditsPtrs	byte_B7B5,$C510, byte_B75C,$C608, byte_B799,$C80E
off_B3F0: creditsPtrs	byte_B7F2,$C312, byte_B6BC,$C508, byte_B80B,$C614, byte_B821,$C712, byte_B839,$C80E, byte_B855,$C916, byte_B869,$CA16
off_B41C: creditsPtrs	byte_B7B5,$C492, byte_B87D,$C594, byte_B893,$C796, byte_B8A8,$C88E
off_B436: creditsPtrs	byte_B8C5,$C48C, byte_B8E2,$C68A, byte_B902,$C786, byte_B90F,$C888
off_B450: creditsPtrs	byte_B932,$C588, byte_B954,$C78A
off_B45E: creditsPtrs	byte_B974,$C288, byte_B995,$C49E, byte_B9A1,$C59E, byte_B9AD,$C69E, byte_B9B8,$C7A0, byte_B9C1,$C8A2, byte_B9C8,$C9A2, byte_B9D0,$CA9E
off_B490: creditsPtrs	byte_B9DB,$C406, byte_BA00,$C610, byte_BA1B,$C70C, byte_BA3A,$C812, byte_BA52,$C914
off_B4B0: creditsPtrs	byte_BA69,$C512, byte_BA81,$C70A, byte_B7CE,$C806
off_B4C4: creditsPtrs	byte_B55C,$C316, byte_BAA2,$C414, byte_BAB8,$C606, byte_BADC,$C70E, byte_BAF7,$C80A, byte_BB16,$C90E, byte_BB32,$CA04
off_B4F0: creditsPtrs	byte_BB58,$C30C, byte_BB75,$C424, byte_BB7B,$C60C, byte_BC9F,$C70A, byte_BBD8,$C810, byte_BBF2,$C910, byte_BC0C,$CA12
off_B51C: creditsPtrs	byte_BB58,$C30C, byte_BB75,$C424, byte_BB98,$C606, byte_BBBC,$C70E, byte_BCBE,$C80E, byte_BCD9,$C91A, byte_BC25,$CA08
off_B548: creditsPtrs	byte_BC7B,$C496, byte_BC8F,$C6A4, byte_BC95,$C8A0

 ; temporarily remap characters to credit text format
 ; let's encode 2-wide characters like Aa, Bb, Cc, etc. and hide it with a macro
 charset '@',"\x3B\2\4\6\8\xA\xC\xE\x10\x12\x13\x15\x17\x19\x1B\x1D\x1F\x21\x23\x25\x27\x29\x2B\x2D\x2F\x31\x33"
 charset 'a',"\3\5\7\9\xB\xD\xF\x11\x12\x14\x16\x18\x1A\x1C\x1E\x20\x22\x24\x26\x28\x2A\x2C\x2E\x30\x32\x34"
 charset '!',"\x3D\x39\x3F\x36"
 charset '\H',"\x39\x37\x38"
 charset '9',"\x3E\x40\x41"
 charset '1',"\x3C\x35"
 charset '.',"\x3A"
 charset ' ',0

 ; macro for defining credit text in conjunction with the remapped character set
creditText macro pre,ss
c := 0
	dc.b pre
	rept strlen(ss)
t := substr(ss,c,1)
	dc.b t
l := lowstring(t)
	if t="I"
	elseif l<>t
		dc.b l
	elseif t="1"
		dc.b "!"
	elseif t="2"
		dc.b "$"
	elseif t="9"
		dc.b "#"
	endif
c := c+1
	endm
	dc.b -1
    endm

; credits text data (palette index followed by a string)
byte_B55C:	creditText $20,"EXECUTIVE"
byte_B56F:	creditText $20,"PRODUCER"
byte_B581:	creditText   0,"HAYAO  NAKAYAMA"
byte_B59F:	creditText   0,"SHINOBU  TOYODA"
byte_B5BC:	creditText $20,"DIRECTOR"
byte_B5CD:	creditText   0,"MASAHARU  YOSHII"
byte_B5EB:	creditText $20,"CHIEF  PROGRAMMER"
byte_B60C:	creditText   0,"YUJI  NAKA (YU2)"
byte_B628:	creditText $20,"GAME  PLANNER"
byte_B642:	creditText   0,"HIROKAZU  YASUHARA"
byte_B665:	creditText   0,"(CAROL  YAS)"
byte_B67B:	creditText $20,"CHARACTER  DESIGN"
byte_B69C:	creditText $20,"AND"
byte_B6A4:	creditText $20,"CHIEF  ARTIST"
byte_B6BC:	creditText   0,"YASUSHI  YAMAGUCHI"
byte_B6DE:	creditText   0,"(JUDY  TOTOYA)"
byte_B6F8:	creditText $20,"ASSISTANT"
byte_B70B:	creditText $20,"PROGRAMMERS"
byte_B723:	creditText   0,"BILL  WILLIS"
byte_B738:	creditText   0,"MASANOBU  YAMAMOTO"
byte_B75C:	creditText $20,"OBJECT  PLACEMENT"
byte_B77E:	creditText   0,"TAKAHIRO  ANTO"
byte_B799:	creditText   0,"YUTAKA  SUGANO"
byte_B7B5:	creditText $20,"SPECIALSTAGE"
byte_B7CE:	creditText   0,"CAROL  ANN  HANSHAW"
byte_B7F2:	creditText $20,"ZONE  ARTISTS"
byte_B80B:	creditText   0,"CRAIG  STITT"
byte_B821:	creditText   0,"BRENDA  ROSS"
byte_B839:	creditText   0,"JINA  ISHIWATARI"
byte_B855:	creditText   0,"TOM  PAYNE"
byte_B869:	creditText   0,"PHENIX  RIE"
byte_B87D:	creditText $20,"ART  AND  CG"
byte_B893:	creditText   0,"TIM  SKELLY"
byte_B8A8:	creditText   0,"PETER  MORAWIEC"
byte_B8C5:	creditText $20,"MUSIC  COMPOSER"
byte_B8E2:	creditText   0,"MASATO  NAKAMURA"
byte_B902:	creditText   0,"( @1992"
byte_B90F:	creditText   0,"DREAMS  COME  TRUE)"
byte_B932:	creditText $20,"SOUND  PROGRAMMER"
byte_B954:	creditText   0,"TOMOYUKI  SHIMADA"
byte_B974:	creditText $20,"SOUND  ASSISTANTS"
byte_B995:	creditText   0,"MACKY"
byte_B9A1:	creditText   0,"JIMITA"
byte_B9AD:	creditText   0,"MILPO"
byte_B9B8:	creditText   0,"IPPO"
byte_B9C1:	creditText   0,"S.O"
byte_B9C8:	creditText   0,"OYZ"
byte_B9D0:	creditText   0,"N.GEE"
byte_B9DB:	creditText $20,"PROJECT  ASSISTANTS"
byte_BA00:	creditText   0,"SYUICHI  KATAGI"
byte_BA1B:	creditText   0,"TAKAHIRO  HAMANO"
byte_BA3A:	creditText   0,"YOSHIKI  OOKA"
byte_BA52:	creditText   0,"STEVE  WOITA"
byte_BA69:	creditText $20,"GAME  MANUAL"
byte_BA81:	creditText   0,"YOUICHI  TAKAHASHI"
byte_BAA2:	creditText $20,"SUPPORTERS"
byte_BAB8:	creditText   0,"DAIZABUROU  SAKURAI"
byte_BADC:	creditText   0,"HISASHI  SUZUKI"
byte_BAF7:	creditText   0,"THOMAS  KALINSKE"
byte_BB16:	creditText   0,"FUJIO  MINEGISHI"
byte_BB32:	creditText   0,"TAKAHARU UTSUNOMIYA"
byte_BB58:	creditText $20,"SPECIAL  THANKS"
byte_BB75:	creditText $20,"TO"
byte_BB7B:	creditText   0,"CINDY  CLAVERAN"
byte_BB98:	creditText   0,"DEBORAH  MCCRACKEN"
byte_BBBC:	creditText   0,"TATSUO  YAMADA"
byte_BBD8:	creditText   0,"DAISUKE  SAITO"
byte_BBF2:	creditText   0,"KUNITAKE  AOKI"
byte_BC0C:	creditText   0,"TSUNEKO  AOKI"
byte_BC25:	creditText   0,"MASAAKI  KAWAMURA"
byte_BC46:	creditText   0,"SONIC"
byte_BC51:	creditText $20,"2"
byte_BC55:	creditText   0,"CAST  OF  CHARACTERS"
byte_BC7B:	creditText   0,"PRESENTED"
byte_BC8F:	creditText   0,"BY"
byte_BC95:	creditText   0,"SEGA"
byte_BC9F:	creditText   0,"FRANCE  TANTIADO"
byte_BCBE:	creditText   0,"RICK  MACARAEG"
byte_BCD9:	creditText   0,"LOCKY  P"

 charset ; have to revert character set before changing again

 ; temporarily remap characters to intro text format
 charset '@',"\x3A\1\3\5\7\9\xB\xD\xF\x11\x12\x14\x16\x18\x1A\x1C\x1E\x20\x22\x24\x26\x28\x2A\x2C\x2E\x30\x32"
 charset 'a',"\2\4\6\8\xA\xC\xE\x10\x11\x13\x15\x17\x19\x1B\x1D\x1F\x21\x23\x25\x27\x29\x2B\x2D\x2F\x31\x33"
 charset '!',"\x3C\x38\x3E\x35"
 charset '\H',"\x38\x36\x37"
 charset '9',"\x3D\x3F\x40"
 charset '1',"\x3B\x34"
 charset '.',"\x39"
 charset ' ',0

; intro text
byte_BCE9:	creditText   5,"IN"
byte_BCEE:	creditText   5,"AND"
byte_BCF6:	creditText   5,"MILES 'TAILS' PROWER"
byte_BD1A:	creditText   5,"SONIC"

 charset ; revert character set

	even

; -------------------------------------------------------------------------------
; Nemesis compressed art
; 64 blocks
; Standard font used in credits
; -------------------------------------------------------------------------------
; ArtNem_BD26:
ArtNem_CreditText:	BINCLUDE	"art/nemesis/Credit Text.bin"
; ===========================================================================

JmpTo5_DisplaySprite 

	jmp	DisplaySprite.l
; ===========================================================================

JmpTo3_DeleteObject 

	jmp	DeleteObject.l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_PlaySound 
	jmp	(PlaySound).l
; End of function JmpTo2_PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_3AF58 
	jmp	loc_3AF58.l
; End of function JmpTo_loc_3AF58


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_AnimateSprite 

	jmp	AnimateSprite.l
; End of function JmpTo_AnimateSprite


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Attributes: thunk

JmpTo_NemDec 

	jmp	(NemDec).l
; End of function JmpTo_NemDec


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Attributes: thunk

JmpTo_EniDec 

	jmp	(EniDec).l
; End of function JmpTo_EniDec


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_ClearScreen 
	jmp	(ClearScreen).l
; End of function JmpTo_ClearScreen


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_PlayMusic 
	jmp	(PlayMusic).l
; End of function JmpTo2_PlayMusic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_367D0 
	jmp	loc_367D0.l
; End of function JmpTo_loc_367D0


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_BFA4:
JmpTo2_ShowVDPGraphics 
	jmp	(ShowVDPGraphics).l
; End of function JmpTo2_ShowVDPGraphics


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_BFAA:
JmpTo2_ObjectMove 
	jmp	ObjectMove.l
; End of function JmpTo2_ObjectMove


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_PalCycle_Load 
	jmp	(PalCycle_Load).l
; End of function JmpTo_PalCycle_Load


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_LoadSubObject_Part3 

	jmp	LoadSubObject_Part3
; End of function JmpTo_LoadSubObject_Part3





; ---------------------------------------------------------------------------
; Subroutine to load level boundaries and start locations
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_BFBC:
LevelSizeLoad:
	clr.w	($FFFFEE50).w
	clr.w	($FFFFEE52).w
	clr.w	($FFFFEE54).w
	clr.w	($FFFFEE56).w
	clr.w	($FFFFEE58).w
	clr.w	($FFFFEE5A).w
	clr.w	($FFFFEE5C).w
	clr.w	($FFFFEE5E).w
	clr.w	($FFFFEEA0).w
	clr.w	($FFFFEEA2).w
	clr.w	($FFFFEEA4).w
	clr.w	($FFFFEEA6).w
	clr.w	($FFFFEEA8).w
	clr.w	($FFFFEEAA).w
	clr.w	($FFFFEEAC).w
	clr.w	($FFFFEEAE).w
	clr.b	($FFFFEEDC).w
	clr.b	($FFFFEEBC).w
	clr.b	($FFFFEEBD).w
	clr.b	($FFFFEEBE).w
	clr.b	($FFFFEEBF).w
	moveq	#0,d0
	move.b	d0,(Dynamic_Resize_Routine).w ; load level boundaries
	move.w	(Current_ZoneAndAct).w,d0
	ror.b	#1,d0
	lsr.w	#4,d0
	lea	WrdArr_LvlSize(pc,d0.w),a0
	move.l	(a0)+,d0
	move.l	d0,(Camera_Min_X_pos).w
	move.l	d0,($FFFFEEC0).w	; unused besides this one write...
	move.l	d0,(Tails_Min_X_pos).w
	move.l	(a0)+,d0
	move.l	d0,(Camera_Min_Y_pos).w
	move.l	d0,($FFFFEEC4).w	; unused besides this one write...
	move.l	d0,($FFFFEEFC).w
	move.w	#$1010,($FFFFEE40).w
	move.w	#$60,(Camera_Y_pos_bias).w
	move.w	#$60,(Camera_Y_pos_bias_2P).w
	bra.w	loc_C164
; ===========================================================================
; ----------------------------------------------------------------------------
; LEVEL SIZE ARRAY

; This array defines the screen boundaries for each act in the game.
; ----------------------------------------------------------------------------
;		xstart	xend	ystart	yend	; ZID ; Zone
WrdArr_LvlSize:
	dc.w	$0,	$29A0,	$0,	$520	; $00  ; EHZ act 1
	dc.w	$0,	$2940,	$0,	$420		; EHZ act 2
	dc.w	$0,	$3FFF,	$0,	$720	; $01
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$3FFF,	$0,	$720	; $02
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$3FFF,	$0,	$720	; $03
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$2280,	-$100,	$800	; $04 ; MTZ act 1
	dc.w	$0,	$1E80,	-$100,	$800		; MTZ act 2
	dc.w	$0,	$2A80,	-$100,	$800	; $05 ; MTZ act 3
	dc.w	$0,	$3FFF,	-$100,	$800
	dc.w	$0,	$3FFF,	$0,	$720	; $06 ; WFZ
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$2800,	$0,	$720	; $07 ; HTZ act 1
	dc.w	$0,	$3280,	$0,	$720		; HTZ act 2
	dc.w	$0,	$3FFF,	$0,	$720	; $08
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$3FFF,	$0,	$720	; $09
	dc.w	$0,	$3FFF,	$0,	$720
	dc.w	$0,	$2F80,	$0,	$680	; $0A ; OOZ act 1
	dc.w	$0,	$2D00,	$0,	$680		; OOZ act 2
	dc.w	$0,	$2380,	$3C0,	$720	; $0B ; MCZ act 1
	dc.w	$0,	$3FFF,	$60,	$720		; MCZ act 2
	dc.w	$0,	$27A0,	$0,	$720	; $0C ; CNZ act 1
	dc.w	$0,	$2A80,	$0,	$720		; CNZ act 2
	dc.w	$0,	$2780,	$0,	$720	; $0D ; CPZ act 1
	dc.w	$0,	$2A80,	$0,	$720		; CPZ act 2
	dc.w	$0,	$1000,	$C8,	 $C8	; $0F ; DEZ
	dc.w	$0,	$1000,  $C8,	 $C8
	dc.w	$0,	$28C0,	$200,	$600	; $10 ; ARZ act 1
	dc.w	$0,	$3FFF,	$180,	$710		; ARZ act 2
	dc.w	$0,	$3FFF,	$0,	$000	; $11 ; SCZ
	dc.w	$0,	$3FFF,	$0,	$720

; ===========================================================================

loc_C164:
	tst.b	(Last_star_pole_hit).w
	beq.s	loc_C17A
	jsr	(Obj79_LoadData).l
	move.w	(MainCharacter+x_pos).w,d1
	move.w	(MainCharacter+y_pos).w,d0
	bra.s	loc_C196
; ===========================================================================

loc_C17A:
	move.w	(Current_ZoneAndAct).w,d0
	ror.b	#1,d0
	lsr.w	#5,d0
	lea	WrdArr_StartLoc(pc,d0.w),a1
	moveq	#0,d1
	move.w	(a1)+,d1
	move.w	d1,(MainCharacter+x_pos).w
	moveq	#0,d0
	move.w	(a1),d0
	move.w	d0,(MainCharacter+y_pos).w

loc_C196:
	subi.w	#$A0,d1
	bcc.s	loc_C19E
	moveq	#0,d1

loc_C19E:
	move.w	(Camera_Max_X_pos).w,d2
	cmp.w	d2,d1
	bcs.s	loc_C1A8
	move.w	d2,d1

loc_C1A8:
	move.w	d1,(Camera_X_pos).w
	move.w	d1,($FFFFEE20).w
	subi.w	#$60,d0
	bcc.s	loc_C1B8
	moveq	#0,d0

loc_C1B8:
	cmp.w	(Camera_Max_Y_pos_now).w,d0
	blt.s	loc_C1C2
	move.w	(Camera_Max_Y_pos_now).w,d0

loc_C1C2:
	move.w	d0,(Camera_Y_pos).w
	move.w	d0,($FFFFEE24).w
	bsr.w	sub_C258
	rts
; End of function LevelSizeLoad

; ===========================================================================
; --------------------------------------------------------------------------------------
; CHARACTER START LOCATION ARRAY

; 2 entries per act, corresponding to the X and Y locations that you want the player to
; appear at when the level starts.
; --------------------------------------------------------------------------------------
WrdArr_StartLoc:
	dc.w	$A0,	$294	; $00
	dc.w	$60,	$2AF
	dc.w	$60,	$28F	; $01
	dc.w	$60,	$2AF
	dc.w	$60,	$1AC	; $02
	dc.w	$60,	$1AC
	dc.w	$60,	$28F	; $03
	dc.w	$60,	$2AF
	dc.w	$60,	$28C	; $04
	dc.w	$60,	$5EC
	dc.w	$60,	$20C	; $05
	dc.w	$60,	$2AF
	dc.w	$60,	$4CC	; $06
	dc.w	$1E0,	$4CC
	dc.w	$60,	$3EF	; $07
	dc.w	$60,	$6AF
	dc.w	$230,	$1AC	; $08
	dc.w	$230,	$1AC
	dc.w	$60,	$28F	; $09
	dc.w	$60,	$2AF
	dc.w	$60,	$6AC	; $0A
	dc.w	$60,	$56C
	dc.w	$60,	$6AC	; $0B
	dc.w	$60,	$5AC
	dc.w	$60,	$2AC	; $0C
	dc.w	$60,	$58C
	dc.w	$60,	$1EC	; $0D
	dc.w	$60,	$12C
	dc.w	$60,	$12D	; $0E
	dc.w	$60,	$12D
	dc.w	$60,	$37E	; $0F
	dc.w	$60,	$37E
	dc.w	$120,	$70	; $10
	dc.w	$140,	$70

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_C258:
	tst.b	(Last_star_pole_hit).w
	bne.s	loc_C286
	move.w	d0,($FFFFEE0C).w
	move.w	d0,($FFFFEE14).w
	move.w	d1,($FFFFEE08).w
	move.w	d1,($FFFFEE10).w
	move.w	d1,($FFFFEE18).w
	move.w	d0,($FFFFEE2C).w
	move.w	d0,($FFFFEE34).w
	move.w	d1,($FFFFEE28).w
	move.w	d1,($FFFFEE30).w
	move.w	d1,($FFFFEE38).w

loc_C286:
	moveq	#0,d2
	move.b	(Current_Zone).w,d2
	add.w	d2,d2
	move.w	off_C296(pc,d2.w),d2
	jmp	off_C296(pc,d2.w)
; End of function sub_C258

; ===========================================================================
off_C296:
	dc.w loc_C2B8-off_C296
	dc.w loc_C2E4-off_C296	; 1
	dc.w loc_C2E4-off_C296	; 2
	dc.w loc_C2E4-off_C296	; 3
	dc.w loc_C2E4-off_C296	; 4
	dc.w loc_C2E4-off_C296	; 5
	dc.w return_C2F2-off_C296; 6
	dc.w loc_C2F4-off_C296	; 7
	dc.w return_C320-off_C296; 8
	dc.w return_C320-off_C296; 9
	dc.w loc_C322-off_C296	; 10
	dc.w loc_C332-off_C296	; 11
	dc.w loc_C364-off_C296	; 12
	dc.w loc_C372-off_C296	; 13
	dc.w return_C38A-off_C296; 14
	dc.w loc_C38C-off_C296	; 15
	dc.w loc_C3C6-off_C296	; 16
; ===========================================================================

loc_C2B8:
	clr.l	($FFFFEE08).w
	clr.l	($FFFFEE0C).w
	clr.l	($FFFFEE14).w
	clr.l	($FFFFEE1C).w
	lea	($FFFFA800).w,a2
	clr.l	(a2)+
	clr.l	(a2)+
	clr.l	(a2)+
	clr.l	($FFFFEE28).w
	clr.l	($FFFFEE2C).w
	clr.l	($FFFFEE34).w
	clr.l	($FFFFEE3C).w
	rts
; ===========================================================================

loc_C2E4:
	asr.w	#2,d0
	move.w	d0,($FFFFEE0C).w
	asr.w	#3,d1
	move.w	d1,($FFFFEE08).w
	rts
; ===========================================================================

return_C2F2:
	rts
; ===========================================================================

loc_C2F4:
	clr.l	($FFFFEE08).w
	clr.l	($FFFFEE0C).w
	clr.l	($FFFFEE14).w
	clr.l	($FFFFEE1C).w
	lea	($FFFFA800).w,a2
	clr.l	(a2)+
	clr.l	(a2)+
	clr.l	(a2)+
	clr.l	($FFFFEE28).w
	clr.l	($FFFFEE2C).w
	clr.l	($FFFFEE34).w
	clr.l	($FFFFEE3C).w
	rts
; ===========================================================================

return_C320:
	rts
; ===========================================================================

loc_C322:
	lsr.w	#3,d0
	addi.w	#$50,d0
	move.w	d0,($FFFFEE0C).w
	clr.l	($FFFFEE08).w
	rts
; ===========================================================================

loc_C332:
	clr.l	($FFFFEE08).w
	clr.l	($FFFFEE28).w
	tst.b	(Current_Act).w
	bne.s	loc_C352
	divu.w	#3,d0
	subi.w	#$140,d0
	move.w	d0,($FFFFEE0C).w
	move.w	d0,($FFFFEE2C).w
	rts
; ===========================================================================

loc_C352:
	divu.w	#6,d0
	subi.w	#$10,d0
	move.w	d0,($FFFFEE0C).w
	move.w	d0,($FFFFEE2C).w
	rts
; ===========================================================================

loc_C364:
	clr.l	($FFFFEE08).w
	clr.l	($FFFFEE0C).w
	clr.l	($FFFFEE2C).w
	rts
; ===========================================================================

loc_C372:
	lsr.w	#2,d0
	move.w	d0,($FFFFEE0C).w
	move.w	d0,($FFFFEE2C).w
	lsr.w	#1,d1
	move.w	d1,($FFFFEE10).w
	lsr.w	#2,d1
	move.w	d1,($FFFFEE08).w
	rts
; ===========================================================================

return_C38A:
	rts
; ===========================================================================

loc_C38C:
	tst.b	(Current_Act).w
	beq.s	loc_C39E
	subi.w	#$E0,d0
	lsr.w	#1,d0
	move.w	d0,($FFFFEE0C).w
	bra.s	loc_C3A6
; ===========================================================================

loc_C39E:
	subi.w	#$180,d0
	move.w	d0,($FFFFEE0C).w

loc_C3A6:
	muls.w	#$119,d1
	asr.l	#8,d1
	move.w	d1,($FFFFEE08).w
	move.w	d1,($FFFFF672).w
	clr.w	($FFFFEE0A).w
	clr.w	($FFFFF674).w
	clr.l	($FFFFEE14).w
	clr.l	($FFFFEE1C).w
	rts
; ===========================================================================

loc_C3C6:
	clr.l	($FFFFEE08).w
	clr.l	($FFFFEE0C).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_C3D0:
DeformBgLayer:
	tst.b	($FFFFEEDC).w
	beq.s	loc_C3D8
	rts
; ===========================================================================

loc_C3D8:
	clr.w	($FFFFEE50).w
	clr.w	($FFFFEE52).w
	clr.w	($FFFFEE54).w
	clr.w	($FFFFEE56).w
	clr.w	($FFFFEE58).w
	clr.w	($FFFFEE5A).w
	clr.w	($FFFFEE5C).w
	clr.w	($FFFFEE5E).w
	clr.w	($FFFFEEB0).w
	clr.w	($FFFFEEB2).w
	clr.w	($FFFFEEB8).w
	clr.w	($FFFFEEBA).w
	cmpi.b	#$10,(Current_Zone).w
	bne.w	loc_C41A
	tst.w	(Debug_placement_mode).w
	beq.w	loc_C4D0

loc_C41A:
	tst.b	($FFFFEEBE).w
	bne.s	loc_C480
	lea	(MainCharacter).w,a0 ; a0=character
	lea	(Camera_X_pos).w,a1
	lea	(Camera_Min_X_pos).w,a2
	lea	($FFFFEE50).w,a3
	lea	($FFFFEEB0).w,a4
	lea	($FFFFEED0).w,a5
	lea	(Sonic_Pos_Record_Buf).w,a6
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_C44C
	lea	($FFFFEED4).w,a5
	lea	(Tails_Pos_Record_Buf).w,a6

loc_C44C:
	bsr.w	sub_D704
	lea	($FFFFEE40).w,a2
	bsr.w	sub_D6E2
	lea	(Camera_Y_pos).w,a1
	lea	(Camera_Min_X_pos).w,a2
	lea	($FFFFEEB2).w,a4
	move.w	(Camera_Y_pos_bias).w,d3
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_C474
	move.w	(Camera_Y_pos_bias_2P).w,d3

loc_C474:
	bsr.w	sub_D77A
	lea	($FFFFEE41).w,a2
	bsr.w	sub_D878

loc_C480:
	tst.w	(Two_player_mode).w
	beq.s	loc_C4D0
	tst.b	($FFFFEEBF).w
	bne.s	loc_C4D0
	lea	(Sidekick).w,a0 ; a0=character
	lea	($FFFFEE20).w,a1
	lea	(Tails_Min_X_pos).w,a2
	lea	($FFFFEE58).w,a3
	lea	($FFFFEEB8).w,a4
	lea	($FFFFEED4).w,a5
	lea	(Tails_Pos_Record_Buf).w,a6
	bsr.w	sub_D704
	lea	($FFFFEE48).w,a2
	bsr.w	sub_D6E2
	lea	($FFFFEE24).w,a1
	lea	(Tails_Min_X_pos).w,a2
	lea	($FFFFEEBA).w,a4
	move.w	(Camera_Y_pos_bias_2P).w,d3
	bsr.w	sub_D77A
	lea	($FFFFEE49).w,a2
	bsr.w	sub_D878

loc_C4D0:
	bsr.w	RunDynamicLevelEvents
	move.w	(Camera_Y_pos).w,(Vscroll_Factor).w
	move.w	($FFFFEE0C).w,($FFFFF618).w
	move.l	(Camera_X_pos).w,($FFFFEEF0).w
	move.l	(Camera_Y_pos).w,($FFFFEEF4).w
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	move.w	JmpTbl_SwScrlMgr(pc,d0.w),d0
	jmp	JmpTbl_SwScrlMgr(pc,d0.w)
; End of function DeformBgLayer

; ===========================================================================
; ---------------------------------------------------------------------------
; JUMP TABLE FOR SOFTWARE SCROLL MANAGERS
;
; "Software scrolling" is my term for what Nemesis (and by extension, the rest
; of the world) calls "rasterized layer deformation".* Software scroll managers
; are needed to achieve certain special camera effects - namely, locking the
; screen for a boss fight and defining the limits of said screen lock, or in
; the case of Sky Chase Zone ($10), moving the camera at a fixed rate through
; a predefined course.
; They are also used for things like controlling the parallax scrolling and
; water ripple effects in EHZ, and moving the clouds in HTZ and the stars in DEZ.
; ---------------------------------------------------------------------------
JmpTbl_SwScrlMgr:
	dc.w SwScrl_EHZ-JmpTbl_SwScrlMgr	; $00
	dc.w SwScrl_Minimal-JmpTbl_SwScrlMgr	; $01
	dc.w SwScrl_Lev2-JmpTbl_SwScrlMgr	; $02
	dc.w SwScrl_Minimal-JmpTbl_SwScrlMgr	; $03
	dc.w SwScrl_MTZ-JmpTbl_SwScrlMgr	; $04
	dc.w SwScrl_MTZ-JmpTbl_SwScrlMgr	; $05
	dc.w SwScrl_WFZ-JmpTbl_SwScrlMgr	; $06
	dc.w SwScrl_HTZ-JmpTbl_SwScrlMgr	; $07
	dc.w SwScrl_HPZ-JmpTbl_SwScrlMgr	; $08
	dc.w SwScrl_Minimal-JmpTbl_SwScrlMgr	; $09
	dc.w SwScrl_OOZ-JmpTbl_SwScrlMgr	; $0A ; OOZ
	dc.w SwScrl_MCZ-JmpTbl_SwScrlMgr	; $0B ; MCZ
	dc.w SwScrl_CNZ-JmpTbl_SwScrlMgr	; $0C ; CNZ
	dc.w SwScrl_CPZ-JmpTbl_SwScrlMgr	; $0D ; CPZ
	dc.w SwScrl_DEZ-JmpTbl_SwScrlMgr	; $0E ; DEZ
	dc.w SwScrl_ARZ-JmpTbl_SwScrlMgr	; $0F ; ARZ
	dc.w SwScrl_SCZ-JmpTbl_SwScrlMgr	; $10 ; SCZ
; ===========================================================================
; loc_C51E:
SwScrl_Title:
	move.w	($FFFFEE0C).w,($FFFFF618).w
	addq.w	#1,(Camera_X_pos).w
	move.w	(Camera_X_pos).w,d2
	neg.w	d2
	asr.w	#2,d2
	lea	(Horiz_Scroll_Buf).w,a1
	moveq	#0,d0
	move.w	#bytesToLcnt($280),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	move.w	#bytesToLcnt($80),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d0,d3
	move.b	($FFFFFE0F).w,d1
	andi.w	#7,d1
	bne.s	+
	subq.w	#1,($FFFFA800).w
+
	move.w	($FFFFA800).w,d1
	andi.w	#$1F,d1
	lea	SwScrl_RippleData(pc),a2
	lea	(a2,d1.w),a2
	move.w	#bytesToLcnt($40),d1
-	move.b	(a2)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; loc_C57E:
SwScrl_EHZ:
	tst.w	(Two_player_mode).w
	bne.w	loc_C6C4
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	move.w	d0,d2
	swap	d0
	move.w	#0,d0
	move.w	#bytesToLcnt($58),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#6,d0
	move.w	#bytesToLcnt($E8),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d0,d3
	move.b	($FFFFFE0F).w,d1
	andi.w	#7,d1
	bne.s	+
	subq.w	#1,($FFFFA800).w
+
	move.w	($FFFFA800).w,d1
	andi.w	#$1F,d1
	lea	(SwScrl_RippleData).l,a2
	lea	(a2,d1.w),a2
	move.w	#bytesToLcnt($54),d1
-	move.b	(a2)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d1,-

	move.w	#0,d0
	move.w	#bytesToLcnt($2C),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#4,d0
	move.w	#bytesToLcnt($40),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#4,d0
	move.w	d0,d1
	asr.w	#1,d1
	add.w	d1,d0
	move.w	#bytesToLcnt($40),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.l	d0,d4
	swap	d4
	move.w	d2,d0
	asr.w	#1,d0
	move.w	d2,d1
	asr.w	#3,d1
	sub.w	d1,d0
	ext.l	d0
	asl.l	#8,d0
	divs.w	#$30,d0
	ext.l	d0
	asl.l	#8,d0
	moveq	#0,d3
	move.w	d2,d3
	asr.w	#3,d3
	move.w	#bytesToLcnt($3C),d1 ; $3C bytes
-	move.w	d4,(a1)+
	move.w	d3,(a1)+
	swap	d3
	add.l	d0,d3
	swap	d3
	dbf	d1,-

	move.w	#($48)/8-1,d1 ; $48 bytes
-	move.w	d4,(a1)+
	move.w	d3,(a1)+
	move.w	d4,(a1)+
	move.w	d3,(a1)+
	move.w	d4,(a1)+
	move.w	d3,(a1)+
	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	dbf	d1,-

	move.w	#($B4)/12-1,d1 ; $B4 bytes
-	move.w	d4,(a1)+
	move.w	d3,(a1)+
	move.w	d4,(a1)+
	move.w	d3,(a1)+
	move.w	d4,(a1)+
	move.w	d3,(a1)+
	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	dbf	d1,-

	rts
; ===========================================================================
; horizontal offsets for the water rippling effect
; byte_C682:
SwScrl_RippleData:
	dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0; 16
	dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3; 32
	dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0; 48
	dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3; 64
	dc.b   1,  2	; 66
; ===========================================================================

loc_C6C4:
	move.b	($FFFFFE0F).w,d1
	andi.w	#7,d1
	bne.s	loc_C6D2
	subq.w	#1,($FFFFA800).w

loc_C6D2:
	move.w	($FFFFEE0C).w,($FFFFF618).w
	andi.l	#$FFFEFFFE,(Vscroll_Factor).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	(Camera_X_pos).w,d0
	move.w	#bytesToLcnt($2C),d1
	bsr.s	sub_C71A
	moveq	#0,d0
	move.w	d0,($FFFFF620).w
	subi.w	#$E0,($FFFFF620).w
	move.w	($FFFFEE24).w,($FFFFF61E).w
	subi.w	#$E0,($FFFFF61E).w
	andi.l	#$FFFEFFFE,($FFFFF61E).w
	lea	($FFFFE1B0).w,a1
	move.w	($FFFFEE20).w,d0
	move.w	#bytesToLcnt($3C),d1

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_C71A:
	neg.w	d0
	move.w	d0,d2
	swap	d0
	move.w	#0,d0
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#6,d0
	move.w	#bytesToLcnt($74),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d0,d3
	move.w	($FFFFA800).w,d1
	andi.w	#$1F,d1
	lea	SwScrl_RippleData(pc),a2
	lea	(a2,d1.w),a2

	move.w	#bytesToLcnt($2C),d1
-	move.b	(a2)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d1,-

	move.w	#0,d0
	move.w	#bytesToLcnt($14),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#4,d0
	move.w	#bytesToLcnt($20),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#4,d0
	move.w	d0,d1
	asr.w	#1,d1
	add.w	d1,d0
	move.w	#bytesToLcnt($20),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#1,d0
	move.w	d2,d1
	asr.w	#3,d1
	sub.w	d1,d0
	ext.l	d0
	asl.l	#8,d0
	divs.w	#$30,d0
	ext.l	d0
	asl.l	#8,d0
	moveq	#0,d3
	move.w	d2,d3
	asr.w	#3,d3

	move.w	#bytesToLcnt($A0),d1
-	move.w	d2,(a1)+
	move.w	d3,(a1)+
	swap	d3
	add.l	d0,d3
	swap	d3
	dbf	d1,-

	rts
; End of function sub_C71A

; ===========================================================================
; unused...
; loc_C7BA:
SwScrl_Lev2:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#5,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#6,d5
	bsr.w	sub_D89A
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($380),d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	neg.w	d0
-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; loc_C7F2:
SwScrl_MTZ:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#5,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#6,d5
	bsr.w	sub_D89A
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($380),d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	neg.w	d0
-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; loc_C82A:
SwScrl_WFZ:
	move.w	($FFFFEEB4).w,d4
	ext.l	d4
	asl.l	#8,d4
	moveq	#2,d6
	bsr.w	sub_D904
	move.w	($FFFFEEB6).w,d5
	ext.l	d5
	lsl.l	#8,d5
	moveq	#6,d6
	bsr.w	sub_D938
	move.w	($FFFFEE0C).w,($FFFFF618).w
	move.l	($FFFFEE08).w,d0
	move.l	d0,d1
	lea	($FFFFA800).w,a2
	move.l	d0,(a2)+
	move.l	d1,(a2)+
	addi.l	#$8000,(a2)+
	addi.l	#$4000,(a2)+
	addi.l	#$2000,(a2)+
	lea	(byte_C8CA).l,a3
	cmpi.w	#$2700,(Camera_X_pos).w
	bcc.s	+
	lea	(byte_C916).l,a3
+
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	andi.w	#$7FF,d1
	moveq	#0,d0
	moveq	#0,d3

-	move.b	(a3)+,d0
	addq.w	#1,a3
	sub.w	d0,d1
	bcc.s	-

	neg.w	d1
	move.w	#bytesToLcnt($380),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.b	-1(a3),d3
	move.w	(a2,d3.w),d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.b	(a3)+,d3
	move.w	(a2,d3.w),d0
	neg.w	d0
+	dbf	d2,-

	rts
; ===========================================================================
; unknown data
byte_C8CA:
	dc.b $C0,  0,$C0,  0,$80,  0,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C
	dc.b $30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8; 16
	dc.b $30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 32
	dc.b $80,  4,$80,  4,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 48
	dc.b $20,  8,$30, $C,$30,$10,$C0,  0,$C0,  0,$80,  0; 64
byte_C916:
	dc.b $C0,  0,$C0,  0,$80,  0,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C
	dc.b $30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8; 16
	dc.b $30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 32
	dc.b $20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C; 48
	dc.b $30,$10,$20,  8,$30, $C,$30,$10,$C0,  0,$C0,  0,$80,  0; 64
; ===========================================================================
; loc_C964:
SwScrl_HTZ:
	tst.w	(Two_player_mode).w
	bne.w	loc_CB10
	tst.b	($FFFFEEBC).w
	bne.w	loc_CA92
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	move.w	d0,d2
	swap	d0
	move.w	d2,d0
	asr.w	#3,d0
	move.w	#bytesToLcnt($200),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	move.l	d0,d4
	move.w	($FFFFA822).w,d0
	addq.w	#4,($FFFFA822).w
	sub.w	d0,d2
	move.w	d2,d0
	move.w	d0,d1
	asr.w	#1,d0
	asr.w	#4,d1
	sub.w	d1,d0
	ext.l	d0
	asl.l	#8,d0
	divs.w	#$70,d0
	ext.l	d0
	asl.l	#8,d0
	lea	($FFFFA800).w,a2
	moveq	#0,d3
	move.w	d1,d3
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a2)+
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a2)+
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a2)+
	move.w	d3,(a2)+
	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	moveq	#3,d1

-	move.w	d3,(a2)+
	move.w	d3,(a2)+
	move.w	d3,(a2)+
	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	dbf	d1,-

	add.l	d0,d0
	add.l	d0,d0
	move.w	d3,d4
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,d4
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	move.l	d4,(a1)+
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,d4
	move.w	#6,d1

-	move.l	d4,(a1)+
	dbf	d1,-

	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	move.w	d3,d4
	move.w	#7,d1

-	move.l	d4,(a1)+
	dbf	d1,-

	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	move.w	d3,d4
	move.w	#9,d1

-	move.l	d4,(a1)+
	dbf	d1,-

	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	move.w	d3,d4
	move.w	#$E,d1

-	move.l	d4,(a1)+
	dbf	d1,-

	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	move.w	#2,d2

-	move.w	d3,d4
	move.w	#$F,d1
-	move.l	d4,(a1)+
	dbf	d1,-
	swap	d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	add.l	d0,d3
	swap	d3
	dbf	d2,--

	rts
; ===========================================================================

loc_CA92:
	move.w	($FFFFEEB4).w,d4
	ext.l	d4
	lsl.l	#8,d4
	moveq	#2,d6
	bsr.w	sub_D904
	move.w	($FFFFEEB6).w,d5
	ext.l	d5
	lsl.l	#8,d5
	moveq	#0,d6
	bsr.w	sub_D938
	move.w	($FFFFEE0C).w,($FFFFF618).w
	move.w	(Camera_Y_pos).w,(Vscroll_Factor).w
	move.w	($FFFFEE0C).w,($FFFFF618).w
	moveq	#0,d2
	tst.b	($FFFFEEBD).w
	beq.s	+

	move.w	(Timer_frames).w,d0
	andi.w	#$3F,d0
	lea	SwScrl_RippleData(pc),a1
	lea	(a1,d0.w),a1
	moveq	#0,d0
	move.b	(a1)+,d0
	add.w	d0,(Vscroll_Factor).w
	add.w	d0,($FFFFF618).w
	add.w	d0,($FFFFEEF4).w
	move.b	(a1)+,d2
	add.w	d2,($FFFFEEF0).w
+
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($380),d1
	move.w	(Camera_X_pos).w,d0
	add.w	d2,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	add.w	d2,d0
	neg.w	d0

-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================

loc_CB10:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#6,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#2,d5
	moveq	#0,d5
	bsr.w	sub_D89A
	move.b	#0,($FFFFEE52).w
	move.w	($FFFFEE0C).w,($FFFFF618).w
	andi.l	#$FFFEFFFE,(Vscroll_Factor).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($1C0),d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	neg.w	d0
-	move.l	d0,(a1)+
	dbf	d1,-

	move.w	($FFFFEEB8).w,d4
	ext.l	d4
	asl.l	#6,d4
	add.l	d4,($FFFFEE28).w
	moveq	#0,d0
	move.w	d0,($FFFFF620).w
	subi.w	#$E0,($FFFFF620).w
	move.w	($FFFFEE24).w,($FFFFF61E).w
	subi.w	#$E0,($FFFFF61E).w
	andi.l	#$FFFEFFFE,($FFFFF61E).w
	lea	($FFFFE1B0).w,a1
	move.w	#bytesToLcnt($1D0),d1
	move.w	($FFFFEE20).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE28).w,d0
	neg.w	d0
-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; unused...
; loc_CBA0:
SwScrl_HPZ:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#6,d4
	moveq	#2,d6
	bsr.w	sub_D904
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#7,d5
	moveq	#6,d6
	bsr.w	sub_D938
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	($FFFFA800).w,a1
	move.w	(Camera_X_pos).w,d2
	neg.w	d2
	move.w	d2,d0
	asr.w	#1,d0

	move.w	#7,d1
-	move.w	d0,(a1)+
	dbf	d1,-

	move.w	d2,d0
	asr.w	#3,d0
	sub.w	d2,d0
	ext.l	d0
	asl.l	#3,d0
	divs.w	#8,d0
	ext.l	d0
	asl.l	#4,d0
	asl.l	#8,d0
	moveq	#0,d3
	move.w	d2,d3
	asr.w	#1,d3
	lea	($FFFFA860).w,a2
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a1)+
	move.w	d3,(a1)+
	move.w	d3,(a1)+
	move.w	d3,-(a2)
	move.w	d3,-(a2)
	move.w	d3,-(a2)
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a1)+
	move.w	d3,(a1)+
	move.w	d3,-(a2)
	move.w	d3,-(a2)
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a1)+
	move.w	d3,-(a2)
	swap	d3
	add.l	d0,d3
	swap	d3
	move.w	d3,(a1)+
	move.w	d3,-(a2)
	move.w	($FFFFEE08).w,d0
	neg.w	d0

	move.w	#$19,d1
-	move.w	d0,(a1)+
	dbf	d1,-

	adda.w	#$E,a1
	move.w	d2,d0
	asr.w	#1,d0

	move.w	#$17,d1
-	move.w	d0,(a1)+
	dbf	d1,-

	lea	($FFFFA800).w,a2
	move.w	($FFFFEE0C).w,d0
	move.w	d0,d2
	andi.w	#$3F0,d0
	lsr.w	#3,d0
	lea	(a2,d0.w),a2
	bra.w	SwScrl_HPZ_Continued
; ===========================================================================
; loc_CC66:
SwScrl_OOZ:
	move.w	($FFFFEEB0).w,d0
	ext.l	d0
	asl.l	#5,d0
	add.l	d0,($FFFFEE08).w
	move.w	($FFFFEEB2).w,d0
	ext.l	d0
	asl.l	#5,d0
	move.l	($FFFFEE0C).w,d3
	add.l	d3,d0
	moveq	#4,d6
	bsr.w	loc_D940
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	($FFFFE380).w,a1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d7
	neg.w	d7
	move.w	($FFFFEE0C).w,d1
	subi.w	#$50,d1
	bcc.s	+
	moveq	#0,d1
+
	subi.w	#$B0,d1
	bcs.s	+
	moveq	#0,d1
+
	move.w	#$DF,d6
	add.w	d6,d1
	move.w	d7,d0
	bsr.s	sub_CD1C
	bsr.s	sub_CD10
	bsr.s	sub_CD16
	bsr.s	sub_CD0A
	move.w	d7,d0
	asr.w	#4,d0
	moveq	#6,d1
	bsr.s	sub_CD1C
	move.b	($FFFFFE0F).w,d1
	andi.w	#7,d1
	bne.s	+
	subq.w	#1,($FFFFA800).w
+
	move.w	($FFFFA800).w,d1
	andi.w	#$1F,d1
	lea	SwScrl_RippleData(pc),a2
	lea	(a2,d1.w),a2
	moveq	#$20,d1

-	move.b	(a2)+,d0
	ext.w	d0
	move.l	d0,-(a1)
	subq.w	#1,d6
	bmi.s	return_CD08
	dbf	d1,-

	bsr.s	sub_CD10
	bsr.s	sub_CD16
	bsr.s	sub_CD0A
	bsr.s	sub_CD16
	bsr.s	sub_CD10
	move.w	d7,d0
	moveq	#$47,d1
	bsr.s	sub_CD1C

return_CD08:
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_CD0A:
	move.w	d7,d0
	asr.w	#2,d0
	bra.s	loc_CD1A
; End of function sub_CD0A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_CD10:
	move.w	d7,d0
	asr.w	#3,d0
	bra.s	loc_CD1A
; End of function sub_CD10


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_CD16:
	move.w	d7,d0
	asr.w	#4,d0

loc_CD1A:
	moveq	#7,d1
; End of function sub_CD16


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_CD1C:
	move.l	d0,-(a1)
	subq.w	#1,d6
	bmi.s	loc_CD28
	dbf	d1,sub_CD1C

	rts
; ===========================================================================

loc_CD28:
	addq.l	#4,sp
	rts
; End of function sub_CD1C

; ===========================================================================
; loc_CD2C:
SwScrl_MCZ:
	tst.w	(Two_player_mode).w
	bne.w	loc_CE84
	move.w	(Camera_Y_pos).w,d0
	move.l	($FFFFEE0C).w,d3
	tst.b	(Current_Act).w
	bne.s	loc_CD4C
	divu.w	#3,d0
	subi.w	#$140,d0
	bra.s	loc_CD54
; ===========================================================================

loc_CD4C:
	divu.w	#6,d0
	subi.w	#$10,d0

loc_CD54:
	swap	d0
	moveq	#6,d6
	bsr.w	loc_D940
	move.w	($FFFFEE0C).w,($FFFFF618).w
	moveq	#0,d2
	tst.b	($FFFFEEBD).w
	beq.s	+

	move.w	(Timer_frames).w,d0
	andi.w	#$3F,d0
	lea	SwScrl_RippleData(pc),a1
	lea	(a1,d0.w),a1
	moveq	#0,d0
	move.b	(a1)+,d0
	add.w	d0,(Vscroll_Factor).w
	add.w	d0,($FFFFF618).w
	add.w	d0,($FFFFEEF4).w
	move.b	(a1)+,d2
	add.w	d2,($FFFFEEF0).w
+
	lea	($FFFFA800).w,a2
	lea	$1E(a2),a3
	move.w	(Camera_X_pos).w,d0
	ext.l	d0
	asl.l	#4,d0
	divs.w	#$A,d0
	ext.l	d0
	asl.l	#4,d0
	asl.l	#8,d0
	move.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$E(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,8(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,6(a2)
	move.w	d1,$10(a2)
	move.w	d1,$1C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,4(a2)
	move.w	d1,$12(a2)
	move.w	d1,$1A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,2(a2)
	move.w	d1,$14(a2)
	move.w	d1,$18(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,(a2)
	move.w	d1,$16(a2)
	lea	(byte_CE6C).l,a3
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	moveq	#0,d0

loc_CE3E:
	move.b	(a3)+,d0
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	loc_CE3E
	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($380),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.w	(a2)+,d0
	neg.w	d0
+	dbf	d2,-

	rts
; ===========================================================================
byte_CE6C:
	dc.b $25
	dc.b $17	; 1
	dc.b $12	; 2
	dc.b   7	; 3
	dc.b   7	; 4
	dc.b   2	; 5
	dc.b   2	; 6
	dc.b $30	; 7
	dc.b  $D	; 8
	dc.b $13	; 9
	dc.b $20	; 10
	dc.b $40	; 11
	dc.b $20	; 12
	dc.b $13	; 13
	dc.b  $D	; 14
	dc.b $30	; 15
	dc.b   2	; 16
	dc.b   2	; 17
	dc.b   7	; 18
	dc.b   7	; 19
	dc.b $20	; 20
	dc.b $12	; 21
	dc.b $17	; 22
	dc.b $25	; 23
; ===========================================================================

loc_CE84:
	moveq	#0,d0
	move.w	(Camera_Y_pos).w,d0
	tst.b	(Current_Act).w
	bne.s	loc_CE9A
	divu.w	#3,d0
	subi.w	#$140,d0
	bra.s	loc_CEA2
; ===========================================================================

loc_CE9A:
	divu.w	#6,d0
	subi.w	#$10,d0

loc_CEA2:
	move.w	d0,($FFFFEE0C).w
	move.w	d0,($FFFFF618).w
	andi.l	#$FFFEFFFE,(Vscroll_Factor).w
	lea	($FFFFA800).w,a2
	lea	$1E(a2),a3
	move.w	(Camera_X_pos).w,d0
	ext.l	d0
	asl.l	#4,d0
	divs.w	#$A,d0
	ext.l	d0
	asl.l	#4,d0
	asl.l	#8,d0
	move.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$E(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,8(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,6(a2)
	move.w	d1,$10(a2)
	move.w	d1,$1C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,4(a2)
	move.w	d1,$12(a2)
	move.w	d1,$1A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,2(a2)
	move.w	d1,$14(a2)
	move.w	d1,$18(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,(a2)
	move.w	d1,$16(a2)
	lea	(byte_CF90).l,a3
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	lsr.w	#1,d1
	moveq	#0,d0

-	move.b	(a3)+,d0
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	-

	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($1C0),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.w	(a2)+,d0
	neg.w	d0
+	dbf	d2,-

	bra.s	loc_CFA8
; ===========================================================================
byte_CF90:
	dc.b $13
byte_CF91:
	dc.b  $B
	dc.b   9	; 1
	dc.b   4	; 2
	dc.b   3	; 3
	dc.b   1	; 4
	dc.b   1	; 5
	dc.b $18	; 6
	dc.b   6	; 7
	dc.b  $A	; 8
	dc.b $10	; 9
	dc.b $20	; 10
	dc.b $10	; 11
	dc.b  $A	; 12
	dc.b   6	; 13
	dc.b $18	; 14
	dc.b   1	; 15
	dc.b   1	; 16
	dc.b   3	; 17
	dc.b   4	; 18
	dc.b $10	; 19
	dc.b   9	; 20
	dc.b  $B	; 21
	dc.b $13	; 22
; ===========================================================================

loc_CFA8:
	moveq	#0,d0
	move.w	($FFFFEE24).w,d0
	tst.b	(Current_Act).w
	bne.s	loc_CFBE
	divu.w	#3,d0
	subi.w	#$140,d0
	bra.s	loc_CFC6
; ===========================================================================

loc_CFBE:
	divu.w	#6,d0
	subi.w	#$10,d0

loc_CFC6:
	move.w	d0,($FFFFEE2C).w
	move.w	d0,($FFFFF620).w
	subi.w	#$E0,($FFFFF620).w
	move.w	($FFFFEE24).w,($FFFFF61E).w
	subi.w	#$E0,($FFFFF61E).w
	andi.l	#$FFFEFFFE,($FFFFF61E).w
	lea	($FFFFA800).w,a2
	lea	$1E(a2),a3
	move.w	($FFFFEE20).w,d0
	ext.l	d0
	asl.l	#4,d0
	divs.w	#$A,d0
	ext.l	d0
	asl.l	#4,d0
	asl.l	#8,d0
	move.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$E(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,$A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,8(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,6(a2)
	move.w	d1,$10(a2)
	move.w	d1,$1C(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,4(a2)
	move.w	d1,$12(a2)
	move.w	d1,$1A(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,2(a2)
	move.w	d1,$14(a2)
	move.w	d1,$18(a2)
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,(a2)
	move.w	d1,$16(a2)
	lea	byte_CF91(pc),a3
	lea	($FFFFA800).w,a2
	lea	($FFFFE1B0).w,a1
	move.w	($FFFFEE2C).w,d1
	lsr.w	#1,d1
	moveq	#$17,d0
	bra.s	loc_D09A
; ===========================================================================

loc_D098:
	move.b	(a3)+,d0

loc_D09A:
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	loc_D098
	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($1D0),d2
	move.w	($FFFFEE20).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.w	(a2)+,d0
	neg.w	d0
+	dbf	d2,-

	rts
; ===========================================================================
; loc_D0C6:
SwScrl_CNZ:
	tst.w	(Two_player_mode).w
	bne.w	loc_D194
	move.w	(Camera_Y_pos).w,d0
	lsr.w	#6,d0
	move.w	d0,($FFFFEE0C).w
	move.w	($FFFFEE0C).w,($FFFFF618).w
	move.w	(Camera_X_pos).w,d2
	bsr.w	sub_D160
	lea	(byte_D156).l,a3
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	moveq	#0,d0

loc_D0FA:
	move.b	(a3)+,d0
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	loc_D0FA
	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($380),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

loc_D116:
	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	loc_D124

loc_D11C:
	move.w	(a2)+,d0
	neg.w	d0
	move.b	(a3)+,d1
	beq.s	loc_D12A

loc_D124:
	dbf	d2,loc_D116
	rts
; ===========================================================================

loc_D12A:
	move.w	#bytesToLcnt($40),d1
	move.w	d0,d3
	move.b	($FFFFFE0F).w,d0
	lsr.w	#3,d0
	neg.w	d0
	andi.w	#$1F,d0
	lea	SwScrl_RippleData(pc),a4
	lea	(a4,d0.w),a4

-	move.b	(a4)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d1,-

	subi.w	#$10,d2
	bra.s	loc_D11C
; ===========================================================================
byte_D156:
	dc.b $10
	dc.b $10	; 1
	dc.b $10	; 2
	dc.b $10	; 3
	dc.b $10	; 4
	dc.b $10	; 5
	dc.b $10	; 6
	dc.b $10	; 7
	dc.b   0	; 8
	dc.b $F0	; 9

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D160:
	lea	($FFFFA800).w,a1
	move.w	d2,d0
	asr.w	#3,d0
	sub.w	d2,d0
	ext.l	d0
	asl.l	#5,d0
	asl.l	#8,d0
	moveq	#0,d3
	move.w	d2,d3
	move.w	#6,d1

loc_D178:
	move.w	d3,(a1)+
	swap	d3
	add.l	d0,d3
	swap	d3
	dbf	d1,loc_D178
	move.w	d2,d0
	asr.w	#3,d0
	move.w	d0,4(a1)
	asr.w	#1,d0
	move.w	d0,(a1)+
	move.w	d0,(a1)+
	rts
; End of function sub_D160

; ===========================================================================

loc_D194:
	move.w	(Camera_Y_pos).w,d0
	lsr.w	#6,d0
	move.w	d0,($FFFFEE0C).w
	move.w	($FFFFEE0C).w,($FFFFF618).w
	andi.l	#$FFFEFFFE,(Vscroll_Factor).w
	move.w	(Camera_X_pos).w,d2
	bsr.w	sub_D160
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	moveq	#0,d0
	move.w	(Camera_X_pos).w,d0
	move.w	#$6F,d2
	lea	(byte_D270+2).l,a3
	bsr.s	sub_D216
	move.w	($FFFFEE24).w,d0
	lsr.w	#6,d0
	move.w	d0,($FFFFEE2C).w
	move.w	d0,($FFFFF620).w
	subi.w	#$E0,($FFFFF620).w
	move.w	($FFFFEE24).w,($FFFFF61E).w
	subi.w	#$E0,($FFFFF61E).w
	andi.l	#$FFFEFFFE,($FFFFF61E).w
	move.w	($FFFFEE20).w,d2
	bsr.w	sub_D160
	lea	($FFFFE1B0).w,a1
	move.w	($FFFFEE2C).w,d1
	moveq	#0,d0
	move.w	($FFFFEE20).w,d0
	move.w	#bytesToLcnt($1D0),d2
	lea	(byte_D270+1).l,a3

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D216:
	lsr.w	#1,d1
	lea	($FFFFA800).w,a2
	moveq	#0,d3

loc_D21E:
	move.b	(a3)+,d3
	addq.w	#2,a2
	sub.w	d3,d1
	bcc.s	loc_D21E
	neg.w	d1
	subq.w	#2,a2
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

loc_D232:
	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	loc_D240

loc_D238:
	move.w	(a2)+,d0
	neg.w	d0
	move.b	(a3)+,d1
	beq.s	loc_D246

loc_D240:
	dbf	d2,loc_D232
	rts
; ===========================================================================

loc_D246:
	move.w	#bytesToLcnt($20),d1
	move.w	d0,d3
	move.b	($FFFFFE0F).w,d0
	lsr.w	#3,d0
	neg.w	d0
	andi.w	#$1F,d0
	lea	SwScrl_RippleData(pc),a4
	lea	(a4,d0.w),a4
-	move.b	(a4)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d1,-

	subq.w	#8,d2
	bra.s	loc_D238
; End of function sub_D216

; ===========================================================================
byte_D270:
	dc.b   4
	dc.b   4	; 1
	dc.b   8	; 2
	dc.b   8	; 3
	dc.b   8	; 4
	dc.b   8	; 5
	dc.b   8	; 6
	dc.b   8	; 7
	dc.b   8	; 8
	dc.b   8	; 9
	dc.b   0	; 10
	dc.b $78	; 11
; ===========================================================================
; loc_D27C:
SwScrl_CPZ:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#5,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#6,d5
	bsr.w	sub_D89A
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#7,d4
	moveq	#4,d6
	bsr.w	sub_D9C8
	move.w	($FFFFEE0C).w,d0
	move.w	d0,($FFFFEE14).w
	move.w	d0,($FFFFF618).w
	move.b	($FFFFEE52).w,d0
	or.b	($FFFFEE54).w,d0
	move.b	d0,($FFFFEE56).w
	clr.b	($FFFFEE52).w
	clr.b	($FFFFEE54).w
	move.b	($FFFFFE0F).w,d1
	andi.w	#7,d1
	bne.s	loc_D2CC
	subq.w	#1,($FFFFA800).w

loc_D2CC:
	lea	(byte_DDD1).l,a0
	move.w	($FFFFEE0C).w,d0
	move.w	d0,d2
	andi.w	#$3F0,d0
	lsr.w	#4,d0
	lea	(a0,d0.w),a0
	move.w	d0,d4
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#$E,d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	andi.w	#$F,d2
	move.w	($FFFFEE08).w,d0
	cmpi.b	#$12,d4
	beq.s	loc_D34A
	bcs.s	loc_D308
	move.w	($FFFFEE10).w,d0

loc_D308:
	neg.w	d0
	add.w	d2,d2
	jmp	loc_D322(pc,d2.w)
; ===========================================================================

loc_D310:

	move.w	($FFFFEE08).w,d0
	cmpi.b	#$12,d4
	beq.s	loc_D354
	bcs.s	loc_D320
	move.w	($FFFFEE10).w,d0

loc_D320:
	neg.w	d0

loc_D322:
    rept 16
	move.l	d0,(a1)+
    endm
	addq.b	#1,d4
	dbf	d1,loc_D310
	rts
; ===========================================================================

loc_D34A:
	move.w	#bytesToLcnt($40),d0
	sub.w	d2,d0
	move.w	d0,d2
	bra.s	loc_D358
; ===========================================================================

loc_D354:
	move.w	#$F,d2

loc_D358:
	move.w	($FFFFEE08).w,d3
	neg.w	d3
	move.w	($FFFFA800).w,d0
	andi.w	#$1F,d0
	lea	SwScrl_RippleData(pc),a2
	lea	(a2,d0.w),a2

-	move.b	(a2)+,d0
	ext.w	d0
	add.w	d3,d0
	move.l	d0,(a1)+
	dbf	d2,-

	addq.b	#1,d4
	dbf	d1,loc_D310
	rts
; ===========================================================================
; loc_D382:
SwScrl_DEZ:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#8,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#8,d5
	bsr.w	sub_D89A
	move.w	($FFFFEE0C).w,($FFFFF618).w
	move.w	(Camera_X_pos).w,d4
	lea	($FFFFA800).w,a2
	move.w	d4,(a2)+

	addq.w	#3,(a2)+ ; these random-seeming numbers control how fast each row of stars scrolls by
	addq.w	#2,(a2)+
	addq.w	#4,(a2)+
	addq.w	#1,(a2)+
	addq.w	#2,(a2)+
	addq.w	#4,(a2)+
	addq.w	#3,(a2)+
	addq.w	#4,(a2)+
	addq.w	#2,(a2)+
	addq.w	#6,(a2)+
	addq.w	#3,(a2)+
	addq.w	#4,(a2)+
	addq.w	#1,(a2)+
	addq.w	#2,(a2)+
	addq.w	#4,(a2)+
	addq.w	#3,(a2)+
	addq.w	#2,(a2)+
	addq.w	#3,(a2)+
	addq.w	#4,(a2)+
	addq.w	#1,(a2)+
	addq.w	#3,(a2)+
	addq.w	#4,(a2)+
	addq.w	#2,(a2)+
	addq.w	#1,(a2)

	move.w	(a2)+,d0 ; this is to make one row go at half speed (1 pixel every other frame)
	moveq	#0,d1
	move.w	d0,d1
	lsr.w	#1,d0
	move.w	d0,(a2)+

	addq.w	#3,(a2)+ ; more star speeds...
	addq.w	#2,(a2)+
	addq.w	#4,(a2)+

	swap	d1
	move.l	d1,d0
	lsr.l	#3,d1
	sub.l	d1,d0
	swap	d0
	move.w	d0,4(a2)
	swap	d0
	sub.l	d1,d0
	swap	d0
	move.w	d0,2(a2)
	swap	d0
	sub.l	d1,d0
	swap	d0
	move.w	d0,(a2)+
	addq.w	#4,a2
	addq.w	#1,(a2)+
	move.w	d4,(a2)+
	move.w	d4,(a2)+
	move.w	d4,(a2)+
	lea	(byte_D48A).l,a3
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	moveq	#0,d0

-	move.b	(a3)+,d0
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	-

	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($380),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.w	(a2)+,d0
	neg.w	d0
+	dbf	d2,-

	moveq	#0,d2
	tst.b	($FFFFEEBD).w
	beq.s	return_D488
	subq.w	#1,($FFFFF660).w
	bpl.s	+
	clr.b	($FFFFEEBD).w
+
	move.w	(Timer_frames).w,d0
	andi.w	#$3F,d0
	lea	SwScrl_RippleData(pc),a1
	lea	(a1,d0.w),a1
	moveq	#0,d0
	move.b	(a1)+,d0
	add.w	d0,(Vscroll_Factor).w
	add.w	d0,($FFFFF618).w
	add.w	d0,($FFFFEEF4).w
	move.b	(a1)+,d2
	add.w	d2,($FFFFEEF0).w

return_D488:
	rts
; ===========================================================================
; unknown data
byte_D48A:
	dc.b $80,8,8,8,8,8,8,8 ; 8
	dc.b 8,8,8,8,8,8,8,8 ; 16
	dc.b 8,8,8,8,8,8,8,8 ; 24
	dc.b 8,8,8,8,8,3,5,8 ; 32
	dc.b $10,$80,$80,$80 ; 36
; ===========================================================================
; loc_D4AE:
SwScrl_ARZ:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	muls.w	#$119,d4
	moveq	#2,d6
	bsr.w	sub_D96C
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#7,d5
	tst.b	(Current_Act).w
	bne.s	+
	asl.l	#1,d5
+
	moveq	#6,d6
	bsr.w	sub_D938
	move.w	($FFFFEE0C).w,($FFFFF618).w
	moveq	#0,d2
	tst.b	($FFFFEEBD).w
	beq.s	+

	move.w	(Timer_frames).w,d0
	andi.w	#$3F,d0
	lea	SwScrl_RippleData(pc),a1
	lea	(a1,d0.w),a1
	moveq	#0,d0
	move.b	(a1)+,d0
	add.w	d0,(Vscroll_Factor).w
	add.w	d0,($FFFFF618).w
	add.w	d0,($FFFFEEF4).w
	move.b	(a1)+,d2
	add.w	d2,($FFFFEEF0).w
+
	lea	($FFFFA800).w,a2
	lea	6(a2),a3
	move.w	(Camera_X_pos).w,d0
	ext.l	d0
	asl.l	#4,d0
	divs.w	#$A,d0
	ext.l	d0
	asl.l	#4,d0
	asl.l	#8,d0
	move.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d1,d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	swap	d1
	add.l	d0,d1
	swap	d1
	move.w	d1,(a3)+
	move.w	d1,(a2)
	move.w	d1,4(a2)
	move.w	($FFFFEE08).w,d0
	move.w	d0,2(a2)
	move.w	d0,$16(a2)
	_move.w	d0,0(a2)
	move.w	d0,4(a2)
	move.w	d0,$18(a2)
	move.w	d0,$1A(a2)
	move.w	d0,$1C(a2)
	move.w	d0,$1E(a2)
	lea	(byte_D5CE).l,a3
	lea	($FFFFA800).w,a2
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	($FFFFEE0C).w,d1
	moveq	#0,d0

-	move.b	(a3)+,d0
	addq.w	#2,a2
	sub.w	d0,d1
	bcc.s	-

	neg.w	d1
	subq.w	#2,a2
	move.w	#bytesToLcnt($380),d2
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	(a2)+,d0
	neg.w	d0

-	move.l	d0,(a1)+
	subq.w	#1,d1
	bne.s	+
	move.b	(a3)+,d1
	move.w	(a2)+,d0
	neg.w	d0
+	dbf	d2,-

	rts
; ===========================================================================
byte_D5CE:
	dc.b $B0
	dc.b $70	; 1
	dc.b $30	; 2
	dc.b $60	; 3
	dc.b $15	; 4
	dc.b  $C	; 5
	dc.b  $E	; 6
	dc.b   6	; 7
	dc.b  $C	; 8
	dc.b $1F	; 9
	dc.b $30	; 10
	dc.b $C0	; 11
	dc.b $F0	; 12
	dc.b $F0	; 13
	dc.b $F0	; 14
	dc.b $F0	; 15
; ===========================================================================
; loc_D5DE:
SwScrl_SCZ:
	tst.w	(Debug_placement_mode).w
	bne.w	SwScrl_Minimal
	lea	(Camera_X_pos).w,a1
	lea	($FFFFEE50).w,a3
	lea	($FFFFEEB0).w,a4
	move.w	($FFFFF736).w,d0
	move.w	(a1),d4
	add.w	(a1),d0
	move.w	d0,d1
	sub.w	(a1),d1
	asl.w	#8,d1
	move.w	d0,(a1)
	move.w	d1,(a4)
	lea	($FFFFEE40).w,a2
	bsr.w	sub_D6E2
	lea	(Camera_Y_pos).w,a1
	lea	($FFFFEEB2).w,a4
	move.w	($FFFFF738).w,d0
	move.w	(a1),d4
	add.w	(a1),d0
	move.w	d0,d1
	sub.w	(a1),d1
	asl.w	#8,d1
	move.w	d0,(a1)
	move.w	d1,(a4)
	lea	($FFFFEE41).w,a2
	bsr.w	sub_D878
	move.w	($FFFFEEB0).w,d4
	beq.s	+
	move.w	#$100,d4
+
	ext.l	d4
	asl.l	#7,d4
	moveq	#0,d5
	bsr.w	sub_D89A
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($380),d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	neg.w	d0

-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; loc_D666:
SwScrl_Minimal:
	move.w	($FFFFEEB0).w,d4
	ext.l	d4
	asl.l	#5,d4
	move.w	($FFFFEEB2).w,d5
	ext.l	d5
	asl.l	#6,d5
	bsr.w	sub_D89A
	move.w	($FFFFEE0C).w,($FFFFF618).w
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#bytesToLcnt($380),d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	move.w	($FFFFEE08).w,d0
	neg.w	d0

-	move.l	d0,(a1)+
	dbf	d1,-

	rts
; ===========================================================================
; unused...
; loc_D69E:
SwScrl_HPZ_Continued:
	lea	(Horiz_Scroll_Buf).w,a1
	move.w	#$E,d1
	move.w	(Camera_X_pos).w,d0
	neg.w	d0
	swap	d0
	andi.w	#$F,d2
	add.w	d2,d2
	move.w	(a2)+,d0
	jmp	loc_D6BC(pc,d2.w)
; ===========================================================================

loc_D6BA:
	move.w	(a2)+,d0

loc_D6BC:
    rept 16
	move.l	d0,(a1)+
    endm
	dbf	d1,loc_D6BA
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D6E2:
	move.w	(a1),d0
	andi.w	#$10,d0
	move.b	(a2),d1
	eor.b	d1,d0
	bne.s	return_D702
	eori.b	#$10,(a2)
	move.w	(a1),d0
	sub.w	d4,d0
	bpl.s	loc_D6FE
	bset	#2,(a3)
	rts
; ===========================================================================

loc_D6FE:
	bset	#3,(a3)

return_D702:
	rts
; End of function sub_D6E2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D704:
	move.w	(a1),d4
	tst.b	($FFFFF623).w
	bne.s	return_D742
	move.w	(a5),d1
	beq.s	loc_D72E
	subi.w	#$100,d1
	move.w	d1,(a5)
	moveq	#0,d1
	move.b	(a5),d1
	lsl.b	#2,d1
	addq.b	#4,d1
	move.w	2(a5),d0
	sub.b	d1,d0
	move.w	(a6,d0.w),d0
	andi.w	#$3FFF,d0
	bra.s	loc_D732
; ===========================================================================

loc_D72E:
	move.w	x_pos(a0),d0

loc_D732:
	sub.w	(a1),d0
	subi.w	#$90,d0
	blt.s	loc_D744
	subi.w	#$10,d0
	bge.s	loc_D758
	clr.w	(a4)

return_D742:
	rts
; ===========================================================================

loc_D744:
	cmpi.w	#-$10,d0
	bgt.s	loc_D74E
	move.w	#-$10,d0

loc_D74E:
	add.w	(a1),d0
	cmp.w	(a2),d0
	bgt.s	loc_D76E
	move.w	(a2),d0
	bra.s	loc_D76E
; ===========================================================================

loc_D758:
	cmpi.w	#$10,d0
	bcs.s	loc_D762
	move.w	#$10,d0

loc_D762:
	add.w	(a1),d0
	cmp.w	2(a2),d0
	blt.s	loc_D76E
	move.w	2(a2),d0

loc_D76E:
	move.w	d0,d1
	sub.w	(a1),d1
	asl.w	#8,d1
	move.w	d0,(a1)
	move.w	d1,(a4)
	rts
; End of function sub_D704


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D77A:
	moveq	#0,d1
	move.w	y_pos(a0),d0
	sub.w	(a1),d0
	cmpi.w	#-$100,(Camera_Min_Y_pos).w
	bne.s	loc_D78E
	andi.w	#$7FF,d0

loc_D78E:
	btst	#2,status(a0)
	beq.s	loc_D798
	subq.w	#5,d0

loc_D798:
	btst	#1,status(a0)
	beq.s	loc_D7B6
	addi.w	#$20,d0
	sub.w	d3,d0
	bcs.s	loc_D7FC
	subi.w	#$40,d0
	bcc.s	loc_D7FC
	tst.b	($FFFFEEDE).w
	bne.s	loc_D80E
	bra.s	loc_D7C0
; ===========================================================================

loc_D7B6:
	sub.w	d3,d0
	bne.s	loc_D7C4
	tst.b	($FFFFEEDE).w
	bne.s	loc_D80E

loc_D7C0:
	clr.w	(a4)
	rts
; ===========================================================================

loc_D7C4:
	cmpi.w	#$60,d3
	bne.s	loc_D7EA
	move.w	inertia(a0),d1
	bpl.s	loc_D7D2
	neg.w	d1

loc_D7D2:
	cmpi.w	#$800,d1
	bcc.s	loc_D7FC
	move.w	#$600,d1
	cmpi.w	#6,d0
	bgt.s	loc_D84A
	cmpi.w	#-6,d0
	blt.s	loc_D824
	bra.s	loc_D814
; ===========================================================================

loc_D7EA:
	move.w	#$200,d1
	cmpi.w	#2,d0
	bgt.s	loc_D84A
	cmpi.w	#-2,d0
	blt.s	loc_D824
	bra.s	loc_D814
; ===========================================================================

loc_D7FC:
	move.w	#$1000,d1
	cmpi.w	#$10,d0
	bgt.s	loc_D84A
	cmpi.w	#-$10,d0
	blt.s	loc_D824
	bra.s	loc_D814
; ===========================================================================

loc_D80E:
	moveq	#0,d0
	move.b	d0,($FFFFEEDE).w

loc_D814:
	moveq	#0,d1
	move.w	d0,d1
	add.w	(a1),d1
	tst.w	d0
	bpl.w	loc_D852
	bra.w	loc_D82E
; ===========================================================================

loc_D824:
	neg.w	d1
	ext.l	d1
	asl.l	#8,d1
	add.l	(a1),d1
	swap	d1

loc_D82E:
	cmp.w	4(a2),d1
	bgt.s	loc_D868
	cmpi.w	#-$100,d1
	bgt.s	loc_D844
	andi.w	#$7FF,d1
	andi.w	#$7FF,(a1)
	bra.s	loc_D868
; ===========================================================================

loc_D844:
	move.w	4(a2),d1
	bra.s	loc_D868
; ===========================================================================

loc_D84A:
	ext.l	d1
	asl.l	#8,d1
	add.l	(a1),d1
	swap	d1

loc_D852:
	cmp.w	6(a2),d1
	blt.s	loc_D868
	subi.w	#$800,d1
	bcs.s	loc_D864
	subi.w	#$800,(a1)
	bra.s	loc_D868
; ===========================================================================

loc_D864:
	move.w	6(a2),d1

loc_D868:
	move.w	(a1),d4
	swap	d1
	move.l	d1,d3
	sub.l	(a1),d3
	ror.l	#8,d3
	move.w	d3,(a4)
	move.l	d1,(a1)
	rts
; End of function sub_D77A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D878:
	move.w	(a1),d0
	andi.w	#$10,d0
	move.b	(a2),d1
	eor.b	d1,d0
	bne.s	return_D898
	eori.b	#$10,(a2)
	move.w	(a1),d0
	sub.w	d4,d0
	bpl.s	loc_D894
	bset	#0,(a3)
	rts
; ===========================================================================

loc_D894:
	bset	#1,(a3)

return_D898:
	rts
; End of function sub_D878


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D89A:

	move.l	($FFFFEE08).w,d2
	move.l	d2,d0
	add.l	d4,d0
	move.l	d0,($FFFFEE08).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE42).w,d3
	eor.b	d3,d1
	bne.s	loc_D8CE
	eori.b	#$10,($FFFFEE42).w
	sub.l	d2,d0
	bpl.s	loc_D8C8
	bset	#2,($FFFFEE52).w
	bra.s	loc_D8CE
; ===========================================================================

loc_D8C8:
	bset	#3,($FFFFEE52).w

loc_D8CE:
	move.l	($FFFFEE0C).w,d3
	move.l	d3,d0
	add.l	d5,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE43).w,d2
	eor.b	d2,d1
	bne.s	return_D902
	eori.b	#$10,($FFFFEE43).w
	sub.l	d3,d0
	bpl.s	loc_D8FC
	bset	#0,($FFFFEE52).w
	rts
; ===========================================================================

loc_D8FC:
	bset	#1,($FFFFEE52).w

return_D902:
	rts
; End of function sub_D89A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D904:

	move.l	($FFFFEE08).w,d2
	move.l	d2,d0
	add.l	d4,d0
	move.l	d0,($FFFFEE08).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE42).w,d3
	eor.b	d3,d1
	bne.s	return_D936
	eori.b	#$10,($FFFFEE42).w
	sub.l	d2,d0
	bpl.s	loc_D930
	bset	d6,($FFFFEE52).w
	bra.s	return_D936
; ===========================================================================

loc_D930:
	addq.b	#1,d6
	bset	d6,($FFFFEE52).w

return_D936:
	rts
; End of function sub_D904


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D938:

	move.l	($FFFFEE0C).w,d3
	move.l	d3,d0
	add.l	d5,d0

loc_D940:

	move.l	d0,($FFFFEE0C).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE43).w,d2
	eor.b	d2,d1
	bne.s	return_D96A
	eori.b	#$10,($FFFFEE43).w
	sub.l	d3,d0
	bpl.s	loc_D964
	bset	d6,($FFFFEE52).w
	rts
; ===========================================================================

loc_D964:
	addq.b	#1,d6
	bset	d6,($FFFFEE52).w

return_D96A:
	rts
; End of function sub_D938


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D96C:
	move.l	($FFFFF672).w,d0
	add.l	d4,d0
	move.l	d0,($FFFFF672).w
	lea	($FFFFEE08).w,a1
	move.w	(a1),d2
	move.w	($FFFFF672).w,d0
	sub.w	d2,d0
	bcs.s	loc_D988
	bhi.s	loc_D994
	rts
; ===========================================================================

loc_D988:
	cmpi.w	#-$10,d0
	bgt.s	loc_D99E
	move.w	#-$10,d0
	bra.s	loc_D99E
; ===========================================================================

loc_D994:
	cmpi.w	#$10,d0
	bcs.s	loc_D99E
	move.w	#$10,d0

loc_D99E:
	add.w	(a1),d0
	move.w	d0,(a1)
	move.w	d0,d1
	andi.w	#$10,d1
	move.b	($FFFFEE42).w,d3
	eor.b	d3,d1
	bne.s	return_D9C6
	eori.b	#$10,($FFFFEE42).w
	sub.w	d2,d0
	bpl.s	loc_D9C0
	bset	d6,($FFFFEE52).w
	bra.s	return_D9C6
; ===========================================================================

loc_D9C0:
	addq.b	#1,d6
	bset	d6,($FFFFEE52).w

return_D9C6:
	rts
; End of function sub_D96C


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_D9C8:
	move.l	($FFFFEE10).w,d2
	move.l	d2,d0
	add.l	d4,d0
	move.l	d0,($FFFFEE10).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE44).w,d3
	eor.b	d3,d1
	bne.s	return_D9FA
	eori.b	#$10,($FFFFEE44).w
	sub.l	d2,d0
	bpl.s	loc_D9F4
	bset	d6,($FFFFEE54).w
	bra.s	return_D9FA
; ===========================================================================

loc_D9F4:
	addq.b	#1,d6
	bset	d6,($FFFFEE54).w

return_D9FA:
	rts
; End of function sub_D9C8

; ===========================================================================
	move.l	($FFFFEE18).w,d2
	move.l	d2,d0
	add.l	d4,d0
	move.l	d0,($FFFFEE18).w
	move.l	d0,d1
	swap	d1
	andi.w	#$10,d1
	move.b	($FFFFEE46).w,d3
	eor.b	d3,d1
	bne.s	return_DA2E
	eori.b	#$10,($FFFFEE46).w
	sub.l	d2,d0
	bpl.s	loc_DA28
	bset	d6,($FFFFEE56).w
	bra.s	return_DA2E
; ===========================================================================

loc_DA28:
	addq.b	#1,d6
	bset	d6,($FFFFEE56).w

return_DA2E:

	rts
; ===========================================================================
; Unused - dead code leftover from S1:
	lea	(VDP_control_port).l,a5
	lea	(VDP_data_port).l,a6
	lea	($FFFFEE52).w,a2
	lea	($FFFFEE08).w,a3
	lea	($FFFF8080).w,a4
	move.w	#$6000,d2
	bsr.w	sub_DBC2
	lea	($FFFFEE54).w,a2
	lea	($FFFFEE10).w,a3
	bra.w	sub_DC92

; ===========================================================================




; ---------------------------------------------------------------------------
; Subroutine to display correct tiles as you move
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; loc_DA5C:
LoadTilesAsYouMove:
	lea	(VDP_control_port).l,a5
	lea	(VDP_data_port).l,a6
	lea	($FFFFEEA2).w,a2
	lea	($FFFFEE68).w,a3
	lea	($FFFF8080).w,a4
	move.w	#$6000,d2
	bsr.w	sub_DBC2
	lea	($FFFFEEA4).w,a2
	lea	($FFFFEE70).w,a3
	bsr.w	sub_DC92
	lea	($FFFFEEA6).w,a2
	lea	($FFFFEE78).w,a3
	bsr.w	sub_DD82
	tst.w	(Two_player_mode).w
	beq.s	loc_DAAE
	lea	($FFFFEEA8).w,a2
	lea	($FFFFEE80).w,a3
	lea	(Level_Layout).w,a4
	move.w	#$6000,d2
	bsr.w	sub_DB5C

loc_DAAE:
	lea	($FFFFEEA0).w,a2
	lea	($FFFFEE60).w,a3
	lea	(Level_Layout).w,a4
	move.w	#$4000,d2
	tst.b	(Dirty_flag).w

	; comment out this line to disable blast processing
	beq.s	Draw_FG

	move.b	#0,(Dirty_flag).w
	moveq	#-$10,d4
	moveq	#$F,d6
; loc_DACE:
Draw_All:
	movem.l	d4-d6,-(sp)	; This whole routine basically redraws the whole
	moveq	#-$10,d5	; area instead of merely a line of tiles
	move.w	d4,d1
	bsr.w	Calc_VRAM_Pos
	move.w	d1,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,Draw_All
	move.b	#0,($FFFFEEA0).w
	rts
; ===========================================================================
; loc_DAF6:
Draw_FG:
	tst.b	(a2)
	beq.s	return_DB5A
	bclr	#0,(a2)
	beq.s	loc_DB10
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DB10:
	bclr	#1,(a2)
	beq.s	loc_DB2A
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DB2A:
	bclr	#2,(a2)
	beq.s	loc_DB40
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	sub_DF04

loc_DB40:
	bclr	#3,(a2)
	beq.s	return_DB5A
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	sub_DF04

return_DB5A:

	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_DB5C:
	tst.b	(a2)
	beq.s	return_DBC0
	bclr	#0,(a2)
	beq.s	loc_DB76
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	loc_E2C2
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DB76:
	bclr	#1,(a2)
	beq.s	loc_DB90
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	loc_E2C2
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DB90:
	bclr	#2,(a2)
	beq.s	loc_DBA6
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	loc_E2C2
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	sub_DF04

loc_DBA6:
	bclr	#3,(a2)
	beq.s	return_DBC0
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	loc_E2C2
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	sub_DF04

return_DBC0:
	rts
; End of function sub_DB5C


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_DBC2:

	tst.b	(a2)
	beq.w	return_DC90
	bclr	#0,(a2)
	beq.s	loc_DBDE
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DBDE:
	bclr	#1,(a2)
	beq.s	loc_DBF8
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	DrawTiles_Vertical1

loc_DBF8:
	bclr	#2,(a2)
	beq.s	loc_DC0E
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	sub_DF04

loc_DC0E:
	bclr	#3,(a2)
	beq.s	loc_DC28
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	move.w	#320,d5
	bsr.w	sub_DF04

loc_DC28:
	bclr	#4,(a2)
	beq.s	loc_DC40
	moveq	#-$10,d4
	moveq	#0,d5
	bsr.w	loc_E288
	moveq	#-$10,d4
	moveq	#0,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical2

loc_DC40:
	bclr	#5,(a2)
	beq.s	loc_DC5C
	move.w	#$E0,d4
	moveq	#0,d5
	bsr.w	loc_E288
	move.w	#$E0,d4
	moveq	#0,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical2

loc_DC5C:
	bclr	#6,(a2)
	beq.s	loc_DC74
	moveq	#-$10,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	moveq	#-$10,d4
	moveq	#-$10,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical

loc_DC74:
	bclr	#7,(a2)
	beq.s	return_DC90
	move.w	#$E0,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$E0,d4
	moveq	#-$10,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical

return_DC90:
	rts
; End of function sub_DBC2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_DC92:

	tst.b	(a2)
	beq.w	return_DCD4
	bclr	#0,(a2)
	beq.s	loc_DCB4
	move.w	#$70,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$70,d4
	moveq	#-$10,d5
	moveq	#2,d6
	bsr.w	loc_DF06

loc_DCB4:
	bclr	#1,(a2)
	beq.s	return_DCD4
	move.w	#$70,d4
	move.w	#320,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$70,d4
	move.w	#320,d5
	moveq	#2,d6
	bsr.w	loc_DF06

return_DCD4:
	rts
; End of function sub_DC92

; ===========================================================================
byte_DCD6:
	dc.b   0
byte_DCD7:
	dc.b   0
	dc.b   0	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   6	; 4
	dc.b   6	; 5
	dc.b   6	; 6
	dc.b   6	; 7
	dc.b   6	; 8
	dc.b   6	; 9
	dc.b   6	; 10
	dc.b   6	; 11
	dc.b   6	; 12
	dc.b   6	; 13
	dc.b   4	; 14
	dc.b   4	; 15
	dc.b   4	; 16
	dc.b   4	; 17
	dc.b   4	; 18
	dc.b   4	; 19
	dc.b   4	; 20
	dc.b   2	; 21
	dc.b   2	; 22
	dc.b   2	; 23
	dc.b   2	; 24
	dc.b   2	; 25
	dc.b   2	; 26
	dc.b   2	; 27
	dc.b   2	; 28
	dc.b   2	; 29
	dc.b   2	; 30
	dc.b   2	; 31
	dc.b   0	; 32
; ===========================================================================
	moveq	#-$10,d4
	bclr	#0,(a2)
	bne.s	loc_DD0A
	bclr	#1,(a2)
	beq.s	loc_DD52
	move.w	#$E0,d4

loc_DD0A:
	lea	byte_DCD7(pc),a0
	move.w	($FFFFEE0C).w,d0
	add.w	d4,d0
	andi.w	#$1F0,d0
	lsr.w	#4,d0
	move.b	(a0,d0.w),d0
	lea	(word_DE7E).l,a3
	movea.w	(a3,d0.w),a3
	beq.s	loc_DD3E
	moveq	#-$10,d5
	movem.l	d4-d5,-(sp)
	bsr.w	Calc_VRAM_Pos
	movem.l	(sp)+,d4-d5
	bsr.w	DrawTiles_Vertical1
	bra.s	loc_DD52
; ===========================================================================

loc_DD3E:
	moveq	#0,d5
	movem.l	d4-d5,-(sp)
	bsr.w	loc_E288
	movem.l	(sp)+,d4-d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical2

loc_DD52:

	tst.b	(a2)
	bne.s	loc_DD58
	rts
; ===========================================================================

loc_DD58:
	moveq	#-$10,d4
	moveq	#-$10,d5
	move.b	(a2),d0
	andi.b	#-$58,d0
	beq.s	loc_DD6C
	lsr.b	#1,d0
	move.b	d0,(a2)
	move.w	#320,d5

loc_DD6C:
	lea	byte_DCD6(pc),a0
	move.w	($FFFFEE0C).w,d0
	andi.w	#$1F0,d0
	lsr.w	#4,d0
	lea	(a0,d0.w),a0
	bra.w	loc_DE86

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_DD82:
	tst.b	(a2)
	beq.w	return_DDCE
	cmpi.b	#$D,(Current_Zone).w
	beq.w	loc_DE12
	bclr	#0,(a2)
	beq.s	loc_DDAE
	move.w	#$40,d4
	moveq	#-$10,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$40,d4
	moveq	#-$10,d5
	moveq	#2,d6
	bsr.w	loc_DF06

loc_DDAE:
	bclr	#1,(a2)
	beq.s	return_DDCE
	move.w	#$40,d4
	move.w	#320,d5
	bsr.w	Calc_VRAM_Pos
	move.w	#$40,d4
	move.w	#320,d5
	moveq	#2,d6
	bsr.w	loc_DF06

return_DDCE:
	rts
; ===========================================================================
byte_DDD0:
	dc.b 2
byte_DDD1:
	dc.b   2

	dc.b   2	; 1
	dc.b   2	; 2
	dc.b   2	; 3
	dc.b   2	; 4
	dc.b   2	; 5
	dc.b   2	; 6
	dc.b   2	; 7
	dc.b   2	; 8
	dc.b   2	; 9
	dc.b   2	; 10
	dc.b   2	; 11
	dc.b   2	; 12
	dc.b   2	; 13
	dc.b   2	; 14
	dc.b   2	; 15
	dc.b   2	; 16
	dc.b   2	; 17
	dc.b   2	; 18
	dc.b   4	; 19
	dc.b   4	; 20
	dc.b   4	; 21
	dc.b   4	; 22
	dc.b   4	; 23
	dc.b   4	; 24
	dc.b   4	; 25
	dc.b   4	; 26
	dc.b   4	; 27
	dc.b   4	; 28
	dc.b   4	; 29
	dc.b   4	; 30
	dc.b   4	; 31
	dc.b   4	; 32
	dc.b   4	; 33
	dc.b   4	; 34
	dc.b   4	; 35
	dc.b   4	; 36
	dc.b   4	; 37
	dc.b   4	; 38
	dc.b   4	; 39
	dc.b   4	; 40
	dc.b   4	; 41
	dc.b   4	; 42
	dc.b   4	; 43
	dc.b   4	; 44
	dc.b   4
	dc.b   4	; 1
	dc.b   4	; 2
	dc.b   4	; 3
	dc.b   4	; 4
	dc.b   4	; 5
	dc.b   4	; 6
	dc.b   4	; 7
	dc.b   4	; 8
	dc.b   4	; 9
	dc.b   4	; 10
	dc.b   4	; 11
	dc.b   4	; 12
	dc.b   4	; 13
	dc.b   4	; 14
	dc.b   4	; 15
	dc.b   4	; 16
	dc.b   4	; 17
	dc.b   4	; 18
	dc.b   0	; 19
; ===========================================================================

loc_DE12:
	moveq	#-$10,d4
	bclr	#0,(a2)
	bne.s	loc_DE24
	bclr	#1,(a2)
	beq.s	loc_DE4E
	move.w	#$E0,d4

loc_DE24:
	lea	byte_DDD1(pc),a0
	move.w	($FFFFEE0C).w,d0
	add.w	d4,d0
	andi.w	#$3F0,d0
	lsr.w	#4,d0
	move.b	(a0,d0.w),d0
	movea.w	word_DE7E(pc,d0.w),a3
	moveq	#-$10,d5
	movem.l	d4-d5,-(sp)
	bsr.w	Calc_VRAM_Pos
	movem.l	(sp)+,d4-d5
	bsr.w	DrawTiles_Vertical1

loc_DE4E:
	tst.b	(a2)
	bne.s	loc_DE54
	rts
; ===========================================================================

loc_DE54:
	moveq	#-$10,d4
	moveq	#-$10,d5
	move.b	(a2),d0
	andi.b	#-$58,d0
	beq.s	loc_DE68
	lsr.b	#1,d0
	move.b	d0,(a2)
	move.w	#320,d5

loc_DE68:
	lea	byte_DDD0(pc),a0
	move.w	($FFFFEE0C).w,d0
	andi.w	#$7F0,d0
	lsr.w	#4,d0
	lea	(a0,d0.w),a0
	bra.w	loc_DE86
; ===========================================================================
word_DE7E:
	dc.w $EE68
	dc.w $EE68	; 1
	dc.w $EE70	; 2
	dc.w $EE78	; 3
; ===========================================================================

loc_DE86:

	tst.w	(Two_player_mode).w
	bne.s	loc_DEC8
	moveq	#$F,d6
	move.l	#$800000,d7

loc_DE94:
	moveq	#0,d0
	move.b	(a0)+,d0
	btst	d0,(a2)
	beq.s	loc_DEBC
	movea.w	word_DE7E(pc,d0.w),a3
	movem.l	d4-d5/a0,-(sp)
	movem.l	d4-d5,-(sp)
	bsr.w	sub_E244
	movem.l	(sp)+,d4-d5
	bsr.w	Calc_VRAM_Pos
	bsr.w	sub_E174
	movem.l	(sp)+,d4-d5/a0

loc_DEBC:
	addi.w	#$10,d4
	dbf	d6,loc_DE94
	clr.b	(a2)
	rts
; ===========================================================================

loc_DEC8:
	moveq	#$F,d6
	move.l	#$800000,d7

loc_DED0:
	moveq	#0,d0
	move.b	(a0)+,d0
	btst	d0,(a2)
	beq.s	loc_DEF8
	movea.w	word_DE7E(pc,d0.w),a3
	movem.l	d4-d5/a0,-(sp)
	movem.l	d4-d5,-(sp)
	bsr.w	sub_E244
	movem.l	(sp)+,d4-d5
	bsr.w	Calc_VRAM_Pos
	bsr.w	sub_E1FA
	movem.l	(sp)+,d4-d5/a0

loc_DEF8:
	addi.w	#$10,d4
	dbf	d6,loc_DED0
	clr.b	(a2)
	rts
; End of function sub_DD82


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_DF04:

	moveq	#$F,d6

loc_DF06:
	add.w	(a3),d5
	add.w	4(a3),d4
	move.l	#$800000,d7
	move.l	d0,d1
	bsr.w	sub_E09E
	tst.w	(Two_player_mode).w
	bne.s	loc_DF54

loc_DF1E:
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	lea	(Block_Table).w,a1
	adda.w	d3,a1
	move.l	d1,d0
	bsr.w	sub_E174
	adda.w	#$10,a0
	addi.w	#$100,d1
	andi.w	#$FFF,d1
	addi.w	#$10,d4
	move.w	d4,d0
	andi.w	#$70,d0
	bne.s	loc_DF4E
	bsr.w	sub_E09E

loc_DF4E:
	dbf	d6,loc_DF1E
	rts
; ===========================================================================

loc_DF54:
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	lea	(Block_Table).w,a1
	adda.w	d3,a1
	move.l	d1,d0
	bsr.w	sub_E1FA
	adda.w	#$10,a0
	addi.w	#$80,d1
	andi.w	#$FFF,d1
	addi.w	#$10,d4
	move.w	d4,d0
	andi.w	#$70,d0
	bne.s	loc_DF84
	bsr.w	sub_E09E

loc_DF84:
	dbf	d6,loc_DF54
	rts
; End of function sub_DF04


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_DF8A:
DrawTiles_Vertical:
	add.w	(a3),d5
	add.w	4(a3),d4
	bra.s	DrawTiles_Vertical3
; End of function DrawTiles_Vertical


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_DF92:
DrawTiles_Vertical1:
	moveq	#$15,d6
	add.w	(a3),d5
; loc_DF96:
DrawTiles_Vertical2:
	add.w	4(a3),d4
; loc_DF9A:
DrawTiles_Vertical3:
	tst.w	(Two_player_mode).w
	bne.s	loc_E018
	move.l	a2,-(sp)
	move.w	d6,-(sp)
	lea	($FFFFEF00).w,a2
	move.l	d0,d1
	or.w	d2,d1
	swap	d1
	move.l	d1,-(sp)
	move.l	d1,(a5)
	swap	d1
	bsr.w	sub_E09E

loc_DFB8:
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	lea	(Block_Table).w,a1
	adda.w	d3,a1
	bsr.w	sub_E0D4
	addq.w	#2,a0
	addq.b	#4,d1
	bpl.s	loc_DFDA
	andi.b	#$7F,d1
	swap	d1
	move.l	d1,(a5)
	swap	d1

loc_DFDA:
	addi.w	#$10,d5
	move.w	d5,d0
	andi.w	#$70,d0
	bne.s	loc_DFEA
	bsr.w	sub_E09E

loc_DFEA:
	dbf	d6,loc_DFB8
	move.l	(sp)+,d1
	addi.l	#$800000,d1
	lea	($FFFFEF00).w,a2
	move.l	d1,(a5)
	swap	d1
	move.w	(sp)+,d6

loc_E000:
	move.l	(a2)+,(a6)
	addq.b	#4,d1
	bmi.s	loc_E010
	ori.b	#$80,d1
	swap	d1
	move.l	d1,(a5)
	swap	d1

loc_E010:
	dbf	d6,loc_E000
	movea.l	(sp)+,a2
	rts
; ===========================================================================

loc_E018:
	move.l	d0,d1
	or.w	d2,d1
	swap	d1
	move.l	d1,(a5)
	swap	d1
	tst.b	d1
	bmi.s	loc_E062
	bsr.w	sub_E09E

loc_E02A:
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	lea	(Block_Table).w,a1
	adda.w	d3,a1
	bsr.w	sub_E136
	addq.w	#2,a0
	addq.b	#4,d1
	bpl.s	loc_E04C
	andi.b	#$7F,d1
	swap	d1
	move.l	d1,(a5)
	swap	d1

loc_E04C:
	addi.w	#$10,d5
	move.w	d5,d0
	andi.w	#$70,d0
	bne.s	loc_E05C
	bsr.w	sub_E09E

loc_E05C:
	dbf	d6,loc_E02A
	rts
; ===========================================================================

loc_E062:
	bsr.w	sub_E09E

loc_E066:
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	lea	(Block_Table).w,a1
	adda.w	d3,a1
	bsr.w	sub_E136
	addq.w	#2,a0
	addq.b	#4,d1
	bmi.s	loc_E088
	ori.b	#$80,d1
	swap	d1
	move.l	d1,(a5)
	swap	d1

loc_E088:
	addi.w	#$10,d5
	move.w	d5,d0
	andi.w	#$70,d0
	bne.s	loc_E098
	bsr.w	sub_E09E

loc_E098:
	dbf	d6,loc_E066
	rts
; End of function DrawTiles_Vertical1


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E09E:
	movem.l	d4-d5,-(sp)
	move.w	d4,d3
	add.w	d3,d3
	andi.w	#$F00,d3
	lsr.w	#3,d5
	move.w	d5,d0
	lsr.w	#4,d0
	andi.w	#$7F,d0
	add.w	d3,d0
	moveq	#-1,d3
	clr.w	d3
	move.b	(a4,d0.w),d3
	lsl.w	#7,d3
	andi.w	#$70,d4
	andi.w	#$E,d5
	add.w	d4,d3
	add.w	d5,d3
	movea.l	d3,a0
	movem.l	(sp)+,d4-d5
	rts
; End of function sub_E09E


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E0D4:
	btst	#3,(a0)
	bne.s	loc_E100
	btst	#2,(a0)
	bne.s	loc_E0E6
	move.l	(a1)+,(a6)
	move.l	(a1)+,(a2)+
	rts
; ===========================================================================

loc_E0E6:
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a6)
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a2)+
	rts
; ===========================================================================

loc_E100:
	btst	#2,(a0)
	bne.s	loc_E11C
	move.l	(a1)+,d0
	move.l	(a1)+,d3
	eori.l	#$10001000,d3
	move.l	d3,(a6)
	eori.l	#$10001000,d0
	move.l	d0,(a2)+
	rts
; ===========================================================================

loc_E11C:
	move.l	(a1)+,d0
	move.l	(a1)+,d3
	eori.l	#$18001800,d3
	swap	d3
	move.l	d3,(a6)
	eori.l	#$18001800,d0
	swap	d0
	move.l	d0,(a2)+
	rts
; End of function sub_E0D4


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E136:
	btst	#3,(a0)
	bne.s	loc_E154
	btst	#2,(a0)
	bne.s	loc_E146
	move.l	(a1)+,(a6)
	rts
; ===========================================================================

loc_E146:
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a6)
	rts
; ===========================================================================

loc_E154:
	btst	#2,(a0)
	bne.s	loc_E166
	move.l	(a1)+,d3
	eori.l	#$10001000,d3
	move.l	d3,(a6)
	rts
; ===========================================================================

loc_E166:
	move.l	(a1)+,d3
	eori.l	#$18001800,d3
	swap	d3
	move.l	d3,(a6)
	rts
; End of function sub_E136


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E174:

	or.w	d2,d0
	swap	d0
	btst	#3,(a0)
	bne.s	loc_E1B0
	btst	#2,(a0)
	bne.s	loc_E190
	move.l	d0,(a5)
	move.l	(a1)+,(a6)
	add.l	d7,d0
	move.l	d0,(a5)
	move.l	(a1)+,(a6)
	rts
; ===========================================================================

loc_E190:
	move.l	d0,(a5)
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a6)
	add.l	d7,d0
	move.l	d0,(a5)
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a6)
	rts
; ===========================================================================

loc_E1B0:
	btst	#2,(a0)
	bne.s	loc_E1D6
	move.l	d5,-(sp)
	move.l	d0,(a5)
	move.l	(a1)+,d5
	move.l	(a1)+,d3
	eori.l	#$10001000,d3
	move.l	d3,(a6)
	add.l	d7,d0
	move.l	d0,(a5)
	eori.l	#$10001000,d5
	move.l	d5,(a6)
	move.l	(sp)+,d5
	rts
; ===========================================================================

loc_E1D6:
	move.l	d5,-(sp)
	move.l	d0,(a5)
	move.l	(a1)+,d5
	move.l	(a1)+,d3
	eori.l	#$18001800,d3
	swap	d3
	move.l	d3,(a6)
	add.l	d7,d0
	move.l	d0,(a5)
	eori.l	#$18001800,d5
	swap	d5
	move.l	d5,(a6)
	move.l	(sp)+,d5
	rts
; End of function sub_E174


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E1FA:

	or.w	d2,d0
	swap	d0
	btst	#3,(a0)
	bne.s	loc_E220
	btst	#2,(a0)
	bne.s	loc_E210
	move.l	d0,(a5)
	move.l	(a1)+,(a6)
	rts
; ===========================================================================

loc_E210:
	move.l	d0,(a5)
	move.l	(a1)+,d3
	eori.l	#$8000800,d3
	swap	d3
	move.l	d3,(a6)
	rts
; ===========================================================================

loc_E220:
	btst	#2,(a0)
	bne.s	loc_E234
	move.l	d0,(a5)
	move.l	(a1)+,d3
	eori.l	#$10001000,d3
	move.l	d3,(a6)
	rts
; ===========================================================================

loc_E234:
	move.l	d0,(a5)
	move.l	(a1)+,d3
	eori.l	#$18001800,d3
	swap	d3
	move.l	d3,(a6)
	rts
; End of function sub_E1FA


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E244:

	add.w	(a3),d5
	add.w	4(a3),d4
	lea	(Block_Table).w,a1
	move.w	d4,d3
	add.w	d3,d3
	andi.w	#$F00,d3
	lsr.w	#3,d5
	move.w	d5,d0
	lsr.w	#4,d0
	andi.w	#$7F,d0
	add.w	d3,d0
	moveq	#-1,d3
	clr.w	d3
	move.b	(a4,d0.w),d3
	lsl.w	#7,d3
	andi.w	#$70,d4
	andi.w	#$E,d5
	add.w	d4,d3
	add.w	d5,d3
	movea.l	d3,a0
	move.w	(a0),d3
	andi.w	#$3FF,d3
	lsl.w	#3,d3
	adda.w	d3,a1
	rts
; End of function sub_E244


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_E286:
Calc_VRAM_Pos:

	add.w	(a3),d5

loc_E288:
	tst.w	(Two_player_mode).w
	bne.s	loc_E2A8
	add.w	4(a3),d4
	andi.w	#$F0,d4
	andi.w	#$1F0,d5
	lsl.w	#4,d4
	lsr.w	#2,d5
	add.w	d5,d4
	moveq	#3,d0
	swap	d0
	move.w	d4,d0
	rts
; ===========================================================================

loc_E2A8:
	add.w	4(a3),d4

loc_E2AC:
	andi.w	#$1F0,d4
	andi.w	#$1F0,d5
	lsl.w	#3,d4
	lsr.w	#2,d5
	add.w	d5,d4
	moveq	#3,d0
	swap	d0
	move.w	d4,d0
	rts
; End of function Calc_VRAM_Pos


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


loc_E2C2:
	tst.w	(Two_player_mode).w
	bne.s	loc_E2E4
	add.w	4(a3),d4
	add.w	(a3),d5
	andi.w	#$F0,d4
	andi.w	#$1F0,d5
	lsl.w	#4,d4
	lsr.w	#2,d5
	add.w	d5,d4
	moveq	#2,d0
	swap	d0
	move.w	d4,d0
	rts
; ===========================================================================
; interestingly, this subroutine was in the sonic 1 rom, unused
loc_E2E4:
	add.w	4(a3),d4
	add.w	(a3),d5
	andi.w	#$1F0,d4
	andi.w	#$1F0,d5
	lsl.w	#3,d4
	lsr.w	#2,d5
	add.w	d5,d4
	moveq	#2,d0
	swap	d0
	move.w	d4,d0
	rts
; End of function k

; ===========================================================================

loc_E300:
	lea	(VDP_control_port).l,a5
	lea	(VDP_data_port).l,a6
	lea	($FFFFEE08).w,a3
	lea	($FFFF8080).w,a4
	move.w	#$6000,d2
	moveq	#0,d4
	cmpi.b	#$C,(Current_Zone).w
	beq.w	loc_E338
	tst.w	(Two_player_mode).w
	beq.w	loc_E336
	cmpi.b	#$B,(Current_Zone).w
	beq.w	loc_E396

loc_E336:
	moveq	#-$10,d4

loc_E338:
	moveq	#$F,d6

loc_E33A:
	movem.l	d4-d6,-(sp)
	moveq	#0,d5
	move.w	d4,d1
	bsr.w	Calc_VRAM_Pos
	move.w	d1,d4
	moveq	#0,d5
	moveq	#$1F,d6
	move	#$2700,sr
	bsr.w	DrawTiles_Vertical
	move	#$2300,sr
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,loc_E33A
	rts
; ===========================================================================
	moveq	#-$10,d4
	moveq	#$F,d6

loc_E36A:
	movem.l	d4-d6,-(sp)
	moveq	#0,d5
	move.w	d4,d1
	bsr.w	loc_E2C2
	move.w	d1,d4
	moveq	#0,d5
	moveq	#$1F,d6
	move	#$2700,sr
	bsr.w	DrawTiles_Vertical
	move	#$2300,sr
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,loc_E36A
	rts
; ===========================================================================

loc_E396:
	moveq	#0,d4
	moveq	#$1F,d6

loc_E39A:
	movem.l	d4-d6,-(sp)
	moveq	#0,d5
	move.w	d4,d1
	bsr.w	loc_E2AC
	move.w	d1,d4
	moveq	#0,d5
	moveq	#$1F,d6
	move	#$2700,sr
	bsr.w	DrawTiles_Vertical3
	move	#$2300,sr
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,loc_E39A
	rts
; ===========================================================================

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; loadZoneBlockMaps

; Loads block and bigblock mappings for the current Zone.

loadZoneBlockMaps:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	lea	(LevelArtPointers).l,a2
	lea	(a2,d0.w),a2
	move.l	a2,-(sp)
	addq.w	#4,a2
	move.l	(a2)+,d0
	andi.l	#$FFFFFF,d0
	movea.l	d0,a0
	lea	(Block_Table).w,a1
	bsr.w	JmpTo_KosDec	; load block maps
	cmpi.b	#7,(Current_Zone).w
	bne.s	+
	lea	($FFFF9980).w,a1
	lea	(BM16_HTZ).l,a0
	bsr.w	JmpTo_KosDec	; patch for Hill Top Zone block map
+
	tst.w	(Two_player_mode).w
	beq.s	loc_E430
	lea	(Block_Table).w,a1
	move.w	#$BFF,d2

loc_E41A:
	move.w	(a1),d0
	move.w	d0,d1
	andi.w	#$F800,d0	; filter for upper five bits
	andi.w	#$7FF,d1	; filter for lower eleven bits (patternIndex)
	lsr.w	#1,d1		; dunno what this is about
	or.w	d1,d0
	move.w	d0,(a1)+
	dbf	d2,loc_E41A

loc_E430:
	move.l	(a2)+,d0
	andi.l	#$FFFFFF,d0
	movea.l	d0,a0
	lea	(Metablock_Table).l,a1
	bsr.w	JmpTo_KosDec
	bsr.w	loadLevelLayout
	movea.l	(sp)+,a2
	addq.w	#4,a2
	moveq	#0,d0
	move.b	(a2),d0
	beq.s	loc_E456
	bsr.w	JmpTo_LoadPLC

loc_E456:
	addq.w	#4,a2
	moveq	#0,d0
	move.b	(a2),d0
	bsr.w	JmpTo_PalLoad2
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


loadLevelLayout:
	moveq	#0,d0
	move.w	(Current_ZoneAndAct).w,d0
	ror.b	#1,d0
	lsr.w	#6,d0
	lea	(Off_Level).l,a0
	move.w	(a0,d0.w),d0
	lea	(a0,d0.l),a0
	lea	(Level_Layout).w,a1
	bra.w	JmpTo_KosDec
; End of function loadLevelLayout

; ===========================================================================
	lea	(Level_Layout).w,a3
	move.w	#$3FF,d1
	moveq	#0,d0

loc_E48C:
	move.l	d0,(a3)+
	dbf	d1,loc_E48C
	lea	(Level_Layout).w,a3
	moveq	#0,d1
	bsr.w	sub_E4A2
	lea	($FFFF8080).w,a3
	moveq	#2,d1

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E4A2:
	moveq	#0,d0
	move.w	(Current_ZoneAndAct).w,d0
	ror.b	#1,d0
	lsr.w	#5,d0
	add.w	d1,d0
	lea	(Off_Level).l,a1
	move.w	(a1,d0.w),d0
	lea	(a1,d0.l),a1
	moveq	#0,d1
	move.w	d1,d2
	move.b	(a1)+,d1
	move.b	(a1)+,d2
	move.l	d1,d5
	addq.l	#1,d5
	moveq	#0,d3
	move.w	#$80,d3
	divu.w	d5,d3
	subq.w	#1,d3

loc_E4D2:
	movea.l	a3,a0
	move.w	d3,d4

loc_E4D6:
	move.l	a1,-(sp)
	move.w	d1,d0

loc_E4DA:
	move.b	(a1)+,(a0)+
	dbf	d0,loc_E4DA
	movea.l	(sp)+,a1
	dbf	d4,loc_E4D6
	lea	(a1,d5.w),a1
	lea	$100(a3),a3
	dbf	d2,loc_E4D2
	rts
; End of function sub_E4A2

; ===========================================================================
	lea	($FE0000).l,a1
	lea	($FE0080).l,a2
	lea	(Metablock_Table).l,a3
	move.w	#$3F,d1

loc_E50A:
	bsr.w	sub_E59C
	bsr.w	sub_E59C
	dbf	d1,loc_E50A
	lea	($FE0000).l,a1
	lea	($FF0000).l,a2
	move.w	#$3F,d1

loc_E526:
	move.w	#0,(a2)+
	dbf	d1,loc_E526
	move.w	#$3FBF,d1

loc_E532:
	move.w	(a1)+,(a2)+
	dbf	d1,loc_E532
	rts
; ===========================================================================
	lea	($FE0000).l,a1
	lea	(Metablock_Table).l,a3
	moveq	#$1F,d0

loc_E548:
	move.l	(a1)+,(a3)+
	dbf	d0,loc_E548
	moveq	#0,d7
	lea	($FE0000).l,a1
	move.w	#$FF,d5

loc_E55A:

	lea	(Metablock_Table).l,a3
	move.w	d7,d6

loc_E562:
	movem.l	a1-a3,-(sp)
	move.w	#$3F,d0

loc_E56A:
	cmpm.w	(a1)+,(a3)+
	bne.s	loc_E580
	dbf	d0,loc_E56A
	movem.l	(sp)+,a1-a3
	adda.w	#$80,a1
	dbf	d5,loc_E55A
	bra.s	loc_E59A
; ===========================================================================

loc_E580:
	movem.l	(sp)+,a1-a3
	adda.w	#$80,a3
	dbf	d6,loc_E562
	moveq	#$1F,d0

loc_E58E:
	move.l	(a1)+,(a3)+
	dbf	d0,loc_E58E
	addq.l	#1,d7
	dbf	d5,loc_E55A

loc_E59A:

	bra.s	loc_E59A

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_E59C:

	moveq	#7,d0

loc_E59E:
	move.l	(a3)+,(a1)+
	move.l	(a3)+,(a1)+
	move.l	(a3)+,(a1)+
	move.l	(a3)+,(a1)+
	move.l	(a3)+,(a2)+
	move.l	(a3)+,(a2)+
	move.l	(a3)+,(a2)+
	move.l	(a3)+,(a2)+
	dbf	d0,loc_E59E
	adda.w	#$80,a1
	adda.w	#$80,a2
	rts
; End of function sub_E59C


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_PalLoad2 
	jmp	(PalLoad2).l
; End of function JmpTo_PalLoad2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_LoadPLC 
	jmp	(LoadPLC).l
; End of function JmpTo_LoadPLC


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_KosDec 
	jmp	(KosDec).l
; End of function JmpTo_KosDec

; ===========================================================================
	align 4




; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; screen resizing, earthquakage, etc

; sub_E5D0:
RunDynamicLevelEvents:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	move.w	DynamicLevelEventIndex(pc,d0.w),d0
	jsr	DynamicLevelEventIndex(pc,d0.w)
	moveq	#2,d1
	move.w	(Camera_Max_Y_pos).w,d0
	sub.w	(Camera_Max_Y_pos_now).w,d0
	beq.s	return_E60E
	bcc.s	loc_E610
	neg.w	d1
	move.w	(Camera_Y_pos).w,d0
	cmp.w	(Camera_Max_Y_pos).w,d0
	bls.s	loc_E604
	move.w	d0,(Camera_Max_Y_pos_now).w
	andi.w	#$FFFE,(Camera_Max_Y_pos_now).w

loc_E604:
	add.w	d1,(Camera_Max_Y_pos_now).w
	move.b	#1,($FFFFEEDE).w

return_E60E:
	rts
; ===========================================================================

loc_E610:
	move.w	(Camera_Y_pos).w,d0
	addi.w	#8,d0
	cmp.w	(Camera_Max_Y_pos_now).w,d0
	bcs.s	loc_E62A
	btst	#1,(MainCharacter+status).w
	beq.s	loc_E62A
	add.w	d1,d1
	add.w	d1,d1

loc_E62A:
	add.w	d1,(Camera_Max_Y_pos_now).w
	move.b	#1,($FFFFEEDE).w
	rts
; End of function RunDynamicLevelEvents

; ===========================================================================
; off_E636:
DynamicLevelEventIndex:
	dc.w LevEvents_EHZ  - DynamicLevelEventIndex	;   0 ; EHZ 
	dc.w LevEvents_001  - DynamicLevelEventIndex	;   1 ; LEV1
	dc.w LevEvents_002  - DynamicLevelEventIndex	;   2 ; LEV2
	dc.w LevEvents_003  - DynamicLevelEventIndex	;   3 ; LEV3
	dc.w LevEvents_MTZ  - DynamicLevelEventIndex	;   4 ; MTZ 
	dc.w LevEvents_MTZ3 - DynamicLevelEventIndex	;   5 ; MTZ3
	dc.w LevEvents_WFZ  - DynamicLevelEventIndex	;   6 ; WFZ 
	dc.w LevEvents_HTZ  - DynamicLevelEventIndex	;   7 ; HTZ 
	dc.w LevEvents_HPZ  - DynamicLevelEventIndex	;   8 ; HPZ 
	dc.w LevEvents_009  - DynamicLevelEventIndex	;   9 ; LEV9
	dc.w LevEvents_OOZ  - DynamicLevelEventIndex	;  $A ; OOZ 
	dc.w LevEvents_MCZ  - DynamicLevelEventIndex	;  $B ; MCZ 
	dc.w LevEvents_CNZ  - DynamicLevelEventIndex	;  $C ; CNZ 
	dc.w LevEvents_CPZ  - DynamicLevelEventIndex	;  $D ; CPZ 
	dc.w LevEvents_DEZ  - DynamicLevelEventIndex	;  $E ; DEZ 
	dc.w LevEvents_ARZ  - DynamicLevelEventIndex	;  $F ; ARZ 
	dc.w LevEvents_SCZ  - DynamicLevelEventIndex	; $10 ; SCZ 
; ===========================================================================
; loc_E658:
LevEvents_EHZ:
	tst.b	(Current_Act).w
	bne.s	LevEvents_EHZ2
	rts
; ---------------------------------------------------------------------------
LevEvents_EHZ2:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_EHZ2_Index(pc,d0.w),d0
	jmp	LevEvents_EHZ2_Index(pc,d0.w)
; ===========================================================================
; off_E66E:
LevEvents_EHZ2_Index:
	dc.w LevEvents_EHZ2_Routine1 - LevEvents_EHZ2_Index	; 0
	dc.w LevEvents_EHZ2_Routine2 - LevEvents_EHZ2_Index	; 2
	dc.w LevEvents_EHZ2_Routine3 - LevEvents_EHZ2_Index	; 4
	dc.w LevEvents_EHZ2_Routine4 - LevEvents_EHZ2_Index	; 6
; ===========================================================================
; loc_E676:
LevEvents_EHZ2_Routine1:
	tst.w	(Two_player_mode).w
	bne.s	loc_E6A2
	cmpi.w	#$2780,(Camera_X_pos).w
	bcs.s	return_E6A0
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$390,(Camera_Max_Y_pos).w
	move.w	#$390,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_EHZ2_Routine2

return_E6A0:
	rts
; ---------------------------------------------------------------------------
loc_E6A2:
	move.w	#$2920,(Camera_Max_X_pos).w
	move.w	#$2920,(Tails_Max_X_pos).w
	rts
; ===========================================================================
; loc_E6B0:
LevEvents_EHZ2_Routine2:
	cmpi.w	#$28F0,(Camera_X_pos).w
	bcs.s	return_E6EC
	move.w	#$28F0,(Camera_Min_X_pos).w
	move.w	#$2940,(Camera_Max_X_pos).w
	move.w	#$28F0,(Tails_Min_X_pos).w
	move.w	#$2940,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_EHZ2_Routine3
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#2,(Current_Boss_ID).w
	moveq	#$29,d0
	bsr.w	JmpTo2_LoadPLC

return_E6EC:
	rts
; ===========================================================================
; loc_E6EE:
LevEvents_EHZ2_Routine3:
	cmpi.w	#$388,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$388,(Camera_Min_Y_pos).w
	move.w	#$388,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_E736
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+

	move.b	#$56,(a1) ; load obj56 (EHZ boss)
	move.b	#$81,subtype(a1)
	move.w	#$29D0,x_pos(a1)
	move.w	#$426,y_pos(a1)
+
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_EHZ2_Routine4
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_E736:
	rts
; ===========================================================================
; loc_E738:
LevEvents_EHZ2_Routine4:
	tst.b	($FFFFF7A7).w
	beq.s	return_E750
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w

return_E750:
	rts

; ===========================================================================
; return_E752:
LevEvents_001:
	rts
; ===========================================================================
; return_E754:
LevEvents_002:
	rts
; ===========================================================================
; return_E756:
LevEvents_003:
	rts
; ===========================================================================
; return_E758:
LevEvents_MTZ:
	rts

; ===========================================================================
; loc_E75A:
LevEvents_MTZ3:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_MTZ3_Index(pc,d0.w),d0
	jmp	LevEvents_MTZ3_Index(pc,d0.w)
; ===========================================================================
; off_E768:
LevEvents_MTZ3_Index:
	dc.w LevEvents_MTZ3_Routine1 - LevEvents_MTZ3_Index	; 0
	dc.w LevEvents_MTZ3_Routine2 - LevEvents_MTZ3_Index	; 2
	dc.w LevEvents_MTZ3_Routine3 - LevEvents_MTZ3_Index	; 4
	dc.w LevEvents_MTZ3_Routine4 - LevEvents_MTZ3_Index	; 6
	dc.w LevEvents_MTZ3_Routine5 - LevEvents_MTZ3_Index	; 8
; ===========================================================================
; loc_E772:
LevEvents_MTZ3_Routine1:
	cmpi.w	#$2530,(Camera_X_pos).w
	bcs.s	return_E790
	move.w	#$500,(Camera_Max_Y_pos_now).w
	move.w	#$450,(Camera_Max_Y_pos).w
	move.w	#$450,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_MTZ3_Routine2

return_E790:
	rts
; ===========================================================================
; loc_E792:
LevEvents_MTZ3_Routine2:
	cmpi.w	#$2980,(Camera_X_pos).w
	bcs.s	return_E7B6
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$400,(Camera_Max_Y_pos).w
	move.w	#$400,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_MTZ3_Routine3

return_E7B6:
	rts
; ===========================================================================
; loc_E7B8:
LevEvents_MTZ3_Routine3:
	cmpi.w	#$2A80,(Camera_X_pos).w
	bcs.s	return_E7F4
	move.w	#$2AB0,(Camera_Min_X_pos).w
	move.w	#$2AB0,(Camera_Max_X_pos).w
	move.w	#$2AB0,(Tails_Min_X_pos).w
	move.w	#$2AB0,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_MTZ3_Routine4
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#7,(Current_Boss_ID).w
	moveq	#$2E,d0
	bsr.w	JmpTo2_LoadPLC

return_E7F4:
	rts
; ===========================================================================
; loc_E7F6:
LevEvents_MTZ3_Routine4:
	cmpi.w	#$400,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$400,(Camera_Min_Y_pos).w
	move.w	#$400,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_E82C
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$54,(a1) ; load obj54 (MTZ boss)
+
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_MTZ3_Routine5
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_E82C:
	rts
; ===========================================================================
; loc_E82E:
LevEvents_MTZ3_Routine5:
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	rts

; ===========================================================================
; loc_E842:
LevEvents_WFZ:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_WFZ_Index(pc,d0.w),d0
	jsr	LevEvents_WFZ_Index(pc,d0.w)
	move.w	($FFFFF660).w,d0
	move.w	LevEvents_WFZ_Index2(pc,d0.w),d0
	jmp	LevEvents_WFZ_Index2(pc,d0.w)
; ===========================================================================
; off_E85C:
LevEvents_WFZ_Index2:
	dc.w LevEvents_WFZ_Routine5 - LevEvents_WFZ_Index2	; 0
	dc.w LevEvents_WFZ_Routine6 - LevEvents_WFZ_Index2	; 2
	dc.w LevEvents_WFZ_RoutineNull - LevEvents_WFZ_Index2	; 4
; ===========================================================================
; off_E862:
LevEvents_WFZ_Index:
	dc.w LevEvents_WFZ_Routine1 - LevEvents_WFZ_Index	; 0
	dc.w LevEvents_WFZ_Routine2 - LevEvents_WFZ_Index	; 2
	dc.w LevEvents_WFZ_Routine3 - LevEvents_WFZ_Index	; 4
	dc.w LevEvents_WFZ_Routine4 - LevEvents_WFZ_Index	; 6
; ===========================================================================
; loc_E86A:
LevEvents_WFZ_Routine1:
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	d0,($FFFFEEE2).w
	move.w	d0,($FFFFEEE4).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_WFZ_Routine2
	rts
; ===========================================================================
; loc_E88E:
LevEvents_WFZ_Routine2:
	cmpi.w	#$2BC0,(Camera_X_pos).w
	bcs.s	+
	cmpi.w	#$580,(Camera_Y_pos).w
	bcs.s	+
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_WFZ_Routine3
	move.w	#0,($FFFFF662).w
+
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ===========================================================================
; loc_E8C0:
LevEvents_WFZ_Routine3:
	cmpi.w	#$800,($FFFFEEE2).w
	beq.s	+
	addq.w	#2,($FFFFEEE2).w
+
	cmpi.w	#$600,($FFFFEEE2).w
	blt.s	LevEvents_WFZ_Routine3_Part2
	move.w	($FFFFF662).w,d0
	moveq	#4,d1
	cmpi.w	#$840,d0
	bcc.s	+
	add.w	d1,d0
	move.w	d0,($FFFFF662).w
+
	lsr.w	#8,d0
	add.w	d0,($FFFFEEE4).w
; loc_E8EC:
LevEvents_WFZ_Routine3_Part2:
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ===========================================================================
; loc_E904:
LevEvents_WFZ_Routine4:
	cmpi.w	#-$2C0,($FFFFEEE2).w
	beq.s	loc_E932
	subi.w	#2,($FFFFEEE2).w
	cmpi.w	#$1B81,($FFFFEEE4).w
	beq.s	loc_E932
	move.w	($FFFFF662).w,d0
	beq.s	loc_E92C
	moveq	#4,d1
	neg.w	d1
	add.w	d1,d0
	move.w	d0,($FFFFF662).w
	lsr.w	#8,d0

loc_E92C:
	addq.w	#1,d0
	add.w	d0,($FFFFEEE4).w

loc_E932:
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ===========================================================================
; loc_E94A:
LevEvents_WFZ_Routine5:
	cmpi.w	#$2880,(Camera_X_pos).w
	bcs.s	return_E96A
	cmpi.w	#$400,(Camera_Y_pos).w
	bcs.s	return_E96A
	addq.w	#2,($FFFFF660).w ; => LevEvents_WFZ_Routine6
	moveq	#$3E,d0
	bsr.w	JmpTo2_LoadPLC
	move.w	#$2880,(Camera_Min_X_pos).w

return_E96A:
	rts
; ===========================================================================
; loc_E96C:
LevEvents_WFZ_Routine6:
	cmpi.w	#$500,(Camera_Y_pos).w
	bcs.s	return_E982
	addq.w	#2,($FFFFF660).w ; => LevEvents_WFZ_RoutineNull
	st	(Control_Locked).w
	moveq	#$3F,d0
	bsr.w	JmpTo2_LoadPLC

return_E982:
	rts
; ===========================================================================
; return_E984:
LevEvents_WFZ_RoutineNull:
	rts

; ===========================================================================
; loc_E986:
LevEvents_HTZ:
	tst.b	(Current_Act).w
	bne.w	LevEvents_HTZ2
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_HTZ_Index(pc,d0.w),d0
	jmp	LevEvents_HTZ_Index(pc,d0.w)
; ===========================================================================
; off_E99C:
LevEvents_HTZ_Index:
	dc.w LevEvents_HTZ_Routine1 - LevEvents_HTZ_Index
	dc.w LevEvents_HTZ_Routine2 - LevEvents_HTZ_Index	; 1
	dc.w LevEvents_HTZ_Routine3 - LevEvents_HTZ_Index	; 2
; ===========================================================================
; loc_E9A2:
LevEvents_HTZ_Routine1:
	cmpi.w	#$400,(Camera_Y_pos).w
	bcs.s	LevEvents_HTZ_Routine1_Part2
	cmpi.w	#$1800,(Camera_X_pos).w
	bcs.s	LevEvents_HTZ_Routine1_Part2
	move.b	#1,($FFFFEEBC).w
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	d0,($FFFFEEE2).w
	move.w	#320,($FFFFEEE4).w
	subi.w	#$100,($FFFFEE0C).w
	move.w	#0,($FFFFEEE6).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ_Routine2

return_E9E8:
	rts
; ===========================================================================

LevEvents_HTZ_Routine1_Part2:
	tst.b	($FFFFEEBC).w
	beq.s	return_E9E8
	move.w	#$200,d0
	moveq	#0,d1
	move.w	d1,($FFFFEEB4).w
	move.w	d1,($FFFFEEB6).w
	bsr.w	sub_EB78
	or.w	d0,d1
	bne.s	return_E9E8
	move.b	#0,($FFFFEEBC).w
	rts
; ===========================================================================
; loc_EA0E:
LevEvents_HTZ_Routine2:
	cmpi.w	#$1978,(Camera_X_pos).w
	bcs.w	LevEvents_HTZ_Routine2_Continue
	cmpi.w	#$1E00,(Camera_X_pos).w
	bcs.s	loc_EA28
	move.b	#0,($FFFFEEBD).w
	bra.s	LevEvents_HTZ_Routine2_Continue
; ---------------------------------------------------------------------------
loc_EA28:
	tst.b	($FFFFEEE8).w
	bne.s	loc_EA58
	cmpi.w	#320,($FFFFEEE4).w
	beq.s	loc_EA82
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	LevEvents_HTZ_Routine2_Continue
	addq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	LevEvents_HTZ_Routine2_Continue
	move.w	#$61+$80,d0 ; rumbling sound
	jsr	(PlaySound).l
	bra.s	LevEvents_HTZ_Routine2_Continue
; ---------------------------------------------------------------------------
loc_EA58:
	cmpi.w	#$E0,($FFFFEEE4).w
	beq.s	loc_EA82
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	LevEvents_HTZ_Routine2_Continue
	subq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	LevEvents_HTZ_Routine2_Continue
	move.w	#$E1,d0
	jsr	(PlaySound).l
	bra.s	LevEvents_HTZ_Routine2_Continue
; ---------------------------------------------------------------------------
loc_EA82:
	move.b	#0,($FFFFEEBD).w
	subq.w	#1,($FFFFEEE6).w
	bpl.s	LevEvents_HTZ_Routine2_Continue
	move.w	#$78,($FFFFEEE6).w
	eori.b	#1,($FFFFEEE8).w
	move.b	#1,($FFFFEEBD).w

; loc_EAA0:
LevEvents_HTZ_Routine2_Continue:

	cmpi.w	#$1800,(Camera_X_pos).w
	bcs.s	loc_EAC8
	cmpi.w	#$1F00,(Camera_X_pos).w
	bcc.s	loc_EAEE
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ---------------------------------------------------------------------------
loc_EAC8:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	subq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ_Routine1
	move.w	#$78+$80,d0
	jsr	(PlaySound).l
	rts
; ---------------------------------------------------------------------------
loc_EAEE:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ_Routine3
	move.w	#$78+$80,d0
	jsr	(PlaySound).l
	rts

; ===========================================================================
; loc_EB14:
LevEvents_HTZ_Routine3:
	cmpi.w	#$1F00,(Camera_X_pos).w
	bcc.s	LevEvents_HTZ_Routine3_Part2
	move.b	#1,($FFFFEEBC).w
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	d0,($FFFFEEE2).w
	move.w	#320,($FFFFEEE4).w
	subi.w	#$100,($FFFFEE0C).w
	move.w	#0,($FFFFEEE6).w
	subq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ_Routine2

return_EB52:
	rts
; ---------------------------------------------------------------------------
; loc_EB54:
LevEvents_HTZ_Routine3_Part2:
	tst.b	($FFFFEEBC).w
	beq.s	return_EB52
	move.w	#$200,d0
	moveq	#0,d1
	move.w	d1,($FFFFEEB4).w
	move.w	d1,($FFFFEEB6).w
	bsr.w	sub_EB78
	or.w	d0,d1
	bne.s	return_EB52
	move.b	#0,($FFFFEEBC).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; something for dynamic level events

sub_EB78:

	sub.w	($FFFFEE08).w,d0
	sub.w	($FFFFEEE2).w,d0
	bpl.s	loc_EB8E
	cmpi.w	#-$10,d0
	bgt.s	+
	move.w	#-$10,d0
+
	bra.s	loc_EB98
; ===========================================================================

loc_EB8E:
	cmpi.w	#$10,d0
	bcs.s	loc_EB98
	move.w	#$10,d0

loc_EB98:
	move.b	d0,($FFFFEEB4).w
	sub.w	($FFFFEE0C).w,d1
	sub.w	($FFFFEEE4).w,d1
	bpl.s	loc_EBB2
	cmpi.w	#-$10,d1
	bgt.s	+
	move.w	#-$10,d1
+
	bra.s	loc_EBBC
; ===========================================================================

loc_EBB2:
	cmpi.w	#$10,d1
	bcs.s	loc_EBBC
	move.w	#$10,d1

loc_EBBC:
	move.b	d1,($FFFFEEB6).w
	rts
; End of function sub_EB78

; ===========================================================================
	; unused/dead code
	btst	#0,(Ctrl_2_Held).w
	beq.s	+
	tst.w	($FFFFEEE4).w
	beq.s	+
	subq.w	#1,($FFFFEEE4).w
+
	btst	#1,(Ctrl_2_Held).w
	beq.s	+
	cmpi.w	#$700,($FFFFEEE4).w
	beq.s	+
	addq.w	#1,($FFFFEEE4).w
+
	rts
; ===========================================================================

; sub_EBEA:
LevEvents_HTZ2:
	bsr.w	LevEvents_HTZ2_Prepare
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_HTZ2_Index(pc,d0.w),d0
	jmp	LevEvents_HTZ2_Index(pc,d0.w)
; ===========================================================================
; off_EBFC:
LevEvents_HTZ2_Index:
	dc.w LevEvents_HTZ2_Routine1 - LevEvents_HTZ2_Index	;  0
	dc.w LevEvents_HTZ2_Routine2 - LevEvents_HTZ2_Index	;  2
	dc.w LevEvents_HTZ2_Routine3 - LevEvents_HTZ2_Index	;  4
	dc.w LevEvents_HTZ2_Routine4 - LevEvents_HTZ2_Index	;  6
	dc.w LevEvents_HTZ2_Routine5 - LevEvents_HTZ2_Index	;  8
	dc.w LevEvents_HTZ2_Routine6 - LevEvents_HTZ2_Index	; $A
	dc.w LevEvents_HTZ2_Routine7 - LevEvents_HTZ2_Index	; $C
	dc.w LevEvents_HTZ2_Routine8 - LevEvents_HTZ2_Index	; $E
	dc.w LevEvents_HTZ2_Routine9 - LevEvents_HTZ2_Index	;$10
; ===========================================================================
; loc_EC0E:
LevEvents_HTZ2_Routine1:
	cmpi.w	#$14C0,(Camera_X_pos).w
	bcs.s	loc_EC6C
	move.b	#1,($FFFFEEBC).w
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	d0,($FFFFEEE2).w
	move.w	#$2C0,($FFFFEEE4).w
	subi.w	#$100,($FFFFEE0C).w
	move.w	#0,($FFFFEEE6).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine2
	cmpi.w	#$380,(Camera_Y_pos).w
	bcs.s	return_EC6A
	move.w	#-$680,($FFFFEEE2).w
	addi.w	#$480,($FFFFEE08).w
	move.w	#$300,($FFFFEEE4).w
	addq.b	#6,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine5

return_EC6A:
	rts
; ---------------------------------------------------------------------------
loc_EC6C:
	tst.b	($FFFFEEBC).w
	beq.s	return_EC6A
	move.w	#$200,d0
	moveq	#0,d1
	move.w	d1,($FFFFEEB4).w
	move.w	d1,($FFFFEEB6).w
	bsr.w	sub_EB78
	or.w	d0,d1
	bne.s	return_EC6A
	move.b	#0,($FFFFEEBC).w
	rts

; ===========================================================================
; loc_EC90:
LevEvents_HTZ2_Routine2:
	cmpi.w	#$1678,(Camera_X_pos).w
	bcs.w	LevEvents_HTZ2_Routine2_Continue
	cmpi.w	#$1A00,(Camera_X_pos).w
	bcs.s	loc_ECAA
	move.b	#0,($FFFFEEBD).w
	bra.s	LevEvents_HTZ2_Routine2_Continue
; ---------------------------------------------------------------------------
loc_ECAA:
	tst.b	($FFFFEEE8).w
	bne.s	loc_ECDA
	cmpi.w	#$2C0,($FFFFEEE4).w
	beq.s	loc_ED04
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	LevEvents_HTZ2_Routine2_Continue
	addq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	LevEvents_HTZ2_Routine2_Continue
	move.w	#$E1,d0
	jsr	(PlaySound).l
	bra.s	LevEvents_HTZ2_Routine2_Continue
; ---------------------------------------------------------------------------
loc_ECDA:
	cmpi.w	#0,($FFFFEEE4).w
	beq.s	loc_ED04
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	LevEvents_HTZ2_Routine2_Continue
	subq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	LevEvents_HTZ2_Routine2_Continue
	move.w	#$E1,d0
	jsr	(PlaySound).l
	bra.s	LevEvents_HTZ2_Routine2_Continue
; ---------------------------------------------------------------------------
loc_ED04:
	move.b	#0,($FFFFEEBD).w
	subq.w	#1,($FFFFEEE6).w
	bpl.s	LevEvents_HTZ2_Routine2_Continue
	move.w	#$78,($FFFFEEE6).w
	eori.b	#1,($FFFFEEE8).w
	move.b	#1,($FFFFEEBD).w

; loc_ED22:
LevEvents_HTZ2_Routine2_Continue:

	cmpi.w	#$14C0,(Camera_X_pos).w
	bcs.s	loc_ED4A
	cmpi.w	#$1B00,(Camera_X_pos).w
	bcc.s	loc_ED70
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ---------------------------------------------------------------------------
loc_ED4A:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	subq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine1
	move.w	#$F8,d0
	jsr	(PlaySound).l
	rts
; ---------------------------------------------------------------------------
loc_ED70:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine3
	move.w	#$F8,d0
	jsr	(PlaySound).l
	rts
; ===========================================================================
; loc_ED96:
LevEvents_HTZ2_Routine3:
	cmpi.w	#$1B00,(Camera_X_pos).w
	bcc.s	loc_EDD6
	move.b	#1,($FFFFEEBC).w
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	d0,($FFFFEEE2).w
	move.w	#$2C0,($FFFFEEE4).w
	subi.w	#$100,($FFFFEE0C).w
	move.w	#0,($FFFFEEE6).w
	subq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine2

return_EDD4:
	rts
; ===========================================================================

loc_EDD6:
	tst.b	($FFFFEEBC).w
	beq.s	return_EDD4
	move.w	#$200,d0
	moveq	#0,d1
	move.w	d1,($FFFFEEB4).w
	move.w	d1,($FFFFEEB6).w
	bsr.w	sub_EB78
	or.w	d0,d1
	bne.s	return_EDD4
	move.b	#0,($FFFFEEBC).w
	rts
; ===========================================================================
; loc_EDFA:
LevEvents_HTZ2_Routine4:
	cmpi.w	#$15F0,(Camera_X_pos).w
	bcs.w	loc_EE84
	cmpi.w	#$1AC0,(Camera_X_pos).w
	bcc.s	loc_EE84
	tst.b	($FFFFEEE8).w
	bne.s	loc_EE3C
	cmpi.w	#$300,($FFFFEEE4).w
	beq.s	loc_EE66
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	loc_EE84
	addq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	loc_EE84
	move.w	#$E1,d0
	jsr	(PlaySound).l
	bra.s	loc_EE84
; ===========================================================================

loc_EE3C:
	cmpi.w	#0,($FFFFEEE4).w
	beq.s	loc_EE66
	move.w	(Timer_frames).w,d0
	move.w	d0,d1
	andi.w	#3,d0
	bne.s	loc_EE84
	subq.w	#1,($FFFFEEE4).w
	andi.w	#$3F,d1
	bne.s	loc_EE84
	move.w	#$E1,d0
	jsr	(PlaySound).l
	bra.s	loc_EE84
; ===========================================================================

loc_EE66:

	move.b	#0,($FFFFEEBD).w
	subq.w	#1,($FFFFEEE6).w
	bpl.s	loc_EE84
	move.w	#$78,($FFFFEEE6).w
	eori.b	#1,($FFFFEEE8).w
	move.b	#1,($FFFFEEBD).w

loc_EE84:

	cmpi.w	#$14C0,(Camera_X_pos).w
	bcs.s	loc_EEAC
	cmpi.w	#$1B00,(Camera_X_pos).w
	bcc.s	loc_EED2
	move.w	($FFFFEEB0).w,($FFFFEEB4).w
	move.w	($FFFFEEB2).w,($FFFFEEB6).w
	move.w	(Camera_X_pos).w,d0
	move.w	(Camera_Y_pos).w,d1
	bra.w	sub_EB78
; ===========================================================================

loc_EEAC:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	subq.b	#6,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine1
	move.w	#$F8,d0
	jsr	(PlaySound).l
	rts
; ===========================================================================

loc_EED2:
	move.l	#$4000000,($FFFFEE08).w
	moveq	#0,d0
	move.l	d0,($FFFFEE0C).w
	move.l	d0,($FFFFEEE2).w
	move.b	d0,($FFFFEEE8).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine5
	move.w	#$F8,d0
	jsr	(PlaySound).l
	rts
; ===========================================================================
; loc_EEF8:
LevEvents_HTZ2_Routine5:
	cmpi.w	#$1B00,(Camera_X_pos).w
	bcc.s	loc_EF40
	move.b	#1,($FFFFEEBC).w
	move.l	(Camera_X_pos).w,($FFFFEE08).w
	move.l	(Camera_Y_pos).w,($FFFFEE0C).w
	moveq	#0,d0
	move.w	d0,($FFFFEEB4).w
	move.w	d0,($FFFFEEB6).w
	move.w	#-$680,($FFFFEEE2).w
	addi.w	#$480,($FFFFEE08).w
	move.w	#$300,($FFFFEEE4).w
	subi.w	#$100,($FFFFEE0C).w
	move.w	#0,($FFFFEEE6).w
	subq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine4

return_EF3E:

	rts
; ===========================================================================

loc_EF40:
	tst.b	($FFFFEEBC).w
	beq.s	return_EF3E
	move.w	#$200,d0
	moveq	#0,d1
	move.w	d1,($FFFFEEB4).w
	move.w	d1,($FFFFEEB6).w
	bsr.w	sub_EB78
	or.w	d0,d1
	bne.s	return_EF3E
	move.b	#0,($FFFFEEBC).w
	rts
; ===========================================================================
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_EF66:
LevEvents_HTZ2_Prepare:
	cmpi.w	#$2B00,(Camera_X_pos).w
	bcs.s	return_EF82
	cmpi.b	#$A,(Dynamic_Resize_Routine).w
	bge.s	return_EF82
	move.b	#$A,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine6
	move.b	#0,($FFFFEEBC).w

return_EF82:
	rts
; End of function LevEvents_HTZ2_Prepare

; ===========================================================================
; loc_EF84:
LevEvents_HTZ2_Routine6:
	cmpi.w	#$2C50,(Camera_X_pos).w
	bcs.s	return_EFA8
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$480,(Camera_Max_Y_pos).w
	move.w	#$480,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine7

return_EFA8:
	rts
; ===========================================================================
; loc_EFAA:
LevEvents_HTZ2_Routine7:
	cmpi.w	#$2EDF,(Camera_X_pos).w
	bcs.s	return_EFE6
	move.w	#$2EE0,(Camera_Min_X_pos).w
	move.w	#$2F5E,(Camera_Max_X_pos).w
	move.w	#$2EE0,(Tails_Min_X_pos).w
	move.w	#$2F5E,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine8
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#3,(Current_Boss_ID).w
	moveq	#$2A,d0
	bra.w	JmpTo2_LoadPLC
; ===========================================================================

return_EFE6:
	rts
; ===========================================================================
; loc_EFE8:
LevEvents_HTZ2_Routine8:
	cmpi.w	#$478,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$478,(Camera_Min_Y_pos).w
	move.w	#$478,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F01E
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$52,(a1) ; load obj52 (HTZ boss)
+
	addq.b	#2,(Dynamic_Resize_Routine).w ; => LevEvents_HTZ2_Routine9
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F01E:
	rts
; ===========================================================================
; loc_F020:
LevEvents_HTZ2_Routine9:
	tst.b	($FFFFF7A7).w
	beq.s	return_F058
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	cmpi.w	#$30E0,(Camera_X_pos).w
	bcs.s	return_F058
	cmpi.w	#$428,(Camera_Min_Y_pos).w
	bcs.s	+
	subq.w	#2,(Camera_Min_Y_pos).w
+
	cmpi.w	#$430,(Camera_Max_Y_pos).w
	bcs.s	return_F058
	subq.w	#2,(Camera_Max_Y_pos).w

return_F058:
	rts

; ===========================================================================
; return_F05A:
LevEvents_HPZ:
	rts

; ===========================================================================
; return_F05C:
LevEvents_009:
	rts

; ===========================================================================
; loc_F05E:
LevEvents_OOZ:
	tst.b	(Current_Act).w
	bne.s	LevEvents_OOZ2
	rts
; ---------------------------------------------------------------------------
; loc_F066:
LevEvents_OOZ2:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_OOZ2_Index(pc,d0.w),d0
	jmp	LevEvents_OOZ2_Index(pc,d0.w)
; ===========================================================================
; off_F074:
LevEvents_OOZ2_Index:
	dc.w LevEvents_OOZ2_Routine1 - LevEvents_OOZ2_Index	; 0
	dc.w LevEvents_OOZ2_Routine2 - LevEvents_OOZ2_Index	; 2
	dc.w LevEvents_OOZ2_Routine3 - LevEvents_OOZ2_Index	; 4
	dc.w LevEvents_OOZ2_Routine4 - LevEvents_OOZ2_Index	; 6
; ===========================================================================
; loc_F07C:
LevEvents_OOZ2_Routine1:
	cmpi.w	#$2668,(Camera_X_pos).w
	bcs.s	return_F0A6
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$2D8,(Object_RAM+$380+y_pos).w
	move.w	#$1E0,(Camera_Max_Y_pos).w
	move.w	#$1E0,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F0A6:
	rts
; ===========================================================================
; loc_F0A8:
LevEvents_OOZ2_Routine2:
	cmpi.w	#$2880,(Camera_X_pos).w
	bcs.s	return_F0EA
	move.w	#$2880,(Camera_Min_X_pos).w
	move.w	#$28C0,(Camera_Max_X_pos).w
	move.w	#$2880,(Tails_Min_X_pos).w
	move.w	#$28C0,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#8,(Current_Boss_ID).w
	moveq	#$2F,d0
	bsr.w	JmpTo2_LoadPLC
	moveq	#$25,d0
	bsr.w	JmpTo2_PalLoad2

return_F0EA:
	rts
; ===========================================================================
; loc_F0EC:
LevEvents_OOZ2_Routine3:
	cmpi.w	#$1D8,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$1D8,(Camera_Min_Y_pos).w
	move.w	#$1D8,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F122
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$55,(a1) ; load obj55 (OOZ boss)
+
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F122:
	rts
; ===========================================================================
; loc_F124:
LevEvents_OOZ2_Routine4:
	tst.b	($FFFFF7A7).w
	beq.s	return_F13C
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w

return_F13C:
	rts

; ===========================================================================
; loc_F13E:
LevEvents_MCZ:
	tst.b	(Current_Act).w
	bne.s	LevEvents_MCZ2
	rts
; ---------------------------------------------------------------------------
; loc_F146:
LevEvents_MCZ2:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	LevEvents_MCZ2_Index(pc,d0.w),d0
	jmp	LevEvents_MCZ2_Index(pc,d0.w)
; ===========================================================================
; off_F154:
LevEvents_MCZ2_Index:
	dc.w LevEvents_MCZ2_Routine1 - LevEvents_MCZ2_Index	; 0
	dc.w LevEvents_MCZ2_Routine2 - LevEvents_MCZ2_Index	; 2
	dc.w LevEvents_MCZ2_Routine3 - LevEvents_MCZ2_Index	; 4
	dc.w LevEvents_MCZ2_Routine4 - LevEvents_MCZ2_Index	; 6
; ===========================================================================
; loc_F15C:
LevEvents_MCZ2_Routine1:
	tst.w	(Two_player_mode).w
	bne.s	loc_F188
	cmpi.w	#$2080,(Camera_X_pos).w
	bcs.s	return_F186
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$5D0,(Camera_Max_Y_pos).w
	move.w	#$5D0,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F186:
	rts
; ---------------------------------------------------------------------------
loc_F188:
	move.w	#$2100,(Camera_Max_X_pos).w
	move.w	#$2100,(Tails_Max_X_pos).w
	rts
; ===========================================================================
; loc_F196:
LevEvents_MCZ2_Routine2:
	cmpi.w	#$20F0,(Camera_X_pos).w
	bcs.s	return_F204
	move.w	#$20F0,(Camera_Max_X_pos).w
	move.w	#$20F0,(Camera_Min_X_pos).w
	move.w	#$20F0,(Tails_Max_X_pos).w
	move.w	#$20F0,(Tails_Min_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.l	#$6C000002,(VDP_control_port).l
	lea	(VDP_data_port).l,a6
	lea	(ArtUnc_FallingRocks).l,a2
	moveq	#7,d0

-	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	move.l	(a2)+,(a6)
	dbf	d0,-

	move.b	#5,(Current_Boss_ID).w
	moveq	#$2C,d0
	bsr.w	JmpTo2_LoadPLC
	moveq	#$19,d0
	bsr.w	JmpTo2_PalLoad2

return_F204:
	rts
; ===========================================================================
; loc_F206:
LevEvents_MCZ2_Routine3:
	cmpi.w	#$5C8,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$5C8,(Camera_Min_Y_pos).w
	move.w	#$5C8,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F23C
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$57,(a1) ; load obj57 (MCZ boss)
+
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F23C:
	rts
; ===========================================================================
; loc_F23E:
LevEvents_MCZ2_Routine4:
	tst.b	($FFFFEEBD).w
	beq.s	+
	move.w	(Timer_frames).w,d0
	andi.w	#$1F,d0
	bne.s	+
	move.w	#$E1,d0
	bsr.w	JmpTo3_PlaySound
+
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	rts

; ===========================================================================
; loc_F26A:
LevEvents_CNZ:
	jsr	(SlotMachine).l
	tst.b	(Current_Act).w
	bne.s	loc_F278
	rts
; ===========================================================================

loc_F278:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	off_F286(pc,d0.w),d0
	jmp	off_F286(pc,d0.w)
; ===========================================================================
off_F286:
	dc.w loc_F28E-off_F286
	dc.w loc_F2CE-off_F286	; 1
	dc.w loc_F318-off_F286	; 2
	dc.w loc_F350-off_F286	; 3
; ===========================================================================

loc_F28E:
	tst.w	(Two_player_mode).w
	bne.s	loc_F2C0
	cmpi.w	#$27C0,(Camera_X_pos).w
	bcs.s	return_F2BE
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$62E,(Camera_Max_Y_pos).w
	move.w	#$62E,(Tails_Max_Y_pos).w
	move.b	#-7,($FFFF8C54).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F2BE:
	rts
; ===========================================================================

loc_F2C0:
	move.w	#$26A0,(Camera_Max_X_pos).w
	move.w	#$26A0,(Tails_Max_X_pos).w
	rts
; ===========================================================================

loc_F2CE:
	cmpi.w	#$2890,(Camera_X_pos).w
	bcs.s	return_F316
	move.b	#-7,($FFFF8C50).w
	move.w	#$2860,(Camera_Min_X_pos).w
	move.w	#$28E0,(Camera_Max_X_pos).w
	move.w	#$2860,(Tails_Min_X_pos).w
	move.w	#$28E0,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#6,(Current_Boss_ID).w
	moveq	#$2D,d0
	bsr.w	JmpTo2_LoadPLC
	moveq	#$1A,d0
	bsr.w	JmpTo2_PalLoad2

return_F316:
	rts
; ===========================================================================

loc_F318:
	cmpi.w	#$4E0,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$4E0,(Camera_Min_Y_pos).w
	move.w	#$4E0,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F34E
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$51,(a1) ; load obj51
+
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F34E:
	rts
; ===========================================================================

loc_F350:
	cmpi.w	#$2A00,(Camera_X_pos).w
	bcs.s	return_F376
	move.w	#$5D0,(Camera_Max_Y_pos).w
	move.w	#$5D0,(Tails_Max_Y_pos).w
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w

return_F376:
	rts
; ===========================================================================
; loc_F378:
LevEvents_CPZ:
	tst.b	(Current_Act).w
	bne.s	loc_F380
	rts
; ===========================================================================

loc_F380:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	off_F38E(pc,d0.w),d0
	jmp	off_F38E(pc,d0.w)
; ===========================================================================
off_F38E:
	dc.w loc_F396-off_F38E
	dc.w loc_F3BC-off_F38E	; 1
	dc.w loc_F3FA-off_F38E	; 2
	dc.w loc_F432-off_F38E	; 3
; ===========================================================================

loc_F396:
	cmpi.w	#$2680,(Camera_X_pos).w
	bcs.s	return_F3BA
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$450,(Camera_Max_Y_pos).w
	move.w	#$450,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F3BA:
	rts
; ===========================================================================

loc_F3BC:
	cmpi.w	#$2A20,(Camera_X_pos).w
	bcs.s	return_F3F8
	move.w	#$2A20,(Camera_Min_X_pos).w
	move.w	#$2A20,(Camera_Max_X_pos).w
	move.w	#$2A20,(Tails_Min_X_pos).w
	move.w	#$2A20,(Tails_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	move.b	#1,(Current_Boss_ID).w
	moveq	#$28,d0
	bra.w	JmpTo2_LoadPLC
; ===========================================================================

return_F3F8:
	rts
; ===========================================================================

loc_F3FA:
	cmpi.w	#$448,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$448,(Camera_Min_Y_pos).w
	move.w	#$448,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F430
	bsr.w	JmpTo_SingleObjLoad
	bne.s	+
	move.b	#$5D,(a1) ; load obj5D
+
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F430:
	rts
; ===========================================================================

loc_F432:
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	rts
; ===========================================================================
; loc_F446:
LevEvents_DEZ:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	off_F454(pc,d0.w),d0
	jmp	off_F454(pc,d0.w)
; ===========================================================================
off_F454:
	dc.w loc_F45E-off_F454
	dc.w return_F490-off_F454; 1
	dc.w loc_F492-off_F454	; 2
	dc.w loc_F4AC-off_F454	; 3
	dc.w return_F4CE-off_F454; 4
; ===========================================================================

loc_F45E:
	move.w	#320,d0
	cmp.w	(Camera_X_pos).w,d0
	bhi.s	return_F48E
	addq.b	#2,(Dynamic_Resize_Routine).w
	bsr.w	JmpTo_SingleObjLoad
	bne.s	return_F48E
	move.b	#$AF,(a1) ; load objAF (silver sonic)
	move.b	#$48,subtype(a1)
	move.w	#$348,x_pos(a1)
	move.w	#$A0,y_pos(a1)
	moveq	#$30,d0
	bra.w	JmpTo2_LoadPLC
; ===========================================================================

return_F48E:

	rts
; ===========================================================================

return_F490:
	rts
; ===========================================================================

loc_F492:
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	cmpi.w	#$300,(Camera_X_pos).w
	bcs.s	return_F4AA
	addq.b	#2,(Dynamic_Resize_Routine).w
	moveq	#$31,d0
	bra.w	JmpTo2_LoadPLC
; ===========================================================================

return_F4AA:
	rts
; ===========================================================================

loc_F4AC:
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	#$680,d0
	cmp.w	(Camera_X_pos).w,d0
	bhi.s	return_F4CC
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	d0,(Camera_Min_X_pos).w
	addi.w	#$C0,d0
	move.w	d0,(Camera_Max_X_pos).w

return_F4CC:
	rts
; ===========================================================================

return_F4CE:
	rts
; ===========================================================================
; loc_F4D0:
LevEvents_ARZ:
	tst.b	(Current_Act).w
	bne.s	loc_F4D8
	rts
; ===========================================================================

loc_F4D8:
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	off_F4E6(pc,d0.w),d0
	jmp	off_F4E6(pc,d0.w)
; ===========================================================================
off_F4E6:
	dc.w loc_F4EE-off_F4E6
	dc.w loc_F520-off_F4E6	; 1
	dc.w loc_F55C-off_F4E6	; 2
	dc.w loc_F58A-off_F4E6	; 3
; ===========================================================================

loc_F4EE:
	cmpi.w	#$2810,(Camera_X_pos).w
	bcs.s	return_F51E
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	move.w	#$400,(Camera_Max_Y_pos).w
	move.w	#$400,(Tails_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.b	#4,(Current_Boss_ID).w
	moveq	#$2B,d0
	bsr.w	JmpTo2_LoadPLC

return_F51E:
	rts
; ===========================================================================

loc_F520:
	cmpi.w	#$2A40,(Camera_X_pos).w
	bcs.s	return_F55A
	move.w	#$2A40,(Camera_Max_X_pos).w
	move.w	#$2A40,(Camera_Min_X_pos).w
	move.w	#$2A40,(Tails_Max_X_pos).w
	move.w	#$2A40,(Tails_Min_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$F9,d0
	bsr.w	JmpTo3_PlayMusic
	clr.b	($FFFFF73A).w
	bsr.w	JmpTo_SingleObjLoad
	bne.s	return_F55A
	move.b	#$89,(a1) ; load obj89

return_F55A:

	rts
; ===========================================================================

loc_F55C:
	cmpi.w	#$3F8,(Camera_Y_pos).w
	bcs.s	+
	move.w	#$3F8,(Camera_Min_Y_pos).w
	move.w	#$3F8,($FFFFEEFC).w
+
	addq.b	#1,($FFFFF73A).w
	cmpi.b	#$5A,($FFFFF73A).w
	bcs.s	return_F588
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.w	#$93,d0
	bsr.w	JmpTo3_PlayMusic

return_F588:
	rts
; ===========================================================================

loc_F58A:
	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
	rts
; ===========================================================================
; loc_F59E:
LevEvents_SCZ:
	tst.b	(Current_Act).w
	bne.w	return_F624
	moveq	#0,d0
	move.b	(Dynamic_Resize_Routine).w,d0
	move.w	off_F5B4(pc,d0.w),d0
	jmp	off_F5B4(pc,d0.w)
; ===========================================================================
off_F5B4:
	dc.w loc_F5BE-off_F5B4
	dc.w loc_F5D0-off_F5B4	; 1
	dc.w loc_F5F0-off_F5B4	; 2
	dc.w loc_F60A-off_F5B4	; 3
	dc.w return_F622-off_F5B4; 4
; ===========================================================================

loc_F5BE:
	move.w	#1,($FFFFF736).w
	move.w	#0,($FFFFF738).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	rts
; ===========================================================================

loc_F5D0:
	cmpi.w	#$1180,(Camera_X_pos).w
	bcs.s	return_F5EE
	move.w	#-1,($FFFFF736).w
	move.w	#1,($FFFFF738).w
	move.w	#$500,(Camera_Max_Y_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F5EE:
	rts
; ===========================================================================

loc_F5F0:
	cmpi.w	#$500,(Camera_Y_pos).w
	bcs.s	return_F608
	move.w	#1,($FFFFF736).w
	move.w	#0,($FFFFF738).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F608:
	rts
; ===========================================================================

loc_F60A:
	cmpi.w	#$1400,(Camera_X_pos).w
	bcs.s	return_F622
	move.w	#0,($FFFFF736).w
	move.w	#0,($FFFFF738).w
	addq.b	#2,(Dynamic_Resize_Routine).w

return_F622:

	rts
; ===========================================================================

return_F624:
	rts
; ===========================================================================

loc_F626:
	move.w	(Level_Music).w,d0
	bra.w	JmpTo3_PlayMusic
; ===========================================================================

loc_F62E:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	lea	(byte_13F62).l,a2
	move.b	(a2,d0.w),d0
	bsr.w	JmpTo2_LoadPLC
	moveq	#$41,d0
	bsr.w	JmpTo2_LoadPLC
	rts
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_SingleObjLoad 

	jmp	(SingleObjLoad).l
; End of function JmpTo_SingleObjLoad


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo3_PlaySound 
	jmp	(PlaySound).l
; End of function JmpTo3_PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_PalLoad2 

	jmp	(PalLoad2).l
; End of function JmpTo2_PalLoad2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_LoadPLC 

	jmp	(LoadPLC).l
; End of function JmpTo2_LoadPLC


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo3_PlayMusic 

	jmp	(PlayMusic).l
; End of function JmpTo3_PlayMusic

; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 11 - Bridge in Emerald Hill Zone and Hidden Palace Zone
; ----------------------------------------------------------------------------
; Sprite_F66C:
Obj11:
	btst	#6,render_flags(a0)
	bne.w	loc_F684
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj11_Index(pc,d0.w),d1
	jmp	Obj11_Index(pc,d1.w)
; ===========================================================================
loc_F684:
	move.w	#$180,d0
	bra.w	DisplaySprite3
; ===========================================================================
Obj11_Index: ; off_F68C:
	dc.w Obj11_Main-Obj11_Index
	dc.w Obj11_Action-Obj11_Index	; 1
	dc.w BranchTo_DisplaySprite-Obj11_Index	; 2
	dc.w Obj11_Action_HPZ-Obj11_Index	; 3
; ===========================================================================
; loc_F694:
Obj11_Main:
	addq.b	#2,routine(a0)
	move.l	#Obj11_MapUnc_FC70,mappings(a0)
	move.w	#$43B6,art_tile(a0)
	move.b	#3,priority(a0)
	cmpi.b	#8,(Current_Zone).w	; is this an HPZ bridge?
	bne.s	+			; if not, branch
	addq.b	#4,routine(a0)
	move.l	#Obj11_MapUnc_FC28,mappings(a0)
	move.w	#$6300,art_tile(a0)
+
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$80,width_pixels(a0)
	move.w	y_pos(a0),d2
	move.w	d2,objoff_3C(a0)
	move.w	x_pos(a0),d3
	lea	subtype(a0),a2	; copy bridge subtype to a2
	moveq	#0,d1
	move.b	(a2),d1		; copy a2 to d1
	move.w	d1,d0
	lsr.w	#1,d0
	lsl.w	#4,d0
	sub.w	d0,d3
	swap	d1
	move.w	#8,d1
	bsr.s	Obj11_MakeBdgSegment
	move.w	subtype(a1),d0
	subq.w	#8,d0
	move.w	d0,x_pos(a1)
	move.l	a1,objoff_30(a0)
	swap	d1
	subq.w	#8,d1
	bls.s	BranchTo_Obj11_Action
	move.w	d1,d4
	bsr.s	Obj11_MakeBdgSegment
	move.l	a1,objoff_34(a0)
	move.w	d4,d0
	add.w	d0,d0
	add.w	d4,d0
	move.w	$10(a1,d0.w),d0
	subq.w	#8,d0
	move.w	d0,x_pos(a1)

BranchTo_Obj11_Action 
	bra.s	Obj11_Action

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_F728:
Obj11_MakeBdgSegment:
	bsr.w	JmpTo_SingleObjLoad2
	bne.s	return_F778
	_move.b	0(a0),0(a1) ; load obj11
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	render_flags(a0),render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#$40,objoff_E(a1)
	move.b	d1,objoff_F(a1)
	subq.b	#1,d1

	lea	$10(a1),a2 ; dammit
-	move.w	d3,(a2)+
	move.w	d2,(a2)+
	move.w	#0,(a2)+
	addi.w	#$10,d3
	dbf	d1,-

return_F778:
	rts
; End of function Obj11_MakeBdgSegment

; ===========================================================================
; loc_F77A:
Obj11_Action:
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	+
	tst.b	objoff_3E(a0)
	beq.s	loc_F7BC
	subq.b	#4,objoff_3E(a0)
	bra.s	loc_F7B8
+
	andi.b	#$10,d0
	beq.s	loc_F7AC
	move.b	objoff_3F(a0),d0
	sub.b	objoff_3B(a0),d0
	beq.s	loc_F7AC
	bcc.s	loc_F7A8
	addq.b	#1,objoff_3F(a0)
	bra.s	loc_F7AC
; ---------------------------------------------------------------------------
loc_F7A8:
	subq.b	#1,objoff_3F(a0)
loc_F7AC:
	cmpi.b	#$40,objoff_3E(a0)
	beq.s	loc_F7B8
	addq.b	#4,objoff_3E(a0)

loc_F7B8:
	bsr.w	Obj11_Depress

loc_F7BC:
	moveq	#0,d1
	move.b	subtype(a0),d1
	lsl.w	#3,d1
	move.w	d1,d2
	addq.w	#8,d1
	add.w	d2,d2
	moveq	#8,d3
	move.w	x_pos(a0),d4
	bsr.w	sub_F872

loc_F7D4:
	tst.w	(Two_player_mode).w
	beq.s	loc_F7DC
	rts
; ---------------------------------------------------------------------------
loc_F7DC:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_F7F0
	rts
; ---------------------------------------------------------------------------
loc_F7F0:
	movea.l	objoff_30(a0),a1
	bsr.w	DeleteObject2
	cmpi.b	#8,subtype(a0)
	bls.s	+
	movea.l	objoff_34(a0),a1 ; a1=object
	bsr.w	DeleteObject2
+
	bra.w	DeleteObject
; ===========================================================================
; loc_F80C:
BranchTo_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================
; loc_F810:
Obj11_Action_HPZ:
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_F826
	tst.b	objoff_3E(a0)
	beq.s	loc_F852
	subq.b	#4,objoff_3E(a0)
	bra.s	loc_F84E
; ===========================================================================

loc_F826:
	andi.b	#$10,d0
	beq.s	loc_F842
	move.b	objoff_3F(a0),d0
	sub.b	objoff_3B(a0),d0
	beq.s	loc_F842
	bcc.s	loc_F83E
	addq.b	#1,objoff_3F(a0)
	bra.s	loc_F842
; ===========================================================================

loc_F83E:
	subq.b	#1,objoff_3F(a0)

loc_F842:

	cmpi.b	#$40,objoff_3E(a0)
	beq.s	loc_F84E
	addq.b	#4,objoff_3E(a0)

loc_F84E:
	bsr.w	Obj11_Depress

loc_F852:
	moveq	#0,d1
	move.b	subtype(a0),d1
	lsl.w	#3,d1
	move.w	d1,d2
	addq.w	#8,d1
	add.w	d2,d2
	moveq	#8,d3
	move.w	x_pos(a0),d4
	bsr.w	sub_F872
	bsr.w	sub_F912
	bra.w	loc_F7D4

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_F872:

	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	moveq	#$3B,d5
	movem.l	d1-d4,-(sp)
	bsr.s	+
	movem.l	(sp)+,d1-d4
	lea	(MainCharacter).w,a1 ; a1=character
	subq.b	#1,d6
	moveq	#$3F,d5
+
	btst	d6,status(a0)
	beq.s	loc_F8F0
	btst	#1,status(a1)
	bne.s	loc_F8AC
	moveq	#0,d0
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_F8AC
	cmp.w	d2,d0
	bcs.s	loc_F8BA

loc_F8AC:
	bclr	#3,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ===========================================================================

loc_F8BA:
	lsr.w	#4,d0
	move.b	d0,(a0,d5.w)
	movea.l	objoff_30(a0),a2
	cmpi.w	#8,d0
	bcs.s	loc_F8D2
	movea.l	objoff_34(a0),a2 ; a2=object
	subi.w	#8,d0

loc_F8D2:
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	move.w	$12(a2,d0.w),d0
	subq.w	#8,d0
	moveq	#0,d1
	move.b	y_radius(a1),d1
	sub.w	d1,d0
	move.w	d0,y_pos(a1)
	moveq	#0,d4
	rts
; ===========================================================================

loc_F8F0:
	move.w	d1,-(sp)
	bsr.w	JmpTo_loc_19D9C
	move.w	(sp)+,d1
	btst	d6,status(a0)
	beq.s	return_F910
	moveq	#0,d0
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	lsr.w	#4,d0
	move.b	d0,(a0,d5.w)

return_F910:
	rts
; End of function sub_F872


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_F912:
	moveq	#0,d0
	tst.w	(MainCharacter+x_vel).w
	bne.s	loc_F924
	move.b	($FFFFFE0F).w,d0
	andi.w	#$1C,d0
	lsr.w	#1,d0

loc_F924:
	moveq	#0,d2
	move.b	byte_F950+1(pc,d0.w),d2
	swap	d2
	move.b	byte_F950(pc,d0.w),d2
	moveq	#0,d0
	tst.w	(Sidekick+x_vel).w
	bne.s	loc_F942
	move.b	($FFFFFE0F).w,d0
	andi.w	#$1C,d0
	lsr.w	#1,d0

loc_F942:
	moveq	#0,d6
	move.b	byte_F950+1(pc,d0.w),d6
	swap	d6
	move.b	byte_F950(pc,d0.w),d6
	bra.s	loc_F960
; ===========================================================================
byte_F950:
	dc.b   1,  2
	dc.b   1,  2	; 2
	dc.b   1,  2	; 4
	dc.b   1,  2	; 6
	dc.b   0,  1	; 8
	dc.b   0,  0	; 10
	dc.b   0,  0	; 12
	dc.b   0,  1	; 14
; ===========================================================================

loc_F960:
	moveq	#-2,d3
	moveq	#-2,d4
	move.b	status(a0),d0
	andi.b	#8,d0
	beq.s	loc_F972
	move.b	objoff_3F(a0),d3

loc_F972:
	move.b	status(a0),d0
	andi.b	#$10,d0
	beq.s	loc_F980
	move.b	objoff_3B(a0),d4

loc_F980:
	movea.l	objoff_30(a0),a1
	lea	$45(a1),a2
	lea	$15(a1),a1
	moveq	#0,d1
	move.b	subtype(a0),d1
	subq.b	#1,d1
	moveq	#0,d5

loc_F996:
	moveq	#0,d0
	subq.w	#1,d3
	cmp.b	d3,d5
	bne.s	loc_F9A0
	move.w	d2,d0

loc_F9A0:
	addq.w	#2,d3
	cmp.b	d3,d5
	bne.s	loc_F9A8
	move.w	d2,d0

loc_F9A8:
	subq.w	#1,d3
	subq.w	#1,d4
	cmp.b	d4,d5
	bne.s	loc_F9B2
	move.w	d6,d0

loc_F9B2:
	addq.w	#2,d4
	cmp.b	d4,d5
	bne.s	loc_F9BA
	move.w	d6,d0

loc_F9BA:
	subq.w	#1,d4
	cmp.b	d3,d5
	bne.s	loc_F9C6
	swap	d2
	move.w	d2,d0
	swap	d2

loc_F9C6:
	cmp.b	d4,d5
	bne.s	loc_F9D0
	swap	d6
	move.w	d6,d0
	swap	d6

loc_F9D0:
	move.b	d0,(a1)
	addq.w	#1,d5
	addq.w	#6,a1
	cmpa.w	a2,a1
	bne.s	loc_F9E2
	movea.l	objoff_34(a0),a1 ; a1=object
	lea	$15(a1),a1

loc_F9E2:
	dbf	d1,loc_F996
	rts
; End of function sub_F912

; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; subroutine to make the bridge push down where Sonic or Tails walks over
; loc_F9E8:
Obj11_Depress:
	move.b	objoff_3E(a0),d0
	bsr.w	JmpTo_CalcSine
	move.w	d0,d4
	lea	(byte_FB28).l,a4
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#4,d0
	moveq	#0,d3
	move.b	objoff_3F(a0),d3
	move.w	d3,d2
	add.w	d0,d3
	moveq	#0,d5
	lea	(Obj11_DepressionOffsets-$80).l,a5
	move.b	(a5,d3.w),d5
	andi.w	#$F,d3
	lsl.w	#4,d3
	lea	(a4,d3.w),a3
	movea.l	objoff_30(a0),a1
	lea	$42(a1),a2
	lea	$12(a1),a1

loc_FA2C:
	moveq	#0,d0
	move.b	(a3)+,d0
	addq.w	#1,d0
	mulu.w	d5,d0
	mulu.w	d4,d0
	swap	d0
	add.w	objoff_3C(a0),d0
	move.w	d0,(a1)
	addq.w	#6,a1
	cmpa.w	a2,a1
	bne.s	loc_FA4C
	movea.l	objoff_34(a0),a1 ; a1=object
	lea	$12(a1),a1

loc_FA4C:
	dbf	d2,loc_FA2C
	moveq	#0,d0
	move.b	subtype(a0),d0
	moveq	#0,d3
	move.b	objoff_3F(a0),d3
	addq.b	#1,d3
	sub.b	d0,d3
	neg.b	d3
	bmi.s	return_FA96
	move.w	d3,d2
	lsl.w	#4,d3
	lea	(a4,d3.w),a3
	adda.w	d2,a3
	subq.w	#1,d2
	bcs.s	return_FA96

loc_FA72:
	moveq	#0,d0
	move.b	-(a3),d0
	addq.w	#1,d0
	mulu.w	d5,d0
	mulu.w	d4,d0
	swap	d0
	add.w	objoff_3C(a0),d0
	move.w	d0,(a1)
	addq.w	#6,a1
	cmpa.w	a2,a1
	bne.s	loc_FA92
	movea.l	objoff_34(a0),a1 ; a1=object
	lea	$12(a1),a1

loc_FA92:
	dbf	d2,loc_FA72

return_FA96:

	rts
; ===========================================================================
; seems to be bridge piece vertical position offset data
Obj11_DepressionOffsets: ; byte_FA98:
	dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0; 16
	dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0; 32
	dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0; 48
	dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0; 64
	dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0; 80
	dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0; 96
	dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0; 112
	dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0; 128
	dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2; 144

; something else important for bridge depression to work (phase? bridge size adjustment?)
byte_FB28:
	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
	dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 32
	dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 48
	dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 64
	dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
	dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 96
	dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0; 112
	dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0; 128
	dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0; 144
	dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0; 160
	dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0; 176
	dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0; 192
	dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0; 208
	dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0; 224
	dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0; 240
	dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF; 256
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj11_MapUnc_FC28:	BINCLUDE "mappings/sprite/obj11_a.bin"

; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj11_MapUnc_FC70:	BINCLUDE "mappings/sprite/obj11_b.bin"

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_FC88:
JmpTo_SingleObjLoad2 
	jmp	SingleObjLoad2.l
; End of function JmpTo_SingleObjLoad2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_19D9C 
	jmp	loc_19D9C.l
; End of function JmpTo_loc_19D9C


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_FC94:
JmpTo_CalcSine 
	jmp	(CalcSine).l
; End of function JmpTo_CalcSine

; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 15 - Swinging platform from Aquatic Ruin Zone
; ----------------------------------------------------------------------------
; Sprite_FC9C:
Obj15:
	btst	#6,render_flags(a0)
	bne.w	loc_FCB4
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj15_States(pc,d0.w),d1
	jmp	Obj15_States(pc,d1.w)
; ---------------------------------------------------------------------------
loc_FCB4:
	move.w	#$200,d0
	bra.w	DisplaySprite3
; ===========================================================================
; off_FCBC:
Obj15_States:
	dc.w Obj15_Init - Obj15_States		; 0
	dc.w Obj15_State2 - Obj15_States	; 2
	dc.w Obj15_Display - Obj15_States	; 4
	dc.w Obj15_State4 - Obj15_States	; 6
	dc.w Obj15_State5 - Obj15_States	; 8
	dc.w Obj15_State6 - Obj15_States	;$A
	dc.w Obj15_State7 - Obj15_States	;$C
; ===========================================================================
; loc_FCCA:
Obj15_Init:
	addq.b	#2,routine(a0)
	move.l	#Obj15_MapUnc_101E8,mappings(a0)
	move.w	#$43E3,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#$10,y_radius(a0)
	move.w	y_pos(a0),objoff_38(a0)
	move.w	x_pos(a0),objoff_3A(a0)
	cmpi.b	#$B,(Current_Zone).w
	bne.s	loc_FD22
	move.l	#Obj15_Obj7A_MapUnc_10256,mappings(a0)
	move.w	#0,art_tile(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#8,y_radius(a0)

loc_FD22:
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_FD44
	move.l	#Obj15_Obj83_MapUnc_1021E,mappings(a0)
	move.w	#0,art_tile(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#8,y_radius(a0)

loc_FD44:
	bsr.w	Adjust2PArtPointer
	moveq	#0,d1
	move.b	subtype(a0),d1
	bpl.s	loc_FD54
	addq.b	#4,routine(a0)

loc_FD54:
	move.b	d1,d4
	andi.b	#$70,d4
	andi.w	#$F,d1
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	bsr.w	JmpTo2_SingleObjLoad2
	bne.w	loc_FE24
	_move.b	0(a0),0(a1) ; load obj15
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	cmpi.b	#$20,d4
	bne.s	loc_FDC6
	move.b	#4,routine(a1)
	move.b	#4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#$50,y_radius(a1)
	bset	#4,render_flags(a1)
	move.b	#3,mapping_frame(a1)
	move.w	d2,x_pos(a1)
	addi.w	#$40,d3
	move.w	d3,y_pos(a1)
	addi.w	#$48,d3
	move.w	d3,y_pos(a0)
	bra.s	loc_FE20
; ===========================================================================

loc_FDC6:
	bset	#6,render_flags(a1)
	move.b	#$48,objoff_E(a1)
	move.b	d1,objoff_F(a1)
	subq.b	#1,d1
	lea	$10(a1),a2

-	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#1,(a2)+
	addi.w	#$10,d3
	dbf	d1,-

	move.b	#2,objoff_15(a1)
	move.w	objoff_28(a1),x_pos(a1)
	move.w	objoff_2A(a1),y_pos(a1)
	move.w	d2,objoff_28(a1)
	move.w	d3,objoff_2A(a1)
	move.b	#1,objoff_B(a1)
	addi.w	#8,d3
	move.w	d3,y_pos(a0)
	move.b	#$50,objoff_14(a1)
	bset	#4,render_flags(a1)

loc_FE20:
	move.l	a1,objoff_30(a0)

loc_FE24:
	move.w	#$8000,angle(a0)
	move.w	#0,objoff_3E(a0)
	move.b	subtype(a0),d1
	andi.w	#$70,d1
	move.b	d1,subtype(a0)
	cmpi.b	#$40,d1
	bne.s	Obj15_State2
	move.l	#Obj15_MapUnc_102DE,mappings(a0)
	move.b	#$A7,collision_flags(a0)

; loc_FE50:
Obj15_State2:
	move.w	x_pos(a0),-(sp)
	bsr.w	sub_FE70
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#0,d3
	move.b	y_radius(a0),d3
	addq.b	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_loc_19CE2
	bra.w	loc_1000C

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_FE70:

	moveq	#0,d0
	moveq	#0,d1
	move.b	($FFFFFE78).w,d0
	move.b	subtype(a0),d1
	beq.s	loc_FEC2
	cmpi.b	#$10,d1
	bne.s	loc_FE9E
	cmpi.b	#$3F,d0
	beq.s	loc_FE90
	bcc.s	loc_FEC2
	moveq	#$40,d0
	bra.s	loc_FEC2
; ===========================================================================

loc_FE90:
	move.w	#$D7,d0
	jsr	(PlaySoundLocal).l
	moveq	#$40,d0
	bra.s	loc_FEC2
; ===========================================================================

loc_FE9E:
	cmpi.b	#$20,d1
	beq.w	return_FF6C
	cmpi.b	#$30,d1
	bne.s	loc_FEB8
	cmpi.b	#$41,d0
	beq.s	loc_FE90
	bcs.s	loc_FEC2
	moveq	#$40,d0
	bra.s	loc_FEC2
; ===========================================================================

loc_FEB8:
	cmpi.b	#$40,d1
	bne.s	loc_FEC2
	bsr.w	loc_FF6E

loc_FEC2:
	move.b	objoff_2E(a0),d1
	cmp.b	d0,d1
	beq.w	return_FF6C
	move.b	d0,objoff_2E(a0)
	move.w	#$80,d1
	btst	#0,status(a0)
	beq.s	loc_FEE0
	neg.w	d0
	add.w	d1,d0

loc_FEE0:
	bsr.w	JmpTo2_CalcSine
	move.w	objoff_38(a0),d2
	move.w	objoff_3A(a0),d3
	moveq	#0,d6
	movea.l	objoff_30(a0),a1
	move.b	$F(a1),d6
	subq.w	#1,d6
	bcs.s	return_FF6C
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	moveq	#0,d4
	moveq	#0,d5
	lea	$10(a1),a2

-	movem.l	d4-d5,-(sp)
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,(a2)+
	move.w	d4,(a2)+
	movem.l	(sp)+,d4-d5
	add.l	d0,d4
	add.l	d1,d5
	addq.w	#2,a2
	dbf	d6,-

	movem.l	d4-d5,-(sp)
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	$28(a1),d2
	move.w	$2A(a1),d3
	move.w	d5,$28(a1)
	move.w	d4,$2A(a1)
	move.w	d2,8(a1)
	move.w	d3,$C(a1)
	movem.l	(sp)+,d4-d5
	asr.l	#1,d0
	asr.l	#1,d1
	add.l	d0,d4
	add.l	d1,d5
	swap	d4
	swap	d5
	add.w	objoff_38(a0),d4
	add.w	objoff_3A(a0),d5
	move.w	d4,y_pos(a0)
	move.w	d5,x_pos(a0)

return_FF6C:
	rts
; End of function sub_FE70

; ===========================================================================

loc_FF6E:
	tst.w	objoff_36(a0)
	beq.s	loc_FF7C
	subq.w	#1,objoff_36(a0)
	bra.w	loc_10006
; ===========================================================================

loc_FF7C:
	tst.b	objoff_34(a0)
	bne.s	loc_FFA2
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	objoff_3A(a0),d0
	addi.w	#$20,d0
	cmpi.w	#$40,d0
	bcc.s	loc_10006
	tst.w	(Debug_placement_mode).w
	bne.w	loc_10006
	move.b	#1,objoff_34(a0)

loc_FFA2:
	tst.b	objoff_3D(a0)
	beq.s	loc_FFD8
	move.w	objoff_3E(a0),d0
	addi.w	#8,d0
	move.w	d0,objoff_3E(a0)
	add.w	d0,angle(a0)
	cmpi.w	#$200,d0
	bne.s	loc_10006
	move.w	#0,objoff_3E(a0)
	move.w	#$8000,angle(a0)
	move.b	#0,objoff_3D(a0)
	move.w	#$3C,objoff_36(a0)
	bra.s	loc_10006
; ===========================================================================

loc_FFD8:
	move.w	objoff_3E(a0),d0
	subi.w	#8,d0
	move.w	d0,objoff_3E(a0)
	add.w	d0,angle(a0)
	cmpi.w	#$FE00,d0
	bne.s	loc_10006
	move.w	#0,objoff_3E(a0)
	move.w	#$4000,angle(a0)
	move.b	#1,objoff_3D(a0)

loc_10000:
	move.w	#$3C,objoff_36(a0)

loc_10006:
	move.b	angle(a0),d0
	rts
; ===========================================================================

loc_1000C:
	tst.w	(Two_player_mode).w
	beq.s	loc_10016
	bra.w	DisplaySprite
; ===========================================================================

loc_10016:
	move.w	objoff_3A(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	loc_1002E
	bra.w	DisplaySprite
; ===========================================================================

loc_1002E:
	movea.l	objoff_30(a0),a1
	bsr.w	DeleteObject2
	bra.w	DeleteObject
; ===========================================================================

Obj15_Display: ;;
	bra.w	DisplaySprite
; ===========================================================================

; loc_1003E:
Obj15_State4:
	move.w	x_pos(a0),-(sp)
	bsr.w	sub_FE70
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#0,d3
	move.b	y_radius(a0),d3
	addq.b	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_loc_19CE2
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.w	BranchTo_loc_1000C
	tst.b	($FFFFFE78).w
	bne.w	BranchTo_loc_1000C
	bsr.w	JmpTo2_SingleObjLoad2
	bne.s	loc_100E4
	moveq	#0,d0
	move.w	#$F,d1

loc_1007A:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_1007A
	move.b	#$A,routine(a1)
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_10098
	addq.b	#2,routine(a1)

loc_10098:
	move.w	#$200,x_vel(a1)
	btst	#0,status(a0)
	beq.s	loc_100AA
	neg.w	x_vel(a1)

loc_100AA:
	bset	#1,status(a1)
	move.w	a0,d0
	subi.w	#Object_RAM,d0
	lsr.w	#6,d0
	andi.w	#$7F,d0
	move.w	a1,d1
	subi.w	#Object_RAM,d1
	lsr.w	#6,d1
	andi.w	#$7F,d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.b	interact(a1),d0
	bne.s	loc_100D6
	move.b	d1,interact(a1)

loc_100D6:
	lea	(Sidekick).w,a1 ; a1=character
	cmp.b	interact(a1),d0
	bne.s	loc_100E4
	move.b	d1,interact(a1)

loc_100E4:

	move.b	#3,mapping_frame(a0)
	addq.b	#2,routine(a0)
	andi.b	#-$19,status(a0)

BranchTo_loc_1000C 

	bra.w	loc_1000C

; ===========================================================================
; loc_100F8:
Obj15_State5:
	bsr.w	sub_FE70
	bra.w	loc_1000C

; ===========================================================================
; loc_10100:
Obj15_State6:
	move.w	x_pos(a0),-(sp)
	btst	#1,status(a0)
	beq.s	loc_1013E
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	cmpi.w	#$720,y_pos(a0)
	bcs.s	loc_1014E
	move.w	#$720,y_pos(a0)
	bclr	#1,status(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	move.w	y_pos(a0),objoff_38(a0)
	bra.s	loc_1014E
; ===========================================================================

loc_1013E:
	moveq	#0,d0
	move.b	($FFFFFE74).w,d0
	lsr.w	#1,d0
	add.w	objoff_38(a0),d0
	move.w	d0,y_pos(a0)

loc_1014E:

	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#0,d3
	move.b	y_radius(a0),d3
	addq.b	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_loc_19CE2
	bra.w	MarkObjGone

; ===========================================================================
; loc_10166:
Obj15_State7:
	move.w	x_pos(a0),-(sp)
	bsr.w	ObjectMove
	btst	#1,status(a0)
	beq.s	loc_101A2
	addi.w	#$18,y_vel(a0)
	move.w	(Water_Level_2).w,d0
	cmp.w	y_pos(a0),d0
	bhi.s	loc_101D0
	move.w	d0,y_pos(a0)
	move.w	d0,objoff_38(a0)
	bclr	#1,status(a0)
	move.w	#$100,x_vel(a0)
	move.w	#0,y_vel(a0)
	bra.s	loc_101D0
; ===========================================================================

loc_101A2:
	moveq	#0,d0
	move.b	($FFFFFE74).w,d0
	lsr.w	#1,d0
	add.w	objoff_38(a0),d0
	move.w	d0,y_pos(a0)
	tst.w	x_vel(a0)
	beq.s	loc_101D0
	moveq	#0,d3
	move.b	width_pixels(a0),d3
	bsr.w	JmpTo_ObjCheckLeftWallDist
	tst.w	d1
	bpl.s	loc_101D0
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)

loc_101D0:

	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#0,d3
	move.b	y_radius(a0),d3
	addq.b	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_loc_19CE2
	bra.w	MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj15_MapUnc_101E8:	BINCLUDE "mappings/sprite/obj15_a.bin"

; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj15_Obj83_MapUnc_1021E:	BINCLUDE "mappings/sprite/obj83.bin"

; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj15_Obj7A_MapUnc_10256:	BINCLUDE "mappings/sprite/obj7A_a.bin"

; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj15_MapUnc_102DE:	BINCLUDE "mappings/sprite/obj15_b.bin"
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_19CE2 

	jmp	loc_19CE2
; End of function JmpTo_loc_19CE2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_SingleObjLoad2 

	jmp	SingleObjLoad2
; End of function JmpTo2_SingleObjLoad2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_CalcSine 
	jmp	(CalcSine).l
; End of function JmpTo2_CalcSine


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_ObjCheckLeftWallDist 
	jmp	ObjCheckLeftWallDist
; End of function JmpTo_ObjCheckLeftWallDist

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 17 - GHZ rotating log helix spikes (from Sonic 1, unused)
; the programming of this was modified somewhat between Sonic 1 and Sonic 2
; ----------------------------------------------------------------------------
; Sprite_10310:
Obj17:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj17_Index(pc,d0.w),d1
	jmp	Obj17_Index(pc,d1.w)
; ===========================================================================
; off_1031E:
Obj17_Index:
	dc.w Obj17_Init - Obj17_Index		; 0
	dc.w Obj17_Main - Obj17_Index		; 2
	dc.w Obj17_Display - Obj17_Index	; 4
; ===========================================================================
; loc_10324: Obj17_Main:
Obj17_Init:
	addq.b	#2,routine(a0)
	move.l	#Obj17_MapUnc_10452,mappings(a0)
	move.w	#$4398,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#8,width_pixels(a0)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	_move.b	0(a0),d4
	lea	subtype(a0),a2	; move helix length to a2
	moveq	#0,d1
	move.b	(a2),d1	; move a2 to d1
	move.b	#0,(a2)+
	move.w	d1,d0
	lsr.w	#1,d0
	lsl.w	#4,d0
	sub.w	d0,d3
	subq.b	#2,d1
	bcs.s	Obj17_Main
	moveq	#0,d6
; loc_10372:
Obj17_MakeHelix:
	jsr	SingleObjLoad2
	bne.s	Obj17_Main
	addq.b	#1,subtype(a0)
	move.w	a1,d5
	subi.w	#Object_RAM,d5
	lsr.w	#6,d5
	andi.w	#$7F,d5
	move.b	d5,(a2)+
	move.b	#4,routine(a1)
	_move.b	d4,0(a1) ; load obj17
	move.w	d2,y_pos(a1)
	move.w	d3,x_pos(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	#$4398,art_tile(a1)
	bsr.w	Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#8,width_pixels(a1)
	move.b	d6,objoff_3E(a1)
	addq.b	#1,d6
	andi.b	#7,d6
	addi.w	#$10,d3
	cmp.w	x_pos(a0),d3
	bne.s	loc_103E4
	move.b	d6,objoff_3E(a0)
	addq.b	#1,d6
	andi.b	#7,d6
	addi.w	#$10,d3
	addq.b	#1,subtype(a0)

loc_103E4:
	dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)

; loc_103E8: Obj17_Action:
Obj17_Main:
	bsr.w	Obj17_RotateSpike
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	Obj17_DelAll
	bra.w	DisplaySprite
; ===========================================================================
; loc_10404:
Obj17_DelAll:
	moveq	#0,d2
	lea	subtype(a0),a2	; move helix length to a2
	move.b	(a2)+,d2	; move a2 to d2
	subq.b	#2,d2
	bcs.s	BranchTo2_DeleteObject
; loc_10410:
Obj17_DelLoop:
	moveq	#0,d0
	move.b	(a2)+,d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a1 ; a1=object
	bsr.w	DeleteObject2	; delete object
	dbf	d2,Obj17_DelLoop	; repeat d2 times (helix length)
; loc_10426:
BranchTo2_DeleteObject 
	bra.w	DeleteObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1042A:
Obj17_RotateSpike:

	move.b	(Logspike_anim_frame).w,d0
	move.b	#0,collision_flags(a0)	; make object harmless
	add.b	objoff_3E(a0),d0
	andi.b	#7,d0
	move.b	d0,mapping_frame(a0)	; change current frame
	bne.s	return_10448
	move.b	#%10000100,collision_flags(a0)	; make object harmful

return_10448:
	rts
; End of function Obj17_RotateSpike

; ===========================================================================
; loc_1044A:
Obj17_Display:
	bsr.w	Obj17_RotateSpike
	bra.w	DisplaySprite
; ===========================================================================
; -----------------------------------------------------------------------------
; sprite mappings - helix of spikes on a pole (GHZ) (unused)
; -----------------------------------------------------------------------------
Obj17_MapUnc_10452:	BINCLUDE "mappings/sprite/obj17.bin"
; ===========================================================================
	nop
; ----------------------------------------------------------------------------
; Object 18 - Stationary floating platform from ARZ and EHZ
; ----------------------------------------------------------------------------
; Sprite_104AC:
Obj18:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_104BA(pc,d0.w),d1
	jmp	off_104BA(pc,d1.w)
; ===========================================================================
off_104BA:
	dc.w loc_104CE-off_104BA
	dc.w loc_1056A-off_104BA; 1
	dc.w BranchTo3_DeleteObject-off_104BA; 2
	dc.w loc_105A8-off_104BA; 3
	dc.w loc_105D4-off_104BA; 4
word_104C4:
	dc.w $2000
	dc.w $2001	; 1
	dc.w $2002	; 2
	dc.w $4003	; 3
	dc.w $3004	; 4
; ===========================================================================

loc_104CE:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$E,d0
	lea	word_104C4(pc,d0.w),a2
	move.b	(a2)+,width_pixels(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.l	#Obj18_MapUnc_107F6,mappings(a0)
	move.w	#$4000,art_tile(a0)
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_1050E
	move.l	#Obj18_MapUnc_1084E,mappings(a0)
	move.w	#$4000,art_tile(a0)

loc_1050E:
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),objoff_2C(a0)
	move.w	y_pos(a0),objoff_34(a0)
	move.w	x_pos(a0),objoff_32(a0)
	move.w	#$80,angle(a0)
	tst.b	subtype(a0)
	bpl.s	loc_10564
	addq.b	#6,routine(a0)
	andi.b	#$F,subtype(a0)
	move.b	#$30,y_radius(a0)
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_1055A
	move.b	#$28,y_radius(a0)

loc_1055A:
	bset	#4,render_flags(a0)
	bra.w	loc_105D4
; ===========================================================================

loc_10564:
	andi.b	#$F,subtype(a0)

loc_1056A:
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_10580
	tst.b	objoff_38(a0)
	beq.s	loc_1058C
	subq.b	#4,objoff_38(a0)
	bra.s	loc_1058C
; ===========================================================================

loc_10580:
	cmpi.b	#$40,objoff_38(a0)
	beq.s	loc_1058C
	addq.b	#4,objoff_38(a0)

loc_1058C:

	move.w	x_pos(a0),-(sp)
	bsr.w	sub_10638
	bsr.w	sub_1061E
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#8,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_PlatformObject
	bra.s	loc_105B0
; ===========================================================================

loc_105A8:
	bsr.w	sub_10638
	bsr.w	sub_1061E

loc_105B0:

	tst.w	(Two_player_mode).w
	beq.s	loc_105BA
	bra.w	DisplaySprite
; ===========================================================================

loc_105BA:
	move.w	objoff_32(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	BranchTo3_DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

BranchTo3_DeleteObject 

	bra.w	DeleteObject
; ===========================================================================

loc_105D4:

	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_105EA
	tst.b	objoff_38(a0)
	beq.s	loc_105F6
	subq.b	#4,objoff_38(a0)
	bra.s	loc_105F6
; ===========================================================================

loc_105EA:
	cmpi.b	#$40,objoff_38(a0)
	beq.s	loc_105F6
	addq.b	#4,objoff_38(a0)

loc_105F6:

	move.w	x_pos(a0),-(sp)
	bsr.w	sub_10638
	bsr.w	sub_1061E
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo_SolidObject
	bra.s	loc_105B0

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_1061E:

	move.b	objoff_38(a0),d0
	bsr.w	JmpTo3_CalcSine
	move.w	#$400,d1
	muls.w	d1,d0
	swap	d0
	add.w	objoff_2C(a0),d0
	move.w	d0,y_pos(a0)
	rts
; End of function sub_1061E


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_10638:

	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	add.w	d0,d0
	move.w	off_1064C(pc,d0.w),d1
	jmp	off_1064C(pc,d1.w)
; End of function sub_10638

; ===========================================================================
off_1064C:
	dc.w return_10668-off_1064C
	dc.w loc_1067A-off_1064C; 1
	dc.w loc_106C0-off_1064C; 2
	dc.w loc_106D8-off_1064C; 3
	dc.w loc_10702-off_1064C; 4
	dc.w loc_1066A-off_1064C; 5
	dc.w loc_106B0-off_1064C; 6
	dc.w loc_10778-off_1064C; 7
	dc.w loc_107A4-off_1064C; 8
	dc.w return_10668-off_1064C; 9
	dc.w loc_107BC-off_1064C; 10
	dc.w loc_107D6-off_1064C; 11
	dc.w loc_106A2-off_1064C; 12
	dc.w loc_10692-off_1064C; 13
; ===========================================================================

return_10668:
	rts
; ===========================================================================

loc_1066A:
	move.w	objoff_32(a0),d0
	move.b	angle(a0),d1
	neg.b	d1
	addi.b	#$40,d1
	bra.s	loc_10686
; ===========================================================================

loc_1067A:
	move.w	objoff_32(a0),d0
	move.b	angle(a0),d1
	subi.b	#$40,d1

loc_10686:
	ext.w	d1
	add.w	d1,d0
	move.w	d0,x_pos(a0)
	bra.w	loc_107EE
; ===========================================================================

loc_10692:
	move.w	objoff_34(a0),d0
	move.b	($FFFFFE6C).w,d1
	neg.b	d1
	addi.b	#$30,d1
	bra.s	loc_106CC
; ===========================================================================

loc_106A2:
	move.w	objoff_34(a0),d0
	move.b	($FFFFFE6C).w,d1
	subi.b	#$30,d1
	bra.s	loc_106CC
; ===========================================================================

loc_106B0:
	move.w	objoff_34(a0),d0
	move.b	angle(a0),d1
	neg.b	d1
	addi.b	#$40,d1
	bra.s	loc_106CC
; ===========================================================================

loc_106C0:
	move.w	objoff_34(a0),d0
	move.b	angle(a0),d1
	subi.b	#$40,d1

loc_106CC:

	ext.w	d1
	add.w	d1,d0
	move.w	d0,objoff_2C(a0)
	bra.w	loc_107EE
; ===========================================================================

loc_106D8:
	tst.w	objoff_3A(a0)
	bne.s	loc_106F0
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_106EE
	move.w	#$1E,objoff_3A(a0)

return_106EE:

	rts
; ===========================================================================

loc_106F0:
	subq.w	#1,objoff_3A(a0)
	bne.s	return_106EE
	move.w	#$20,objoff_3A(a0)
	addq.b	#1,subtype(a0)
	rts
; ===========================================================================

loc_10702:
	tst.w	objoff_3A(a0)
	beq.s	loc_10730
	subq.w	#1,objoff_3A(a0)
	bne.s	loc_10730
	bclr	#3,status(a0)
	beq.s	loc_1071C
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	sub_1075E

loc_1071C:
	bclr	#4,status(a0)
	beq.s	loc_1072A
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	sub_1075E

loc_1072A:
	move.b	#6,routine(a0)

loc_10730:

	move.l	objoff_2C(a0),d3
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d3,objoff_2C(a0)
	addi.w	#$38,y_vel(a0)
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$120,d0
	cmp.w	objoff_2C(a0),d0
	bcc.s	return_1075C
	move.b	#4,routine(a0)

return_1075C:
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_1075E:

	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.w	y_vel(a0),y_vel(a1)
	rts
; End of function sub_1075E

; ===========================================================================

loc_10778:
	tst.w	objoff_3A(a0)
	bne.s	loc_10798
	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#4,d0
	tst.b	(a2,d0.w)
	beq.s	return_10796
	move.w	#$3C,objoff_3A(a0)

return_10796:

	rts
; ===========================================================================

loc_10798:
	subq.w	#1,objoff_3A(a0)
	bne.s	return_10796
	addq.b	#1,subtype(a0)
	rts
; ===========================================================================

loc_107A4:
	subq.w	#2,objoff_2C(a0)
	move.w	objoff_34(a0),d0
	subi.w	#$200,d0
	cmp.w	objoff_2C(a0),d0
	bne.s	return_107BA
	clr.b	subtype(a0)

return_107BA:
	rts
; ===========================================================================

loc_107BC:
	move.w	objoff_34(a0),d0
	move.b	angle(a0),d1
	subi.b	#$40,d1
	ext.w	d1
	asr.w	#1,d1
	add.w	d1,d0
	move.w	d0,objoff_2C(a0)
	bra.w	loc_107EE
; ===========================================================================

loc_107D6:
	move.w	objoff_34(a0),d0
	move.b	angle(a0),d1
	neg.b	d1
	addi.b	#$40,d1
	ext.w	d1
	asr.w	#1,d1
	add.w	d1,d0
	move.w	d0,objoff_2C(a0)

loc_107EE:

	move.b	($FFFFFE78).w,angle(a0)
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj18_MapUnc_107F6:	BINCLUDE "mappings/sprite/obj18_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj18_MapUnc_1084E:	BINCLUDE "mappings/sprite/obj18_b.bin"
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo3_CalcSine 
	jmp	(CalcSine).l
; End of function JmpTo3_CalcSine


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_PlatformObject 
	jmp	PlatformObject
; End of function JmpTo_PlatformObject


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_SolidObject 
	jmp	SolidObject
; End of function JmpTo_SolidObject

; ===========================================================================
	dc.w 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1A - Collapsing platform from either OOZ or MCZ
; ----------------------------------------------------------------------------
; Sprite_108BC:
Obj1A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_108CA(pc,d0.w),d1
	jmp	off_108CA(pc,d1.w)
; ===========================================================================
off_108CA:
	dc.w loc_108D0-off_108CA
	dc.w loc_1097C-off_108CA; 1
	dc.w loc_109B4-off_108CA; 2
; ===========================================================================

loc_108D0:
	addq.b	#2,routine(a0)
	move.l	#Obj1A_MapUnc_10C6C,mappings(a0)
	move.w	#$4000,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#7,objoff_38(a0)
	move.b	subtype(a0),mapping_frame(a0)
	move.l	#byte_10BF2,objoff_34(a0)
	cmpi.b	#8,(Current_Zone).w
	bne.s	loc_10938
	move.l	#Obj1A_MapUnc_1101C,mappings(a0)
	move.w	#$434A,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$30,width_pixels(a0)
	move.l	#byte_10FEC,objoff_3C(a0)
	move.l	#byte_10C0B,objoff_34(a0)
	bra.s	loc_1097C
; ===========================================================================

loc_10938:
	cmpi.b	#$A,(Current_Zone).w
	bne.s	loc_10962
	move.l	#Obj1F_MapUnc_110C6,mappings(a0)
	move.w	#$639D,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$40,width_pixels(a0)
	move.l	#byte_10FDC,objoff_3C(a0)
	bra.s	loc_1097C
; ===========================================================================

loc_10962:
	move.l	#byte_10C3C,objoff_3C(a0)
	move.b	#$34,width_pixels(a0)
	move.b	#$38,y_radius(a0)
	bset	#4,render_flags(a0)

loc_1097C:


	tst.b	objoff_3A(a0)
	beq.s	loc_1098E
	tst.b	objoff_38(a0)
	beq.w	loc_10B68
	subq.b	#1,objoff_38(a0)

loc_1098E:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	sub_1099E
	move.b	#1,objoff_3A(a0)

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_1099E:

	moveq	#0,d1
	move.b	width_pixels(a0),d1
	movea.l	objoff_3C(a0),a2 ; a2=object
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_SlopeObject
	bra.w	MarkObjGone
; End of function sub_1099E

; ===========================================================================

loc_109B4:
	tst.b	objoff_38(a0)
	beq.s	loc_109F8
	tst.b	objoff_3A(a0)
	bne.s	loc_109C8
	subq.b	#1,objoff_38(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_109C8:
	bsr.w	sub_1099E
	subq.b	#1,objoff_38(a0)
	bne.s	return_109F6
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	sub_109DC
	lea	(Sidekick).w,a1 ; a1=character

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_109DC:
	btst	#3,status(a1)
	beq.s	return_109F6
	bclr	#3,status(a1)
	bclr	#5,status(a1)
	move.b	#1,next_anim(a1)

return_109F6:

	rts
; End of function sub_109DC

; ===========================================================================

loc_109F8:
	bsr.w	ObjectMoveAndFall
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1F - Collapsing platform from ARZ
; ----------------------------------------------------------------------------
; Sprite_10A08:
Obj1F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_10A16(pc,d0.w),d1
	jmp	off_10A16(pc,d1.w)
; ===========================================================================
off_10A16:
	dc.w loc_10A1C-off_10A16

	dc.w loc_10AD6-off_10A16; 1
	dc.w loc_10B0E-off_10A16; 2
; ===========================================================================

loc_10A1C:
	addq.b	#2,routine(a0)
	move.l	#Obj1F_MapUnc_10F0C,mappings(a0)
	move.w	#$42B8,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#7,objoff_38(a0)
	move.b	#$44,width_pixels(a0)
	lea	(byte_10C17).l,a4
	btst	#0,subtype(a0)
	beq.s	loc_10A5A
	lea	(byte_10C1F).l,a4

loc_10A5A:
	move.l	a4,objoff_34(a0)
	cmpi.b	#$A,(Current_Zone).w
	bne.s	loc_10A86
	move.l	#Obj1F_MapUnc_110C6,mappings(a0)
	move.w	#$639D,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$40,width_pixels(a0)
	move.l	#byte_10C27,objoff_34(a0)

loc_10A86:
	cmpi.b	#$B,(Current_Zone).w
	bne.s	loc_10AAE
	move.l	#Obj1F_MapUnc_11106,mappings(a0)
	move.w	#$63F4,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$20,width_pixels(a0)
	move.l	#byte_10C2E,objoff_34(a0)

loc_10AAE:
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_10AD6
	move.l	#Obj1F_MapUnc_1115E,mappings(a0)
	move.w	#$4000,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$20,width_pixels(a0)
	move.l	#byte_10C34,objoff_34(a0)

loc_10AD6:
	tst.b	objoff_3A(a0)
	beq.s	loc_10AE8
	tst.b	objoff_38(a0)
	beq.w	loc_10B62
	subq.b	#1,objoff_38(a0)

loc_10AE8:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	sub_10AF8
	move.b	#1,objoff_3A(a0)

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_10AF8:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo2_PlatformObject
	bra.w	MarkObjGone
; End of function sub_10AF8

; ===========================================================================

loc_10B0E:
	tst.b	objoff_38(a0)
	beq.s	loc_10B52
	tst.b	objoff_3A(a0)
	bne.s	loc_10B22
	subq.b	#1,objoff_38(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_10B22:
	bsr.w	sub_10AF8
	subq.b	#1,objoff_38(a0)
	bne.s	return_10B50
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	sub_10B36
	lea	(Sidekick).w,a1 ; a1=character

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_10B36:
	btst	#3,status(a1)
	beq.s	return_10B50
	bclr	#3,status(a1)
	bclr	#5,status(a1)
	move.b	#1,next_anim(a1)

return_10B50:

	rts
; End of function sub_10B36

; ===========================================================================

loc_10B52:
	bsr.w	ObjectMoveAndFall
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

loc_10B62:
	addq.b	#1,mapping_frame(a0)
	bra.s	loc_10B6C
; ===========================================================================

loc_10B68:
	addq.b	#2,mapping_frame(a0)

loc_10B6C:
	movea.l	objoff_34(a0),a4
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	add.w	d0,d0
	movea.l	mappings(a0),a3
	adda.w	(a3,d0.w),a3
	move.w	(a3)+,d1
	subq.w	#1,d1
	bset	#5,render_flags(a0)
	_move.b	0(a0),d4
	move.b	render_flags(a0),d5
	movea.l	a0,a1
	bra.s	loc_10B9E
; ===========================================================================

loc_10B96:
	bsr.w	SingleObjLoad
	bne.s	loc_10BE4
	addq.w	#8,a3

loc_10B9E:
	move.b	#4,routine(a1)
	_move.b	d4,0(a1) ; load obj1F
	move.l	a3,mappings(a1)
	move.b	d5,render_flags(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	priority(a0),priority(a1)
	move.b	width_pixels(a0),width_pixels(a1)
	move.b	y_radius(a0),y_radius(a1)
	move.b	(a4)+,objoff_38(a1)
	cmpa.l	a0,a1
	bcc.s	loc_10BE0
	bsr.w	DisplaySprite2

loc_10BE0:
	dbf	d1,loc_10B96

loc_10BE4:
	bsr.w	DisplaySprite
	move.w	#$B9,d0
	jmp	(PlaySound).l
; ===========================================================================
; unknown
byte_10BF2:	dc.b $1C,$18,$14,$10,$1A,$16,$12, $E, $A,  6,$18,$14,$10, $C,  8,  4
		dc.b $16,$12, $E, $A,  6,  2,$14,$10, $C; 16
byte_10C0B:	dc.b $18,$1C,$20,$1E,$1A,$16,  6, $E,$14,$12, $A,  2
byte_10C17:	dc.b $1E,$16, $E,  6,$1A,$12, $A,  2
byte_10C1F:	dc.b $16,$1E,$1A,$12,  6, $E, $A,  2
byte_10C27:	dc.b $1A,$12, $A,  2,$16, $E,  6
byte_10C2E:	dc.b $1A,$16,$12, $E, $A,  2
byte_10C34:	dc.b $16,$1A,$18,$12,  6, $E, $A,  2
byte_10C3C:	dc.b $20,$20,$20,$20,$20,$20,$20,$20,$21,$21,$22,$22,$23,$23,$24,$24
		dc.b $25,$25,$26,$26,$27,$27,$28,$28,$29,$29,$2A,$2A,$2B,$2B,$2C,$2C; 16
		dc.b $2D,$2D,$2E,$2E,$2F,$2F,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30; 32
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1A_MapUnc_10C6C:	BINCLUDE "mappings/sprite/obj1A_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj1F_MapUnc_10F0C:	BINCLUDE "mappings/sprite/obj1F_a.bin"

; unknown
byte_10FDC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
byte_10FEC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj1A_MapUnc_1101C:	BINCLUDE "mappings/sprite/obj1A_b.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj1F_MapUnc_110C6:	BINCLUDE "mappings/sprite/obj1F_b.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1F_MapUnc_11106:	BINCLUDE "mappings/sprite/obj1F_c.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1F_MapUnc_1115E:	BINCLUDE "mappings/sprite/obj1F_d.bin"
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_SlopeObject 
	jmp	SlopeObject
; End of function JmpTo_SlopeObject


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_PlatformObject 
	jmp	PlatformObject
; End of function JmpTo2_PlatformObject

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1C - Bridge stake in Emerald Hill Zone and Hill Top Zone, falling oil in Oil Ocean Zone
; ----------------------------------------------------------------------------
; Sprite_111D4:
Obj1C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_111E2(pc,d0.w),d1
	jmp	off_111E2(pc,d1.w)
; ===========================================================================
off_111E2:
	dc.w loc_112A4-off_111E2
	dc.w BranchTo_MarkObjGone-off_111E2; 1

objsubdecl macro frame, mapaddr,artaddr,width,priority
	dc.l frame<<24|mapaddr
	dc.w artaddr
	dc.b width, priority
    endm

dword_111E6:
	objsubdecl 0, Obj1C_MapUnc_11552, $43FD,   4, 6
	objsubdecl 1, Obj1C_MapUnc_11552, $43FD,   4, 6
	objsubdecl 1, Obj11_MapUnc_FC70,  $43B6,   4, 1
	objsubdecl 2, Obj1C_MapUnc_11552, $23FD, $10, 6
	objsubdecl 3, Obj16_MapUnc_21F14, $43E6,   8, 4
	objsubdecl 4, Obj16_MapUnc_21F14, $43E6,   8, 4
	objsubdecl 1, Obj16_MapUnc_21F14, $43E6, $20, 1
	objsubdecl 0, Obj1C_MapUnc_113D6, $4000,   8, 1
	objsubdecl 1, Obj1C_MapUnc_113D6, $4000,   8, 1
	objsubdecl 0, Obj1C_MapUnc_113EE, $4428,   4, 4
	objsubdecl 0, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 1, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 2, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 3, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 4, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 5, Obj1C_MapUnc_11406, $4346,   4, 4
	objsubdecl 0, Obj1C_MapUnc_114AE, $4346, $18, 4
	objsubdecl 1, Obj1C_MapUnc_114AE, $4346, $18, 4
	objsubdecl 2, Obj1C_MapUnc_114AE, $4346,   8, 4
	objsubdecl 3, Obj1C_MapUnc_114AE, $4346,   8, 4
	objsubdecl 4, Obj1C_MapUnc_114AE, $4346,   8, 4
byte_1128E:
	dc.b   0
	dc.b   0	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   0	; 4
	dc.b   0	; 5
	dc.b   0	; 6
	dc.b   0	; 7
	dc.b   0	; 8
	dc.b   0	; 9
	dc.b   0	; 10
	dc.b   0	; 11
	dc.b   0	; 12
	dc.b $30	; 13
	dc.b $40	; 14
	dc.b $60	; 15
	dc.b   0	; 16
	dc.b   0	; 17
	dc.b $30	; 18
	dc.b $40	; 19
	dc.b $50	; 20
	dc.b   0	; 21
; ===========================================================================

loc_112A4:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.w	d0,d1
	lsl.w	#3,d0
	lea	dword_111E6(pc),a1
	lea	(a1,d0.w),a1
	move.b	(a1),mapping_frame(a0)
	move.l	(a1)+,mappings(a0)
	move.w	(a1)+,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	(a1)+,width_pixels(a0)
	move.b	(a1)+,priority(a0)
	lea	byte_1128E(pc),a1
	move.b	(a1,d1.w),d1
	beq.s	BranchTo_MarkObjGone
	move.b	d1,y_radius(a0)
	bset	#4,render_flags(a0)

BranchTo_MarkObjGone 

	bra.w	MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 71 - Bridge stake and pulsing orb from Hidden Palace Zone
; ----------------------------------------------------------------------------
; Sprite_112F0:
Obj71:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_112FE(pc,d0.w),d1
	jmp	off_112FE(pc,d1.w)
; ===========================================================================
off_112FE:
	dc.w loc_1131A-off_112FE; 0
	dc.w loc_1135C-off_112FE; 2
; ---------------------------------------------------------------------------
dword_11302:
	objsubdecl 3, Obj11_MapUnc_FC28,  $6300,   4, 1
	objsubdecl 0, Obj71_MapUnc_11396, $E35A, $10, 1
	objsubdecl 0, Obj71_MapUnc_11576, $4536, $10, 1
; ===========================================================================

loc_1131A:
	addq.b	#2,routine(a0)
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lsl.w	#3,d0
	lea	dword_11302(pc),a1
	lea	(a1,d0.w),a1
	move.b	(a1),mapping_frame(a0)
	move.l	(a1)+,mappings(a0)
	move.w	(a1)+,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	(a1)+,width_pixels(a0)
	move.b	(a1)+,priority(a0)
	move.b	subtype(a0),d0
	andi.w	#$F0,d0
	lsr.b	#4,d0
	move.b	d0,anim(a0)

loc_1135C:
	lea	(off_1136A).l,a1
	bsr.w	AnimateSprite
	bra.w	MarkObjGone
; ===========================================================================
off_1136A:
	dc.w byte_11372-off_1136A; 0
	dc.w byte_1137A-off_1136A; 1
	dc.w byte_11389-off_1136A; 2
	dc.w byte_11392-off_1136A; 3
byte_11372:	dc.b   8,  3,  3,  4,  5,  5,  4,$FF
byte_1137A:	dc.b   5,  0,  0,  0,  1,  2,  3,  3,  2,  1,  2,  3,  3,  1,$FF
byte_11389:	dc.b  $B,  0,  1,  2,  3,  4,  5,$FD,  3
byte_11392:	dc.b $7F,  6,$FD,  2

; --------------------------------------------------------------------------------
; sprite mappings
; --------------------------------------------------------------------------------
Obj71_MapUnc_11396:	BINCLUDE "mappings/sprite/obj71_a.bin"
; ----------------------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------------------
Obj1C_MapUnc_113D6:	BINCLUDE "mappings/sprite/obj1C_a.bin"
; --------------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------------
Obj1C_MapUnc_113EE:	BINCLUDE "mappings/sprite/obj1C_b.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1C_MapUnc_11406:	BINCLUDE "mappings/sprite/obj1C_c.bin"
; --------------------------------------------------------------------------------
; sprite mappings
; --------------------------------------------------------------------------------
Obj1C_MapUnc_114AE:	BINCLUDE "mappings/sprite/obj1C_d.bin"
; --------------------------------------------------------------------------------
; sprite mappings
; --------------------------------------------------------------------------------
Obj1C_MapUnc_11552:	BINCLUDE "mappings/sprite/obj1C_e.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj71_MapUnc_11576:	BINCLUDE "mappings/sprite/obj71_b.bin"
; ===========================================================================
	nop




; ----------------------------------------------------------------------------
; Object 2A - Stomper from MCZ
; ----------------------------------------------------------------------------
; Sprite_115C4:
Obj2A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_115D2(pc,d0.w),d1
	jmp	off_115D2(pc,d1.w)
; ===========================================================================
off_115D2:
	dc.w loc_115D6-off_115D2
	dc.w loc_11610-off_115D2; 1
; ===========================================================================

loc_115D6:
	addq.b	#2,routine(a0)
	move.l	#Obj2A_MapUnc_11666,mappings(a0)
	move.w	#$4000,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	#$50,y_radius(a0)
	bset	#4,render_flags(a0)

loc_11610:
	tst.b	routine_secondary(a0)
	bne.s	loc_1162A
	addq.w	#1,objoff_30(a0)
	cmpi.w	#$60,objoff_30(a0)
	bne.s	loc_1163C
	move.b	#2,routine_secondary(a0)
	bra.s	loc_1163C
; ===========================================================================

loc_1162A:
	subq.w	#8,objoff_30(a0)
	bhi.s	loc_1163C
	move.w	#0,objoff_30(a0)
	move.b	#0,routine_secondary(a0)

loc_1163C:
	move.w	objoff_32(a0),d0
	sub.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$40,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo2_SolidObject
	bra.w	MarkObjGone
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj2A_MapUnc_11666:	BINCLUDE "mappings/sprite/obj2A.bin"

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2D - One way barrier from CPZ and DEZ
; ----------------------------------------------------------------------------
; Sprite_1169A:
Obj2D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_116A8(pc,d0.w),d1
	jmp	off_116A8(pc,d1.w)
; ===========================================================================
off_116A8:
	dc.w loc_116AC-off_116A8

	dc.w loc_1175E-off_116A8; 1
; ===========================================================================

loc_116AC:
	addq.b	#2,routine(a0)
	move.l	#Obj2D_MapUnc_11822,mappings(a0)
	move.w	#$2426,art_tile(a0)
	move.b	#8,width_pixels(a0)
	cmpi.b	#4,(Current_Zone).w
	beq.s	loc_116D4
	cmpi.b	#5,(Current_Zone).w
	bne.s	loc_116E0

loc_116D4:
	move.w	#$6000,art_tile(a0)
	move.b	#$C,width_pixels(a0)

loc_116E0:
	cmpi.b	#$D,(Current_Zone).w
	bne.s	loc_116F4
	move.w	#$2394,art_tile(a0)
	move.b	#8,width_pixels(a0)

loc_116F4:
	cmpi.b	#$E,(Current_Zone).w
	bne.s	loc_11708
	move.w	#$2328,art_tile(a0)
	move.b	#8,width_pixels(a0)

loc_11708:
	cmpi.b	#$F,(Current_Zone).w
	bne.s	loc_1171C
	move.w	#$23F8,art_tile(a0)
	move.b	#8,width_pixels(a0)

loc_1171C:
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	subtype(a0),mapping_frame(a0)
	move.w	x_pos(a0),d2
	move.w	d2,d3
	subi.w	#$200,d2
	addi.w	#$18,d3
	btst	#0,status(a0)
	beq.s	loc_11756
	subi.w	#-$1E8,d2
	addi.w	#$1E8,d3

loc_11756:
	move.w	d2,objoff_38(a0)
	move.w	d3,objoff_3A(a0)

loc_1175E:
	btst	#0,status(a0)
	bne.s	loc_1177A
	move.w	objoff_38(a0),d2
	move.w	x_pos(a0),d3
	tst.b	routine_secondary(a0)
	beq.s	loc_1178C
	move.w	objoff_3A(a0),d3
	bra.s	loc_1178C
; ===========================================================================

loc_1177A:
	move.w	x_pos(a0),d2
	move.w	objoff_3A(a0),d3
	tst.b	routine_secondary(a0)
	beq.s	loc_1178C
	move.w	objoff_38(a0),d2

loc_1178C:

	move.w	objoff_32(a0),d4
	move.w	d4,d5
	subi.w	#$20,d4
	addi.w	#$20,d5
	move.b	#0,routine_secondary(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	sub_117F4
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	sub_117F4
	tst.b	routine_secondary(a0)
	beq.s	loc_117C0
	cmpi.w	#$40,objoff_30(a0)
	beq.s	loc_117D6
	addq.w	#8,objoff_30(a0)
	bra.s	loc_117CA
; ===========================================================================

loc_117C0:
	tst.w	objoff_30(a0)
	beq.s	loc_117D6
	subq.w	#8,objoff_30(a0)

loc_117CA:
	move.w	objoff_32(a0),d0
	sub.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)

loc_117D6:

	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$20,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo2_SolidObject
	bra.w	MarkObjGone

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_117F4:

	move.w	x_pos(a1),d0
	cmp.w	d2,d0
	blt.w	return_11820
	cmp.w	d3,d0
	bcc.w	return_11820
	move.w	y_pos(a1),d0
	cmp.w	d4,d0
	bcs.w	return_11820
	cmp.w	d5,d0
	bcc.w	return_11820
	tst.b	obj_control(a1)
	bmi.s	return_11820
	move.b	#2,routine_secondary(a0)

return_11820:
	rts
; End of function sub_117F4

; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj2D_MapUnc_11822:	BINCLUDE "mappings/sprite/obj2D.bin"
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo2_SolidObject 

	jmp	SolidObject
; End of function JmpTo2_SolidObject

; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 28 - Animal and the 100 points from a badnik
; ----------------------------------------------------------------------------
; Sprite_1188C:
Obj28:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1189A(pc,d0.w),d1
	jmp	off_1189A(pc,d1.w)
; ===========================================================================
off_1189A:
	dc.w loc_119BE-off_1189A
	dc.w loc_11ADE-off_1189A; 1
	dc.w loc_11B38-off_1189A; 2
	dc.w loc_11B74-off_1189A; 3
	dc.w loc_11B38-off_1189A; 4
	dc.w loc_11B38-off_1189A; 5
	dc.w loc_11B38-off_1189A; 6
	dc.w loc_11B74-off_1189A; 7
	dc.w loc_11B38-off_1189A; 8
	dc.w loc_11B74-off_1189A; 9
	dc.w loc_11B38-off_1189A; 10
	dc.w loc_11B38-off_1189A; 11
	dc.w loc_11B38-off_1189A; 12
	dc.w loc_11B38-off_1189A; 13
	dc.w loc_11BF4-off_1189A; 14
	dc.w loc_11C14-off_1189A; 15
	dc.w loc_11C14-off_1189A; 16
	dc.w loc_11C34-off_1189A; 17
	dc.w loc_11C6E-off_1189A; 18
	dc.w loc_11CC8-off_1189A; 19
	dc.w loc_11CE6-off_1189A; 20
	dc.w loc_11CC8-off_1189A; 21
	dc.w loc_11CE6-off_1189A; 22
	dc.w loc_11CC8-off_1189A; 23
	dc.w loc_11D24-off_1189A; 24
	dc.w loc_11C8A-off_1189A; 25
byte_118CE:
	dc.b   6
	dc.b   5	; 1
	dc.b   6	; 2
	dc.b   5	; 3
	dc.b   6	; 4
	dc.b   5	; 5
	dc.b   6	; 6
	dc.b   5	; 7
	dc.b   9	; 8
	dc.b   7	; 9
	dc.b   9	; 10
	dc.b   7	; 11
	dc.b   9	; 12
	dc.b   7	; 13
	dc.b   9	; 14
	dc.b   7	; 15
	dc.b   8	; 16
	dc.b   3	; 17
	dc.b   8	; 18
	dc.b   3	; 19
	dc.b   2	; 20
	dc.b   3	; 21
	dc.b   8	; 22
	dc.b   1	; 23
	dc.b  $B	; 24
	dc.b   5	; 25
	dc.b   0	; 26
	dc.b   7	; 27
	dc.b   4	; 28
	dc.b   1	; 29
	dc.b   2	; 30
	dc.b   5	; 31
	dc.b  $A	; 32
	dc.b   1	; 33
word_118F0:
	dc.w $FE00
	dc.w $FC00
	dc.l Obj28_MapUnc_11EAC
	dc.w $FE00
	dc.w $FD00
	dc.l Obj28_MapUnc_11E1C
	dc.w $FE80
	dc.w $FD00
	dc.l Obj28_MapUnc_11EAC
	dc.w $FEC0
	dc.w $FE80
	dc.l Obj28_MapUnc_11E88
	dc.w $FE40
	dc.w $FD00
	dc.l Obj28_MapUnc_11E64
	dc.w $FD00
	dc.w $FC00
	dc.l Obj28_MapUnc_11E1C
	dc.w $FD80
	dc.w $FC80
	dc.l Obj28_MapUnc_11E40
	dc.w $FD80
	dc.w $FD00
	dc.l Obj28_MapUnc_11E1C
	dc.w $FE00
	dc.w $FC80
	dc.l Obj28_MapUnc_11E40
	dc.w $FD40
	dc.w $FD00
	dc.l Obj28_MapUnc_11E40
	dc.w $FEC0
	dc.w $FE00
	dc.l Obj28_MapUnc_11E40
	dc.w $FE00
	dc.w $FD00
	dc.l Obj28_MapUnc_11E40
word_11950:
	dc.w $FBC0
	dc.w $FC00	; 1
	dc.w $FBC0	; 2
	dc.w $FC00	; 3
	dc.w $FBC0	; 4
	dc.w $FC00	; 5
	dc.w $FD00	; 6
	dc.w $FC00	; 7
	dc.w $FD00	; 8
	dc.w $FC00	; 9
	dc.w $FE80	; 10
	dc.w $FD00	; 11
	dc.w $FE80	; 12
	dc.w $FD00	; 13
	dc.w $FEC0	; 14
	dc.w $FE80	; 15
	dc.w $FE40	; 16
	dc.w $FD00	; 17
	dc.w $FE00	; 18
	dc.w $FD00	; 19
	dc.w $FD80	; 20
	dc.w $FC80	; 21
off_1197C:
	dc.l Obj28_MapUnc_11E1C
	dc.l Obj28_MapUnc_11E1C	; 1
	dc.l Obj28_MapUnc_11E1C	; 2
	dc.l Obj28_MapUnc_11EAC	; 3
	dc.l Obj28_MapUnc_11EAC	; 4
	dc.l Obj28_MapUnc_11EAC	; 5
	dc.l Obj28_MapUnc_11EAC	; 6
	dc.l Obj28_MapUnc_11E88	; 7
	dc.l Obj28_MapUnc_11E64	; 8
	dc.l Obj28_MapUnc_11E1C	; 9
	dc.l Obj28_MapUnc_11E40	; 10
word_119A8:
	dc.w  $5A5
	dc.w  $5A5	; 1
	dc.w  $5A5	; 2
	dc.w  $553	; 3
	dc.w  $553	; 4
	dc.w  $573	; 5
	dc.w  $573	; 6
	dc.w  $585	; 7
	dc.w  $593	; 8
	dc.w  $565	; 9
	dc.w  $5B3	; 10
; ===========================================================================

loc_119BE:
	tst.b	subtype(a0)
	beq.w	loc_11A2C
	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.b	d0,routine(a0)
	subi.w	#$14,d0
	move.w	word_119A8(pc,d0.w),art_tile(a0)
	add.w	d0,d0
	move.l	off_1197C(pc,d0.w),mappings(a0)
	lea	word_11950(pc),a1
	move.w	(a1,d0.w),objoff_32(a0)
	move.w	(a1,d0.w),x_vel(a0)
	move.w	2(a1,d0.w),objoff_34(a0)
	move.w	2(a1,d0.w),y_vel(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$C,y_radius(a0)
	move.b	#4,render_flags(a0)
	bset	#0,render_flags(a0)
	move.b	#6,priority(a0)
	move.b	#8,width_pixels(a0)
	move.b	#7,anim_frame_duration(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_11A2C:
	addq.b	#2,routine(a0)
	bsr.w	JmpTo_RandomNumber
	move.w	#$580,art_tile(a0)
	andi.w	#1,d0
	beq.s	loc_11A46
	move.w	#$594,art_tile(a0)

loc_11A46:
	moveq	#0,d1
	move.b	(Current_Zone).w,d1
	add.w	d1,d1
	add.w	d0,d1
	lea	byte_118CE(pc),a1
	move.b	(a1,d1.w),d0
	move.b	d0,objoff_30(a0)
	lsl.w	#3,d0
	lea	word_118F0(pc),a1
	adda.w	d0,a1
	move.w	(a1)+,objoff_32(a0)
	move.w	(a1)+,objoff_34(a0)
	move.l	(a1)+,mappings(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$C,y_radius(a0)
	move.b	#4,render_flags(a0)
	bset	#0,render_flags(a0)
	move.b	#6,priority(a0)
	move.b	#8,width_pixels(a0)
	move.b	#7,anim_frame_duration(a0)
	move.b	#2,mapping_frame(a0)
	move.w	#-$400,y_vel(a0)
	tst.b	objoff_38(a0)
	bne.s	loc_11AD0
	bsr.w	SingleObjLoad
	bne.s	BranchTo2_DisplaySprite
	_move.b	#$29,0(a1) ; load obj29
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	objoff_3E(a0),d0
	lsr.w	#1,d0
	move.b	d0,mapping_frame(a1)

BranchTo2_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_11AD0:
	move.b	#$1C,routine(a0)
	clr.w	x_vel(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_11ADE:
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bsr.w	ObjectMoveAndFall
	tst.w	y_vel(a0)
	bmi.s	BranchTo3_DisplaySprite
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	BranchTo3_DisplaySprite
	add.w	d1,y_pos(a0)
	move.w	objoff_32(a0),x_vel(a0)
	move.w	objoff_34(a0),y_vel(a0)
	move.b	#1,mapping_frame(a0)
	move.b	objoff_30(a0),d0
	add.b	d0,d0
	addq.b	#4,d0
	move.b	d0,routine(a0)
	tst.b	objoff_38(a0)
	beq.s	BranchTo3_DisplaySprite
	btst	#4,($FFFFFE0F).w
	beq.s	BranchTo3_DisplaySprite
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)

BranchTo3_DisplaySprite 

	bra.w	DisplaySprite
; ===========================================================================

loc_11B38:

	bsr.w	ObjectMoveAndFall
	move.b	#1,mapping_frame(a0)
	tst.w	y_vel(a0)
	bmi.s	loc_11B62
	move.b	#0,mapping_frame(a0)
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_11B62
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)

loc_11B62:

	tst.b	subtype(a0)
	bne.s	loc_11BD8
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

loc_11B74:

	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	tst.w	y_vel(a0)
	bmi.s	loc_11BB0
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_11BB0
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)
	tst.b	subtype(a0)
	beq.s	loc_11BB0
	cmpi.b	#$A,subtype(a0)
	beq.s	loc_11BB0
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)

loc_11BB0:

	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_11BC6
	move.b	#1,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#1,mapping_frame(a0)

loc_11BC6:
	tst.b	subtype(a0)
	bne.s	loc_11BD8
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

loc_11BD8:

	move.w	x_pos(a0),d0
	sub.w	(MainCharacter+x_pos).w,d0
	bcs.s	BranchTo4_DisplaySprite
	subi.w	#$180,d0
	bpl.s	BranchTo4_DisplaySprite
	tst.b	render_flags(a0)
	bpl.w	DeleteObject

BranchTo4_DisplaySprite 

	bra.w	DisplaySprite
; ===========================================================================

loc_11BF4:
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	subq.w	#1,objoff_36(a0)
	bne.w	BranchTo5_DisplaySprite
	move.b	#2,routine(a0)
	move.b	#1,priority(a0)

BranchTo5_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_11C14:
	bsr.w	sub_11DB8
	bcc.s	BranchTo_loc_11BD8
	move.w	objoff_32(a0),x_vel(a0)
	move.w	objoff_34(a0),y_vel(a0)
	move.b	#$E,routine(a0)
	bra.w	loc_11B74
; ===========================================================================

BranchTo_loc_11BD8 
	bra.w	loc_11BD8
; ===========================================================================

loc_11C34:
	bsr.w	sub_11DB8
	bpl.s	BranchTo2_loc_11BD8
	clr.w	x_vel(a0)
	clr.w	objoff_32(a0)
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	bsr.w	sub_11D78
	bsr.w	sub_11DA0
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo2_loc_11BD8
	move.b	#1,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#1,mapping_frame(a0)

BranchTo2_loc_11BD8 

	bra.w	loc_11BD8
; ===========================================================================

loc_11C6E:
	bsr.w	sub_11DB8
	bpl.s	BranchTo3_loc_11BD8
	move.w	objoff_32(a0),x_vel(a0)
	move.w	objoff_34(a0),y_vel(a0)
	move.b	#4,routine(a0)
	bra.w	loc_11B38
; ===========================================================================

loc_11C8A:
	bsr.w	ObjectMoveAndFall
	move.b	#1,mapping_frame(a0)
	tst.w	y_vel(a0)
	bmi.s	BranchTo3_loc_11BD8
	move.b	#0,mapping_frame(a0)
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	BranchTo3_loc_11BD8
	not.b	objoff_29(a0)
	bne.s	loc_11CBA
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)

loc_11CBA:
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)

BranchTo3_loc_11BD8 

	bra.w	loc_11BD8
; ===========================================================================

loc_11CC8:
	bsr.w	sub_11DB8
	bpl.s	BranchTo4_loc_11BD8
	clr.w	x_vel(a0)
	clr.w	objoff_32(a0)
	bsr.w	ObjectMoveAndFall
	bsr.w	sub_11D78
	bsr.w	sub_11DA0

BranchTo4_loc_11BD8 
	bra.w	loc_11BD8
; ===========================================================================

loc_11CE6:
	bsr.w	sub_11DB8
	bpl.s	BranchTo5_loc_11BD8
	bsr.w	ObjectMoveAndFall
	move.b	#1,mapping_frame(a0)
	tst.w	y_vel(a0)
	bmi.s	BranchTo5_loc_11BD8
	move.b	#0,mapping_frame(a0)
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	BranchTo5_loc_11BD8
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)

BranchTo5_loc_11BD8 

	bra.w	loc_11BD8
; ===========================================================================

loc_11D24:
	bsr.w	sub_11DB8
	bpl.s	BranchTo6_loc_11BD8
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	tst.w	y_vel(a0)
	bmi.s	loc_11D5E
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_11D5E
	not.b	objoff_29(a0)
	bne.s	loc_11D54
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)

loc_11D54:
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)

loc_11D5E:

	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo6_loc_11BD8
	move.b	#1,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#1,mapping_frame(a0)

BranchTo6_loc_11BD8 

	bra.w	loc_11BD8

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_11D78:

	move.b	#1,mapping_frame(a0)
	tst.w	y_vel(a0)
	bmi.s	return_11D9E
	move.b	#0,mapping_frame(a0)
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	return_11D9E
	add.w	d1,y_pos(a0)
	move.w	objoff_34(a0),y_vel(a0)

return_11D9E:

	rts
; End of function sub_11D78


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_11DA0:

	bset	#0,render_flags(a0)
	move.w	x_pos(a0),d0
	sub.w	(MainCharacter+x_pos).w,d0
	bcc.s	return_11DB6
	bclr	#0,render_flags(a0)

return_11DB6:
	rts
; End of function sub_11DA0


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_11DB8:

	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	subi.w	#$B8,d0
	rts
; End of function sub_11DB8

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 29 - "100 points" text
; ----------------------------------------------------------------------------
; Sprite_11DC6:
Obj29:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_11DD4(pc,d0.w),d1
	jmp	off_11DD4(pc,d1.w)
; ===========================================================================
off_11DD4:
	dc.w loc_11DD8-off_11DD4

	dc.w loc_11E06-off_11DD4; 1
; ===========================================================================

loc_11DD8:
	addq.b	#2,routine(a0)
	move.l	#Obj29_MapUnc_11ED0,mappings(a0)
	move.w	#$84AC,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#8,width_pixels(a0)
	move.w	#-$300,y_vel(a0)

loc_11E06:
	tst.w	y_vel(a0)
	bpl.w	DeleteObject
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	bra.w	DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj28_MapUnc_11E1C:	BINCLUDE "mappings/sprite/obj28_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj28_MapUnc_11E40:	BINCLUDE "mappings/sprite/obj28_b.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj28_MapUnc_11E64:	BINCLUDE "mappings/sprite/obj28_c.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj28_MapUnc_11E88:	BINCLUDE "mappings/sprite/obj28_d.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj28_MapUnc_11EAC:	BINCLUDE "mappings/sprite/obj28_e.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj29_MapUnc_11ED0:	BINCLUDE "mappings/sprite/obj29.bin"

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_RandomNumber 
	jmp	(RandomNumber).l
; End of function JmpTo_RandomNumber

; ===========================================================================
	align 4
	



; ===========================================================================
; ----------------------------------------------------------------------------
; Object 25 - A ring
; ----------------------------------------------------------------------------
; Obj_Ring:
Obj25:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj_25_subtbl(pc,d0.w),d1
	jmp	Obj_25_subtbl(pc,d1.w)
; ===========================================================================
Obj_25_subtbl:
	dc.w	Obj_25_sub_0-Obj_25_subtbl; 0
	dc.w	Obj_25_sub_2-Obj_25_subtbl; 2
	dc.w	Obj_25_sub_4-Obj_25_subtbl; 4
	dc.w	Obj_25_sub_6-Obj_25_subtbl; 6
	dc.w	BranchTo4_DeleteObject-Obj_25_subtbl; 8
; ===========================================================================

Obj_25_sub_0:
	addq.b	#2,routine(a0)
	move.w	x_pos(a0),objoff_32(a0)
	move.l	#Obj25_MapUnc_12382,mappings(a0)
	move.w	#$26BC,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#2,priority(a0)
	move.b	#$47,collision_flags(a0)
	move.b	#8,width_pixels(a0)

Obj_25_sub_2:
	move.b	(Rings_anim_frame).w,mapping_frame(a0)
	move.w	objoff_32(a0),d0
	bra.w	MarkObjGone2
; ===========================================================================

Obj_25_sub_4:
	addq.b	#2,routine(a0)
	move.b	#0,collision_flags(a0)
	move.b	#1,priority(a0)
	bsr.s	sub_11FC2

Obj_25_sub_6:
	lea	(byte_1237A).l,a1
	bsr.w	AnimateSprite
	bra.w	DisplaySprite
; ===========================================================================

BranchTo4_DeleteObject 
	bra.w	DeleteObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_11FC2:

	tst.b	objoff_3F(a0)
	bne.s	loc_1201E

loc_11FC8:
	cmpi.w	#999,($FFFFFEF0).w
	bcc.s	loc_11FD4
	addq.w	#1,($FFFFFEF0).w

loc_11FD4:

	move.w	#$B5,d0
	cmpi.w	#999,(Ring_count).w
	bcc.s	JmpTo_PlaySoundStereo
	addq.w	#1,(Ring_count).w
	ori.b	#1,(Update_HUD_rings).w
	cmpi.w	#100,(Ring_count).w
	bcs.s	JmpTo_PlaySoundStereo
	bset	#1,(Extra_life_flags).w
	beq.s	loc_1200A
	cmpi.w	#200,(Ring_count).w
	bcs.s	JmpTo_PlaySoundStereo
	bset	#2,(Extra_life_flags).w
	bne.s	JmpTo_PlaySoundStereo

loc_1200A:
	addq.b	#1,(Life_count).w
	addq.b	#1,(Update_HUD_lives).w
	move.w	#$98,d0

JmpTo_PlaySoundStereo 
	jmp	(PlaySoundStereo).l
; ===========================================================================
	rts
; ===========================================================================

loc_1201E:
	cmpi.w	#999,($FFFFFEF2).w
	bcc.s	loc_1202A
	addq.w	#1,($FFFFFEF2).w

loc_1202A:
	cmpi.w	#999,(Ring_count_2P).w
	bcc.s	loc_12036
	addq.w	#1,(Ring_count_2P).w

loc_12036:
	tst.w	(Two_player_mode).w
	beq.s	loc_11FD4
	ori.b	#1,(Update_HUD_rings_2P).w
	move.w	#$B5,d0
	cmpi.w	#$64,(Ring_count_2P).w
	bcs.s	JmpTo2_PlaySoundStereo
	bset	#1,(Extra_life_flags_2P).w
	beq.s	loc_12066
	cmpi.w	#200,(Ring_count_2P).w
	bcs.s	JmpTo2_PlaySoundStereo
	bset	#2,(Extra_life_flags_2P).w
	bne.s	JmpTo2_PlaySoundStereo

loc_12066:
	addq.b	#1,(Life_count_2P).w
	addq.b	#1,(Update_HUD_lives_2P).w
	move.w	#$98,d0

JmpTo2_PlaySoundStereo 
	jmp	(PlaySoundStereo).l
; End of function sub_11FC2

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 37 - Scattering rings (generated when Sonic is hurt and has rings)
; ----------------------------------------------------------------------------
; Sprite_12078:
Obj37:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj_37_subtbl(pc,d0.w),d1
	jmp	Obj_37_subtbl(pc,d1.w)
; ===========================================================================
Obj_37_subtbl:
	dc.w	Obj_37_sub_0-Obj_37_subtbl
	dc.w	Obj_37_sub_2-Obj_37_subtbl; 2
	dc.w	Obj_37_sub_4-Obj_37_subtbl; 4
	dc.w	Obj_37_sub_6-Obj_37_subtbl; 6
	dc.w	BranchTo5_DeleteObject-Obj_37_subtbl; 8
; ===========================================================================

Obj_37_sub_0:
	movea.l	a0,a1
	moveq	#0,d5
	move.w	(Ring_count).w,d5
	tst.b	objoff_3F(a0)
	beq.s	loc_120A2
	move.w	(Ring_count_2P).w,d5

loc_120A2:
	moveq	#$20,d0
	cmp.w	d0,d5
	bcs.s	loc_120AA
	move.w	d0,d5

loc_120AA:
	subq.w	#1,d5
	move.w	#$288,d4
	bra.s	loc_120BA
; ===========================================================================

loc_120B2:
	bsr.w	SingleObjLoad
	bne.w	loc_12142

loc_120BA:
	_move.b	#$37,0(a1) ; load obj37
	addq.b	#2,routine(a1)
	move.b	#8,y_radius(a1)
	move.b	#8,x_radius(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	#Obj25_MapUnc_12382,mappings(a1)
	move.w	#$26BC,art_tile(a1)
	bsr.w	Adjust2PArtPointer2
	move.b	#$84,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#$47,collision_flags(a1)
	move.b	#8,width_pixels(a1)
	move.b	#-1,(Ring_spill_anim_counter).w
	tst.w	d4
	bmi.s	loc_12132
	move.w	d4,d0
	bsr.w	JmpTo4_CalcSine
	move.w	d4,d2
	lsr.w	#8,d2
	asl.w	d2,d0
	asl.w	d2,d1
	move.w	d0,d2
	move.w	d1,d3
	addi.b	#$10,d4
	bcc.s	loc_12132
	subi.w	#$80,d4
	bcc.s	loc_12132
	move.w	#$288,d4

loc_12132:

	move.w	d2,x_vel(a1)
	move.w	d3,y_vel(a1)
	neg.w	d2
	neg.w	d4
	dbf	d5,loc_120B2

loc_12142:
	move.w	#$C6,d0
	jsr	(PlaySoundStereo).l
	tst.b	objoff_3F(a0)
	bne.s	loc_12166
	move.w	#0,(Ring_count).w
	move.b	#$80,(Update_HUD_rings).w
	move.b	#0,(Extra_life_flags).w
	bra.s	Obj_37_sub_2
; ===========================================================================

loc_12166:
	move.w	#0,(Ring_count_2P).w
	move.b	#$80,(Update_HUD_rings_2P).w
	move.b	#0,(Extra_life_flags_2P).w

Obj_37_sub_2:

	move.b	(Ring_spill_anim_frame).w,mapping_frame(a0)
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	bmi.s	loc_121B8
	move.b	($FFFFFE0F).w,d0
	add.b	d7,d0
	andi.b	#7,d0
	bne.s	loc_121B8
	tst.b	render_flags(a0)
	bpl.s	loc_121D0
	jsr	(RingCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_121B8
	add.w	d1,y_pos(a0)
	move.w	y_vel(a0),d0
	asr.w	#2,d0
	sub.w	d0,y_vel(a0)
	neg.w	y_vel(a0)

loc_121B8:

	tst.b	(Ring_spill_anim_counter).w
	beq.s	BranchTo5_DeleteObject
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcs.s	BranchTo5_DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

loc_121D0:
	tst.w	(Two_player_mode).w
	bne.w	BranchTo5_DeleteObject
	bra.s	loc_121B8
; ===========================================================================

Obj_37_sub_4:
	addq.b	#2,routine(a0)
	move.b	#0,collision_flags(a0)
	move.b	#1,priority(a0)
	bsr.w	sub_11FC2

Obj_37_sub_6:
	lea	(byte_1237A).l,a1
	bsr.w	AnimateSprite
	bra.w	DisplaySprite
; ===========================================================================

BranchTo5_DeleteObject 
	bra.w	DeleteObject

; Unused - dead code/data S1 big ring:
; ===========================================================================
	; a0=object
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1220E(pc,d0.w),d1
	jmp	off_1220E(pc,d1.w)
; ===========================================================================
off_1220E:
	dc.w loc_12216-off_1220E
	dc.w loc_12264-off_1220E; 2
	dc.w loc_12282-off_1220E; 4
	dc.w BranchTo6_DeleteObject-off_1220E; 6
; ===========================================================================

loc_12216:
	move.l	#Obj37_MapUnc_123E6,mappings(a0)
	move.w	#$2400,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$40,width_pixels(a0)
	tst.b	render_flags(a0)
	bpl.s	loc_12264
	cmpi.b	#6,(Got_Emerald).w
	beq.w	BranchTo6_DeleteObject
	cmpi.w	#$32,(Ring_count).w
	bcc.s	loc_1224E
	rts
; ===========================================================================

loc_1224E:
	addq.b	#2,routine(a0)
	move.b	#2,priority(a0)
	move.b	#$52,collision_flags(a0)
	move.w	#$C40,($FFFFF7BE).w

loc_12264:
	move.b	(Rings_anim_frame).w,mapping_frame(a0)
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================

loc_12282:
	subq.b	#2,routine(a0)
	move.b	#0,collision_flags(a0)
	bsr.w	SingleObjLoad
	bne.w	loc_122B4
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	a0,objoff_3C(a1)
	move.w	(MainCharacter+x_pos).w,d0
	cmp.w	x_pos(a0),d0
	bcs.s	loc_122B4
	bset	#0,render_flags(a1)

loc_122B4:

	move.w	#$C3,d0
	jsr	(PlaySoundStereo).l
	bra.s	loc_12264
; ===========================================================================

BranchTo6_DeleteObject 

	bra.w	DeleteObject

; Unused - dead code/data S1 ring flash:
; ===========================================================================
	; a0=object
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_122D2(pc,d0.w),d1
	jmp	off_122D2(pc,d1.w)
; ===========================================================================
off_122D2:
	dc.w loc_122D8-off_122D2

	dc.w loc_12306-off_122D2; 1
	dc.w BranchTo7_DeleteObject-off_122D2; 2
; ===========================================================================

loc_122D8:
	addq.b	#2,routine(a0)
	move.l	#Obj37_MapUnc_124E6,mappings(a0)
	move.w	#$2462,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#0,priority(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#-1,mapping_frame(a0)

loc_12306:
	bsr.s	sub_12320
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	DeleteObject
	bra.w	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_12320:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_12366
	move.b	#1,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#8,mapping_frame(a0)
	bcc.s	loc_12368
	cmpi.b	#3,mapping_frame(a0)
	bne.s	return_12366
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.b	#6,routine(a1)
	move.b	#$1C,(MainCharacter+anim).w
	move.b	#1,($FFFFF7CD).w
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#1,status_secondary(a1)
	bclr	#0,status_secondary(a1)

return_12366:

	rts
; ===========================================================================

loc_12368:
	addq.b	#2,routine(a0)
	move.w	#0,(MainCharacter).w
	addq.l	#4,sp
	rts
; End of function sub_12320

; ===========================================================================

BranchTo7_DeleteObject 
	bra.w	DeleteObject

; end of dead code/data

; ===========================================================================
byte_1237A:
	dc.b 0

	dc.b 2		; 1
	dc.b 5		; 2
	dc.b 4		; 3
	dc.b 5		; 4
	dc.b 6		; 5
	dc.b 7		; 6
	dc.b $FC	; 7
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj25_MapUnc_12382:	BINCLUDE "mappings/sprite/obj37_a.bin"

; -------------------------------------------------------------------------------
; Unused sprite mappings
; -------------------------------------------------------------------------------
Obj37_MapUnc_123E6:	BINCLUDE "mappings/sprite/obj37_b.bin"
; -------------------------------------------------------------------------------
; Unused sprite mappings
; -------------------------------------------------------------------------------
Obj37_MapUnc_124E6:	BINCLUDE "mappings/sprite/obj37_c.bin"

; ===========================================================================
; ----------------------------------------------------------------------------
; Object DC - Ring prize from Casino Night Zone
; ----------------------------------------------------------------------------
; Sprite_125E6:
ObjDC:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_125F4(pc,d0.w),d1
	jmp	off_125F4(pc,d1.w)
; ===========================================================================
off_125F4:
	dc.w loc_125FA-off_125F4

	dc.w loc_1264E-off_125F4; 1
	dc.w BranchTo8_DeleteObject-off_125F4; 2
; ===========================================================================

loc_125FA:
	moveq	#0,d1
	move.w	objoff_38(a0),d1
	swap	d1
	move.l	objoff_30(a0),d0
	sub.l	d1,d0
	asr.l	#4,d0
	sub.l	d0,objoff_30(a0)
	move.w	objoff_30(a0),x_pos(a0)
	moveq	#0,d1
	move.w	objoff_3A(a0),d1
	swap	d1
	move.l	objoff_34(a0),d0
	sub.l	d1,d0
	asr.l	#4,d0
	sub.l	d0,objoff_34(a0)
	move.w	objoff_34(a0),y_pos(a0)
	lea	byte_1265E(pc),a1
	bsr.w	AnimateSprite
	subq.w	#1,objoff_3C(a0)
	bne.w	DisplaySprite
	movea.l	objoff_2A(a0),a1
	subq.w	#1,(a1)
	bsr.w	sub_11FC2
	addi.b	#2,routine(a0)

loc_1264E:
	lea	byte_1237A(pc),a1
	bsr.w	AnimateSprite
	bra.w	DisplaySprite
; ===========================================================================

BranchTo8_DeleteObject 
	bra.w	DeleteObject
; ===========================================================================
byte_1265E:
	dc.b   0
	dc.b   2	; 1
	dc.b   1	; 2
	dc.b   0	; 3
	dc.b   1	; 4
	dc.b   2	; 5
	dc.b   3	; 6
	dc.b $FF	; 7
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo4_CalcSine 
	jmp	(CalcSine).l
; End of function JmpTo4_CalcSine

; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 26 - Monitor
;
; The power-ups themselves are handled by the next object. This just does the
; monitor collision and graphics.
; ----------------------------------------------------------------------------
; Obj_Monitor:
Obj26:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	obj_26_subtbl(pc,d0.w),d1
	jmp	obj_26_subtbl(pc,d1.w)
; ===========================================================================
obj_26_subtbl:
	dc.w obj_26_sub_0-obj_26_subtbl
	dc.w obj_26_sub_2-obj_26_subtbl; 2
	dc.w obj_26_sub_4-obj_26_subtbl; 4
	dc.w Obj26_Animate-obj_26_subtbl; 6
	dc.w BranchTo2_MarkObjGone-obj_26_subtbl; 8
; ===========================================================================

obj_26_sub_0:
	addq.b	#2,routine(a0)
	move.b	#$E,y_radius(a0)
	move.b	#$E,x_radius(a0)
	move.l	#Obj26_MapUnc_12D36,mappings(a0)
	move.w	#$680,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#$F,width_pixels(a0)
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	bclr	#7,2(a2,d0.w)
	btst	#0,2(a2,d0.w)
	beq.s	loc_126E2
	move.b	#8,routine(a0)
	move.b	#$B,mapping_frame(a0)
	rts
; ---------------------------------------------------------------------------

loc_126E2:
	move.b	#$46,collision_flags(a0)
	move.b	subtype(a0),anim(a0)
	tst.w	(Two_player_mode).w
	beq.s	obj_26_sub_2
	move.b	#9,anim(a0)

obj_26_sub_2:

	move.b	routine_secondary(a0),d0
	beq.s	SolidObject_Monitor
	bsr.w	ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.w	SolidObject_Monitor
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	clr.b	routine_secondary(a0)

; loc_1271C:
SolidObject_Monitor:

	move.w	#$1A,d1
	move.w	#$F,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	SolidObject_Monitor_Sonic
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	SolidObject_Monitor_Tails

Obj26_Animate:
	lea	(Ani_obj26).l,a1
	bsr.w	AnimateSprite

BranchTo2_MarkObjGone 
	bra.w	MarkObjGone

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_12756:
SolidObject_Monitor_Sonic:
	btst	d6,status(a0)
	bne.s	loc_12782
	cmpi.b	#2,anim(a1)
	bne.w	loc_199F0
	rts
; End of function SolidObject_Monitor_Sonic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; sub_12768:
SolidObject_Monitor_Tails:
	btst	d6,status(a0)
	bne.s	loc_12782
	tst.w	(Two_player_mode).w
	beq.w	loc_199F0
	cmpi.b	#2,anim(a1)
	bne.w	loc_199F0
	rts
; End of function SolidObject_Monitor_Tails

; ---------------------------------------------------------------------------

loc_12782:
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_1279E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_1279E
	cmp.w	d2,d0
	bcs.s	loc_127B2

loc_1279E:

	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------

loc_127B2:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4
	rts

; ===========================================================================

obj_26_sub_4:
	move.b	status(a0),d0
	andi.b	#%01111000,d0
	beq.s	loc_127EC
	move.b	d0,d1
	andi.b	#%00101000,d1
	beq.s	loc_127DA
	andi.b	#%11010111,(MainCharacter+status).w
	ori.b	#2,(MainCharacter+status).w

loc_127DA:
	andi.b	#%01010000,d0
	beq.s	loc_127EC
	andi.b	#%11010111,(Sidekick+status).w
	ori.b	#2,(Sidekick+status).w

loc_127EC:

	clr.b	status(a0)
	addq.b	#2,routine(a0)
	move.b	#0,collision_flags(a0)
	bsr.w	SingleObjLoad
	bne.s	loc_1281E
	_move.b	#$2E,0(a1) ; load obj2E
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	anim(a0),anim(a1)
	move.w	parent(a0),parent(a1)

loc_1281E:
	bsr.w	SingleObjLoad
	bne.s	loc_1283A
	_move.b	#$27,0(a1) ; load obj27
	addq.b	#2,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

loc_1283A:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	bset	#0,2(a2,d0.w)
	move.b	#$A,anim(a0)
	bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2E - Monitor contents (code for power-up behavior and rising image)
; ----------------------------------------------------------------------------

Obj2E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_12862(pc,d0.w),d1
	jmp	off_12862(pc,d1.w)
; ============== RELATIVE POINTER LIST     ==================================
off_12862:
	dc.w loc_12868-off_12862

	dc.w loc_128DE-off_12862; 1
	dc.w loc_12CC2-off_12862; 2
; ============== END RELATIVE POINTER LIST ==================================
; Obj. initialization. Called if routine counter == 0.

loc_12868:
	addq.b	#2,routine(a0)
	move.w	#$8680,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$24,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#8,width_pixels(a0)
	move.w	#-$300,y_vel(a0)
	moveq	#0,d0
	move.b	anim(a0),d0
	tst.w	(Two_player_mode).w
	beq.s	loc_128C6
	move.w	(Timer_frames).w,d0
	andi.w	#7,d0
	addq.w	#1,d0
	tst.w	(Two_player_items).w	; Clear means teleport only?
	beq.s	loc_128AC
	moveq	#8,d0

loc_128AC:
	cmpi.w	#8,d0
	bne.s	loc_128C2
	move.b	(Update_HUD_timer).w,d1
	add.b	(Update_HUD_timer_2P).w,d1
	cmpi.b	#2,d1
	beq.s	loc_128C2
	moveq	#7,d0

loc_128C2:

	move.b	d0,anim(a0)

loc_128C6:			; Determine correct mappings offset.
	addq.b	#1,d0
	move.b	d0,mapping_frame(a0)
	movea.l	#Obj26_MapUnc_12D36,a1
	add.b	d0,d0
	adda.w	(a1,d0.w),a1
	addq.w	#2,a1
	move.l	a1,mappings(a0)

loc_128DE:
	bsr.s	sub_128E4
	bra.w	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_128E4:
	tst.w	y_vel(a0)
	bpl.w	loc_128F8
	bsr.w	ObjectMove
	addi.w	#$18,y_vel(a0)
	rts
; ---------------------------------------------------------------------------

loc_128F8:
	addq.b	#2,routine(a0)
	move.w	#$1D,anim_frame_duration(a0)
	movea.w	parent(a0),a1 ; a1=character
	lea	($FFFFFEF4).w,a2
	cmpa.w	#MainCharacter,a1
	beq.s	loc_12914
	lea	($FFFFFEF6).w,a2

loc_12914:
	moveq	#0,d0
	move.b	anim(a0),d0
	add.w	d0,d0
	move.w	off_12924(pc,d0.w),d0
	jmp	off_12924(pc,d0.w)
; End of function sub_128E4

; ============== RELATIVE POINTER LIST     ==================================
off_12924:
	dc.w robotnik_monitor-off_12924	; 0 - Static
	dc.w sonic_1up-off_12924	; 1 - Sonic 1-up
	dc.w tails_1up-off_12924	; 2 - Tails 1-up
	dc.w robotnik_monitor-off_12924	; 3 - Robotnik
	dc.w super_ring-off_12924	; 4 - Super Ring
	dc.w super_shoes-off_12924	; 5 - Speed Shoes
	dc.w shield_monitor-off_12924	; 6 - Shield
	dc.w invincible_monitor-off_12924; 7 - Invincibility
	dc.w loc_12AA6-off_12924	; 8 - Teleport
	dc.w qmark_monitor-off_12924	; 9 - Question mark
; ============== END RELATIVE POINTER LIST ==================================
; badnik_monitor:
robotnik_monitor:
	addq.w	#1,(a2)
	bra.w	Touch_ChkHurt2
; ===========================================================================
sonic_1up:

	addq.w	#1,($FFFFFEF4).w
	addq.b	#1,(Life_count).w
	addq.b	#1,(Update_HUD_lives).w
	move.w	#$98,d0
	jmp	(PlayMusic).l	; Play extra life music
; ===========================================================================
tails_1up:

	addq.w	#1,($FFFFFEF6).w
	addq.b	#1,(Life_count_2P).w
	addq.b	#1,(Update_HUD_lives_2P).w
	move.w	#$98,d0
	jmp	(PlayMusic).l	; Play extra life music
; ===========================================================================

super_ring:
	addq.w	#1,(a2)
	lea	(Ring_count).w,a2
	lea	(Update_HUD_rings).w,a3
	lea	(Extra_life_flags).w,a4
	lea	($FFFFFEF0).w,a5
	cmpa.w	#MainCharacter,a1
	beq.s	loc_12992
	lea	(Ring_count_2P).w,a2
	lea	(Update_HUD_rings_2P).w,a3
	lea	(Extra_life_flags_2P).w,a4
	lea	($FFFFFEF2).w,a5

loc_12992:
	addi.w	#$A,(a5)
	cmpi.w	#999,(a5)
	bcs.s	loc_129A0
	move.w	#999,(a5)

loc_129A0:
	addi.w	#$A,(a2)
	cmpi.w	#999,(a2)
	bcs.s	loc_129AE
	move.w	#999,(a2)

loc_129AE:
	ori.b	#1,(a3)
	cmpi.w	#$64,(a2)
	bcs.s	loc_129CA
	bset	#1,(a4)
	beq.s	loc_129D4
	cmpi.w	#$C8,(a2)
	bcs.s	loc_129CA
	bset	#2,(a4)
	beq.s	loc_129D4

loc_129CA:

	move.w	#$B5,d0
	jmp	(PlayMusic).l
; ---------------------------------------------------------------------------

loc_129D4:

	cmpa.w	#MainCharacter,a1
	beq.w	sonic_1up
	bra.w	tails_1up
; ===========================================================================

super_shoes:
	addq.w	#1,(a2)
	bset	#2,status_secondary(a1)
	move.w	#$4B0,speedshoes_time(a1)
	cmpa.w	#MainCharacter,a1
	bne.s	loc_12A10
	cmpi.w	#2,(Player_mode).w	; Maybe set if the char is Tails?
	beq.s	loc_12A10
	move.w	#$C00,(Sonic_top_speed).w
	move.w	#$18,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
	bra.s	loc_12A22
; ---------------------------------------------------------------------------

loc_12A10:

	move.w	#$C00,(Tails_top_speed).w
	move.w	#$18,(Tails_acceleration).w
	move.w	#$80,(Tails_deceleration).w

loc_12A22:
	move.w	#$FB,d0
	jmp	(PlayMusic).l	; Speed up tempo
; ===========================================================================

shield_monitor:
	addq.w	#1,(a2)
	bset	#0,status_secondary(a1)
	move.w	#$AF,d0
	jsr	(PlayMusic).l
	tst.b	objoff_3F(a0)
	bne.s	loc_12A50
	move.b	#$38,(Object_RAM+$2180).w ; load Obj38 (shield) at $FFFFD180
	move.w	a1,(Object_RAM+$2180+parent).w
	rts
; ---------------------------------------------------------------------------

loc_12A50:
	move.b	#$38,(Object_RAM+$21C0).w ; load Obj38 (shield) at $FFFFD1C0
	move.w	a1,(Object_RAM+$21C0+parent).w
	rts
; ===========================================================================

invincible_monitor:
	addq.w	#1,(a2)
	tst.b	(Super_Sonic_flag).w
	bne.s	return_12AA4
	bset	#1,status_secondary(a1)
	move.w	#$4B0,invincibility_time(a1)
	tst.b	(Current_Boss_ID).w
	bne.s	loc_12A88
	cmpi.b	#$C,air_left(a1)
	bls.s	loc_12A88
	move.w	#$97,d0
	jsr	(PlayMusic).l

loc_12A88:

	tst.b	objoff_3F(a0)
	bne.s	loc_12A9A
	move.b	#$35,(Object_RAM+$2200).w ; load Obj35 (invincibility stars) at $FFFFD200
	move.w	a1,(Object_RAM+$2200+parent).w
	rts
; ---------------------------------------------------------------------------

loc_12A9A:
	move.b	#$35,(Object_RAM+$2300).w ; load Obj35 (invincibility stars) at $FFFFD300
	move.w	a1,(Object_RAM+$2300+parent).w

return_12AA4:
	rts
; ===========================================================================

loc_12AA6:
	addq.w	#1,(a2)
	cmpi.b	#6,(MainCharacter+routine).w
	bcc.s	return_12AB8
	cmpi.b	#6,(Sidekick+routine).w
	bcs.s	loc_12ABA

return_12AB8:
	rts
; ---------------------------------------------------------------------------

loc_12ABA:
	lea	(byte_12C52).l,a3
	moveq	#$11,d2

loc_12AC2:
	movea.w	(a3)+,a1
	movea.w	(a3)+,a2
	move.w	(a3)+,d1

loc_12AC8:
	move.w	(a1),d0
	move.w	(a2),(a1)+
	move.w	d0,(a2)+
	dbf	d1,loc_12AC8
	dbf	d2,loc_12AC2
	move.b	#1,(MainCharacter+next_anim).w
	move.b	#1,(Sidekick+next_anim).w
	move.b	#0,(MainCharacter+mapping_frame).w
	move.b	#0,(Sidekick+mapping_frame).w
	move.b	#-1,($FFFFF766).w
	move.b	#-1,($FFFFF7DE).w
	move.b	#-1,($FFFFF7DF).w
	lea	($FFFFF786).w,a1
	lea	($FFFFF789).w,a2
	moveq	#2,d1

loc_12B0A:
	move.b	(a1),d0
	move.b	(a2),(a1)+
	move.b	d0,(a2)+
	dbf	d1,loc_12B0A
	subi.w	#$180,(Camera_Y_pos).w
	subi.w	#$180,($FFFFEE24).w
	move.w	(MainCharacter+art_tile).w,d0
	andi.w	#$7FFF,(MainCharacter+art_tile).w
	tst.w	(Sidekick+art_tile).w
	bpl.s	loc_12B36
	ori.w	#$8000,(MainCharacter+art_tile).w

loc_12B36:
	andi.w	#$7FFF,(Sidekick+art_tile).w
	tst.w	d0
	bpl.s	loc_12B46
	ori.w	#$8000,(Sidekick+art_tile).w

loc_12B46:
	move.b	#1,($FFFFEEDE).w
	lea	(Object_RAM+$400).w,a1
	moveq	#$6F,d1

; process objects:
loc_12B52:
	cmpi.b	#$84,(a1) ; is it obj84 (pinball mode switcher)?
	beq.s	loc_12B5E ; if yes, branch
	cmpi.b	#3,(a1) ; is it obj03 (collision plane switcher)?
	bne.s	loc_12B6C ; if not, branch further

loc_12B5E:
	move.b	objoff_34(a1),d0
	move.b	objoff_35(a1),objoff_34(a1)
	move.b	d0,objoff_35(a1)

loc_12B6C:
	cmpi.b	#$D6,(a1) ; is it objD6 (CNZ point giver)?
	bne.s	loc_12B80 ; if not, branch
	move.l	objoff_30(a1),d0
	move.l	objoff_34(a1),objoff_30(a1)
	move.l	d0,objoff_34(a1)

loc_12B80:
	cmpi.b	#$85,(a1) ; is it obj85 (CNZ pressure spring)?
	bne.s	loc_12B94 ; if not, branch
	move.b	objoff_36(a1),d0
	move.b	objoff_37(a1),objoff_36(a1)
	move.b	d0,objoff_37(a1)

loc_12B94:
	lea	next_object(a1),a1 ; look at next object ; a1=object
	dbf	d1,loc_12B52 ; loop


	lea	(MainCharacter).w,a1 ; a1=character
	move.b	#$38,(Object_RAM+$2180).w ; load Obj38 (shield) at $FFFFD180
	move.w	a1,(Object_RAM+$2180+parent).w
	move.b	#$35,(Object_RAM+$2200).w ; load Obj35 (invincibility stars) at $FFFFD200
	move.w	a1,(Object_RAM+$2200+parent).w
	btst	#2,status(a1)
	bne.s	loc_12BC8
	move.b	#$13,y_radius(a1)
	move.b	#9,x_radius(a1)

loc_12BC8:
	btst	#3,status(a1)
	beq.s	loc_12BEC
	moveq	#0,d0
	move.b	interact(a1),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a2	; a2=object
	bclr	#4,status(a2)
	bset	#3,status(a2)

loc_12BEC:
	lea	(Sidekick).w,a1 ; a1=character
	move.b	#$38,(Object_RAM+$21C0).w ; load Obj38 (shield) at $FFFFD1C0
	move.w	a1,(Object_RAM+$21C0+parent).w
	move.b	#$35,(Object_RAM+$2300).w ; load Obj35 (invincibility) at $FFFFD300
	move.w	a1,(Object_RAM+$2300+parent).w
	btst	#2,status(a1)
	bne.s	loc_12C18
	move.b	#$F,y_radius(a1)
	move.b	#9,x_radius(a1)

loc_12C18:
	btst	#3,status(a1)
	beq.s	loc_12C3C
	moveq	#0,d0
	move.b	interact(a1),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a2	; a2=object
	bclr	#3,status(a2)
	bset	#4,status(a2)

loc_12C3C:
	move.b	#$40,($FFFFF622).w
	move.b	#1,($FFFFF623).w
	move.w	#$EC,d0
	jmp	(PlayMusic).l
; ===========================================================================
; unknown
byte_12C52:
	dc.b $B0,  8,$B0,$48,  0,$1B,$F7,$6E,$F7,$8C,  0,  0,$FC,  0,$F7,$8E
	dc.b   0,  0,$F7,$70,$F7,$78,  0,  3,$F7,$60,$FE,$C0,  0,  2,$F7,$12; 16
	dc.b $F7,$16,  0,  1,$F7,$1C,$F7,$24,  0,  3,$EE,  0,$EE,$20,  0, $F; 32
	dc.b $F7,$DA,$F7,$DC,  0,  0,$EE,$C8,$EE,$F8,  0,  3,$EE,$D0,$EE,$D4; 48
	dc.b   0,  1,$EE,$D8,$EE,$DA,  0,  0,$EE,$40,$EE,$48,  0,  3,$EE,$50; 64
	dc.b $EE,$58,  0,  3,$EE,$60,$EE,$80,  0, $F,$EE,$A0,$EE,$A8,  0,  3; 80
	dc.b $EE,$B0,$EE,$B8,  0,  1,$E5,  0,$E6,  0,  0,$7F; 96
; ===========================================================================

qmark_monitor:
	addq.w	#1,(a2)
	rts
; ===========================================================================

loc_12CC2:
	subq.w	#1,anim_frame_duration(a0)
	bmi.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================
; animation script
; off_12CCE:
Ani_obj26:
	dc.w byte_12CE4-Ani_obj26; frame 0
	dc.w byte_12CE8-Ani_obj26; 1
	dc.w byte_12CF0-Ani_obj26; 2
	dc.w byte_12CF8-Ani_obj26; 3
	dc.w byte_12D00-Ani_obj26; 4
	dc.w byte_12D08-Ani_obj26; 5
	dc.w byte_12D10-Ani_obj26; 6
	dc.w byte_12D18-Ani_obj26; 7
	dc.w byte_12D20-Ani_obj26; 8
	dc.w byte_12D28-Ani_obj26; 9
	dc.w byte_12D30-Ani_obj26; 10
byte_12CE4:
	dc.b	$01	; duration
	dc.b	$00	; frame number (which sprite table to use)
	dc.b	$01	; frame number
	dc.b	$FF	; terminator
byte_12CE8:	dc.b   1,  0,  2,  2,  1,  2,  2,$FF
byte_12CF0:	dc.b   1,  0,  3,  3,  1,  3,  3,$FF
byte_12CF8:	dc.b   1,  0,  4,  4,  1,  4,  4,$FF
byte_12D00:	dc.b   1,  0,  5,  5,  1,  5,  5,$FF
byte_12D08:	dc.b   1,  0,  6,  6,  1,  6,  6,$FF
byte_12D10:	dc.b   1,  0,  7,  7,  1,  7,  7,$FF
byte_12D18:	dc.b   1,  0,  8,  8,  1,  8,  8,$FF
byte_12D20:	dc.b   1,  0,  9,  9,  1,  9,  9,$FF
byte_12D28:	dc.b   1,  0, $A, $A,  1, $A, $A,$FF
byte_12D30:	dc.b   2,  0,  1, $B,$FE,  1
	even
; ---------------------------------------------------------------------------------
; Sprite Mappings - Sprite table for monitor and monitor contents (26, ??)
; ---------------------------------------------------------------------------------
; MapUnc_12D36: MapUnc_obj26:
Obj26_MapUnc_12D36:	BINCLUDE "mappings/sprite/obj26.bin"
; ===========================================================================
	nop




; ----------------------------------------------------------------------------
; Object 0E - Flashing stars from intro
; ----------------------------------------------------------------------------
; Sprite_12E18:
Obj0E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj0E_States(pc,d0.w),d1
	jmp	Obj0E_States(pc,d1.w)
; ===========================================================================
; off_12E26:
Obj0E_States:
	dc.w loc_12E38 - Obj0E_States;  0
	dc.w loc_12E58 - Obj0E_States;  2
	dc.w loc_13066 - Obj0E_States;  4
	dc.w loc_130D4 - Obj0E_States;  6
	dc.w loc_1314A - Obj0E_States;  8
	dc.w loc_13200 - Obj0E_States; $A
	dc.w loc_13294 - Obj0E_States; $C
	dc.w loc_13112 - Obj0E_States; $E
	dc.w loc_1324C - Obj0E_States;$10
; ===========================================================================

loc_12E38:
	addq.b	#2,routine(a0)
	move.l	#Obj0E_MapUnc_136A8,mappings(a0)
	move.w	#$150,art_tile(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),routine(a0)
	bra.s	Obj0E
; ===========================================================================

loc_12E58:
	addq.w	#1,objoff_34(a0)
	cmpi.w	#$120,objoff_34(a0)
	bcc.s	loc_12E68
	bsr.w	sub_134BC

loc_12E68:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_12E76(pc,d0.w),d1
	jmp	off_12E76(pc,d1.w)
; ===========================================================================
off_12E76:
	dc.w loc_12E8A-off_12E76
	dc.w loc_12EC2-off_12E76; 1
	dc.w loc_12EE8-off_12E76; 2
	dc.w loc_12F18-off_12E76; 3
	dc.w loc_12F52-off_12E76; 4
	dc.w loc_12F60-off_12E76; 5
	dc.w loc_12F7C-off_12E76; 6
	dc.w loc_12F9A-off_12E76; 7
	dc.w loc_12FD6-off_12E76; 8
	dc.w loc_13014-off_12E76; 9
; ===========================================================================
; spawn more stars
loc_12E8A:
	addq.b	#2,routine_secondary(a0)
	move.b	#5,mapping_frame(a0)
	move.w	#$110,x_pos(a0)
	move.w	#$E0,objoff_A(a0)
	lea	(Object_RAM+$C0).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro stars) at $FFFFB0C0
	move.b	#8,subtype(a1)
	lea	(Object_RAM+$140).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro stars) at $FFFFD140
	move.b	#6,subtype(a1)
	moveq	#$A7,d0
	bra.w	JmpTo4_PlaySound
; ===========================================================================

loc_12EC2:
	cmpi.w	#$38,objoff_34(a0)
	bcc.s	loc_12ECC
	rts
; ===========================================================================

loc_12ECC:
	addq.b	#2,routine_secondary(a0)
	lea	(Object_RAM+$100).w,a1
	move.b	#$C9,(a1) ; load objC9 (palette change)
	move.b	#0,subtype(a1)
	st	objoff_30(a0)
	moveq	#$19+$80,d0 ; title music
	bra.w	JmpTo4_PlayMusic
; ===========================================================================

loc_12EE8:
	cmpi.w	#$80,objoff_34(a0)
	bcc.s	loc_12EF2
	rts
; ===========================================================================

loc_12EF2:
	addq.b	#2,routine_secondary(a0)
	lea	(Pal_133EC).l,a1
	lea	(Normal_palette).w,a2
	moveq	#$F,d6

loc_12F02:
	move.w	(a1)+,(a2)+
	dbf	d6,loc_12F02

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_12F08:
	lea	(Object_RAM+$180).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB180
	move.b	#$E,subtype(a1)
	rts
; End of function sub_12F08

; ===========================================================================

loc_12F18:
	moveq	#$24,d2
	lea	(word_13046).l,a1

loc_12F20:

	move.w	objoff_2A(a0),d0
	addq.w	#1,d0
	move.w	d0,objoff_2A(a0)
	andi.w	#3,d0
	bne.s	BranchTo6_DisplaySprite
	move.w	objoff_2C(a0),d1
	addq.w	#4,d1
	cmp.w	d2,d1
	bcc.w	loc_1310A
	move.w	d1,objoff_2C(a0)
	move.l	-4(a1,d1.w),d0
	move.w	d0,objoff_A(a0)
	swap	d0
	move.w	d0,x_pos(a0)

BranchTo6_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_12F52:

	lea	(off_13686).l,a1
	bsr.w	AnimateSprite
	bra.w	DisplaySprite
; ===========================================================================

loc_12F60:
	addq.b	#2,routine_secondary(a0)
	move.b	#$12,mapping_frame(a0)
	lea	(Object_RAM+$1C0).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB1C0
	move.b	#$A,subtype(a1)
	bra.w	DisplaySprite
; ===========================================================================

loc_12F7C:
	cmpi.w	#$C0,objoff_34(a0)
	bcs.s	BranchTo7_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	lea	(Object_RAM+$80).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB080
	move.b	#4,subtype(a1)

BranchTo7_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_12F9A:
	cmpi.w	#$120,objoff_34(a0)
	bcs.s	BranchTo8_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	clr.w	objoff_2C(a0)
	st	objoff_2F(a0)
	lea	(Normal_palette_line3).w,a1
	move.w	#$EEE,d0
	moveq	#$F,d6

loc_12FB8:
	move.w	d0,(a1)+
	dbf	d6,loc_12FB8
	lea	(Object_RAM+$240).w,a1
	move.b	#$C9,(a1) ; load objC9 (palette change handler) at $FFFFB240
	move.b	#2,subtype(a1)
	move.b	#$F,(Object_RAM+$400).w ; load Obj0F (title screen menu) at $FFFFB400

BranchTo8_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_12FD6:
	btst	#6,(Graphics_Flags).w
	beq.s	loc_12FEA
	cmpi.w	#$190,objoff_34(a0)
	beq.s	loc_12FF6
	bra.w	DisplaySprite
; ===========================================================================

loc_12FEA:
	cmpi.w	#$1D0,objoff_34(a0)
	beq.s	loc_12FF6
	bra.w	DisplaySprite
; ===========================================================================

loc_12FF6:
	lea	(Object_RAM+$440).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB440
	move.b	#$C,subtype(a1)
	addq.b	#2,routine_secondary(a0)
	lea	(Object_RAM+$180).w,a1
	bsr.w	DeleteObject2 ; delete object at $FFFFB180
	bra.w	DisplaySprite
; ===========================================================================

loc_13014:
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	bne.s	BranchTo9_DisplaySprite
	move.w	objoff_2C(a0),d0
	addq.w	#2,d0
	cmpi.w	#$C,d0
	bcs.s	loc_1302C
	moveq	#0,d0

loc_1302C:
	move.w	d0,objoff_2C(a0)
	move.w	word_1303A(pc,d0.w),(Normal_palette_line3+$A).w

BranchTo9_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================
word_1303A:
	dc.w  $E64
	dc.w  $E86	; 1
	dc.w  $E64	; 2
	dc.w  $EA8	; 3
	dc.w  $E64	; 4
	dc.w  $ECA	; 5
word_13046:
	dc.w  $108
	dc.w   $D0	; 1
	dc.w  $100	; 2
	dc.w   $C0	; 3
	dc.w   $F8	; 4
	dc.w   $B0	; 5
	dc.w   $F6	; 6
	dc.w   $A6	; 7
	dc.w   $FA	; 8
	dc.w   $9E	; 9
	dc.w  $100	; 10
	dc.w   $9A	; 11
	dc.w  $104	; 12
	dc.w   $99	; 13
	dc.w  $108	; 14
	dc.w   $98	; 15
; ===========================================================================

loc_13066:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_13074(pc,d0.w),d1
	jmp	off_13074(pc,d1.w)
; ===========================================================================
off_13074:
	dc.w loc_1307E-off_13074
	dc.w loc_13096-off_13074
	dc.w loc_12F52-off_13074
	dc.w loc_130A2-off_13074
	dc.w BranchTo10_DisplaySprite-off_13074
; ===========================================================================

loc_1307E:
	addq.b	#2,routine_secondary(a0)
	move.w	#$D8,x_pos(a0)
	move.w	#$D8,objoff_A(a0)
	move.b	#1,anim(a0)
	rts
; ===========================================================================

loc_13096:
	moveq	#$20,d2
	lea	(word_130B8).l,a1
	bra.w	loc_12F20
; ===========================================================================

loc_130A2:
	addq.b	#2,routine_secondary(a0)
	lea	(Object_RAM+$200).w,a1
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB200
	move.b	#$10,subtype(a1)

BranchTo10_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================
word_130B8:
	dc.w   $D7
	dc.w   $C8	; 1
	dc.w   $D3	; 2
	dc.w   $B8	; 3
	dc.w   $CE	; 4
	dc.w   $AC	; 5
	dc.w   $CC	; 6
	dc.w   $A6	; 7
	dc.w   $CA	; 8
	dc.w   $A2	; 9
	dc.w   $C9	; 10
	dc.w   $A1	; 11
	dc.w   $C8	; 12
	dc.w   $A0	; 13
; ===========================================================================

loc_130D4:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_130E2(pc,d0.w),d1
	jmp	off_130E2(pc,d1.w)
; ===========================================================================
off_130E2:
	dc.w loc_130E6-off_130E2
	dc.w BranchTo11_DisplaySprite-off_130E2; 1
; ===========================================================================

loc_130E6:
	move.b	#$B,mapping_frame(a0)
	tst.b	(Graphics_Flags).w
	bmi.s	loc_130F8
	move.b	#$A,mapping_frame(a0)

loc_130F8:
	move.b	#2,priority(a0)
	move.w	#$120,x_pos(a0)
	move.w	#$E8,objoff_A(a0)

loc_1310A:
	addq.b	#2,routine_secondary(a0)

BranchTo11_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_13112:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_13120(pc,d0.w),d1
	jmp	off_13120(pc,d1.w)
; ===========================================================================
off_13120:
	dc.w loc_13124-off_13120
	dc.w BranchTo12_DisplaySprite-off_13120; 1
; ===========================================================================

loc_13124:
	addq.b	#2,routine_secondary(a0)
	move.w	#0,art_tile(a0)
	move.b	#$11,mapping_frame(a0)
	move.b	#2,priority(a0)
	move.w	#$100,x_pos(a0)
	move.w	#$F0,objoff_A(a0)

BranchTo12_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_1314A:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_13158(pc,d0.w),d1
	jmp	off_13158(pc,d1.w)
; ===========================================================================
off_13158:
	dc.w loc_13160-off_13158
	dc.w loc_12F52-off_13158
	dc.w loc_13190-off_13158
	dc.w loc_1319E-off_13158
; ===========================================================================

loc_13160:
	addq.b	#2,routine_secondary(a0)
	move.b	#$C,mapping_frame(a0)
	ori.w	#$8000,art_tile(a0)
	move.b	#2,anim(a0)
	move.b	#1,priority(a0)
	move.w	#$100,x_pos(a0)
	move.w	#$A8,objoff_A(a0)
	move.w	#4,objoff_2A(a0)
	rts
; ===========================================================================

loc_13190:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_13198
	rts
; ===========================================================================

loc_13198:
	addq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_1319E:
	move.b	#2,routine_secondary(a0)
	move.b	#0,anim_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	move.w	#6,objoff_2A(a0)
	move.w	objoff_2C(a0),d0
	addq.w	#4,d0
	cmpi.w	#$28,d0
	bcc.w	DeleteObject
	move.w	d0,objoff_2C(a0)
	move.l	word_131DC-4(pc,d0.w),d0
	move.w	d0,objoff_A(a0)
	swap	d0
	move.w	d0,x_pos(a0)
	moveq	#$27+$80,d0 ; play intro sparkle sound
	bra.w	JmpTo4_PlaySound
; ===========================================================================
; unknown
word_131DC:
	dc.w   $DA
	dc.w   $F2	; 1
	dc.w  $170	; 2
	dc.w   $F8	; 3
	dc.w  $132	; 4
	dc.w  $131	; 5
	dc.w  $19E	; 6
	dc.w   $A2	; 7
	dc.w   $C0	; 8
	dc.w   $E3	; 9
	dc.w  $180	; 10
	dc.w   $E0	; 11
	dc.w  $10D	; 12
	dc.w  $13B	; 13
	dc.w   $C0	; 14
	dc.w   $AB	; 15
	dc.w  $165	; 16
	dc.w  $107	; 17
; ===========================================================================

loc_13200:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_1320E(pc,d0.w),d1
	jmp	off_1320E(pc,d1.w)
; ===========================================================================
off_1320E:
	dc.w loc_13214-off_1320E; 0
	dc.w loc_13234-off_1320E; 1
	dc.w BranchTo13_DisplaySprite-off_1320E; 2
; ===========================================================================

loc_13214:
	addq.b	#2,routine_secondary(a0)
	move.b	#9,mapping_frame(a0)
	move.b	#3,priority(a0)
	move.w	#$145,x_pos(a0)
	move.w	#$BF,objoff_A(a0)

BranchTo13_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_13234:
	moveq	#$10,d2
	lea	(word_13240).l,a1
	bra.w	loc_12F20
; ===========================================================================
word_13240:
	dc.w  $143
	dc.w   $C1	; 1
	dc.w  $140	; 2
	dc.w   $C2	; 3
	dc.w  $141	; 4
	dc.w   $C1	; 5
; ===========================================================================

loc_1324C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_1325A(pc,d0.w),d1
	jmp	off_1325A(pc,d1.w)
; ===========================================================================
off_1325A:
	dc.w loc_13260-off_1325A
	dc.w loc_13280-off_1325A; 1
	dc.w BranchTo14_DisplaySprite-off_1325A; 2
; ===========================================================================

loc_13260:
	addq.b	#2,routine_secondary(a0)
	move.b	#$13,mapping_frame(a0)
	move.b	#3,priority(a0)
	move.w	#$10F,x_pos(a0)
	move.w	#$D5,objoff_A(a0)

BranchTo14_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_13280:
	moveq	#$C,d2
	lea	(byte_1328C).l,a1
	bra.w	loc_12F20
; ===========================================================================
byte_1328C:
	dc.b   1
	dc.b  $C	; 1
	dc.b   0	; 2
	dc.b $D0	; 3
	dc.b   1	; 4
	dc.b  $D	; 5
	dc.b   0	; 6
	dc.b $D1	; 7
; ===========================================================================

loc_13294:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_132A2(pc,d0.w),d1
	jmp	off_132A2(pc,d1.w)
; ===========================================================================
off_132A2:
	dc.w loc_132A6-off_132A2
	dc.w loc_132D2-off_132A2; 1
; ===========================================================================

loc_132A6:
	addq.b	#2,routine_secondary(a0)
	move.b	#$C,mapping_frame(a0)
	move.b	#5,priority(a0)
	move.w	#$170,x_pos(a0)
	move.w	#$80,objoff_A(a0)
	move.b	#3,anim(a0)
	move.w	#$8C,objoff_2A(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_132D2:
	subq.w	#1,objoff_2A(a0)
	bmi.w	DeleteObject
	subq.w	#2,x_pos(a0)
	addq.w	#1,objoff_A(a0)
	lea	(off_13686).l,a1
	bsr.w	AnimateSprite
	bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C9 - "Palette changing handler" from title screen
; ----------------------------------------------------------------------------
; Sprite_132F0:
ObjC9:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	loc_132FE(pc,d0.w),d1
	jmp	loc_132FE(pc,d1.w)
; ===========================================================================

loc_132FE:
	ori.b	#$46,d4
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lea	(PaletteChangerDataIndex).l,a1
	adda.w	(a1,d0.w),a1
	move.l	(a1)+,objoff_3A(a0)
	movea.l	(a1)+,a2
	move.b	(a1)+,d0
	move.w	d0,objoff_34(a0)
	lea	(Second_palette).w,a3
	adda.w	d0,a3
	move.b	(a1)+,d0
	move.w	d0,objoff_36(a0)

loc_1332E:
	move.w	(a2)+,(a3)+
	dbf	d0,loc_1332E
	move.b	(a1)+,d0
	move.b	d0,objoff_30(a0)
	move.b	d0,objoff_31(a0)
	move.b	(a1)+,objoff_32(a0)
	rts
; ===========================================================================
	; unused/dead code ; a0=object

	subq.b	#1,objoff_30(a0)
	bpl.s	return_1337A
	move.b	objoff_31(a0),objoff_30(a0)
	subq.b	#1,objoff_32(a0)
	bmi.w	DeleteObject
	movea.l	objoff_3A(a0),a2
	movea.l	a0,a3
	move.w	objoff_36(a0),d0
	move.w	objoff_34(a0),d1
	lea	(Normal_palette).w,a0
	adda.w	d1,a0
	lea	(Second_palette).w,a1
	adda.w	d1,a1

-	jsr	(a2)	; dynamic call! to Pal_AddColor, loc_1344C, or loc_1348A, assuming the PaletteChangerData pointers haven't been changed
	dbf	d0,-
	movea.l	a3,a0

return_1337A:
	rts
	
; ===========================================================================
; off_1337C:
PaletteChangerDataIndex:
	dc.w off_1338C - PaletteChangerDataIndex; 0
	dc.w off_13398 - PaletteChangerDataIndex; 1
	dc.w off_133A4 - PaletteChangerDataIndex; 2
	dc.w off_133B0 - PaletteChangerDataIndex; 3
	dc.w off_133BC - PaletteChangerDataIndex; 4
	dc.w off_133C8 - PaletteChangerDataIndex; 5
	dc.w off_133D4 - PaletteChangerDataIndex; 6
	dc.w off_133E0 - PaletteChangerDataIndex; 7

C9PalInfo macro codeptr,dataptr,loadtoOffset,length,fadeinTime,fadeinAmount
	dc.l codeptr, dataptr
	dc.b loadtoOffset, length, fadeinTime, fadeinAmount
    endm

off_1338C:	C9PalInfo Pal_AddColor, Pal_1342C, $60, $F,2,$15
off_13398:	C9PalInfo    loc_1344C, Pal_1340C, $40, $F,4,7
off_133A4:	C9PalInfo    loc_1344C,  Pal_AD1E,   0, $F,8,7
off_133B0:	C9PalInfo    loc_1348A,  Pal_AD1E,   0, $F,8,7
off_133BC:	C9PalInfo    loc_1344C,  Pal_AC7E,   0,$1F,4,7
off_133C8:	C9PalInfo    loc_1344C,  Pal_ACDE, $40,$1F,4,7
off_133D4:	C9PalInfo    loc_1344C,  Pal_AD3E,   0, $F,4,7
off_133E0:	C9PalInfo    loc_1344C,  Pal_AC9E,   0,$1F,4,7

Pal_133EC:	BINCLUDE "art/palettes/Title Sonic.bin"
Pal_1340C:	BINCLUDE "art/palettes/Title Background.bin"
Pal_1342C:	BINCLUDE "art/palettes/Title Emblem.bin"

; ===========================================================================

loc_1344C:

	move.b	(a1)+,d2
	andi.b	#$E,d2
	move.b	(a0),d3
	cmp.b	d2,d3
	bls.s	loc_1345C
	subq.b	#2,d3
	move.b	d3,(a0)

loc_1345C:
	addq.w	#1,a0
	move.b	(a1)+,d2
	move.b	d2,d3
	andi.b	#$E0,d2
	andi.b	#$E,d3
	move.b	(a0),d4
	move.b	d4,d5
	andi.b	#$E0,d4
	andi.b	#$E,d5
	cmp.b	d2,d4
	bls.s	loc_1347E
	subi.b	#$20,d4

loc_1347E:
	cmp.b	d3,d5
	bls.s	loc_13484
	subq.b	#2,d5

loc_13484:
	or.b	d4,d5
	move.b	d5,(a0)+
	rts
; ===========================================================================

loc_1348A:
	moveq	#$E,d2
	move.b	(a0),d3
	and.b	d2,d3
	cmp.b	d2,d3
	bcc.s	loc_13498
	addq.b	#2,d3
	move.b	d3,(a0)

loc_13498:
	addq.w	#1,a0
	move.b	(a0),d3
	move.b	d3,d4
	andi.b	#$E0,d3
	andi.b	#$E,d4
	cmpi.b	#-$20,d3
	bcc.s	loc_134B0
	addi.b	#$20,d3

loc_134B0:
	cmp.b	d2,d4
	bcc.s	loc_134B6
	addq.b	#2,d4

loc_134B6:
	or.b	d3,d4
	move.b	d4,(a0)+
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_134BC:
	tst.b	objoff_2F(a0)
	bne.w	return_135E8
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$7F,(Ctrl_1_Press).w
	andi.b	#$7F,(Ctrl_2_Press).w
	andi.b	#$80,d0
	beq.w	return_135E8
	st	objoff_2F(a0)
	move.b	#$10,routine_secondary(a0)
	move.b	#$12,mapping_frame(a0)
	move.w	#$108,x_pos(a0)
	move.w	#$98,objoff_A(a0)
	lea	(Object_RAM+$1C0).w,a1
	bsr.w	sub_135EA
	move.b	#$E,(a1) ; load obj0E (flashing intro star) at $FFFFB1C0
	move.b	#$A,routine(a1)
	move.b	#2,priority(a1)
	move.b	#9,mapping_frame(a1)
	move.b	#4,routine_secondary(a1)
	move.w	#$141,x_pos(a1)
	move.w	#$C1,objoff_A(a1)
	lea	(Object_RAM+$80).w,a1
	bsr.w	sub_135EA
	move.b	#$E,(a1) ; load obj0E
	move.b	#4,routine(a1)
	move.b	#4,mapping_frame(a1)
	move.b	#6,routine_secondary(a1)
	move.b	#3,priority(a1)
	move.w	#$C8,x_pos(a1)
	move.w	#$A0,objoff_A(a1)
	lea	(Object_RAM+$200).w,a1
	bsr.w	sub_135EA
	move.b	#$E,(a1) ; load obj0E
	move.b	#$10,routine(a1)
	move.b	#2,priority(a1)
	move.b	#$13,mapping_frame(a1)
	move.b	#4,routine_secondary(a1)
	move.w	#$10D,x_pos(a1)
	move.w	#$D1,objoff_A(a1)
	lea	(Object_RAM+$140).w,a1
	move.b	#$E,(a1) ; load obj0E
	move.b	#6,subtype(a1)
	bsr.w	sub_12F08
	move.b	#$F,(Object_RAM+$400).w ; load Obj0F (title screen menu) at $FFFFB400
	lea	(Object_RAM+$C0).w,a1
	bsr.w	DeleteObject2
	lea	Pal_1342C(pc),a1
	lea	(Normal_palette_line4).w,a2
	moveq	#7,d6

loc_135B6:
	move.l	(a1)+,(a2)+
	dbf	d6,loc_135B6
	lea	Pal_1340C(pc),a1
	lea	(Normal_palette_line3).w,a2
	moveq	#7,d6

loc_135C6:
	move.l	(a1)+,(a2)+
	dbf	d6,loc_135C6
	lea	Pal_133EC(pc),a1
	lea	(Normal_palette).w,a2
	moveq	#7,d6

loc_135D6:
	move.l	(a1)+,(a2)+
	dbf	d6,loc_135D6
	tst.b	objoff_30(a0)
	bne.s	return_135E8
	moveq	#$19+$80,d0 ; title music
	bsr.w	JmpTo4_PlayMusic

return_135E8:

	rts
; End of function sub_134BC


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_135EA:

	move.l	#Obj0E_MapUnc_136A8,mappings(a1)
	move.w	#$150,art_tile(a1)
	move.b	#4,priority(a1)
	rts
; End of function sub_135EA

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0F - Title screen menu
; ----------------------------------------------------------------------------
; Sprite_13600:
Obj0F:
	jmp	DeleteObject	; disabled

	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj0F_States(pc,d0.w),d1
	jsr	Obj0F_States(pc,d1.w)
	bra.w	DisplaySprite
; ===========================================================================
; off_13612:
Obj0F_States:
	dc.w Obj0F_Init - Obj0F_States	; 0
	dc.w Obj0F_Main - Obj0F_States	; 2
; ===========================================================================
; loc_13616:
Obj0F_Init:
	addq.b	#2,routine(a0) ; => Obj0F_Main
	move.w	#$128,x_pos(a0)
	move.w	#$14C,objoff_A(a0)
	move.l	#Obj0F_MapUnc_13B70,mappings(a0)
	move.w	#0,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	andi.b	#1,(Title_screen_option).w
	move.b	(Title_screen_option).w,mapping_frame(a0)

; loc_13644:
Obj0F_Main:
	moveq	#0,d2
	move.b	(Title_screen_option).w,d2
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	btst	#0,d0
	beq.s	+
	subq.b	#1,d2
	bcc.s	+
	move.b	#2,d2
+
	btst	#1,d0
	beq.s	+
	addq.b	#1,d2
	cmpi.b	#3,d2
	bcs.s	+
	moveq	#0,d2
+
	move.b	d2,mapping_frame(a0)
	move.b	d2,(Title_screen_option).w
	andi.b	#3,d0
	beq.s	return_13684
	moveq	#$4D+$80,d0 ; selection blip sound
	bsr.w	JmpTo4_PlaySound

return_13684:
	rts
; ===========================================================================
off_13686:
	dc.w byte_1368E-off_13686
	dc.w byte_13694-off_13686; 1
	dc.w byte_1369C-off_13686; 2
	dc.w byte_136A4-off_13686; 3
byte_1368E:
	dc.b   1
	dc.b   5	; 1
	dc.b   6	; 2
	dc.b   7	; 3
	dc.b   8	; 4
	dc.b $FA	; 5
byte_13694:
	dc.b   1
	dc.b   0	; 1
	dc.b   1	; 2
	dc.b   2	; 3
	dc.b   3	; 4
	dc.b   4	; 5
	dc.b $FA	; 6
	dc.b   0	; 7
byte_1369C:
	dc.b   1
	dc.b  $C	; 1
	dc.b  $D	; 2
	dc.b  $E	; 3
	dc.b  $D	; 4
	dc.b  $C	; 5
	dc.b $FA	; 6
	dc.b   0	; 7
byte_136A4:
	dc.b   3
	dc.b  $C	; 1
	dc.b  $F	; 2
	dc.b $FF	; 3
; -----------------------------------------------------------------------------
; Sprite Mappings - Flashing stars from intro (Obj0E)
; -----------------------------------------------------------------------------
Obj0E_MapUnc_136A8:	BINCLUDE "mappings/sprite/obj0E.bin"
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
Obj0F_MapUnc_13B70:	BINCLUDE "mappings/sprite/obj0F.bin"

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo4_PlaySound 

	jmp	(PlaySound).l
; End of function JmpTo4_PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo4_PlayMusic 

	jmp	(PlayMusic).l
; End of function JmpTo4_PlayMusic

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 34 - level title card (screen with red, yellow, and blue)
; ----------------------------------------------------------------------------
; Sprite_13C48:
Obj34: ; (note: screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_13C56(pc,d0.w),d1
	jmp	off_13C56(pc,d1.w)
; ===========================================================================
off_13C56:
	dc.w loc_13C6E-off_13C56	; $0
	dc.w loc_13D22-off_13C56	; $2
	dc.w loc_13D58-off_13C56	; $4
	dc.w loc_13DA6-off_13C56	; $6
	dc.w loc_13DDC-off_13C56	; $8
	dc.w loc_13DE8-off_13C56	; $A	("ZONE")
	dc.w loc_13DEE-off_13C56	; $C
	dc.w loc_13E42-off_13C56	; $E
	dc.w loc_13E84-off_13C56	; $10
	dc.w loc_13EE6-off_13C56	; $12
	dc.w loc_13EFE-off_13C56	; $14
	dc.w loc_13F18-off_13C56	; $16
; ===========================================================================

loc_13C6E:
	lea	(a0),a1
	lea	Obj34_TitleCardData(pc),a2
	moveq	#5,d1

-	_move.b	#$34,0(a1) ; load obj34
	move.b	(a2)+,routine(a1)
	move.l	#Obj34_MapUnc_147BA,mappings(a1)
	move.b	(a2)+,mapping_frame(a1)
	move.b	(a2)+,width_pixels(a1)
	move.b	(a2)+,anim_frame_duration(a1)
	move.w	(a2),x_pixel(a1)
	move.w	(a2)+,objoff_32(a1)
	move.w	(a2)+,objoff_30(a1)
	move.w	(a2)+,y_pixel(a1)
	move.b	#0,render_flags(a1)
	lea	next_object(a1),a1 ; a1=object
	dbf	d1,-
	
	move.w	#$26,(Object_RAM+$180+$34).w
	clr.w	(Vscroll_Factor).w
	move.w	#-$E0,($FFFFF61E).w

	clearRAM Horiz_Scroll_Buf,$400

	rts
; ===========================================================================
; This macro declares data for an object. The data includes:
; - the initial routine counter (byte)
; - the initial mapping frame (byte)
; - the width of the object (byte)
; - the number of frames before it appears on screen (byte)
; - the X position where it starts and where it will go back (word)
; - the X position to reach (word)
; - the Y position (word)
titlecardobjdata macro routine,frame,width,duration,xstart,xstop,y
	dc.b routine,frame,width,duration
	dc.w xstart,xstop,y
    endm
; word_13CD4:
Obj34_TitleCardData:	;rou,mapf,widt,dela,Xstrt,Xendp,Ypos
	titlecardobjdata  8,   0, $80, $1B, $240, $120, $B8	; zone name
	titlecardobjdata $A, $11, $40, $1C,  $28, $148, $D0	; "ZONE"
	titlecardobjdata $C, $12, $18, $1C,  $68, $188, $D0	; act number
	titlecardobjdata  2,   0,   0,   0,    0,    0,   0	; blue background
	titlecardobjdata  4, $15, $48,   8, $2A8, $168,$120	; bottom yellow part
	titlecardobjdata  6, $16,   8, $15,  $80,  $F0, $F0	; left red part
Obj34_TitleCardData_End:

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_13D10:
	subq.b	#1,anim_frame_duration(a0)
	bne.s	loc_13D1E
	move.b	#1,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_13D1E:
	addq.w	#4,sp
	rts
; End of function sub_13D10

; ===========================================================================

loc_13D22:
	moveq	#$10,d0
	moveq	#8,d1
	tst.w	(Two_player_mode).w	; if two-player mode is on (1)
	sne	d6			; then set d6 to $FF, else set d6 to $00
	beq.s	loc_13D32
	moveq	#$20,d0
	moveq	#7,d1

loc_13D32:
	move.w	objoff_34(a0),d2
	cmp.w	d0,d2
	beq.s	return_13D56
	lsl.w	d1,d2
	move.w	#-$4000,d0
	add.w	d2,d0
	move.w	d0,objoff_36(a0)
	tst.b	d6
	beq.s	loc_13D52
	addi.w	#-$6000,d2
	move.w	d2,objoff_38(a0)

loc_13D52:
	addq.w	#1,objoff_34(a0)

return_13D56:
	rts
; ===========================================================================

loc_13D58:
	jsr	sub_13D10(pc)
	move.w	objoff_34(a0),d0
	bmi.w	sub_13E1C
	add.w	d0,d0
	move.w	#$500,d1
	tst.w	(Two_player_mode).w
	sne	d6
	bne.s	loc_13D74
	add.w	d1,d1

loc_13D74:
	move.w	#-$4000,d2
	add.w	d0,d2
	add.w	d1,d2
	move.w	d2,objoff_36(a0)
	tst.b	d6
	beq.s	loc_13D8E
	addi.w	#-$6000,d1
	add.w	d0,d1
	move.w	d1,objoff_38(a0)

loc_13D8E:
	subq.w	#2,objoff_34(a0)
	move.w	objoff_34(a0),objoff_3A(a0)
	cmpi.w	#6,objoff_34(a0) ; if objoff_34(a0) is 6,
	seq	objoff_34(a0) ; then set it to $FF, else set it to $00
	bra.w	sub_13E1C
; ===========================================================================

loc_13DA6:
	jsr	sub_13D10(pc)
	tst.w	objoff_34(a0)
	bmi.w	sub_13E1C
	move.w	#-$4000,objoff_36(a0)
	tst.w	(Two_player_mode).w
	beq.s	loc_13DC4
	move.w	#-$6000,objoff_38(a0)

loc_13DC4:
	addq.w	#2,objoff_34(a0)
	move.w	objoff_34(a0),objoff_3A(a0)
	cmpi.w	#$E,objoff_34(a0)
	seq	objoff_34(a0)
	bra.w	sub_13E1C
; ===========================================================================

loc_13DDC:
	jsr	sub_13D10(pc)
	move.b	(Current_Zone).w,mapping_frame(a0)
	bra.s	sub_13E1C
; ===========================================================================

loc_13DE8:	; "ZONE"
	cmpi.b	#$00,(Current_Zone).w		; current zone EHZ?
	bne.s	+				; if not, branch
	move.b	#$11+6,mapping_frame(a0)	; set new frame ("DEATH ZONE")
+
	jsr	sub_13D10(pc)
	bra.s	sub_13E1C
; ===========================================================================

loc_13DEE:
	jsr	sub_13D10(pc)
	move.b	(Current_Zone).w,d0
	cmpi.b	#$10,d0
	beq.s	BranchTo9_DeleteObject
	cmpi.b	#6,d0
	beq.s	BranchTo9_DeleteObject
	cmpi.b	#$E,d0
	beq.s	BranchTo9_DeleteObject
	move.b	(Current_Act).w,d1
	addi.b	#$12,d1
	cmpi.b	#5,d0
	bne.s	loc_13E18
	moveq	#$14,d1

loc_13E18:
	move.b	d1,mapping_frame(a0)

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_13E1C:

	moveq	#$10,d0
	move.w	x_pixel(a0),d1
	cmp.w	objoff_30(a0),d1
	beq.s	BranchTo15_DisplaySprite
	bhi.s	loc_13E2C
	neg.w	d0

loc_13E2C:
	sub.w	d0,x_pixel(a0)
	cmpi.w	#$200,x_pixel(a0)
	bhi.s	return_13E3C

BranchTo15_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

return_13E3C:
	rts
; End of function sub_13E1C

; ===========================================================================

BranchTo9_DeleteObject 
	bra.w	DeleteObject
; ===========================================================================

loc_13E42:
	move.w	objoff_34(a0),d0
	bpl.s	loc_13E54
	move.b	#$10,-next_object+routine(a0)
	clr.w	-next_object+objoff_34(a0)
	bra.s	BranchTo9_DeleteObject
; ===========================================================================

loc_13E54:
	add.w	d0,d0
	move.w	#-$4000,objoff_36(a0)
	add.w	d0,objoff_36(a0)
	tst.w	(Two_player_mode).w
	beq.s	loc_13E70
	move.w	#-$6000,objoff_38(a0)
	add.w	d0,objoff_38(a0)

loc_13E70:
	subq.w	#4,objoff_34(a0)
	cmpi.w	#-2,objoff_34(a0)
	bne.s	BranchTo_loc_13EC4
	clr.w	objoff_34(a0)

BranchTo_loc_13EC4 
	bra.w	loc_13EC4
; ===========================================================================

loc_13E84:
	move.w	objoff_34(a0),d0
	cmpi.w	#$28,d0
	bne.s	loc_13E96
	move.b	#$12,-next_object+routine(a0)
	bra.s	BranchTo9_DeleteObject
; ===========================================================================

loc_13E96:
	add.w	d0,d0
	move.w	#$500,d1
	tst.w	(Two_player_mode).w
	sne	d6
	bne.s	loc_13EA6
	add.w	d1,d1

loc_13EA6:
	move.w	#-$4000,d2
	add.w	d0,d2
	add.w	d1,d2
	move.w	d2,objoff_36(a0)
	tst.b	d6
	beq.s	loc_13EC0
	addi.w	#-$6000,d1
	add.w	d0,d1
	move.w	d1,objoff_38(a0)

loc_13EC0:
	addq.w	#4,objoff_34(a0)

loc_13EC4:
	moveq	#$20,d0
	move.w	x_pos(a0),d1
	cmp.w	objoff_32(a0),d1
	beq.s	return_13EE4
	bhi.s	loc_13ED4
	neg.w	d0

loc_13ED4:
	sub.w	d0,x_pos(a0)
	cmpi.w	#$200,x_pos(a0)
	bhi.s	return_13EE4
	bra.w	DisplaySprite
; ===========================================================================

return_13EE4:

	rts
; ===========================================================================

loc_13EE6:
	move.l	a0,-(sp)
	move.l	d7,-(sp)
	bsr.w	DeformBgLayer
	move.l	(sp)+,d7
	movea.l	(sp)+,a0 ; load 0bj address
	addi.b	#2,routine(a0)
	move.w	#$F0,objoff_34(a0)

loc_13EFE:
	move.w	objoff_34(a0),d0
	subi.w	#$20,d0
	cmpi.w	#-$30,d0
	beq.w	BranchTo9_DeleteObject
	move.w	d0,objoff_34(a0)
	move.w	d0,objoff_36(a0)
	rts
; ===========================================================================

loc_13F18:	; $16 - wait and go away, used by the zone name, "ZONE" and the act number
	tst.w	anim_frame_duration(a0)
	beq.s	loc_13F24
	subq.w	#1,anim_frame_duration(a0)
	bra.s	BranchTo16_DisplaySprite
; ===========================================================================

loc_13F24:
	moveq	#$20,d0
	move.w	x_pos(a0),d1
	cmp.w	objoff_32(a0),d1
	beq.s	loc_13F44
	bhi.s	loc_13F34
	neg.w	d0

loc_13F34:
	sub.w	d0,x_pos(a0)
	cmpi.w	#$200,x_pos(a0)
	bhi.s	loc_13F44

BranchTo16_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_13F44:

	cmpa.w	#Object_RAM+$80,a0
	bne.s	BranchTo10_DeleteObject
	moveq	#2,d0
	bsr.w	JmpTo3_LoadPLC
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	move.b	byte_13F62(pc,d0.w),d0
	bsr.w	JmpTo3_LoadPLC
	
	moveq	#$3B,d0
	bsr.w	JmpTo3_LoadPLC

BranchTo10_DeleteObject 
	bra.w	DeleteObject
; ===========================================================================
byte_13F62:
	dc.b $32
	dc.b $32	; 1
	dc.b $32	; 2
	dc.b $32	; 3
	dc.b $34	; 4
	dc.b $34	; 5
	dc.b $34	; 6
	dc.b $34	; 7
	dc.b $36	; 8
	dc.b $36	; 9
	dc.b $37	; 10
	dc.b $33	; 11
	dc.b $39	; 12
	dc.b $3A	; 13
	dc.b $35	; 14
	dc.b $3B	; 15
	dc.b $38	; 16
	dc.b $38	; 17

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 39 - Game/Time Over text
; ----------------------------------------------------------------------------
; Sprite_13F74:
Obj39: ; (screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_13F82(pc,d0.w),d1
	jmp	off_13F82(pc,d1.w)
; ===========================================================================
off_13F82:
	dc.w loc_13F88-off_13F82
	dc.w loc_13FCC-off_13F82; 1
	dc.w loc_13FEE-off_13F82; 2
; ===========================================================================

loc_13F88:
	tst.l	(Plc_Buffer).w
	beq.s	loc_13F90
	rts
; ===========================================================================

loc_13F90:
	addq.b	#2,routine(a0)
	move.w	#$50,x_pixel(a0)
	btst	#0,mapping_frame(a0)
	beq.s	+
	move.w	#$1F0,x_pixel(a0)
+
	move.w	#$F0,y_pixel(a0)
	move.l	#Obj39_MapUnc_14C6C,mappings(a0)
	move.w	#$84DE,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#0,render_flags(a0)
	move.b	#0,priority(a0)

loc_13FCC:
	moveq	#$10,d1
	cmpi.w	#$120,x_pixel(a0)
	beq.s	loc_13FE2
	bcs.s	+
	neg.w	d1
+
	add.w	d1,x_pixel(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_13FE2:
	move.w	#$2D0,anim_frame_duration(a0)
	addq.b	#2,routine(a0)
	rts
; ===========================================================================

loc_13FEE:
	btst	#0,mapping_frame(a0)
	bne.w	BranchTo17_DisplaySprite
	move.b	(Ctrl_1_Press).w,d0
	or.b	(Ctrl_2_Press).w,d0
	andi.b	#$70,d0
	bne.s	loc_14014
	tst.w	anim_frame_duration(a0)
	beq.s	loc_14014
	subq.w	#1,anim_frame_duration(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_14014:

	tst.b	(Time_Over_flag).w
	bne.s	loc_14034
	tst.b	(Time_Over_flag_2P).w
	bne.s	loc_14034
	move.b	#$14,(Game_Mode).w ; => ContinueScreen
	tst.b	(Continue_count).w
	bne.s	loc_1403E
	move.b	#0,(Game_Mode).w ; => SegaScreen
	bra.s	loc_1403E
; ===========================================================================

loc_14034:

	clr.l	(Saved_Timer).w
	move.w	#1,(Level_Inactive_flag).w

loc_1403E:

	tst.w	(Two_player_mode).w
	beq.s	BranchTo17_DisplaySprite
	move.w	#0,(Level_Inactive_flag).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	move.w	#0,(Results_Screen_2P).w
	tst.b	(Time_Over_flag).w
	bne.s	BranchTo17_DisplaySprite
	tst.b	(Time_Over_flag_2P).w
	bne.s	BranchTo17_DisplaySprite
	move.w	#1,(Game_Over_2P).w
	move.w	#1,(Results_Screen_2P).w
	bsr.w	JmpTo_sub_8476
	move.w	#-1,(a4)
	tst.b	objoff_3F(a0)
	beq.s	loc_1407E
	addq.w	#1,a4

loc_1407E:
	move.b	#-2,(a4)

BranchTo17_DisplaySprite 

	bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3A - End of level results screen
; ----------------------------------------------------------------------------
; Sprite_14086:
Obj3A: ; (screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_14094(pc,d0.w),d1
	jmp	off_14094(pc,d1.w)
; ===========================================================================
off_14094:
	dc.w loc_140AC-off_14094
	dc.w loc_14102-off_14094; 1
	dc.w BranchTo_sub_13E1C-off_14094; 2
	dc.w loc_14146-off_14094; 3
	dc.w loc_14168-off_14094; 4
	dc.w loc_1419C-off_14094; 5
	dc.w loc_141AA-off_14094; 6
	dc.w loc_1419C-off_14094; 7
	dc.w loc_14270-off_14094; 8
	dc.w loc_142B0-off_14094; 9
	dc.w loc_142CC-off_14094; 10
	dc.w loc_1413A-off_14094; 11
; ===========================================================================

loc_140AC:
	tst.l	(Plc_Buffer).w
	beq.s	loc_140B4
	rts
; ===========================================================================

loc_140B4:
	movea.l	a0,a1
	lea	byte_14380(pc),a2
	moveq	#7,d1

loc_140BC:
	_move.b	0(a1),d0
	beq.s	loc_140CE
	cmpi.b	#$3A,d0
	beq.s	loc_140CE
	lea	next_object(a1),a1 ; a1=object
	bra.s	loc_140BC
; ===========================================================================

loc_140CE:

	_move.b	#$3A,0(a1) ; load obj3A
	move.w	(a2)+,x_pixel(a1)
	move.w	(a2)+,objoff_30(a1)
	move.w	(a2)+,y_pixel(a1)
	move.b	(a2)+,routine(a1)
	move.b	(a2)+,mapping_frame(a1)
	move.l	#Obj3A_MapUnc_14CBC,mappings(a1)
	bsr.w	Adjust2PArtPointer2
	move.b	#0,render_flags(a1)
	lea	next_object(a1),a1 ; a1=object
	dbf	d1,loc_140BC

loc_14102:
	moveq	#0,d0
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_14118
	addq.w	#1,d0
	btst	#7,(Graphics_Flags).w
	beq.s	loc_14118
	addq.w	#1,d0

loc_14118:

	move.b	d0,mapping_frame(a0)
	bsr.w	sub_13E1C
	move.w	x_pixel(a0),d0
	cmp.w	objoff_30(a0),d0
	bne.w	return_14138
	move.b	#$A,routine(a0)
	move.w	#$B4,anim_frame_duration(a0)

return_14138:
	rts
; ===========================================================================

loc_1413A:
	tst.w	(Perfect_rings_left).w
	bne.w	DeleteObject

BranchTo_sub_13E1C 
	bra.w	sub_13E1C
; ===========================================================================

loc_14146:
	move.b	(Current_Zone).w,d0
	cmpi.b	#$10,d0
	beq.s	loc_1415E
	cmpi.b	#6,d0
	beq.s	loc_1415E
	cmpi.b	#$E,d0
	bne.w	sub_13E1C

loc_1415E:

	move.b	#5,mapping_frame(a0)
	bra.w	sub_13E1C
; ===========================================================================

loc_14168:
	move.b	(Current_Zone).w,d0
	cmpi.b	#$10,d0
	beq.w	BranchTo9_DeleteObject
	cmpi.b	#6,d0
	beq.w	BranchTo9_DeleteObject
	cmpi.b	#$E,d0
	beq.w	BranchTo9_DeleteObject
	cmpi.b	#5,d0
	bne.s	loc_1418E
	moveq	#8,d0
	bra.s	loc_14194
; ===========================================================================

loc_1418E:
	move.b	(Current_Act).w,d0
	addq.b	#6,d0

loc_14194:
	move.b	d0,mapping_frame(a0)
	bra.w	sub_13E1C
; ===========================================================================

loc_1419C:
	subq.w	#1,anim_frame_duration(a0)
	bne.s	BranchTo18_DisplaySprite
	addq.b	#2,routine(a0)

BranchTo18_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_141AA:
	bsr.w	DisplaySprite
	move.b	#1,(Update_Bonus_score).w
	moveq	#0,d0
	tst.w	(Bonus_Countdown_1).w
	beq.s	loc_141C6
	addi.w	#$A,d0
	subi.w	#$A,(Bonus_Countdown_1).w

loc_141C6:
	tst.w	(Bonus_Countdown_2).w
	beq.s	loc_141D6
	addi.w	#$A,d0
	subi.w	#$A,(Bonus_Countdown_2).w

loc_141D6:
	tst.w	($FFFFFF92).w
	beq.s	loc_141E6
	addi.w	#$A,d0
	subi.w	#$A,($FFFFFF92).w

loc_141E6:
	add.w	d0,($FFFFFF8E).w
	tst.w	d0
	bne.s	loc_14256
	move.w	#$C5,d0
	jsr	(PlaySound).l
	addq.b	#2,routine(a0)
	move.w	#$B4,anim_frame_duration(a0)
	cmpi.w	#1000,($FFFFFF8E).w
	bcs.s	return_14254
	move.w	#$12C,anim_frame_duration(a0)
	lea	next_object(a0),a1 ; a1=object

loc_14214:
	_tst.b	0(a1)
	beq.s	loc_14220
	lea	next_object(a1),a1 ; a1=object
	bra.s	loc_14214
; ===========================================================================

loc_14220:
	_move.b	#$3A,0(a1) ; load obj3A (uses screen-space)
	move.b	#$12,routine(a1)
	move.w	#$188,x_pixel(a1)
	move.w	#$118,y_pixel(a1)
	move.l	#Obj3A_MapUnc_14CBC,mappings(a1)
	bsr.w	Adjust2PArtPointer2
	move.b	#0,render_flags(a1)
	move.w	#$3C,anim_frame_duration(a1)
	addq.b	#1,(Continue_count).w

return_14254:

	rts
; ===========================================================================

loc_14256:
	jsr	AddPoints
	move.b	($FFFFFE0F).w,d0
	andi.b	#3,d0
	bne.s	return_14254
	move.w	#$CD,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_14270:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	add.b	(Current_Act).w,d0
	add.w	d0,d0
	lea	word_142F8(pc),a1
	tst.w	(Two_player_mode).w
	beq.s	loc_1428C
	lea	word_1433C(pc),a1

loc_1428C:
	move.w	(a1,d0.w),d0
	tst.w	d0
	bpl.s	loc_1429C
	move.b	#0,(Game_Mode).w ; => SegaScreen
	rts
; ===========================================================================

loc_1429C:
	move.w	d0,(Current_ZoneAndAct).w
	clr.b	(Last_star_pole_hit).w
	clr.b	(Last_star_pole_hit_2P).w
	move.w	#1,(Level_Inactive_flag).w
	rts
; ===========================================================================

loc_142B0:
	tst.w	anim_frame_duration(a0)
	beq.s	loc_142BC
	subq.w	#1,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_142BC:
	addi.b	#2,routine(a0)
	move.w	#$BF,d0
	jsr	(PlaySound).l

loc_142CC:
	subq.w	#1,anim_frame_duration(a0)
	bpl.s	loc_142E2
	move.w	#$13,anim_frame_duration(a0)
	addq.b	#1,anim_frame(a0)
	andi.b	#1,anim_frame(a0)

loc_142E2:
	moveq	#$C,d0
	add.b	anim_frame(a0),d0
	move.b	d0,mapping_frame(a0)
	btst	#4,($FFFFFE05).w
	bne.w	DisplaySprite
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; Main game level order

; One value per act. That value is the level/act number of the level to load when
; that act finishes.
; -------------------------------------------------------------------------------
word_142F8:
	dc.w	 1
	dc.w  $D00	; 1
	dc.w	 0	; 2
	dc.w	 0	; 3
	dc.w  $201	; 4
	dc.w  $400	; 5
	dc.w	 0	; 6
	dc.w	 0	; 7
	dc.w  $401	; 8
	dc.w  $500	; 9
	dc.w $1000	; 10
	dc.w	 0	; 11
	dc.w  $E00	; 12
	dc.w	 0	; 13
	dc.w  $701	; 14
	dc.w  $B00	; 15
	dc.w  $801	; 16
	dc.w  $A00	; 17
	dc.w	 0	; 18
	dc.w	 0	; 19
	dc.w  $A01	; 20
	dc.w  $400	; 21
	dc.w  $B01	; 22
	dc.w  $A00	; 23
	dc.w  $C01	; 24
	dc.w  $700	; 25
	dc.w  $D01	; 26
	dc.w  $F00	; 27
	dc.w $FFFF	; 28
	dc.w	 0	; 29
	dc.w  $F01	; 30
	dc.w  $C00	; 31
	dc.w  $600	; 32
	dc.w	 0	; 33
word_1433C:
	dc.w	 1
	dc.w  $C00	; 1
	dc.w	 0	; 2
	dc.w	 0	; 3
	dc.w  $201	; 4
	dc.w  $400	; 5
	dc.w	 0	; 6
	dc.w	 0	; 7
	dc.w  $401	; 8
	dc.w  $500	; 9
	dc.w $1000	; 10
	dc.w	 0	; 11
	dc.w  $E00	; 12
	dc.w	 0	; 13
	dc.w  $701	; 14
	dc.w  $B00	; 15
	dc.w  $801	; 16
	dc.w  $A00	; 17
	dc.w	 0	; 18
	dc.w	 0	; 19
	dc.w  $A01	; 20
	dc.w  $400	; 21
	dc.w  $B01	; 22
	dc.w $FFFF	; 23
	dc.w  $C01	; 24
	dc.w  $B00	; 25
	dc.w  $D01	; 26
	dc.w  $F00	; 27
	dc.w $FFFF	; 28
	dc.w	 0	; 29
	dc.w  $F01	; 30
	dc.w  $C00	; 31
	dc.w  $600	; 32
	dc.w	 0	; 33
byte_14380:
	dc.b   0,$20,  1,$20,  0,$B8,  2,  0,  2,  0,  1,  0,  0,$CA,  4,  3
	dc.b   2,$40,  1,$40,  0,$CA,  6,  4,  2,$78,  1,$78,  0,$BE,  8,  6; 16
	dc.b   3,$50,  1,$20,  1,$20,  4,  9,  3,$20,  1,$20,  0,$F0,  4, $A; 32
	dc.b   3,$30,  1,$20,  1,  0,  4, $B,  3,$40,  1,$20,  1,$10,$16, $E; 48
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6F - End of special stage results screen
; ----------------------------------------------------------------------------
; Sprite_143C0:
Obj6F: ; (note: screen-space obj)
	moveq	#0,d0
	moveq	#0,d6
	move.b	routine(a0),d0
	move.w	off_143D0(pc,d0.w),d1
	jmp	off_143D0(pc,d1.w)
; ===========================================================================
off_143D0:
	dc.w loc_14406-off_143D0
	dc.w loc_14450-off_143D0; 1
	dc.w loc_14484-off_143D0; 2
	dc.w loc_144C2-off_143D0; 3
	dc.w loc_144C0-off_143D0; 4
	dc.w loc_144BE-off_143D0; 5
	dc.w loc_144BC-off_143D0; 6
	dc.w loc_144BA-off_143D0; 7
	dc.w loc_144B8-off_143D0; 8
	dc.w loc_144B6-off_143D0; 9
	dc.w BranchTo3_sub_13E1C-off_143D0; 10
	dc.w loc_14500-off_143D0; 11
	dc.w loc_144DC-off_143D0; 12
	dc.w loc_14568-off_143D0; 13
	dc.w loc_14572-off_143D0; 14
	dc.w loc_14580-off_143D0; 15
	dc.w loc_14572-off_143D0; 16
	dc.w loc_1461C-off_143D0; 17
	dc.w loc_14572-off_143D0; 18
	dc.w loc_14572-off_143D0; 19
	dc.w loc_14626-off_143D0; 20
	dc.w loc_14692-off_143D0; 21
	dc.w loc_14572-off_143D0; 22
	dc.w loc_1461C-off_143D0; 23
	dc.w loc_146A6-off_143D0; 24
	dc.w loc_14714-off_143D0; 25
	dc.w loc_14736-off_143D0; 26
; ===========================================================================

loc_14406:
	tst.l	(Plc_Buffer).w
	beq.s	loc_1440E
	rts
; ===========================================================================

loc_1440E:
	movea.l	a0,a1
	lea	byte_14752(pc),a2
	moveq	#$C,d1

loc_14416:
	_move.b	0(a0),0(a1) ; load obj6F
	move.w	(a2),x_pixel(a1)
	move.w	(a2)+,objoff_32(a1)
	move.w	(a2)+,objoff_30(a1)
	move.w	(a2)+,y_pixel(a1)
	move.b	(a2)+,routine(a1)
	move.b	(a2)+,mapping_frame(a1)
	move.l	#Obj6F_MapUnc_14ED0,mappings(a1)
	move.b	#$78,width_pixels(a1)
	move.b	#0,render_flags(a1)
	lea	next_object(a1),a1 ; go to next object ; a1=object
	dbf	d1,loc_14416 ; loop

loc_14450:
	tst.b	(Got_Emerald).w
	beq.s	loc_1445C
	move.b	#4,mapping_frame(a0)

loc_1445C:
	cmpi.b	#7,(Emerald_count).w
	bne.s	loc_1446A
	move.b	#$19,mapping_frame(a0)

loc_1446A:
	move.w	objoff_30(a0),d0
	cmp.w	x_pos(a0),d0
	bne.s	BranchTo2_sub_13E1C
	move.b	#$1C,routine(a0)
	move.w	#$B4,anim_frame_duration(a0)

BranchTo2_sub_13E1C 
	bra.w	sub_13E1C
; ===========================================================================

loc_14484:
	cmpi.b	#7,(Emerald_count).w
	bne.s	loc_14490
	moveq	#$16,d0
	bra.s	loc_1449A
; ===========================================================================

loc_14490:
	tst.b	(Got_Emerald).w
	beq.w	DeleteObject
	moveq	#1,d0

loc_1449A:
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_144AE
	addq.w	#1,d0
	btst	#7,(Graphics_Flags).w
	beq.s	loc_144AE
	addq.w	#1,d0

loc_144AE:

	move.b	d0,mapping_frame(a0)
	bra.w	sub_13E1C
; ===========================================================================

loc_144B6:
	addq.w	#1,d6

loc_144B8:
	addq.w	#1,d6

loc_144BA:
	addq.w	#1,d6

loc_144BC:
	addq.w	#1,d6

loc_144BE:
	addq.w	#1,d6

loc_144C0:
	addq.w	#1,d6

loc_144C2:
	lea	(Got_Emeralds_array).w,a1
	tst.b	(a1,d6.w)
	beq.w	DeleteObject
	btst	#0,($FFFFFE0F).w
	beq.s	return_144DA
	bsr.w	DisplaySprite

return_144DA:
	rts
; ===========================================================================

loc_144DC:
	tst.w	(Player_mode).w
	bne.w	DeleteObject
	cmpi.b	#$26,(Object_RAM+$800+routine).w
	beq.w	DeleteObject
	moveq	#$E,d0
	btst	#7,(Graphics_Flags).w
	beq.s	loc_144FA
	addq.w	#1,d0

loc_144FA:
	lea	(Bonus_Countdown_2).w,a1
	bra.s	loc_1455A
; ===========================================================================

loc_14500:
	cmpi.b	#$26,(Object_RAM+$800+routine).w
	bne.s	loc_14532
	move.w	#5000,(Bonus_Countdown_1).w
	move.b	#$2A,routine(a0)
	move.w	#$120,objoff_A(a0)
	st	(Update_Bonus_score).w	; set to -1 (update)
	move.w	#$CF,d0
	jsr	(PlaySound).l
	move.w	#$5A,(Object_RAM+$800+anim_frame_duration).w
	bra.w	loc_14692
; ===========================================================================

loc_14532:
	move.w	(Player_mode).w,d0
	beq.s	loc_14554
	move.w	#$120,objoff_A(a0)
	subq.w	#1,d0
	beq.s	loc_14554
	moveq	#$E,d0
	btst	#7,(Graphics_Flags).w
	beq.s	loc_1454E
	addq.w	#1,d0

loc_1454E:
	lea	(Bonus_Countdown_2).w,a1
	bra.s	loc_1455A
; ===========================================================================

loc_14554:

	moveq	#$D,d0
	lea	(Bonus_Countdown_1).w,a1

loc_1455A:

	tst.w	(a1)
	bne.s	loc_14560
	addq.w	#5,d0

loc_14560:
	move.b	d0,mapping_frame(a0)

BranchTo3_sub_13E1C 

	bra.w	sub_13E1C
; ===========================================================================

loc_14568:
	tst.b	(Got_Emerald).w
	beq.w	DeleteObject
	bra.s	BranchTo3_sub_13E1C
; ===========================================================================

loc_14572:
	subq.w	#1,anim_frame_duration(a0)
	bne.s	BranchTo19_DisplaySprite
	addq.b	#2,routine(a0)

BranchTo19_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

loc_14580:
	bsr.w	DisplaySprite
	move.b	#1,(Update_Bonus_score).w
	moveq	#0,d0
	tst.w	(Bonus_Countdown_1).w
	beq.s	loc_1459A
	addi.w	#$A,d0
	subq.w	#1,(Bonus_Countdown_1).w

loc_1459A:
	tst.w	(Bonus_Countdown_2).w
	beq.s	loc_145A8
	addi.w	#$A,d0
	subq.w	#1,(Bonus_Countdown_2).w

loc_145A8:
	tst.w	($FFFFFF8E).w
	beq.s	loc_145B8
	addi.w	#$A,d0
	subi.w	#$A,($FFFFFF8E).w

loc_145B8:
	tst.w	d0
	bne.s	loc_14602
	move.w	#$C5,d0
	jsr	(PlaySound).l
	addq.b	#2,routine(a0)
	move.w	#$78,anim_frame_duration(a0)
	tst.w	($FFFFFF42).w
	bne.s	loc_145F4
	cmpi.w	#2,(Player_mode).w
	beq.s	return_14600
	tst.b	(Got_Emerald).w
	beq.s	return_14600
	cmpi.b	#7,(Emerald_count).w
	bne.s	return_14600
	move.b	#$30,routine(a0)
	rts
; ===========================================================================

loc_145F4:
	move.b	#$24,routine(a0)
	move.w	#$5A,anim_frame_duration(a0)

return_14600:

	rts
; ===========================================================================

loc_14602:
	jsr	AddPoints
	move.b	($FFFFFE0F).w,d0
	andi.b	#3,d0
	bne.s	return_14600
	move.w	#$CD,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_1461C:
	move.w	#1,(Level_Inactive_flag).w
	bra.w	DisplaySprite
; ===========================================================================

loc_14626:
	bsr.w	DisplaySprite
	move.b	#1,(Update_Bonus_score).w
	moveq	#0,d0
	tst.w	(Bonus_Countdown_1).w
	beq.s	loc_14642
	addi.w	#$14,d0
	subi.w	#$14,(Bonus_Countdown_1).w

loc_14642:
	tst.w	d0
	beq.s	loc_14660
	jsr	AddPoints
	move.b	($FFFFFE0F).w,d0
	andi.b	#3,d0
	bne.s	return_14690
	move.w	#$CD,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_14660:
	move.w	#$C5,d0
	jsr	(PlaySound).l
	addq.b	#4,routine(a0)
	move.w	#$78,anim_frame_duration(a0)
	cmpi.w	#2,(Player_mode).w
	beq.s	return_14690
	tst.b	(Got_Emerald).w
	beq.s	return_14690
	cmpi.b	#7,(Emerald_count).w
	bne.s	return_14690
	move.b	#$30,routine(a0)

return_14690:

	rts
; ===========================================================================

loc_14692:

	moveq	#$11,d0
	btst	#3,($FFFFFE0F).w
	beq.s	loc_1469E
	moveq	#$15,d0

loc_1469E:
	move.b	d0,mapping_frame(a0)
	bra.w	DisplaySprite
; ===========================================================================

loc_146A6:
	move.b	#$32,next_object+routine(a0)
	move.w	x_pos(a0),d0
	cmp.w	objoff_32(a0),d0
	bne.s	loc_14714
	move.b	#$14,next_object+routine(a0)
	subq.w	#8,next_object+objoff_A(a0)
	move.b	#$1A,next_object+mapping_frame(a0)
	move.b	#$34,routine(a0)
	subq.w	#8,objoff_A(a0)
	move.b	#$1B,mapping_frame(a0)
	lea	(Object_RAM+$B40).w,a1
	_move.b	0(a0),0(a1) ; load obj6F (I think?) at $FFFFBB40  ; (uses screen-space)
	clr.w	x_pixel(a1)
	move.w	#$120,objoff_30(a1)
	move.w	#$B4,y_pixel(a1)
	move.b	#$14,routine(a1)
	move.b	#$1C,mapping_frame(a1)
	move.l	#Obj6F_MapUnc_14ED0,mappings(a1)
	move.b	#$78,width_pixels(a1)
	move.b	#0,render_flags(a1)
	bra.w	DisplaySprite
; ===========================================================================

loc_14714:

	moveq	#$20,d0
	move.w	x_pos(a0),d1
	cmp.w	objoff_32(a0),d1
	beq.s	BranchTo20_DisplaySprite
	bhi.s	loc_14724
	neg.w	d0

loc_14724:
	sub.w	d0,x_pos(a0)
	cmpi.w	#$200,x_pos(a0)
	bhi.s	return_14734

BranchTo20_DisplaySprite 
	bra.w	DisplaySprite
; ===========================================================================

return_14734:
	rts
; ===========================================================================

loc_14736:
	move.w	x_pos(a0),d0
	cmp.w	objoff_30(a0),d0
	bne.w	sub_13E1C
	move.w	#$B4,anim_frame_duration(a0)
	move.b	#$20,routine(a0)
	bra.w	DisplaySprite
; ===========================================================================
byte_14752:
	dc.b   2,$40,  1,$20,  0,$AA,  2,  0,  0,  0,  1,$20,  0,$98,  4,  1
	dc.b   1,$18,  0,  0,  0,$C4,  6,  5,  1,$30,  0,  0,  0,$D0,  8,  6; 16
	dc.b   1,$30,  0,  0,  0,$E8, $A,  7,  1,$18,  0,  0,  0,$F4, $C,  8; 32
	dc.b   1,  0,  0,  0,  0,$E8, $E,  9,  1,  0,  0,  0,  0,$D0,$10, $A; 48
	dc.b   1,$18,  0,  0,  0,$DC,$12, $B,  3,$30,  1,$20,  1,  8,$14, $C; 64
	dc.b   3,$40,  1,$20,  1,$18,$16, $D,  3,$50,  1,$20,  1,$28,$18, $E; 80
	dc.b   3,$60,  1,$20,  1,$38,$1A,$10; 96
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
;Obj34_MapUnc_147BA:	BINCLUDE "mappings/sprite/obj34.bin"

; -------------------------------------------------------------------------
; Sonic 2 Text Code Generator (Title Card Mappings)
; -------------------------------------------------------------------------
; Created by: Selbi (2010-2013)
; 
; Thanks to:
; - IDA, for kind of helping at converting the binary into an ASM file
; - Xenowhirl, for his SonMapED tool
; - shobiz, for answering some questions in the Basic Q&A thread
; - Whoever did the Text Editing SCHG page, for saving me ages of research
; - Irixion, for beta testing
; -------------------------------------------------------------------------
; ==========================================================================

; -----------------------------------------------------------------------
; Title Card Mappings
; (Created with IDA, SonMapEd and a lot of manual typing)
;    The marked as unused ones are basically using no text, they are
;    pointing to EHZ's text in the original. If you are wondering, why
;    they are named, those were the original zones.
; -----------------------------------------------------------------------

Obj34_MapUnc_147BA:
		dc.w TC_EHZ-Obj34_MapUnc_147BA		; Emerald Hill Zone
		dc.w TC_Unused1-Obj34_MapUnc_147BA	; XXX Unknown
		dc.w TC_Unused2-Obj34_MapUnc_147BA	; XXX Wood Zone
		dc.w TC_Unused3-Obj34_MapUnc_147BA	; XXX Dust Hill Zone
		dc.w TC_MTZ-Obj34_MapUnc_147BA		; Metropolis Zone Act 1+2
		dc.w TC_MT3-Obj34_MapUnc_147BA		; Metropolis Zone Act 3
		dc.w TC_WFZ-Obj34_MapUnc_147BA		; Wing Fortress Zone
		dc.w TC_HTZ-Obj34_MapUnc_147BA		; Hill Top Zone
		dc.w TC_HPZ-Obj34_MapUnc_147BA		; Hidden Palace Zone
		dc.w TC_Unused4-Obj34_MapUnc_147BA	; XXX Genocide City Zone
		dc.w TC_OOZ-Obj34_MapUnc_147BA		; Oil Ocean Zone
		dc.w TC_MCZ-Obj34_MapUnc_147BA		; Mystic Cave Zone
		dc.w TC_CNZ-Obj34_MapUnc_147BA		; Casino Night Zone
		dc.w TC_CPZ-Obj34_MapUnc_147BA		; Chemical Plant Zone
		dc.w TC_DEZ-Obj34_MapUnc_147BA		; Death Egg Zone
		dc.w TC_ARZ-Obj34_MapUnc_147BA		; Aquatic Ruin Zone
		dc.w TC_SCZ-Obj34_MapUnc_147BA		; Sky Chase Zone

		dc.w TC_ZONE-Obj34_MapUnc_147BA		; "ZONE" Text
		dc.w TC_No1-Obj34_MapUnc_147BA		; Act Number 1
		dc.w TC_No2-Obj34_MapUnc_147BA		; Act Number 2
		dc.w TC_No3-Obj34_MapUnc_147BA		; Act Number 3
		dc.w TC_STH-Obj34_MapUnc_147BA		; "SONIC THE HEDGEHOG" Text
		dc.w TC_RedStripes-Obj34_MapUnc_147BA	; Red Stripes

		dc.w TC_DEATHZONE-Obj34_MapUnc_147BA	; "DEATH ZONE" Text (EHZ)



TC_EHZ:		dc.w $B				; EMERALD HILL
		dc.w $0005, $8580, $82C0, $FFC3	; E
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $8580, $82C0, $FFE8	; E
		dc.w $0005, $85E4, $82F2, $FFF8	; R
		dc.w $0005, $85E8, $82F4, $0008	; A
		dc.w $0005, $85EC, $82F6, $0018	; L
		dc.w $0005, $85F0, $82F8, $0028	; D

		dc.w $0005, $85F4, $82FA, $0048	; H
		dc.w $0001, $85F8, $82FC, $0058	; I
		dc.w $0005, $85EC, $82F6, $0060	; L
		dc.w $0005, $85EC, $82F6, $0070	; L

TC_Unused1:	dc.w $B				; EMERALD HILL
		dc.w $0005, $8580, $82C0, $FFC3	; E
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $8580, $82C0, $FFE8	; E
		dc.w $0005, $85E4, $82F2, $FFF8	; R
		dc.w $0005, $85E8, $82F4, $0008	; A
		dc.w $0005, $85EC, $82F6, $0018	; L
		dc.w $0005, $85F0, $82F8, $0028	; D

		dc.w $0005, $85F4, $82FA, $0048	; H
		dc.w $0001, $85F8, $82FC, $0058	; I
		dc.w $0005, $85EC, $82F6, $0060	; L
		dc.w $0005, $85EC, $82F6, $0070	; L

TC_Unused2:	dc.w $B				; EMERALD HILL
		dc.w $0005, $8580, $82C0, $FFC3	; E
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $8580, $82C0, $FFE8	; E
		dc.w $0005, $85E4, $82F2, $FFF8	; R
		dc.w $0005, $85E8, $82F4, $0008	; A
		dc.w $0005, $85EC, $82F6, $0018	; L
		dc.w $0005, $85F0, $82F8, $0028	; D

		dc.w $0005, $85F4, $82FA, $0048	; H
		dc.w $0001, $85F8, $82FC, $0058	; I
		dc.w $0005, $85EC, $82F6, $0060	; L
		dc.w $0005, $85EC, $82F6, $0070	; L

TC_Unused3:	dc.w $B				; EMERALD HILL
		dc.w $0005, $8580, $82C0, $FFC3	; E
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $8580, $82C0, $FFE8	; E
		dc.w $0005, $85E4, $82F2, $FFF8	; R
		dc.w $0005, $85E8, $82F4, $0008	; A
		dc.w $0005, $85EC, $82F6, $0018	; L
		dc.w $0005, $85F0, $82F8, $0028	; D

		dc.w $0005, $85F4, $82FA, $0048	; H
		dc.w $0001, $85F8, $82FC, $0058	; I
		dc.w $0005, $85EC, $82F6, $0060	; L
		dc.w $0005, $85EC, $82F6, $0070	; L

TC_MTZ:		dc.w $A				; METROPOLIS
		dc.w $0009, $85DE, $82EF, $FFE0	; M
		dc.w $0005, $8580, $82C0, $FFF8	; E
		dc.w $0005, $85E4, $82F2, $0008	; T
		dc.w $0005, $85E8, $82F4, $0018	; R
		dc.w $0005, $8588, $82C4, $0028	; O
		dc.w $0005, $85EC, $82F6, $0038	; P
		dc.w $0005, $8588, $82C4, $0048	; O
		dc.w $0005, $85F0, $82F8, $0058	; L
		dc.w $0001, $85F4, $82FA, $0068	; I
		dc.w $0005, $85F6, $82FB, $0070	; S

TC_MT3:		dc.w $A				; METROPOLIS
		dc.w $0009, $85DE, $82EF, $FFE0	; M
		dc.w $0005, $8580, $82C0, $FFF8	; E
		dc.w $0005, $85E4, $82F2, $0008	; T
		dc.w $0005, $85E8, $82F4, $0018	; R
		dc.w $0005, $8588, $82C4, $0028	; O
		dc.w $0005, $85EC, $82F6, $0038	; P
		dc.w $0005, $8588, $82C4, $0048	; O
		dc.w $0005, $85F0, $82F8, $0058	; L
		dc.w $0001, $85F4, $82FA, $0068	; I
		dc.w $0005, $85F6, $82FB, $0070	; S

TC_WFZ:		dc.w $C				; WING FORTRESS
		dc.w $0009, $85DE, $82EF, $FFB1	; W
		dc.w $0001, $85E4, $82F2, $FFC9	; I
		dc.w $0005, $8584, $82C2, $FFD1	; N
		dc.w $0005, $85E6, $82F3, $FFE1	; G

		dc.w $0005, $85EA, $82F5, $0001	; F
		dc.w $0005, $8588, $82C4, $0011	; O
		dc.w $0005, $85EE, $82F7, $0021	; R
		dc.w $0005, $85F2, $82F9, $0031	; T
		dc.w $0005, $85EE, $82F7, $0041	; R
		dc.w $0005, $8580, $82C0, $0051	; E
		dc.w $0005, $85F6, $82FB, $0061	; S
		dc.w $0005, $85F6, $82FB, $0071	; S

TC_HTZ:		dc.w $7				; HILL TOP
		dc.w $0005, $85DE, $82EF, $0008	; H
		dc.w $0001, $85E2, $82F1, $0018	; I
		dc.w $0005, $85E4, $82F2, $0020	; L
		dc.w $0005, $85E4, $82F2, $0030	; L

		dc.w $0005, $85E8, $82F4, $0050	; T
		dc.w $0005, $8588, $82C4, $0060	; O
		dc.w $0005, $85EC, $82F6, $0070	; P
	
TC_HPZ:		dc.w $C				; HIDDEN PALACE
		dc.w $0005, $85DE, $82EF, $FFB8	; H
		dc.w $0001, $85E2, $82F1, $FFC8	; I
		dc.w $0005, $85E4, $82F2, $FFD0	; D
		dc.w $0005, $85E4, $82F2, $FFE0	; D
		dc.w $0005, $8580, $82C0, $FFF0	; E
		dc.w $0005, $8584, $82C2, $000	; N

		dc.w $0005, $85E8, $82F4, $0020	; P
		dc.w $0005, $85EC, $82F6, $0030	; A
		dc.w $0005, $85F0, $82F8, $0040	; L
		dc.w $0005, $85EC, $82F6, $0050	; A
		dc.w $0005, $85F4, $82FA, $0060	; C
		dc.w $0005, $8580, $82C0, $0070	; E

TC_Unused4:	dc.w $B				; EMERALD HILL
		dc.w $0005, $8580, $82C0, $FFC3	; E
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $8580, $82C0, $FFE8	; E
		dc.w $0005, $85E4, $82F2, $FFF8	; R
		dc.w $0005, $85E8, $82F4, $0008	; A
		dc.w $0005, $85EC, $82F6, $0018	; L
		dc.w $0005, $85F0, $82F8, $0028	; D

		dc.w $0005, $85F4, $82FA, $0048	; H
		dc.w $0001, $85F8, $82FC, $0058	; I
		dc.w $0005, $85EC, $82F6, $0060	; L
		dc.w $0005, $85EC, $82F6, $0070	; L

TC_OOZ:		dc.w $8				; OIL OCEAN
		dc.w $0005, $8588, $82C4, $FFFB	; O
		dc.w $0001, $85DE, $82EF, $000B	; I
		dc.w $0005, $85E0, $82F0, $0013	; L

		dc.w $0005, $8588, $82C4, $0033	; O
		dc.w $0005, $85E4, $82F2, $0043	; C
		dc.w $0005, $8580, $82C0, $0053	; E
		dc.w $0005, $85E8, $82F4, $0063	; A
		dc.w $0005, $8584, $82C2, $0073	; N

TC_MCZ:		dc.w $A				; MYSTIC CAVE
		dc.w $0009, $85DE, $82EF, $FFD0	; M
		dc.w $0005, $85E4, $82F2, $FFE8	; Y
		dc.w $0005, $85E8, $82F4, $FFF8	; S
		dc.w $0005, $85EC, $82F6, $0008	; T
		dc.w $0001, $85F0, $82F8, $0018	; I
		dc.w $0005, $85F2, $82F9, $0020	; C

		dc.w $0005, $85F2, $82F9, $0040	; C
		dc.w $0005, $85F6, $82FB, $0050	; A
		dc.w $0005, $85FA, $82FD, $0060	; V
		dc.w $0005, $8580, $82C0, $0070	; E

TC_CNZ:		dc.w $B				; CASINO NIGHT
		dc.w $0005, $85DE, $82EF, $FFD1	; C
		dc.w $0005, $85E2, $82F1, $FFE1	; A
		dc.w $0005, $85E6, $82F3, $FFF1	; S
		dc.w $0001, $85EA, $82F5, $0001	; I
		dc.w $0005, $8584, $82C2, $009	; N
		dc.w $0005, $8588, $82C4, $0019	; O

		dc.w $0005, $8584, $82C2, $0039	; N
		dc.w $0001, $85EA, $82F5, $0049	; I
		dc.w $0005, $85EC, $82F6, $0051	; G
		dc.w $0005, $85F0, $82F8, $0061	; H
		dc.w $0005, $85F4, $82FA, $0071	; T

TC_CPZ:		dc.w $D				; CHEMICAL PLANT
		dc.w $0005, $85DE, $82EF, $FFA4	; C
		dc.w $0005, $85E2, $82F1, $FFB4	; H
		dc.w $0005, $8580, $82C0, $FFC4	; E
		dc.w $0009, $85E6, $82F3, $FFD1	; M
		dc.w $0001, $85EC, $82F6, $FFE9	; I
		dc.w $0005, $85DE, $82EF, $FFF1	; C
		dc.w $0005, $85EE, $82F7, $0001	; A
		dc.w $0005, $85F2, $82F9, $0011	; L

		dc.w $0005, $85F6, $82FB, $0031	; P
		dc.w $0005, $85F2, $82F9, $0041	; L
		dc.w $0005, $85EE, $82F7, $0051	; A
		dc.w $0005, $8584, $82C2, $0061	; N
		dc.w $0005, $85FA, $82FD, $0071	; T

TC_DEZ:		dc.w $8				; DEATH EGG
		dc.w $0005, $85DE, $82EF, $FFF2	; D
		dc.w $0005, $8580, $82C0, $002	; E
		dc.w $0005, $85E2, $82F1, $0012	; A
		dc.w $0005, $85E6, $82F3, $0022	; T
		dc.w $0005, $85EA, $82F5, $0032	; H

		dc.w $0005, $8580, $82C0, $0052	; E
		dc.w $0005, $85EE, $82F7, $0062	; G
		dc.w $0005, $85EE, $82F7, $0072	; G

TC_ARZ:		dc.w $B				; AQUATIC RUIN
		dc.w $0005, $85DE, $82EF, $FFD2	; A
		dc.w $0005, $85E2, $82F1, $FFE2	; Q
		dc.w $0005, $85E6, $82F3, $FFF2	; U
		dc.w $0005, $85DE, $82EF, $0002	; A
		dc.w $0005, $85EA, $82F5, $0012	; T
		dc.w $0001, $85EE, $82F7, $0022	; I
		dc.w $0005, $85F0, $82F8, $002A	; C

		dc.w $0005, $85F4, $82FA, $004A	; R
		dc.w $0005, $85E6, $82F3, $005A	; U
		dc.w $0001, $85EE, $82F7, $006A	; I
		dc.w $0005, $8584, $82C2, $0072	; N

TC_SCZ:		dc.w $8				; SKY CHASE
		dc.w $0005, $85DE, $82EF, $FFF0	; S
		dc.w $0005, $85E2, $82F1, $0000	; K
		dc.w $0005, $85E6, $82F3, $0010	; Y

		dc.w $0005, $85EA, $82F5, $0030	; C
		dc.w $0005, $85EE, $82F7, $0040	; H
		dc.w $0005, $85F2, $82F9, $0050	; A
		dc.w $0005, $85DE, $82EF, $0060	; S
		dc.w $0005, $8580, $82C0, $0070	; E

; ===============================================
; --- Miscellaneous Mappings ---
; -----------------------------------------------

TC_ZONE:	dc.w $4			; ZONE
		dc.w $0005, $858C, $82C6, $0001	; Z
		dc.w $0005, $8588, $82C4, $0010	; O
		dc.w $0005, $8584, $82C2, $0020	; N
		dc.w $0005, $8580, $82C0, $0030	; E

TC_DEATHZONE:	dc.w $9			; DEATH ZONE (EHZ)
		dc.w $0005, $85F0, $82F8, $FFA0	; D
		dc.w $0005, $8580, $82C0, $FFB0	; E
		dc.w $0005, $85E8, $82F4, $FFC0	; A
		dc.w $0005, $85FA, $82FE, $FFD0	; T
		dc.w $0005, $85F4, $82FA, $FFE0	; H

		dc.w $0005, $858C, $82C6, $0001	; Z
		dc.w $0005, $8588, $82C4, $0010	; O
		dc.w $0005, $8584, $82C2, $0020	; N
		dc.w $0005, $8580, $82C0, $0030	; E

TC_No1:		dc.w $1
		dc.w $0007, $A590, $A2C8, $0000	; 1

TC_No2:		dc.w $1
		dc.w $000B, $A598, $A2CC, $0000	; 2

TC_No3:		dc.w $1
		dc.w $000B, $A5A4, $A2D2, $0000	; 3

TC_STH:		dc.w $5
		dc.w $000D, $85B0, $82D8, $FFB8
		dc.w $000D, $85B8, $82DC, $FFD8
		dc.w $000D, $85C0, $82E0, $FFF8
		dc.w $000D, $85C8, $82E4, $0018
		dc.w $0005, $85D0, $82E8, $0038

TC_RedStripes:	dc.w $7
		dc.w $9003, $85D4, $82EA, $0000
		dc.w $B003, $85D4, $82EA, $0000
		dc.w $D003, $85D4, $82EA, $0000
		dc.w $F003, $85D4, $82EA, $0000
		dc.w $1003, $85D4, $82EA, $0000
		dc.w $3003, $85D4, $82EA, $0000
		dc.w $5003, $85D4, $82EA, $0000
		even

; ==============================================
; End of Title Card Mappings
; ==============================================


; ==========================================================================

; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj39_MapUnc_14C6C:	BINCLUDE "mappings/sprite/obj39.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj3A_MapUnc_14CBC:	BINCLUDE "mappings/sprite/obj3A.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj6F_MapUnc_14ED0:	BINCLUDE "mappings/sprite/obj6F.bin"
; ===========================================================================

loc_15584:
	lea	(VDP_data_port).l,a6
	tst.w	(Object_RAM+$80+layer).w
	bne.w	loc_15670
	moveq	#$3F,d5
	move.l	#$85DA85DA,d6
	tst.w	(Two_player_mode).w
	beq.s	loc_155A8
	moveq	#$1F,d5
	move.l	#$82ED82ED,d6

loc_155A8:
	lea	(Object_RAM+$140+$36).w,a0
	moveq	#1,d7

loc_155AE:
	move.w	(a0)+,d0
	beq.s	loc_155C6
	clr.w	-2(a0)
	jsr	sub_15792(pc)
	move.l	d0,4(a6)
	move.w	d5,d4

loc_155C0:
	move.l	d6,(a6)
	dbf	d4,loc_155C0

loc_155C6:
	dbf	d7,loc_155AE
	moveq	#$26,d1
	sub.w	(Object_RAM+$180+$3A).w,d1
	lsr.w	#1,d1
	subq.w	#1,d1
	moveq	#7,d5
	move.l	#$A5DCA5DC,d6
	tst.w	(Two_player_mode).w
	beq.s	loc_155EA
	moveq	#3,d5
	move.l	#$A2EEA2EE,d6

loc_155EA:
	lea	(Object_RAM+$180+$36).w,a0
	moveq	#1,d7

loc_155F0:
	move.w	(a0)+,d0
	beq.s	loc_15614
	clr.w	-2(a0)
	jsr	sub_15792(pc)
	move.w	d5,d4

loc_155FE:
	move.l	d0,4(a6)
	move.w	d1,d3

loc_15604:
	move.l	d6,(a6)
	dbf	d3,loc_15604
	addi.l	#$800000,d0
	dbf	d4,loc_155FE

loc_15614:
	dbf	d7,loc_155F0
	move.w	(Object_RAM+$1C0+$3A).w,d1
	subq.w	#1,d1
	moveq	#$D,d5
	move.l	#$85D885D8,d6
	tst.w	(Two_player_mode).w
	beq.s	loc_15634
	moveq	#6,d5
	move.l	#$82EC82EC,d6

loc_15634:
	lea	(Object_RAM+$1C0+$36).w,a0
	moveq	#1,d7
	move.w	#$8F80,4(a6)

loc_15640:
	move.w	(a0)+,d0
	beq.s	loc_15664
	clr.w	-2(a0)
	jsr	sub_15792(pc)
	move.w	d1,d4

loc_1564E:
	move.l	d0,4(a6)
	move.w	d5,d3

loc_15654:
	move.l	d6,(a6)
	dbf	d3,loc_15654
	addi.l	#$20000,d0
	dbf	d4,loc_1564E

loc_15664:
	dbf	d7,loc_15640
	move.w	#$8F02,4(a6)		; VRAM pointer increment: $0002
	rts
; ===========================================================================

loc_15670:
	moveq	#9,d3
	moveq	#3,d4
	move.l	#$85DA85DA,d5
	move.l	#$A5DCA5DC,d6
	tst.w	(Two_player_mode).w
	beq.s	+
	moveq	#4,d3
	moveq	#1,d4
	move.l	#$82ED82ED,d5
	move.l	#$A2EEA2EE,d6
+
	lea	(Object_RAM+$1C0+$36).w,a0
	moveq	#1,d7
	move.w	#$8F80,4(a6)

loc_156A2:
	move.w	(a0)+,d0
	beq.s	loc_156CE
	clr.w	-2(a0)
	jsr	sub_15792(pc)
	moveq	#3,d2

loc_156B0:
	move.l	d0,4(a6)

	move.w	d3,d1
-	move.l	d5,(a6)
	dbf	d1,-

	move.w	d4,d1
-	move.l	d6,(a6)
	dbf	d1,-

	addi.l	#$20000,d0
	dbf	d2,loc_156B0

loc_156CE:
	dbf	d7,loc_156A2
	move.w	#$8F02,4(a6)		; VRAM pointer increment: $0002
	moveq	#7,d5
	move.l	#$85DA85DA,d6
	tst.w	(Two_player_mode).w
	beq.s	+
	moveq	#3,d5
	move.l	#$82ED82ED,d6
+
	lea	(Object_RAM+$180+$36).w,a0
	moveq	#1,d7

loc_156F4:
	move.w	(a0)+,d0
	beq.s	loc_15714
	clr.w	-2(a0)
	jsr	sub_15792(pc)
	move.w	d5,d4

-	move.l	d0,4(a6)
	move.l	d6,(a6)
	move.l	d6,(a6)
	addi.l	#$800000,d0
	dbf	d4,-

loc_15714:
	dbf	d7,loc_156F4
	move.w	(Object_RAM+$140+$36).w,d4
	beq.s	loc_1578C
	lea	4(a6),a5
	tst.w	(Two_player_mode).w
	beq.s	loc_15758
	lea	($FFFFEE20).w,a3
	lea	(Level_Layout).w,a4
	move.w	#$6000,d2
	moveq	#1,d6

-	movem.l	d4-d6,-(sp)
	moveq	#-$10,d5
	move.w	d4,d1
	bsr.w	loc_E2C2
	move.w	d1,d4
	moveq	#-$10,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,-

loc_15758:
	lea	(Camera_X_pos).w,a3
	lea	(Level_Layout).w,a4
	move.w	#$4000,d2
	move.w	(Object_RAM+$140+$36).w,d4
	moveq	#1,d6

-	movem.l	d4-d6,-(sp)
	moveq	#-$10,d5
	move.w	d4,d1
	bsr.w	Calc_VRAM_Pos
	move.w	d1,d4
	moveq	#-$10,d5
	moveq	#$1F,d6
	bsr.w	DrawTiles_Vertical
	movem.l	(sp)+,d4-d6
	addi.w	#$10,d4
	dbf	d6,-

loc_1578C:
	clr.w	(Object_RAM+$140+$36).w
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_15792:
	andi.l	#$FFFF,d0
	lsl.l	#2,d0
	lsr.w	#2,d0
	ori.w	#$4000,d0
	swap	d0
	rts
; End of function sub_15792

; ===========================================================================

loc_157A4:
	movem.l	d0/a0,-(sp)
	bsr.s	LoadTitleCard0
	movem.l	(sp)+,d0/a0
	bra.s	loc_157EC

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_157B0:
LoadTitleCard0:

	move.l	#$70000002,(VDP_control_port).l
	lea	(ArtNem_TitleCard).l,a0
	bsr.w	JmpTo2_NemDec
	lea	(Level_Layout).w,a4
	lea	(ArtNem_TitleCard2).l,a0
	bra.w	JmpTo_NemDecToRAM
; ===========================================================================
; loc_157D2:
LoadTitleCard:
	bsr.s	LoadTitleCard0
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	move.b	byte_15820(pc,d0.w),d0
	lea	word_15832(pc),a0
	lea	(a0,d0.w),a0
	move.l	#$7BC00002,d0

loc_157EC:
	move	#$2700,sr
	lea	(Level_Layout).w,a1
	lea	(VDP_data_port).l,a6
	move.l	d0,4(a6)

loc_157FE:
	moveq	#0,d0
	move.b	(a0)+,d0
	bmi.s	loc_1581A
	lsl.w	#5,d0
	lea	(a1,d0.w),a2
	moveq	#0,d1
	move.b	(a0)+,d1
	lsl.w	#3,d1
	subq.w	#1,d1

loc_15812:
	move.l	(a2)+,(a6)
	dbf	d1,loc_15812
	bra.s	loc_157FE
; ===========================================================================

loc_1581A:
	move	#$2300,sr
	rts
; ===========================================================================

; ==========================================================================
; -------------------------------------------------------------------------
; Sonic 2 Text Code Generator (Title Card Mappings)
; -------------------------------------------------------------------------
; Created by: Selbi (2010-2013)
; 
; Thanks to:
; - IDA, for kind of helping at converting the binary into an ASM file
; - Xenowhirl, for his SonMapED tool
; - shobiz, for answering some questions in the Basic Q&A thread
; - Whoever did the Text Editing SCHG page, for saving me ages of research
; - Irixion, for beta testing
; -------------------------------------------------------------------------
; 
; This file is NOT needed for the Hg disassembly and only intended to be
; used with Xenowhirl's 2007 disassembly!
; 
; -------------------------------------------------------------------------
; ==========================================================================

; -----------------------------------------------------------------------
; Title Card Setup Code (You only need to edit "word_15832:")
; -----------------------------------------------------------------------
; ==============================================
; --- Letter Loading Offsets ---
; Do NOT modify this list, unless you really
; know what you are doing!
; If you want to do it anyway, these offsets
; are pointing to the starting byte of the
; Letter Loading List.
; ----------------------------------------------
byte_15820:
	dc.b TCL_EHZ-word_15832	; EHZ
	dc.b TCL_EHZ-word_15832	; null
	dc.b TCL_EHZ-word_15832	; null
	dc.b TCL_EHZ-word_15832	; null
	dc.b TCL_MTZ-word_15832	; MZ Act 1+2
	dc.b TCL_MT3-word_15832	; MZ Act 3
	dc.b TCL_WFZ-word_15832	; WFZ
	dc.b TCL_HTZ-word_15832	; HTZ
	dc.b TCL_HPZ-word_15832	; HPZ
	dc.b TCL_EHZ-word_15832	; null
	dc.b TCL_OOZ-word_15832	; OOZ
	dc.b TCL_MCZ-word_15832	; MCZ
	dc.b TCL_CNZ-word_15832	; CNZ
	dc.b TCL_CPZ-word_15832	; CPZ
	dc.b TCL_DEZ-word_15832	; DEZ
	dc.b TCL_ARZ-word_15832	; ARZ
	dc.b TCL_SCZ-word_15832	; SCZ
	even

; ==============================================
; --- Macro List for Letters ---
; Used for the Letter Loading List below (I did
; this to make my and your life easier, but it's
; not really necesary of course).
; Format: $OOSS
; OO = Tile Offset
; S  = Size in number of tiles (Every letter is
;      $4, except W and M, which are $6 and I
;      and the dot, which are $2.)
; NOTE: E, N, O and Z are not implented, as they
;       are not part of the dynamic text loading
;       system. I just added them here to make
;       it clear.
; ----------------------------------------------
_A =	$0004
_B =	$0404
_C =	$0804
_D =	$0C04
;E =	$FF04
_F =	$1004
_G =	$1404
_H =	$1804
_I =	$1C02
_J =	$1E04
_K =	$2204
_L =	$2604
_M =	$2A06
;N =	$FF04
;O =	$FF04
_P =	$3004
_Q =	$3404
_R =	$3804	
_S =	$3C04
_T =	$4004
_U =	$4404
_V =	$4804
_W =	$4C06
_X =	$5204
_Y =	$5604
;Z =	$FF04
TCEnd =	$FFFF

; ==============================================
; --- Letter Loading List ---
; * Each character only once.
; * Letters E, N, O and Z are completely missing,
;   as they are part of the main title card
;   system ("ZONE", "ACT", etc.)
; * TCEnd tells the game that the end of the
;   list has been reached.
; ----------------------------------------------
word_15832:
TCL_EHZ:	dc.w _M, _R, _A, _L, _D, _H, _I, _T, TCEnd	; EHZ
TCL_MTZ:	dc.w _M, _T, _R, _P, _L, _I, _S, TCEnd		; MTZ 1+2
TCL_MT3:	dc.w _M, _T, _R, _P, _L, _I, _S, TCEnd		; MTZ 3
TCL_HTZ:	dc.w _H, _I, _L, _T, _P, TCEnd			; HTZ
TCL_HPZ:	dc.w _H, _I, _D, _P, _A, _L, _C, TCEnd		; HPZ
TCL_OOZ:	dc.w _I, _L, _C, _A, TCEnd			; OOZ
TCL_MCZ:	dc.w _M, _Y, _S, _T, _I, _C, _A, _V, TCEnd	; MCZ
TCL_CNZ:	dc.w _C, _A, _S, _I, _G, _H, _T, TCEnd		; CNZ
TCL_CPZ:	dc.w _C, _H, _M, _I, _A, _L, _P, _T, TCEnd	; CPZ
TCL_ARZ:	dc.w _A, _Q, _U, _T, _I, _C, _R, TCEnd		; ARZ
TCL_SCZ:	dc.w _S, _K, _Y, _C, _H, _A, TCEnd		; SCZ
TCL_WFZ:	dc.w _W, _I, _G, _F, _R, _T, _S, TCEnd		; WFZ
TCL_DEZ:	dc.w _D, _A, _T, _H, _G, TCEnd			; DEZ
		even

; ==============================================
; End of Title Card Setup
; ==============================================





; ===========================================================================
	nop

JmpTo2_NemDec 
	jmp	(NemDec).l
; ===========================================================================

JmpTo_NemDecToRAM 
	jmp	(NemDecToRAM).l
; End of function LoadTitleCard0


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo3_LoadPLC 

	jmp	(LoadPLC).l
; End of function JmpTo3_LoadPLC


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_sub_8476 
	jmp	sub_8476.l
; End of function JmpTo_sub_8476


; ===========================================================================
; ----------------------------------------------------------------------------
; Subroutines to Manage the individual spike movement types
; ----------------------------------------------------------------------------

Spike_Hurt:
	move.l	y_pos(a1),d3
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	sub.l	d0,d3
	move.l	d3,y_pos(a1)
	movea.l	a0,a2	; spike is now in a2
	movea.l	a1,a0	; Sonic is now in a0
	move.b	#4,routine(a0)
	jsr	JmpTo_Sonic_ResetOnFloor_Part2
	bset	#1,status(a0)
	move.b	#$1A,anim(a0)		; set animation to hurt
	;move.b	#0,anim_frame(a0)	; reset animation frame
	move.w	#$26+$80,d0	; load spikes damage sound
	jsr	(PlaySound).l
	move.b	#10,($FFFFF502).w	; set hits on hut to red for 10 frames
	move.b	#1,(Update_HUD_rings).w	; update HUD
	cmpi.w	#999,($FFFFF500).w	; already 999 hits?
	bcc.s	+			; if yes, branch
	addq.w	#1,($FFFFF500).w	; increase hit counter
+
; center Sonic
	cmpi.b	#2,routine(a2)	; upright?
	bne.s	+
	move.w	x_pos(a2),x_pos(a0)
+	cmpi.b	#4,routine(a2)	; sideways?
	bne.s	+
	move.w	y_pos(a2),y_pos(a0)
+	cmpi.b	#6,routine(a2)	; upside-down?
	bne.s	+
	move.w	x_pos(a2),x_pos(a0)
+
; end center Sonic

; check for subtype
	cmpi.b	#0,d4
	bne.s	+
	bsr.w	SH_Default
	
+	cmpi.b	#1,d4
	bne.s	+
	bsr.w	SH_Level1
+	cmpi.b	#2,d4
	bne.s	+
	bsr.w	SH_Level2
+	cmpi.b	#3,d4
	bne.s	+
	bsr.w	SH_Level3


+	cmpi.b	#4,d4
	bne.s	+
	bsr.w	SH_Flip

+	cmpi.b	#5,d4
	bne.s	+
	bsr.w	SH_Halve

+	cmpi.b	#6,d4
	bne.s	+
	bsr.w	SH_Explode
+; end subtype check

	btst	#1,render_flags(a2)	; is Spike y-flipped?
	beq.s	+			; if not, branch
	neg.w	y_vel(a0)		; negate Y-speed
+

	movea.l	a2,a0
	rts

; ----------------------------------------------------------------------------
; ===========================================================================
; ----------------------------------------------------------------------------

SH_Default: ;$0
;	rts ; deadlocked (abstract hook)
	move.w	#-$400,y_vel(a0) ; make Sonic bounce away from the object
	move.w	#-$200,x_vel(a0)
	btst	#6,status(a0)	; underwater?
	beq.s	+		; if not, branch
	move.w	#-$200,y_vel(a0) ; bounce slower
	move.w	#-$100,x_vel(a0)
+
	move.w	x_pos(a0),d0
	cmp.w	x_pos(a2),d0
	bcs.s	+		; if Sonic is left of the object, branch
	neg.w	x_vel(a0)	; if Sonic is right of the object, reverse
+	rts
; ----------------------------------------------------------------------------
SH_Flip: ;$4
	move.w	#$200,y_vel(a0) ; make Sonic bounce away from the object
	rts
; ===========================================================================

SH_Level1: ;$1
	move.w	#-$200,x_vel(a0)
	bra.s	SH_Level_End
; ----------------------------------------------------------------------------
SH_Level2: ;$2
	move.w	#-$400,x_vel(a0)
	bra.s	SH_Level_End
; ----------------------------------------------------------------------------
SH_Level3: ;$3
	move.w	#-$800,x_vel(a0)
; ----------------------------------------------------------------------------
SH_Level_End:
	btst	#0,render_flags(a2)
	bne.s	+
	neg.w	x_vel(a0)
+	move.w	#-$400,y_vel(a0)
	rts
; ===========================================================================

SH_Halve: ;$5
	move.w	#-$400,y_vel(a0) ; make Sonic bounce away from the object

	move.w	x_vel(a0),d0	; get x-speed
	asr.w	#1,d0		; divide it by two (works for both negative and positive speeds)
	move.w	d0,x_vel(a0)	; store the result back
	rts

	move.w	x_vel(a0),d0	; get x-speed
	move.w	d0,d1		; copy for later
	bpl.s	+		; is speed positive? if yes, branch
	neg.w	d0		; if not, make it positive
+	lsr.w	#1,d0		; divide by 2
	tst.w	d1		; was original speed negative?
	bpl.s	+		; if not, branch
	neg.w	d0		; if yes, make it negative again
+	move.w	d0,x_vel(a0)	; store result
	rts

	move.w	x_vel(a0),d0	; get x-speed
	move.w	d0,d1		; copy
	asr.w	#1,d1		; halve speed
	tst.w	d1		; test result
	beq.s	SHH_2		; return if d1 is 0
	bmi.s	SHH_1		; branch if moving left
	sub.w	d1,d0		; reduce x velocity by d1
	bcc.s	+
	move.w	#0,d0
+	move.w	d0,x_vel(a0)
	bra.s	SHH_2
SHH_1:	sub.w	d1,d0	; reduce x velocity by d1
	bcs.s	SHH_2
	move.w	#0,d0
	move.w	d0,x_vel(a0)
SHH_2:	rts
; ===========================================================================

SH_Explode:
	;move.w	#0,x_vel(a0)
	move.w	#-$1000,y_vel(a0)

	;lea	(MainCharacter).w,a1
	;move.b	#$35,(Object_RAM+$2200).w ; load Obj35 (invincibility stars) at $FFFFD200
	;move.w	a1,(Object_RAM+$2200+parent).w
	;bset	#1,status_secondary(a1)	; give invincibility status
	;move.w	#20*60,invincibility_time(a1) ; 20 seconds

	jsr	SingleObjLoad
	bne.s	SHE_Abort
	move.b	#$35,(a1)	; load explosion "invincibility starts"


	move.w	x_pos(a2),d2
	move.w	y_pos(a2),d3
	jsr	SingleObjLoad
	bne.s	SHE_Abort
	move.b	#$58,(a1)	; load Explosion object
	move.w	d2,x_pos(a1)
	move.w	d3,y_pos(a1)

	jsr	SingleObjLoad2
	bne.s	SHE_Abort
	move.b	#$58,(a1)	; load Explosion object
	subi.w	#$10,d2
	subi.w	#$08,d3
	btst	#1,render_flags(a2)	; is Spike y-flipped?
	beq.s	+			; if not, branch
	addi.w	#$08*2,d3	
+	move.w	d2,x_pos(a1)
	move.w	d3,y_pos(a1)
	move.b	#1,$30(a1)	; disable explosion sound

	jsr	SingleObjLoad2
	bne.s	SHE_Abort
	move.b	#$58,(a1)	; load Explosion object
	addi.w	#$20,d2
	;addi.w	#$20,d3
	move.w	d2,x_pos(a1)
	move.w	d3,y_pos(a1)
	move.b	#1,$30(a1)	; disable explosion sound

SHE_Abort:
	rts
; ----------------------------------------------------------------------------
; ===========================================================================


; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4D - Spike Arrows
; ----------------------------------------------------------------------------

Obj4D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj4D_Index(pc,d0.w),d1
	jmp	Obj4D_Index(pc,d1.w)
; ===========================================================================
Obj4D_Index:
	dc.w Obj4D_Init - Obj4D_Index		; $0
	dc.w Obj4D_Vertical - Obj4D_Index	; $2
	dc.w Obj4D_Horizontal - Obj4D_Index	; $4
; ===========================================================================

Obj4D_Init: 
	addq.b	#2,routine(a0)	; set to vertical
	cmpi.b	#$B,mapping_frame(a0) ; vertical frame? (at least frame $B)
	blo.s	+		; if not, branch
	addq.b	#2,routine(a0)	; set to horizontal
+
	move.b	#15*2,d0	; set default value (level 1 *2)
	move.b	$37(a0),d1	; get level type (1, 2, 3)
	lsr.b	d1,d0		; 15 on 1, 07 on 2, 03 on 3
	move.b	d0,$37(a0)	; store result
	
	jsr	RandomNumber	; get a random number
	move.b	d0,$3F(a0)	; set result as random start value for sine stuff
	rts			; return
; ===========================================================================

Obj4D_Vertical:
	movea.l	$30(a0),a1	; load parent spike into a1
	cmpi.b	#$36,(a1)	; does it still exist?
	bne.w	Obj4D_Delete	; if not, delete arrow object

	move.b	$3F(a0),d0	; get next saved add position
	jsr	(CalcSine).l	; calc new sine
	asr.w	#6,d0		; drastically shrink it down
	add.w	$3C(a0),d0	; add original Y-pos
	move.w	d0,y_pos(a0)	; save result to new Y-pos
	addq.b	#2,$3F(a0)	; increase for next frame

	addq.b	#1,$35(a0)	; increase one to blink counter
	move.b	$37(a0),d0	; get saved blink interval time
	cmp.b	$35(a0),d0	; blink toggle time reached?
	bpl.s	+		; if not, branch
	eori.b	#1,$34(a0)	; toggle visibility
	clr.b	$35(a0)		; rest blink counter
+	tst.b	$34(a0)		; currently visible?
	beq.s	+		; if yes, branch
	rts			; if not, don't display
+	bra.s	Obj4D_Display	; display
; ===========================================================================

Obj4D_Horizontal:
	movea.l	$30(a0),a1	; load parent spike into a1
	cmpi.b	#$36,(a1)	; does it still exist?
	bne.w	Obj4D_Delete	; if not, delete arrow object

	move.b	$3F(a0),d0	; get next saved add position
	jsr	(CalcSine).l	; calc new sine
	asr.w	#7,d0		; drastically shrink it down
	add.w	$3C(a0),d0	; add original X-pos
	move.w	d0,x_pos(a0)	; save result to new X-pos
	addq.b	#2,$3F(a0)	; increase for next frame

	addq.b	#1,$35(a0)	; increase one to blink counter
	move.b	$37(a0),d0	; get saved blink interval time
	cmp.b	$35(a0),d0	; blink toggle time reached?
	bpl.s	+		; if not, branch
	eori.b	#1,$34(a0)	; toggle visibility
	clr.b	$35(a0)		; rest blink counter
+	tst.b	$34(a0)		; currently visible?
	beq.s	+		; if yes, branch
	rts			; if not, don't display
+	bra.s	Obj4D_Display	; display
; ===========================================================================

Obj4D_Delete:
	jmp	DeleteObject	; delte object
; ===========================================================================

Obj4D_Display:
	bra.w	MarkObjGone_DebugSpikes	; copy parent's display
; ===========================================================================

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 36 - Vertical spikes
; ----------------------------------------------------------------------------
; Sprite_15900:
Obj36:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1590E(pc,d0.w),d1
	jmp	off_1590E(pc,d1.w)
; ===========================================================================
off_1590E:
	dc.w Obj36_Init-off_1590E	; 0  Obj36_Init
	dc.w Obj36_Upright-off_1590E	; 2  Obj36_Upright
	dc.w Obj36_Sideways-off_1590E	; 4  Obj36_Sideways
	dc.w Obj36_UpsideDown-off_1590E	; 6  Obj36_UpsideDown
byte_15916:
	dc.b $10
	dc.b $10	; 1
	dc.b $20	; 2
	dc.b $10	; 3
	dc.b $30	; 4
	dc.b $10	; 5
	dc.b $40	; 6
	dc.b $10	; 7
	dc.b $10	; 8
	dc.b $10	; 9
	dc.b $10	; 10
	dc.b $20	; 11
	dc.b $10	; 12
	dc.b $30	; 13
	dc.b $10	; 14
	dc.b $40	; 15
; ===========================================================================

Obj36_Init:
	cmpi.b	#-1,respawn_index(a0)	; is this a debug-placed spike?
	beq.s	+			; if yes, skip
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
;	beq.s	+		; if the respawn index flag isn't set, don't do this
	bclr	#7,2(a2,d0.w)
	btst	#0,2(a2,d0.w)	; if this bit is set it means the spike is already deleted
	beq.s	+
	jmp	(DeleteObject).l
+
	addq.b	#2,routine(a0)
	move.l	#Obj36_MapUnc_15B68,mappings(a0)
	move.w	#$2434,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#5,priority(a0)
	move.b	subtype(a0),d0
	andi.b	#$F,subtype(a0)
	andi.w	#$F0,d0
	lea	byte_15916(pc),a1
	lsr.w	#3,d0
	adda.w	d0,a1
	move.b	(a1)+,width_pixels(a0)
	move.b	(a1)+,y_radius(a0)
	lsr.w	#1,d0
	move.b	d0,mapping_frame(a0)

	move.b	subtype(a0),d1
	cmpi.b	#5,d1	; halve
	bne.s	+
	move.w	#$0434+$08,art_tile(a0) ; blue spikes
+	cmpi.b	#2,d1	; level 2
	bne.s	+
	move.w	#$0434+$10,art_tile(a0) ; yellow spikes
+	cmpi.b	#3,d1	; level 3
	bne.s	+
	move.w	#$0434+$18,art_tile(a0) ; red spikes
+


	cmpi.b	#4,d0		; horizontal spike?
	bcc.s	O4D_ArtHoriz	; if yes, branch


; O4D_ArtVert:
	cmpi.b	#3,d1		; is a level spike?
	bhi.w	loc_15978	; if not, skip
	tst.b	d1
	beq.w	loc_15978	; default? skip too

	jsr	SingleObjLoad
	bne.s	+
	move.b	#$4D,(a1)	; load arrow object
	move.l	mappings(a0),mappings(a1)
	move.w	#$2434,art_tile(a1)
	move.b	render_flags(a0),render_flags(a1)

	move.b	#7,d0	; 8 is base value
	add.b	d1,d0	; add 1, 2 or 3
	move.b	d0,mapping_frame(a1)
	move.b	d1,$37(a1)
	
	move.b	#6,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	
	move.l	a0,$30(a1)
	
	move.w	y_pos(a0),$3C(a1)

+
	bra.s	loc_15978

O4D_ArtHoriz:
	;cmpi.b	#3,d1		; is a level spike?
	;bhi.s	+		; if not, skip
	;beq.s	+		; default? skip too
	
	jsr	SingleObjLoad
	bne.s	+
	move.b	#$4D,(a1)	; load arrow object
	move.l	mappings(a0),mappings(a1)
	move.w	#$2434,art_tile(a1)
	move.b	render_flags(a0),render_flags(a1)

	move.b	#$B,d0	; $B is base value (NOTE: SHOULD BE $A)
	add.b	d1,d0	; add 1, 2 or 3
	move.b	d0,mapping_frame(a1)
	move.b	d1,$37(a1)

	move.b	#6,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

	move.l	a0,$30(a1)

	move.w	x_pos(a0),$3C(a1)

+

	addq.b	#2,routine(a0)
	move.w	#$242C,art_tile(a0)

loc_15978:
	btst	#1,status(a0)
	beq.s	loc_15986
	move.b	#6,routine(a0)

loc_15986:
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	bra.w	Adjust2PArtPointer
; ===========================================================================
; ===========================================================================
DebugRange = $20

Obj36_DebugCheck:
	tst.w	(Debug_placement_mode).w	; is debug placement mode enabled?
	beq.s	ODC_End				; if not, branch
	
	;move.w	(MainCharacter+x_pos).w,d0	; get debug X-position
	move.w	($FFFFF504).w,d0		; get evened debug X-position
	sub.w	x_pos(a0),d0			; substract spike X-position
	bpl.s	+				; branch if positive
	neg.w	d0				; otherwise make it positive
+	cmpi.w	#DebugRange,d0			; in range?
	bge.s	ODC_End				; if not, end
	
	;move.w	(MainCharacter+y_pos).w,d0	; get debug Y-position
	move.w	($FFFFF506).w,d0		; get evened debug Y-position
	sub.w	y_pos(a0),d0			; substract spike Y-position
	bpl.s	+				; branch if positive
	neg.w	d0				; otherwise make it positive
+	cmpi.w	#DebugRange,d0			; in range?
	bge.s	ODC_End				; if not, end
	
	move.b	#1,($FFFFF503).w		; block debug placement
	btst	#5,(Ctrl_1_Press).w		; is button C pressed?
	beq.s	ODC_End				; if not, branch
	move.b	#0,($FFFFF503).w		; enable debug placement

	move.w	#$65+$80,d0		; play "pf-pf-pfff" sound
	jsr	(PlaySound).l		; play

	cmpi.b	#-1,respawn_index(a0)	; is this a debug-placed spike?
	beq.s	+			; if yes, skip
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
;	beq.s	+		; if the respawn index flag isn't set, don't do this
	bset	#0,2(a2,d0.w)	; mark spike as deleted
+
	jmp	(DeleteObject).l
	
ODC_End:
	rts
; ===========================================================================
; ===========================================================================
; input: a0 = the object
; simply doesn't draw the object if off-screen rather than deleting it
MarkObjGone_DebugSpikes:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	bra.w	DisplaySprite
+	rts
; ===========================================================================
; ===========================================================================

O36_ExploSpike:
	cmpi.b	#6,subtype(a0)		; explosion spike?
	bne.s	OU_NoExplo		; if not, ignore this all
	move.b	(Timer_frames+1).w,d0
	btst	#0,d0
	beq.s	OU_NoExplo
	cmpi.w	#$0434+($08*4+4),art_tile(a0)	; already a red spike?
	beq.s	+			; if yes, branch
	move.w	#$0434+($08*4+4),art_tile(a0)	; if not, make it red
	bra.s	OU_NoExplo		; skip
+	move.w	#$2434+($08*0),art_tile(a0)	; reset it to gray
	
OU_NoExplo:
	rts
; ===========================================================================
; ===========================================================================

Obj36_Upright:
	bsr.w	Obj36_DebugCheck
	bsr.s	O36_ExploSpike
	;bsr.w	sub_15AC6
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject
	move.b	status(a0),d6
	andi.b	#$18,d6
	beq.s	loc_159DE
	move.b	d6,d0
	andi.b	#8,d0
	beq.s	loc_159D0
	lea	(MainCharacter).w,a1 ; a1=character

	move.b	subtype(a0),d4
	bsr.w	Spike_Hurt

loc_159D0:
	andi.b	#$10,d6
	beq.s	loc_159DE
	lea	(Sidekick).w,a1 ; a1=character

	move.b	subtype(a0),d4
	bsr.w	Spike_Hurt

loc_159DE:
	cmpi.b	#-1,respawn_index(a0)	; is this a debug-placed spike?
	beq.w	MarkObjGone_DebugSpikes	; if yes, branch

	move.w	objoff_30(a0),d0
	bra.w	MarkObjGone2
; ===========================================================================

Obj36_Sideways:
	bsr.w	Obj36_DebugCheck
	bsr.w	O36_ExploSpike
	move.w	x_pos(a0),-(sp)
	;bsr.w	sub_15AC6
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	(sp)+,d4
	bsr.w	SolidObject
	swap	d6
	andi.w	#3,d6
	beq.s	loc_15A3A
	move.b	d6,d0
	andi.b	#1,d0
	beq.s	loc_15A26
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#0,d4
	bsr.w	Spike_Hurt
	bclr	#5,status(a0)

loc_15A26:
	andi.b	#2,d6
	beq.s	loc_15A3A
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#0,d4
	bsr.w	Spike_Hurt
	bclr	#6,status(a0)

loc_15A3A:
	cmpi.b	#-1,respawn_index(a0)	; is this a debug-placed spike?
	beq.w	MarkObjGone_DebugSpikes	; if yes, branch

	move.w	objoff_30(a0),d0
	bra.w	MarkObjGone2
; ===========================================================================

Obj36_UpsideDown:
	bsr.w	Obj36_DebugCheck
	bsr.w	O36_ExploSpike
	;bsr.w	sub_15AC6
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject
	swap	d6
	andi.w	#$C,d6
	beq.s	loc_15A88
	move.b	d6,d0
	andi.b	#4,d0
	beq.s	loc_15A7A
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	subtype(a0),d4
	bsr.w	Spike_Hurt

loc_15A7A:
	andi.b	#8,d6
	beq.s	loc_15A88
	lea	(Sidekick).w,a1 ; a1=character
	move.b	subtype(a0),d4
	bsr.w	Spike_Hurt

loc_15A88:
	cmpi.b	#-1,respawn_index(a0)	; is this a debug-placed spike?
	beq.w	MarkObjGone_DebugSpikes	; if yes, branch

	move.w	objoff_30(a0),d0
	bra.w	MarkObjGone2

; ---------------------------------------------------------------------------
; Subroutine for checking if Sonic/Tails should be hurt and hurting them if so
; unlike Touch_ChkHurt, the character is at a1 instead of a0
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

Touch_ChkHurt2:
	btst	#1,status_secondary(a1)
	bne.s	return_15AC4
	tst.w	invulnerable_time(a1)
	bne.s	return_15AC4
	cmpi.b	#4,routine(a1)
	bcc.s	return_15AC4
	move.l	y_pos(a1),d3
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	sub.l	d0,d3
	move.l	d3,y_pos(a1)
	movea.l	a0,a2
	movea.l	a1,a0
	jsr	(HurtCharacter).l
	movea.l	a2,a0

return_15AC4:
	rts
; End of function Touch_ChkHurt2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_15AC6:

	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.w	off_15AD6(pc,d0.w),d1
	jmp	off_15AD6(pc,d1.w)
; End of function sub_15AC6

; ===========================================================================
off_15AD6:
	dc.w return_15ADC-off_15AD6
	dc.w loc_15ADE-off_15AD6; 1
	dc.w loc_15AF2-off_15AD6; 2
; ===========================================================================

return_15ADC:
	rts
; ===========================================================================

loc_15ADE:
	bsr.w	sub_15B06
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_15AF2:
	bsr.w	sub_15B06
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_15B06:

	tst.w	objoff_38(a0)
	beq.s	loc_15B24
	subq.w	#1,objoff_38(a0)
	bne.s	return_15B66
	tst.b	render_flags(a0)
	bpl.s	return_15B66
	move.w	#$B6,d0
	jsr	(PlaySound).l
	bra.s	return_15B66
; ===========================================================================

loc_15B24:
	tst.w	objoff_36(a0)
	beq.s	loc_15B46
	subi.w	#$800,objoff_34(a0)
	bcc.s	return_15B66
	move.w	#0,objoff_34(a0)
	move.w	#0,objoff_36(a0)
	move.w	#$3C,objoff_38(a0)
	bra.s	return_15B66
; ===========================================================================

loc_15B46:
	addi.w	#$800,objoff_34(a0)
	cmpi.w	#$2000,objoff_34(a0)
	bcs.s	return_15B66
	move.w	#$2000,objoff_34(a0)
	move.w	#1,objoff_36(a0)
	move.w	#$3C,objoff_38(a0)

return_15B66:
	rts
; End of function sub_15B06

; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj36_MapUnc_15B68:	BINCLUDE "mappings/sprite/obj36.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3B - Solid block
; ----------------------------------------------------------------------------
; Sprite_15CC8:
Obj3B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_15CD6(pc,d0.w),d1
	jmp	off_15CD6(pc,d1.w)
; ===========================================================================
off_15CD6:
	dc.w loc_15CDA-off_15CD6
	dc.w loc_15D02-off_15CD6
; ===========================================================================

loc_15CDA:
	addq.b	#2,routine(a0)
	move.l	#Obj3B_MapUnc_15D2E,mappings(a0)
	move.w	#$66C0,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$13,width_pixels(a0)
	move.b	#4,priority(a0)

loc_15D02:
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	DeleteObject
	bra.w	DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj3B_MapUnc_15D2E:	BINCLUDE "mappings/sprite/obj3B.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3C - Breakable wall (leftover from S1) (mostly unused)
; ----------------------------------------------------------------------------
; Sprite_15D44:
Obj3C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_15D56(pc,d0.w),d1
	jsr	off_15D56(pc,d1.w)
	bra.w	MarkObjGone
; ===========================================================================
off_15D56:
	dc.w loc_15D5C-off_15D56; 0
	dc.w loc_15D8A-off_15D56; 1
	dc.w loc_15E02-off_15D56; 2
; ===========================================================================

loc_15D5C:
	addq.b	#2,routine(a0)
	move.l	#Obj3C_MapUnc_15ECC,mappings(a0)
	move.w	#$4590,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),mapping_frame(a0)

loc_15D8A:
	move.w	(MainCharacter+x_vel).w,objoff_30(a0)
	move.w	#$1B,d1
	move.w	#$20,d2
	move.w	#$20,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject
	btst	#5,status(a0)
	bne.s	loc_15DAE

return_15DAC:

	rts
; ===========================================================================

loc_15DAE:
	lea	(MainCharacter).w,a1 ; a1=character
	cmpi.b	#2,anim(a1)
	bne.s	return_15DAC
	move.w	objoff_30(a0),d0
	bpl.s	loc_15DC2
	neg.w	d0

loc_15DC2:
	cmpi.w	#$480,d0
	bcs.s	return_15DAC
	move.w	objoff_30(a0),x_vel(a1)
	addq.w	#4,x_pos(a1)
	lea	(word_15E8C).l,a4
	move.w	x_pos(a0),d0
	cmp.w	x_pos(a1),d0
	bcs.s	loc_15DEE
	subi.w	#8,x_pos(a1)
	lea	(word_15EAC).l,a4

loc_15DEE:
	move.w	x_vel(a1),inertia(a1)
	bclr	#5,status(a0)
	bclr	#5,status(a1)
	bsr.s	sub_15E18

loc_15E02:
	bsr.w	ObjectMove
	addi.w	#$70,y_vel(a0)
	tst.b	render_flags(a0)
	bpl.w	DeleteObject
	bra.w	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_15E18:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	add.w	d0,d0
	movea.l	mappings(a0),a3
	adda.w	(a3,d0.w),a3
	move.w	(a3)+,d1
	subq.w	#1,d1
	bset	#5,render_flags(a0)
	_move.b	0(a0),d4
	move.b	render_flags(a0),d5
	movea.l	a0,a1
	bra.s	loc_15E46
; ===========================================================================

loc_15E3E:
	bsr.w	SingleObjLoad2
	bne.s	loc_15E82
	addq.w	#8,a3

loc_15E46:
	move.b	#4,routine(a1)
	_move.b	d4,0(a1) ; load obj3C
	move.l	a3,mappings(a1)
	move.b	d5,render_flags(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	priority(a0),priority(a1)
	move.b	width_pixels(a0),width_pixels(a1)
	move.w	(a4)+,x_vel(a1)
	move.w	(a4)+,y_vel(a1)
	dbf	d1,loc_15E3E

loc_15E82:
	move.w	#$CB,d0
	jmp	(PlaySound).l
; End of function sub_15E18

; seems to be an unused table
; ===========================================================================
word_15E8C:
	dc.w  $400
	dc.w $FB00	; 1
	dc.w  $600	; 2
	dc.w $FF00	; 3
	dc.w  $600	; 4
	dc.w  $100	; 5
	dc.w  $400	; 6
	dc.w  $500	; 7
	dc.w  $600	; 8
	dc.w $FA00	; 9
	dc.w  $800	; 10
	dc.w $FE00	; 11
	dc.w  $800	; 12
	dc.w  $200	; 13
	dc.w  $600	; 14
	dc.w  $600	; 15
word_15EAC:
	dc.w $FA00
	dc.w $FA00	; 1
	dc.w $F800	; 2
	dc.w $FE00	; 3
	dc.w $F800	; 4
	dc.w  $200	; 5
	dc.w $FA00	; 6
	dc.w  $600	; 7
	dc.w $FC00	; 8
	dc.w $FB00	; 9
	dc.w $FA00	; 10
	dc.w $FF00	; 11
	dc.w $FA00	; 12
	dc.w  $100	; 13
	dc.w $FC00	; 14
	dc.w  $500	; 15
; -------------------------------------------------------------------------------
; Unused sprite mappings
; -------------------------------------------------------------------------------
Obj3C_MapUnc_15ECC:	BINCLUDE "mappings/sprite/obj3C.bin"
; ===========================================================================
	bra.w	ObjNull




; -------------------------------------------------------------------------------
; This runs the code of all the objects that are in Object_RAM
; -------------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_15F9C: ObjectsLoad:
RunObjects:
	tst.b	($FFFFF623).w
	bne.s	return_15FE4
	lea	(Object_RAM).w,a0 ; a0=object

	moveq	#$80-1,d7	; run the first $80 objects out of levels
	moveq	#0,d0
	cmpi.b	#8,(Game_Mode).w	; demo mode?
	beq.s	+	; if in a level in a demo, branch
	cmpi.b	#$C,(Game_Mode).w	; regular level mode?
	bne.s	RunObject ; if not in a level, branch to RunObject
+
	move.w	#$90-1,d7	; run the first $90 objects in levels
	tst.w	(Two_player_mode).w
	bne.s	RunObject ; if in 2 player competition mode, branch to RunObject
	
	cmpi.b	#6,(MainCharacter+routine).w
	bcc.s	RunObjectsWhenPlayerIsDead ; if dead, branch
	; continue straight to RunObject
; ---------------------------------------------------------------------------

; -------------------------------------------------------------------------------
; This is THE place where each individual object's code gets called from
; -------------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_15FCC:
RunObject:
	move.b	(a0),d0	; get the object's ID
	beq.s	RunNextObject ; if it's obj00, skip it

	add.w	d0,d0
	add.w	d0,d0	; d0 = object ID * 4
	movea.l	Obj_Index-4(pc,d0.w),a1	; load the address of the object's code
	jsr	(a1)	; dynamic call! to one of the the entries in Obj_Index
	moveq	#0,d0

; loc_15FDC:
RunNextObject:
	lea	next_object(a0),a0 ; load 0bj address
	dbf	d7,RunObject

return_15FE4:
	rts

; ---------------------------------------------------------------------------
; this skips certain objects to make enemies and things pause when Sonic dies
; loc_15FE6:
RunObjectsWhenPlayerIsDead:
	moveq	#$10-1,d7
	bsr.s	RunObject	; run the first $10 objects normally
	moveq	#$70-1,d7
	bsr.s	RunObjectDisplayOnly ; all objects in this range are paused
	moveq	#$10-1,d7
	bra.s	RunObject	; run the last $10 objects normally

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_15FF2:
RunObjectDisplayOnly:
	moveq	#0,d0
	move.b	(a0),d0	; get the object's ID
	beq.s	+	; if it's obj00, skip it
	tst.b	render_flags(a0)	; should we render it?
	bpl.s	+			; if not, skip it
	bsr.w	DisplaySprite
+
	lea	next_object(a0),a0 ; load 0bj address
	dbf	d7,RunObjectDisplayOnly
	rts
; End of function RunObjectDisplayOnly

; ===========================================================================
; ---------------------------------------------------------------------------
; OBJECT POINTER ARRAY ; object pointers ; sprite pointers ; object list ; sprite list
;
; This array contains the pointers to all the objects used in the game.
; The item in the comment is the hex pointer index value used by the game
; (and our hacking guides) to reference an object.
; ---------------------------------------------------------------------------
Obj_Index: ; ObjPtrs: ; loc_1600C:
	dc.l Obj01	; Sonic
	dc.l Obj02	; Tails
	dc.l Obj03	; Collision plane/layer switcher
	dc.l Obj04	; Surface of the water
	dc.l Obj05	; Tails' tails
	dc.l Obj06	; Rotating cylinder in MTZ, twisting spiral pathway in EHZ
	dc.l Obj07	; Oil in OOZ
	dc.l Obj08	; Water splash in Aquatic Ruin Zone, Spindash dust
	dc.l Obj09	; Sonic in Special Stage
	dc.l Obj0A	; Small bubbles from Sonic's face while underwater
	dc.l Obj0B	; Section of pipe that tips you off from CPZ
	dc.l Obj0C	; Small floating platform (unused)
	dc.l Obj0D	; End of level signpost
	dc.l Obj0E	; Flashing stars from intro
	dc.l Obj0F	; Title screen menu
	dc.l Obj10	; Tails in Special Stage
	dc.l Obj11	; Bridge in Emerald Hill Zone and Hidden Palace Zone
	dc.l Obj12	; Emerald from Hidden Palace Zone (unused)
	dc.l Obj13	; Waterfall in Hidden Palace Zone (unused)
	dc.l Obj14	; Seesaw from Hill Top Zone
	dc.l Obj15	; Swinging platform from Aquatic Ruin Zone
	dc.l Obj16	; Diagonally moving lift from HTZ
	dc.l Obj17	; GHZ rotating log helix spikes (from Sonic 1, unused)
	dc.l Obj18	; Stationary floating platform from ARZ and EHZ
	dc.l Obj19	; Platform from CPZ, OOZ and WFZ
	dc.l Obj1A	; Collapsing platform from either OOZ or MCZ
	dc.l Obj1B	; Speed booster from from CPZ
	dc.l Obj1C	; Bridge stake in Emerald Hill Zone and Hill Top Zone, falling oil in Oil Ocean Zone
	dc.l Obj1D	; Blue balls in CPZ (jumping droplets hazard)
	dc.l Obj1E	; Spin tube from CPZ
	dc.l Obj1F	; Collapsing platform from ARZ
	dc.l Obj20	; Lava bubble from Hill Top Zone (boss weapon)
	dc.l Obj21	; Score/Rings/Time display (HUD)
	dc.l Obj22	; Arrow shooter from ARZ
	dc.l Obj23	; Pillar that drops its lower part from ARZ
	dc.l Obj24	; Bubbles in Aquatic Ruin Zone
	dc.l Obj25	; A ring
	dc.l Obj26	; Monitor
	dc.l Obj27	; An explosion, giving off an animal and 100 points
	dc.l Obj28	; Animal and the 100 points from a badnik
	dc.l Obj29	; "100 points" text
	dc.l Obj2A	; Stomper from MCZ
	dc.l Obj2B	; Rising pillar from ARZ
	dc.l Obj2C	; Sprite that makes leaves fly off when you hit it from ARZ
	dc.l Obj2D	; One way barrier from CPZ and DEZ
	dc.l Obj2E	; Monitor contents (code for power-up behavior and rising image)
	dc.l Obj2F	; Smashable ground in Hill Top Zone
	dc.l Obj30	; Large rising lava during earthquake in HTZ
	dc.l Obj31	; Lava collision marker
	dc.l Obj32	; Breakable block/rock from CPZ and HTZ
	dc.l Obj33	; Green platform from OOZ
	dc.l Obj34	; level title card (screen with red, yellow, and blue)
	dc.l Obj35	; Invincibility Stars
	dc.l Obj36	; Vertical spikes
	dc.l Obj37	; Scattering rings (generated when Sonic is hurt and has rings)
	dc.l Obj38	; Shield
	dc.l Obj39	; Game/Time Over text
	dc.l Obj3A	; End of level results screen
	dc.l Obj3B	; Solid block
	dc.l Obj3C	; Breakable wall (leftover from S1) (mostly unused)
	dc.l Obj3D	; Block thingy in OOZ that launches you into the round ball things
	dc.l Obj3E	; Egg prison
	dc.l Obj3F	; Fan from OOZ
	dc.l Obj40	; Pressure spring from CPZ, ARZ, and MCZ (the red "diving board" springboard)
	dc.l Obj41	; Spring
	dc.l Obj42	; Steam Spring from MTZ
	dc.l Obj43	; Sliding spike obstacle thing from OOZ
	dc.l Obj44	; Round bumper from Casino Night Zone
	dc.l Obj45	; Pressure spring from OOZ
	dc.l Obj46	; Ball from OOZ (unused, beta leftover)
	dc.l Obj47	; Button
	dc.l Obj48	; Round ball thing from OOZ that fires you off in a different direction
	dc.l Obj49	; Waterfall from EHZ
	dc.l Obj4A	; Octus (octopus badnik) from OOZ
	dc.l Obj4B	; Buzzer (Buzz bomber) from EHZ
	dc.l Obj4C	; Obj4C
	dc.l Obj4D	; Obj4D
	dc.l ObjNull	; Obj4E
	dc.l ObjNull	; Obj4F
	dc.l Obj50	; Aquis (seahorse badnik) from OOZ
	dc.l Obj51	; CNZ boss
	dc.l Obj52	; HTZ boss
	dc.l Obj53	; Shield orbs that surround MTZ boss
	dc.l Obj54	; MTZ boss
	dc.l Obj55	; OOZ boss
	dc.l Obj56	; EHZ boss
	dc.l Obj57	; MCZ boss
	dc.l Obj58	; Boss explosion
	dc.l Obj59	; Emerald from Special Stage
	dc.l Obj5A	; Messages/checkpoint from Special Stage
	dc.l Obj5B	; Ring spray/spill in Special Stage
	dc.l Obj5C	; Masher (jumping piranha fish badnik) from EHZ
	dc.l Obj5D	; CPZ boss
	dc.l Obj5E	; HUD from Special Stage
	dc.l Obj5F	; Start banner/"Ending controller" from Special Stage
	dc.l Obj60	; Rings from Special Stage
	dc.l Obj61	; Bombs from Special Stage
	dc.l ObjNull	; Obj62
	dc.l Obj63	; Character shadow from Special Stage
	dc.l Obj64	; Twin stompers from MTZ
	dc.l Obj65	; Long moving platform from MTZ
	dc.l Obj66	; Yellow spring walls from MTZ
	dc.l Obj67	; Spin tube from MTZ
	dc.l Obj68	; Block with a spike that comes out of each side sequentially from MTZ
	dc.l Obj69	; Nut from MTZ
	dc.l Obj6A	; Platform that moves when you walk off of it, from MTZ
	dc.l Obj6B	; Immobile platform from MTZ
	dc.l Obj6C	; Small platform, going up and right (unused)
	dc.l Obj6D	; Floor spike from MTZ
	dc.l Obj6E	; Small platform, moving in a circle (unused)
	dc.l Obj6F	; End of special stage results screen
	dc.l Obj70	; Giant rotating cog from MTZ
	dc.l Obj71	; Bridge stake and pulsing orb from Hidden Palace Zone
	dc.l Obj72	; Conveyor belt from CNZ
	dc.l Obj73	; Solid rotating ring thing from Mystic Cave Zone (mostly unused)
	dc.l Obj74	; Invisible solid block
	dc.l Obj75	; Brick from MCZ
	dc.l Obj76	; Spike block that slides out of the wall from MCZ
	dc.l Obj77	; Bridge from MCZ
	dc.l Obj78	; Stairs from CPZ that move down to open the way
	dc.l Obj79	; Star pole / starpost / checkpoint
	dc.l Obj7A	; Platform that moves back and fourth on top of water in CPZ
	dc.l Obj7B	; Warp pipe exit spring from CPZ
	dc.l Obj7C	; Big pylon in foreground of CPZ
	dc.l Obj7D	; Points that can be gotten at the end of an act (unused leftover from S1)
	dc.l Obj7E	; Super Sonic's stars
	dc.l Obj7F	; Vine switch that you hang off in MCZ
	dc.l Obj80	; Vine that you hang off and it moves down from MCZ
	dc.l Obj81	; Long invisible vertical barrier
	dc.l Obj82	; Platform that is usually swinging, from ARZ
	dc.l Obj83	; 3 adjoined platforms from ARZ that rotate in a circle
	dc.l Obj84	; Pinball mode enable/disable (CNZ)
	dc.l Obj85	; Spring from CNZ that you hold jump on to pull back further
	dc.l Obj86	; Flipper from CNZ
	dc.l Obj87	; Number of rings in Special Stage
	dc.l Obj88	; Tails' tails in Special Stage
	dc.l Obj89	; ARZ boss
	dc.l Obj8A	; Sonic Team Presents/Credits (seemingly unused leftover from S1)
	dc.l Obj8B	; Cycling palette switcher from Wing Fortress Zone
	dc.l Obj8C	; Whisp (blowfly badnik) from ARZ
	dc.l Obj8D	; Grounder in wall, from ARZ
	dc.l Obj8D	; Obj8E = Obj8D
	dc.l Obj8F	; Wall behind which Grounder hides, from ARZ
	dc.l Obj90	; Rocks thrown by Grounder behind wall, from ARZ
	dc.l Obj91	; Chop Chop (piranha/shark badnik) from ARZ
	dc.l Obj92	; Spiker (drill badnik) from HTZ
	dc.l Obj93	; Drill thrown by Spiker from HTZ
	dc.l Obj94	; Rexon (lava snake badnik), from HTZ
	dc.l Obj95	; Sol (fireball-throwing orbit badnik) from HTZ
	dc.l Obj94	; Obj96 = Obj94
	dc.l Obj97	; Rexon's head, from HTZ
	dc.l Obj98	; Projectile with optional gravity (EHZ coconut, CPZ spiny, etc.)
	dc.l Obj99	; Nebula (bomber badnik) from SCZ
	dc.l Obj9A	; Turtloid (turtle badnik) from Sky Chase Zone
	dc.l Obj9B	; Turtloid rider from Sky Chase Zone
	dc.l Obj9C	; Balkiry's jet from Sky Chase Zone
	dc.l Obj9D	; Coconuts (monkey badnik) from EHZ
	dc.l Obj9E	; Crawlton (snake badnik) from MCZ
	dc.l Obj9F	; Shellcraker (crab badnik) from MTZ
	dc.l ObjA0	; Shellcracker's claw from MTZ
	dc.l ObjA1	; Slicer (praying mantis dude) from MTZ
	dc.l ObjA2	; Slicer's pincers from MTZ
	dc.l ObjA3	; Flasher (firefly/glowbug badnik) from MCZ
	dc.l ObjA4	; Asteron (exploding starfish badnik) from MTZ
	dc.l ObjA5	; Spiny (crawling badnik) from CPZ
	dc.l ObjA6	; Spiny (on wall) from CPZ
	dc.l ObjA7	; Grabber (spider badnik) from CPZ
	dc.l ObjA8	; Grabber's legs from CPZ
	dc.l ObjA9	; The little hanger box thing a Grabber's string comes out of
	dc.l ObjAA	; The thin white string a Grabber hangs from
	dc.l ObjAB	; Unknown (maybe unused?)
	dc.l ObjAC	; Balkiry (jet badnik) from SCZ
	dc.l ObjAD	; Clucker's base from WFZ
	dc.l ObjAE	; Clucker (chicken badnik) from WFZ
	dc.l ObjAF	; Mecha Sonic / Silver Sonic from DEZ
	dc.l ObjB0	; SEGA screen? (Unknown)
	dc.l ObjB1	; Sonic on the Sega screen
	dc.l ObjB2	; The Tornado (Tails' plane)
	dc.l ObjB3	; Clouds (placeable object) from SCZ
	dc.l ObjB4	; Vertical propeller from WFZ
	dc.l ObjB5	; Horizontal propeller from WFZ
	dc.l ObjB6	; Tilting platform from WFZ
	dc.l ObjB7	; Unused huge vertical laser from WFZ
	dc.l ObjB8	; Wall turret from WFZ
	dc.l ObjB9	; Laser from WFZ that shoots down the Tornado
	dc.l ObjBA	; Wheel from WFZ
	dc.l ObjBB	; Unknown
	dc.l ObjBC	; Fire coming out of Robotnik's ship in WFZ
	dc.l ObjBD	; Ascending/descending metal platforms from WFZ
	dc.l ObjBE	; Lateral cannon (temporary platform that pops in/out) from WFZ
	dc.l ObjBF	; Rotaty-stick badnik from WFZ
	dc.l ObjC0	; Speed launcher from WFZ
	dc.l ObjC1	; Breakable plating from WFZ / what sonic hangs onto on the back of Robotnic's getaway ship
	dc.l ObjC2	; Rivet thing you bust to get into ship at the end of WFZ
	dc.l ObjC3	; Plane's smoke from WFZ
	dc.l ObjC3 	; ObjC4 = ObjC3
	dc.l ObjC5	; WFZ boss
	dc.l ObjC6	; Eggman
	dc.l ObjC7	; Eggrobo (final boss) from Death Egg
	dc.l ObjC8	; Crawl (shield badnik) from CNZ
	dc.l ObjC9	; "Palette changing handler" from title screen
	dc.l ObjCA	; Cut scene at end of game
	dc.l ObjCB	; Background clouds from ending sequence
	dc.l ObjCC	; Trigger for rescue plane and birds from ending sequence
	dc.l ObjCD	; Birds from ending sequence
	dc.l ObjCE	; Sonic and Tails jumping off the plane from ending sequence
	dc.l ObjCF	;"Plane's helixes" from ending sequence
	dc.l ObjNull	; ObjD0
	dc.l ObjNull	; ObjD1
	dc.l ObjD2	; Flashing blocks that appear and disappear in a rectangular shape that you can walk across, from CNZ
	dc.l ObjD3	; Bomb prize from CNZ
	dc.l ObjD4	; Big block from CNZ that moves back and fourth
	dc.l ObjD5	; Elevator from CNZ
	dc.l ObjD6	; Pokey that gives out points from CNZ
	dc.l ObjD7	; Bumper from Casino Night Zone
	dc.l ObjD8	; Block thingy from CNZ that disappears after 3 hits
	dc.l ObjD9	; Invisible sprite that you can hang on to, like the blocks in WFZ
	dc.l ObjDA	; Continue text
	dc.l ObjDB	; Sonic lying down or Tails nagging (continue screen)
	dc.l ObjDC	; Ring prize from Casino Night Zone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4E, 4F, 62, D0, and D1
; Previously null objects:
; - $4C: Fake Debug Object
; - $4D: Spike Arrows

; Object removed from the game. All it does is deallocate its array.
; ----------------------------------------------------------------------------

ObjNull: ;;
	bra.w	DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to make an object move and fall downward increasingly fast
; This moves the object horizontally and vertically
; and also applies gravity to its speed
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_16380: ObjectFall:
ObjectMoveAndFall:
	move.l	x_pos(a0),d2	; load x position
	move.l	y_pos(a0),d3	; load y position
	move.w	x_vel(a0),d0	; load x speed
	ext.l	d0
	asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
	add.l	d0,d2	; add x speed to x position	; note this affects the subpixel position objoff_A(a0) = 2+x_pos(a0)
	move.w	y_vel(a0),d0	; load y speed
	addi.w	#$38,y_vel(a0)	; increase vertical speed (apply gravity)
	ext.l	d0
	asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
	add.l	d0,d3	; add old y speed to y position	; note this affects the subpixel position objoff_E(a0) = 2+y_pos(a0)
	move.l	d2,x_pos(a0)	; store new x position
	move.l	d3,y_pos(a0)	; store new y position
	rts
; End of function ObjectMoveAndFall
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

; ---------------------------------------------------------------------------
; Subroutine translating object speed to update object position
; This moves the object horizontally and vertically
; but does not apply gravity to it
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_163AC: SpeedToPos:
ObjectMove:
	move.l	x_pos(a0),d2	; load x position
	move.l	y_pos(a0),d3	; load y position
	move.w	x_vel(a0),d0	; load horizontal speed
	ext.l	d0
	asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
	add.l	d0,d2	; add to x-axis position	; note this affects the subpixel position objoff_A(a0) = 2+x_pos(a0)
	move.w	y_vel(a0),d0	; load vertical speed
	ext.l	d0
	asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
	add.l	d0,d3	; add to y-axis position	; note this affects the subpixel position objoff_E(a0) = 2+y_pos(a0)
	move.l	d2,x_pos(a0)	; update x-axis position
	move.l	d3,y_pos(a0)	; update y-axis position
	rts
; End of function ObjectMove
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

; ---------------------------------------------------------------------------
; Routines to mark an enemy/monitor/ring/platform as destroyed
; ---------------------------------------------------------------------------

; ===========================================================================
; input: a0 = the object
; loc_163D2:
MarkObjGone:
	tst.w	(Two_player_mode).w
	beq.s	+
	bra.w	DisplaySprite
+
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	bra.w	DisplaySprite

+	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a2,d0.w)
+
	bra.w	DeleteObject
; ===========================================================================
; input: d0 = the object's x position
; loc_1640A:
MarkObjGone2:
	tst.w	(Two_player_mode).w
	beq.s	+
	bra.w	DisplaySprite
+
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	bra.w	DisplaySprite
+
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a2,d0.w)
+
	bra.w	DeleteObject
; ===========================================================================
; input: a0 = the object
; does nothing instead of calling DisplaySprite in the case of no deletion
; loc_1643E:
MarkObjGone3:
	tst.w	(Two_player_mode).w
	beq.s	+
	rts
+
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	rts
+
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a2,d0.w)
+
	bra.w	DeleteObject
; ===========================================================================
; input: a0 = the object
; loc_16472:
MarkObjGone_P1:
	tst.w	(Two_player_mode).w
	bne.s	MarkObjGone_P2
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	bra.w	DisplaySprite
+
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a2,d0.w)
+
	bra.w	DeleteObject
; ---------------------------------------------------------------------------
; input: a0 = the object
; loc_164A6:
MarkObjGone_P2:
	move.w	x_pos(a0),d0
	andi.w	#$FF00,d0
	move.w	d0,d1
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$300,d0
	bhi.w	+
	bra.w	DisplaySprite
+
	sub.w	($FFFFF7DC).w,d1
	cmpi.w	#$300,d1
	bhi.w	+
	bra.w	DisplaySprite
+
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a2,d0.w)
+
	bra.w	DeleteObject ; useless branch...

; ---------------------------------------------------------------------------
; Subroutine to delete an object
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; freeObject:
DeleteObject:
	movea.l	a0,a1

; sub_164E8:
DeleteObject2:
	moveq	#0,d1
	moveq	#bytesToLcnt(next_object),d0 ; we want to clear up to the next object

	; delete the object by setting all of its bytes to 0
-	move.l	d1,(a1)+
	dbf	d0,-
	rts
; End of function DeleteObject2




; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object, when a0 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_164F4:
DisplaySprite:
	lea	(Sprite_Table_Input).w,a1
	move.w	priority(a0),d0
	lsr.w	#1,d0
	andi.w	#$380,d0
	adda.w	d0,a1
	cmpi.w	#$7E,(a1)
	bcc.s	return_16510
	addq.w	#2,(a1)
	adda.w	(a1),a1
	move.w	a0,(a1)

return_16510:
	rts
; End of function DisplaySprite

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object, when a1 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_16512:
DisplaySprite2:
	lea	(Sprite_Table_Input).w,a2
	move.w	priority(a1),d0
	lsr.w	#1,d0
	andi.w	#$380,d0
	adda.w	d0,a2
	cmpi.w	#$7E,(a2)
	bcc.s	return_1652E
	addq.w	#2,(a2)
	adda.w	(a2),a2
	move.w	a1,(a2)

return_1652E:
	rts
; End of function DisplaySprite2

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object, when a0 is the object RAM
; and d0 is already (priority/2)&$380
; ---------------------------------------------------------------------------

; loc_16530:
DisplaySprite3:
	lea	(Sprite_Table_Input).w,a1
	adda.w	d0,a1
	cmpi.w	#$7E,(a1)
	bcc.s	return_16542
	addq.w	#2,(a1)
	adda.w	(a1),a1
	move.w	a0,(a1)

return_16542:
	rts

; ---------------------------------------------------------------------------
; Subroutine to animate a sprite using an animation script
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_16544:
AnimateSprite:
	moveq	#0,d0
	move.b	anim(a0),d0		; move animation number to d0
	cmp.b	next_anim(a0),d0	; is animation set to change?
	beq.s	Anim_Run		; if not, branch
	move.b	d0,next_anim(a0)	; set next anim to current current
	move.b	#0,anim_frame(a0)	; reset animation
	move.b	#0,anim_frame_duration(a0)	; reset frame duration
; loc_16560:
Anim_Run:
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
	bpl.s	Anim_Wait	; if time remains, branch
	add.w	d0,d0
	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
	move.b	(a1),anim_frame_duration(a0)	; load frame duration
	moveq	#0,d1
	move.b	anim_frame(a0),d1	; load current frame number
	move.b	1(a1,d1.w),d0   	; read sprite number from script
	bmi.s	Anim_End_FF     	; if animation is complete, branch
; loc_1657C:
Anim_Next:
	andi.b	#$7F,d0			; clear sign bit
	move.b	d0,mapping_frame(a0)	; load sprite number
	move.b	status(a0),d1		;* match the orientaion dictated by the object
	andi.b	#3,d1			;* with the orientation used by the object engine
	andi.b	#$FC,render_flags(a0)	;*
	or.b	d1,render_flags(a0)	;*
	addq.b	#1,anim_frame(a0)	; next frame number
; return_1659A:
Anim_Wait:
	rts
; ===========================================================================
; loc_1659C:
Anim_End_FF:
	addq.b	#1,d0		; is the end flag = $FF ?
	bne.s	Anim_End_FE	; if not, branch
	move.b	#0,anim_frame(a0)	; restart the animation
	move.b	1(a1),d0	; read sprite number
	bra.s	Anim_Next
; ===========================================================================
; loc_165AC:
Anim_End_FE:
	addq.b	#1,d0	; is the end flag = $FE ?
	bne.s	Anim_End_FD	; if not, branch
	move.b	2(a1,d1.w),d0	; read the next byte in the script
	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
	sub.b	d0,d1
	move.b	1(a1,d1.w),d0	; read sprite number
	bra.s	Anim_Next
; ===========================================================================
; loc_165C0:
Anim_End_FD:
	addq.b	#1,d0		; is the end flag = $FD ?
	bne.s	Anim_End_FC	; if not, branch
	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
	rts
; ===========================================================================
; loc_165CC:
Anim_End_FC:
	addq.b	#1,d0	; is the end flag = $FC ?
	bne.s	Anim_End_FB	; if not, branch
	addq.b	#2,routine(a0)	; jump to next routine
	move.b	#0,anim_frame_duration(a0)
	addq.b	#1,anim_frame(a0)
	rts
; ===========================================================================
; loc_165E0:
Anim_End_FB:
	addq.b	#1,d0	; is the end flag = $FB ?
	bne.s	Anim_End_FA	; if not, branch
	move.b	#0,anim_frame(a0)	; reset animation
	clr.b	routine_secondary(a0)	; reset 2nd routine counter
	rts
; ===========================================================================
; loc_165F0:
Anim_End_FA:
	addq.b	#1,d0	; is the end flag = $FA ?
	bne.s	Anim_End_F9	; if not, branch
	addq.b	#2,routine_secondary(a0)	; jump to next routine
	rts
; ===========================================================================
; loc_165FA:
Anim_End_F9:
	addq.b	#1,d0	; is the end flag = $F9 ?
	bne.s	Anim_End	; if not, branch
	addq.b	#2,objoff_2A(a0)
; return_16602:
Anim_End:
	rts
; End of function AnimateSprite


; ---------------------------------------------------------------------------
; Subroutine to convert mappings (etc) to proper Megadrive sprites
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_16604:
BuildSprites:
	tst.w	(Two_player_mode).w
	bne.w	BuildSprites_2P
	lea	(Sprite_Table).w,a2
	moveq	#0,d5
	moveq	#0,d4
	tst.b	(Level_started_flag).w
	beq.s	+
	bsr.w	JmpTo_loc_40804
	bsr.w	loc_17178
+
	lea	(Sprite_Table_Input).w,a4
	moveq	#7,d7

loc_16628:
	tst.w	(a4)
	beq.w	loc_166FA
	moveq	#2,d6

loc_16630:
	movea.w	(a4,d6.w),a0 ; a0=object
	tst.b	(a0)
	beq.w	loc_166F2
	andi.b	#$7F,render_flags(a0)
	move.b	render_flags(a0),d0
	move.b	d0,d4
	btst	#6,d0
	bne.w	loc_1671C
	andi.w	#$C,d0
	beq.s	loc_166A6
	lea	($FFFFEEF0).w,a1
	moveq	#0,d0
	move.b	width_pixels(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a1),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_166F2
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.w	loc_166F2
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_166B0
	moveq	#0,d0
	move.b	y_radius(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.s	loc_166F2
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.s	loc_166F2
	addi.w	#$80,d2
	bra.s	loc_166CC
; ===========================================================================

loc_166A6:
	move.w	objoff_A(a0),d2
	move.w	x_pos(a0),d3
	bra.s	loc_166CC
; ===========================================================================

loc_166B0:
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	addi.w	#$80,d2
	andi.w	#$7FF,d2
	cmpi.w	#$60,d2
	bcs.s	loc_166F2
	cmpi.w	#$180,d2
	bcc.s	loc_166F2

loc_166CC:
	movea.l	mappings(a0),a1
	moveq	#0,d1
	btst	#5,d4
	bne.s	loc_166E8
	move.b	mapping_frame(a0),d1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_166EC

loc_166E8:
	bsr.w	sub_16812

loc_166EC:
	ori.b	#$80,render_flags(a0)

loc_166F2:

	addq.w	#2,d6
	subq.w	#2,(a4)
	bne.w	loc_16630

loc_166FA:
	lea	$80(a4),a4
	dbf	d7,loc_16628
	move.b	d5,($FFFFF62C).w
	cmpi.b	#$50,d5
	beq.s	loc_16714
	move.l	#0,(a2)
	rts
; ===========================================================================

loc_16714:
	move.b	#0,-5(a2)
	rts
; ===========================================================================

loc_1671C:
	move.l	a4,-(sp)
	lea	(Camera_X_pos).w,a4
	movea.w	art_tile(a0),a3
	movea.l	mappings(a0),a5
	moveq	#0,d0
	move.b	objoff_E(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a4),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_16804
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.w	loc_16804
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_1677C
	moveq	#0,d0
	move.b	objoff_14(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.w	loc_16804
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.w	loc_16804
	addi.w	#$80,d2
	bra.s	loc_16798
; ===========================================================================

loc_1677C:
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	addi.w	#$80,d2
	andi.w	#$7FF,d2
	cmpi.w	#$60,d2
	bcs.s	loc_16804
	cmpi.w	#$180,d2
	bcc.s	loc_16804

loc_16798:
	moveq	#0,d1
	move.b	objoff_B(a0),d1
	beq.s	loc_167B6
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_167B6
	move.w	d4,-(sp)
	bsr.w	sub_1680A
	move.w	(sp)+,d4

loc_167B6:

	ori.b	#$80,render_flags(a0)
	lea	$10(a0),a6
	moveq	#0,d0
	move.b	objoff_F(a0),d0
	subq.w	#1,d0
	bcs.s	loc_16804

loc_167CA:
	swap	d0
	move.w	(a6)+,d3
	sub.w	(a4),d3
	addi.w	#$80,d3
	move.w	(a6)+,d2
	sub.w	4(a4),d2
	addi.w	#$80,d2
	andi.w	#$7FF,d2
	addq.w	#1,a6
	moveq	#0,d1
	move.b	(a6)+,d1
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_167FE
	move.w	d4,-(sp)
	bsr.w	sub_1680A
	move.w	(sp)+,d4

loc_167FE:
	swap	d0
	dbf	d0,loc_167CA

loc_16804:

	movea.l	(sp)+,a4
	bra.w	loc_166F2
; End of function BuildSprites


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_1680A:

	cmpi.b	#$50,d5
	bcs.s	loc_1681C
	rts
; End of function sub_1680A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_16812:
	movea.w	art_tile(a0),a3
	cmpi.b	#$50,d5
	bcc.s	return_16852

loc_1681C:
	btst	#0,d4
	bne.s	loc_16854
	btst	#1,d4
	bne.w	loc_168B4

loc_1682A:
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	move.w	(a1)+,d0
	add.w	a3,d0
	move.w	d0,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_1684C
	addq.w	#1,d0

loc_1684C:
	move.w	d0,(a2)+
	dbf	d1,loc_1682A

return_16852:
	rts
; ===========================================================================

loc_16854:
	btst	#1,d4
	bne.w	loc_168FC

loc_1685C:
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	d4,(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$800,d0
	move.w	d0,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	neg.w	d0
	move.b	byte_16894(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_1688C
	addq.w	#1,d0

loc_1688C:
	move.w	d0,(a2)+
	dbf	d1,loc_1685C
	rts
; ===========================================================================
; offsets for horizontally mirrored sprite pieces?
byte_16894:
	dc.b   8,  8,  8,  8	; 4
	dc.b $10,$10,$10,$10	; 8
	dc.b $18,$18,$18,$18	; 12
	dc.b $20,$20,$20,$20	; 16
; offsets for vertically mirrored sprite pieces?
byte_168A4:
	dc.b   8,$10,$18,$20	; 4
	dc.b   8,$10,$18,$20	; 8
	dc.b   8,$10,$18,$20	; 12
	dc.b   8,$10,$18,$20	; 16
; ===========================================================================

loc_168B4:

	move.b	(a1)+,d0
	move.b	(a1),d4
	ext.w	d0
	neg.w	d0
	move.b	byte_168A4(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$1000,d0
	move.w	d0,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_168E4
	addq.w	#1,d0

loc_168E4:
	move.w	d0,(a2)+
	dbf	d1,loc_168B4
	rts
; ===========================================================================
; offsets for vertically mirrored sprite pieces?
byte_168EC:
	dc.b   8,$10,$18,$20	; 4
	dc.b   8,$10,$18,$20	; 8
	dc.b   8,$10,$18,$20	; 12
	dc.b   8,$10,$18,$20	; 16
; ===========================================================================

loc_168FC:

	move.b	(a1)+,d0
	move.b	(a1),d4
	ext.w	d0
	neg.w	d0
	move.b	byte_168EC(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	d4,(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$1800,d0
	move.w	d0,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	neg.w	d0
	move.b	byte_1693E(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_16936
	addq.w	#1,d0

loc_16936:
	move.w	d0,(a2)+
	dbf	d1,loc_168FC
	rts
; End of function sub_16812

; ===========================================================================
; offsets for horizontally mirrored sprite pieces?
byte_1693E:
	dc.b   8,  8,  8,  8	; 4
	dc.b $10,$10,$10,$10	; 8
	dc.b $18,$18,$18,$18	; 12
	dc.b $20,$20,$20,$20	; 16
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to convert mappings (etc) to proper Megadrive sprites
; for 2-player (split screen) mode
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1694E:
BuildSprites_2P:
	lea	(Sprite_Table).w,a2
	moveq	#2,d5
	moveq	#0,d4
	move.l	#$1D80F01,(a2)+
	move.l	#1,(a2)+
	move.l	#$1D80F02,(a2)+
	move.l	#0,(a2)+
	tst.b	(Level_started_flag).w
	beq.s	+
	bsr.w	JmpTo_loc_4085A
	bsr.w	loc_171F8
+
	lea	(Sprite_Table_Input).w,a4
	moveq	#7,d7

loc_16982:
	move.w	(a4),d0
	beq.w	loc_16A5A
	move.w	d0,-(sp)
	moveq	#2,d6

loc_1698C:
	movea.w	(a4,d6.w),a0 ; a0=object
	tst.b	(a0)
	beq.w	loc_16A50
	andi.b	#$7F,render_flags(a0)
	move.b	render_flags(a0),d0
	move.b	d0,d4
	btst	#6,d0
	bne.w	loc_16B9A
	andi.w	#$C,d0
	beq.s	loc_16A00
	lea	(Camera_X_pos).w,a1
	moveq	#0,d0
	move.b	width_pixels(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a1),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_16A50
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.s	loc_16A50
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_16A0E
	moveq	#0,d0
	move.b	y_radius(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.s	loc_16A50
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.s	loc_16A50
	addi.w	#$100,d2
	bra.s	loc_16A2A
; ===========================================================================

loc_16A00:
	move.w	objoff_A(a0),d2
	move.w	x_pos(a0),d3
	addi.w	#$80,d2
	bra.s	loc_16A2A
; ===========================================================================

loc_16A0E:
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	addi.w	#$80,d2
	cmpi.w	#$60,d2
	bcs.s	loc_16A50
	cmpi.w	#$180,d2
	bcc.s	loc_16A50
	addi.w	#$80,d2

loc_16A2A:

	movea.l	mappings(a0),a1
	moveq	#0,d1
	btst	#5,d4
	bne.s	loc_16A46
	move.b	mapping_frame(a0),d1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16A4A

loc_16A46:
	bsr.w	sub_16DAE

loc_16A4A:
	ori.b	#$80,render_flags(a0)

loc_16A50:

	addq.w	#2,d6
	subq.w	#2,(sp)
	bne.w	loc_1698C
	addq.w	#2,sp

loc_16A5A:
	lea	$80(a4),a4
	dbf	d7,loc_16982
	move.b	d5,($FFFFF62C).w
	cmpi.b	#$50,d5
	bcc.s	loc_16A74
	move.l	#0,(a2)
	bra.s	loc_16A7A
; ===========================================================================

loc_16A74:
	move.b	#0,-5(a2)

loc_16A7A:

	tst.w	($FFFFF644).w
	bne.s	loc_16A7A
	lea	(Sprite_Table_2).w,a2
	moveq	#0,d5
	moveq	#0,d4
	tst.b	(Level_started_flag).w
	beq.s	loc_16A96
	bsr.w	JmpTo_loc_409C6
	bsr.w	loc_1720E

loc_16A96:
	lea	(Sprite_Table_Input).w,a4
	moveq	#7,d7

loc_16A9C:
	move.w	(a4),d0
	beq.w	loc_16B78
	move.w	d0,-(sp)
	moveq	#2,d6

loc_16AA6:
	movea.w	(a4,d6.w),a0 ; a0=object
	tst.b	(a0)
	beq.w	loc_16B64
	move.b	render_flags(a0),d0
	move.b	d0,d4
	btst	#6,d0
	bne.w	loc_16C84
	andi.w	#$C,d0
	beq.s	loc_16B14
	lea	($FFFFEE20).w,a1
	moveq	#0,d0
	move.b	width_pixels(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a1),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_16B64
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.s	loc_16B64
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_16B22
	moveq	#0,d0
	move.b	y_radius(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.s	loc_16B64
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.s	loc_16B64
	addi.w	#$1E0,d2
	bra.s	loc_16B3E
; ===========================================================================

loc_16B14:
	move.w	objoff_A(a0),d2
	move.w	x_pos(a0),d3
	addi.w	#$160,d2
	bra.s	loc_16B3E
; ===========================================================================

loc_16B22:
	move.w	y_pos(a0),d2
	sub.w	4(a1),d2
	addi.w	#$80,d2
	cmpi.w	#$60,d2
	bcs.s	loc_16B64
	cmpi.w	#$180,d2
	bcc.s	loc_16B64
	addi.w	#$160,d2

loc_16B3E:

	movea.l	mappings(a0),a1
	moveq	#0,d1
	btst	#5,d4
	bne.s	loc_16B5A
	move.b	mapping_frame(a0),d1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16B5E

loc_16B5A:
	bsr.w	sub_16DAE

loc_16B5E:
	ori.b	#$80,render_flags(a0)

loc_16B64:

	addq.w	#2,d6
	subq.w	#2,(sp)
	bne.w	loc_16AA6
	addq.w	#2,sp
	tst.b	($FFFFF623).w
	bne.s	loc_16B78
	move.w	#0,(a4)

loc_16B78:

	lea	$80(a4),a4
	dbf	d7,loc_16A9C
	move.b	d5,($FFFFF62C).w
	cmpi.b	#$50,d5
	beq.s	loc_16B92
	move.l	#0,(a2)
	rts
; ===========================================================================

loc_16B92:
	move.b	#0,-5(a2)
	rts
; ===========================================================================

loc_16B9A:
	move.l	a4,-(sp)
	lea	(Camera_X_pos).w,a4
	movea.w	art_tile(a0),a3
	movea.l	mappings(a0),a5
	moveq	#0,d0
	move.b	objoff_E(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a4),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_16C7E
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.w	loc_16C7E
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_16BFA
	moveq	#0,d0
	move.b	objoff_14(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.w	loc_16C7E
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.w	loc_16C7E
	addi.w	#$100,d2
	bra.s	loc_16C16
; ===========================================================================

loc_16BFA:
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	addi.w	#$80,d2
	cmpi.w	#$60,d2
	bcs.s	loc_16C7E
	cmpi.w	#$180,d2
	bcc.s	loc_16C7E
	addi.w	#$80,d2

loc_16C16:
	moveq	#0,d1
	move.b	objoff_B(a0),d1
	beq.s	loc_16C34
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16C34
	move.w	d4,-(sp)
	bsr.w	sub_16DA6
	move.w	(sp)+,d4

loc_16C34:

	ori.b	#$80,render_flags(a0)
	lea	$10(a0),a6
	moveq	#0,d0
	move.b	objoff_F(a0),d0
	subq.w	#1,d0
	bcs.s	loc_16C7E

loc_16C48:
	swap	d0
	move.w	(a6)+,d3
	sub.w	(a4),d3
	addi.w	#$80,d3
	move.w	(a6)+,d2
	sub.w	4(a4),d2
	addi.w	#$100,d2
	addq.w	#1,a6
	moveq	#0,d1
	move.b	(a6)+,d1
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16C78
	move.w	d4,-(sp)
	bsr.w	sub_16DA6
	move.w	(sp)+,d4

loc_16C78:
	swap	d0
	dbf	d0,loc_16C48

loc_16C7E:

	movea.l	(sp)+,a4
	bra.w	loc_16A50
; ===========================================================================

loc_16C84:
	move.l	a4,-(sp)
	lea	($FFFFEE20).w,a4
	movea.w	art_tile(a0),a3
	movea.l	mappings(a0),a5
	moveq	#0,d0
	move.b	objoff_E(a0),d0
	move.w	x_pos(a0),d3
	sub.w	(a4),d3
	move.w	d3,d1
	add.w	d0,d1
	bmi.w	loc_16D68
	move.w	d3,d1
	sub.w	d0,d1
	cmpi.w	#320,d1
	bge.w	loc_16D68
	addi.w	#$80,d3
	btst	#4,d4
	beq.s	loc_16CE4
	moveq	#0,d0
	move.b	objoff_14(a0),d0
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	move.w	d2,d1
	add.w	d0,d1
	bmi.w	loc_16D68
	move.w	d2,d1
	sub.w	d0,d1
	cmpi.w	#$E0,d1
	bge.w	loc_16D68
	addi.w	#$1E0,d2
	bra.s	loc_16D00
; ===========================================================================

loc_16CE4:
	move.w	y_pos(a0),d2
	sub.w	4(a4),d2
	addi.w	#$80,d2
	cmpi.w	#$60,d2
	bcs.s	loc_16D68
	cmpi.w	#$180,d2
	bcc.s	loc_16D68
	addi.w	#$160,d2

loc_16D00:
	moveq	#0,d1
	move.b	objoff_B(a0),d1
	beq.s	loc_16D1E
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16D1E
	move.w	d4,-(sp)
	bsr.w	sub_16DA6
	move.w	(sp)+,d4

loc_16D1E:

	ori.b	#$80,render_flags(a0)
	lea	$10(a0),a6
	moveq	#0,d0
	move.b	objoff_F(a0),d0
	subq.w	#1,d0
	bcs.s	loc_16D68

loc_16D32:
	swap	d0
	move.w	(a6)+,d3
	sub.w	(a4),d3
	addi.w	#$80,d3
	move.w	(a6)+,d2
	sub.w	4(a4),d2
	addi.w	#$1E0,d2
	addq.w	#1,a6
	moveq	#0,d1
	move.b	(a6)+,d1
	add.w	d1,d1
	movea.l	a5,a1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	loc_16D62
	move.w	d4,-(sp)
	bsr.w	sub_16DA6
	move.w	(sp)+,d4

loc_16D62:
	swap	d0
	dbf	d0,loc_16D32

loc_16D68:

	movea.l	(sp)+,a4
	bra.w	loc_16B64

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; adjust art pointer of object at a0 for 2-player mode
; sub_16D6E:
Adjust2PArtPointer:
	tst.w	(Two_player_mode).w
	beq.s	+ ; rts
	move.w	art_tile(a0),d0
	andi.w	#$7FF,d0
	lsr.w	#1,d0
	andi.w	#$F800,art_tile(a0)
	add.w	d0,art_tile(a0)
+
	rts
; End of function Adjust2PArtPointer


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; adjust art pointer of object at a1 for 2-player mode
; sub_16D8A:
Adjust2PArtPointer2:
	tst.w	(Two_player_mode).w
	beq.s	+ ; rts
	move.w	art_tile(a1),d0
	andi.w	#$7FF,d0
	lsr.w	#1,d0
	andi.w	#$F800,art_tile(a1)
	add.w	d0,art_tile(a1)
+
	rts
; End of function Adjust2PArtPointer2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_16DA6:

	cmpi.b	#$50,d5
	bcs.s	loc_16DC6
	rts
; End of function sub_16DA6


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; copy sprite art to VRAM, in 2-player mode

sub_16DAE:

	movea.w	art_tile(a0),a3
	cmpi.b	#$50,d5
	bcc.s	return_16DF2
	btst	#0,d4
	bne.s	loc_16E04
	btst	#1,d4
	bne.w	loc_16E66

loc_16DC6:

	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	byte_16DF4(pc,d4.w),(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	a3,d0
	move.w	d0,(a2)+
	move.w	(a1)+,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_16DEC
	addq.w	#1,d0

loc_16DEC:
	move.w	d0,(a2)+
	dbf	d1,loc_16DC6

return_16DF2:
	rts
; ===========================================================================
; unknown
byte_16DF4:
	dc.b   0,0
	dc.b   1,1
	dc.b   4,4
	dc.b   5,5
	dc.b   8,8
	dc.b   9,9
	dc.b  $C,$C
	dc.b  $D,$D
; ===========================================================================

loc_16E04:
	btst	#1,d4
	bne.w	loc_16EC2

loc_16E0C:
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	byte_16DF4(pc,d4.w),(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$800,d0
	move.w	d0,(a2)+
	move.w	(a1)+,d0
	neg.w	d0
	move.b	byte_16E46(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_16E3E
	addq.w	#1,d0

loc_16E3E:
	move.w	d0,(a2)+
	dbf	d1,loc_16E0C
	rts
; ===========================================================================
; offsets for horizontally mirrored sprite pieces? (2P)
byte_16E46:
	dc.b   8,  8,  8,  8	; 4
	dc.b $10,$10,$10,$10	; 8
	dc.b $18,$18,$18,$18	; 12
	dc.b $20,$20,$20,$20	; 16
; offsets for vertically mirrored sprite pieces? (2P)
byte_16E56:
	dc.b   8,$10,$18,$20	; 4
	dc.b   8,$10,$18,$20	; 8
	dc.b   8,$10,$18,$20	; 12
	dc.b   8,$10,$18,$20	; 16
; ===========================================================================

loc_16E66:

	move.b	(a1)+,d0
	move.b	(a1),d4
	ext.w	d0
	neg.w	d0
	move.b	byte_16E56(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	byte_16EA2(pc,d4.w),(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$1000,d0
	move.w	d0,(a2)+
	move.w	(a1)+,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_16E9A
	addq.w	#1,d0

loc_16E9A:
	move.w	d0,(a2)+
	dbf	d1,loc_16E66
	rts
; ===========================================================================
; unknown
byte_16EA2:
	dc.b   0,0
	dc.b   1,1	; 2
	dc.b   4,4	; 4
	dc.b   5,5	; 6
	dc.b   8,8	; 8
	dc.b   9,9	; 10
	dc.b  $C,$C	; 12
	dc.b  $D,$D	; 14
; offsets for vertically mirrored sprite pieces? (2P)
byte_16EB2:
	dc.b   8,$10,$18,$20	; 4
	dc.b   8,$10,$18,$20	; 8
	dc.b   8,$10,$18,$20	; 12
	dc.b   8,$10,$18,$20	; 16
; ===========================================================================

loc_16EC2:

	move.b	(a1)+,d0
	move.b	(a1),d4
	ext.w	d0
	neg.w	d0
	move.b	byte_16EB2(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	byte_16EA2(pc,d4.w),(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	a3,d0
	eori.w	#$1800,d0
	move.w	d0,(a2)+
	move.w	(a1)+,d0
	neg.w	d0
	move.b	byte_16F06(pc,d4.w),d4
	sub.w	d4,d0
	add.w	d3,d0
	andi.w	#$1FF,d0
	bne.s	loc_16EFE
	addq.w	#1,d0

loc_16EFE:
	move.w	d0,(a2)+
	dbf	d1,loc_16EC2
	rts
; End of function sub_16DAE

; ===========================================================================
; offsets for horizontally mirrored sprite pieces? (2P)
byte_16F06:
	dc.b   8,  8,  8,  8	; 4
	dc.b $10,$10,$10,$10	; 8
	dc.b $18,$18,$18,$18	; 12
	dc.b $20,$20,$20,$20	; 16

; ===========================================================================
; loc_16F16: ; unused/dead code? ; a0=object
	move.w	x_pos(a0),d0
	sub.w	(Camera_X_pos).w,d0
	bmi.s	+
	cmpi.w	#320,d0
	bge.s	+
	move.w	y_pos(a0),d1
	sub.w	(Camera_Y_pos).w,d1
	bmi.s	+
	cmpi.w	#$E0,d1
	bge.s	+
	moveq	#0,d0
	rts
+	moveq	#1,d0
	rts
; ===========================================================================
; loc_16F3E: ; unused/dead code? ; a0=object
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	x_pos(a0),d0
	sub.w	(Camera_X_pos).w,d0
	add.w	d1,d0
	bmi.s	+
	add.w	d1,d1
	sub.w	d1,d0
	cmpi.w	#320,d0
	bge.s	+
	move.w	y_pos(a0),d1
	sub.w	(Camera_Y_pos).w,d1
	bmi.s	+
	cmpi.w	#$E0,d1
	bge.s	+
	moveq	#0,d0
	rts
+	moveq	#1,d0
	rts
; ===========================================================================
	nop

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_40804 
	jmp	loc_40804
; ===========================================================================

JmpTo_loc_4085A 
	jmp	loc_4085A
; ===========================================================================

JmpTo_loc_409C6 
	jmp	loc_409C6
; ===========================================================================

	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Pseudo-object that manages where rings are placed onscreen
; as you move through the level, and otherwise updates them.
; ----------------------------------------------------------------------------

; loc_16F88:
RingsManager:
	moveq	#0,d0
	move.b	($FFFFF710).w,d0
	move.w	RingsManager_States(pc,d0.w),d0
	jmp	RingsManager_States(pc,d0.w)
; ===========================================================================
; off_16F96:
RingsManager_States:
	dc.w RingsManager_Init - RingsManager_States
	dc.w RingsManager_Main - RingsManager_States
; ===========================================================================
; loc_16F9A:
RingsManager_Init:
	addq.b	#2,($FFFFF710).w ; => RingsManager_Main
	bsr.w	loc_172A4
	lea	(Ring_Positions).w,a1
	move.w	(Camera_X_pos).w,d4
	subq.w	#8,d4
	bhi.s	loc_16FB6
	moveq	#1,d4
	bra.s	loc_16FB6
; ===========================================================================

loc_16FB2:
	lea	6(a1),a1

loc_16FB6:
	cmp.w	2(a1),d4
	bhi.s	loc_16FB2
	move.w	a1,($FFFFF712).w
	move.w	a1,($FFFFF716).w
	addi.w	#$150,d4
	bra.s	loc_16FCE
; ===========================================================================

loc_16FCA:
	lea	6(a1),a1

loc_16FCE:
	cmp.w	2(a1),d4
	bhi.s	loc_16FCA
	move.w	a1,($FFFFF714).w
	move.w	a1,($FFFFF718).w
	rts
; ===========================================================================
; loc_16FDE:
RingsManager_Main:
	lea	($FFFFEF80).w,a2
	move.w	(a2)+,d1
	subq.w	#1,d1
	bcs.s	loc_17014

loc_16FE8:
	move.w	(a2)+,d0
	beq.s	loc_16FE8
	movea.w	d0,a1
	subq.b	#1,(a1)
	bne.s	loc_17010
	move.b	#6,(a1)
	addq.b	#1,1(a1)
	cmpi.b	#8,1(a1)
	bne.s	loc_17010
	move.w	#-1,(a1)
	move.w	#0,-2(a2)
	subq.w	#1,($FFFFEF80).w

loc_17010:
	dbf	d1,loc_16FE8

loc_17014:
	movea.w	($FFFFF712).w,a1
	move.w	(Camera_X_pos).w,d4
	subq.w	#8,d4
	bhi.s	loc_17028
	moveq	#1,d4
	bra.s	loc_17028
; ===========================================================================

loc_17024:
	lea	6(a1),a1

loc_17028:
	cmp.w	2(a1),d4
	bhi.s	loc_17024
	bra.s	loc_17032
; ===========================================================================

loc_17030:
	subq.w	#6,a1

loc_17032:
	cmp.w	-4(a1),d4
	bls.s	loc_17030
	move.w	a1,($FFFFF712).w
	movea.w	($FFFFF714).w,a2
	addi.w	#$150,d4
	bra.s	loc_1704A
; ===========================================================================

loc_17046:
	lea	6(a2),a2

loc_1704A:
	cmp.w	2(a2),d4
	bhi.s	loc_17046
	bra.s	loc_17054
; ===========================================================================

loc_17052:
	subq.w	#6,a2

loc_17054:
	cmp.w	-4(a2),d4
	bls.s	loc_17052
	move.w	a2,($FFFFF714).w
	tst.w	(Two_player_mode).w
	bne.s	loc_1706E
	move.w	a1,($FFFFF716).w
	move.w	a2,($FFFFF718).w
	rts
; ===========================================================================

loc_1706E:
	movea.w	($FFFFF716).w,a1
	move.w	($FFFFEE20).w,d4
	subq.w	#8,d4
	bhi.s	loc_17082
	moveq	#1,d4
	bra.s	loc_17082
; ===========================================================================

loc_1707E:
	lea	6(a1),a1

loc_17082:
	cmp.w	2(a1),d4
	bhi.s	loc_1707E
	bra.s	loc_1708C
; ===========================================================================

loc_1708A:
	subq.w	#6,a1

loc_1708C:
	cmp.w	-4(a1),d4
	bls.s	loc_1708A
	move.w	a1,($FFFFF716).w
	movea.w	($FFFFF718).w,a2
	addi.w	#$150,d4
	bra.s	loc_170A4
; ===========================================================================

loc_170A0:
	lea	6(a2),a2

loc_170A4:
	cmp.w	2(a2),d4
	bhi.s	loc_170A0
	bra.s	loc_170AE
; ===========================================================================

loc_170AC:
	subq.w	#6,a2

loc_170AE:
	cmp.w	-4(a2),d4
	bls.s	loc_170AC
	move.w	a2,($FFFFF718).w
	rts
; ===========================================================================

loc_170BA:
	movea.w	($FFFFF712).w,a1
	movea.w	($FFFFF714).w,a2
	cmpa.w	#MainCharacter,a0
	beq.s	loc_170D0
	movea.w	($FFFFF716).w,a1
	movea.w	($FFFFF718).w,a2

loc_170D0:
	cmpa.l	a1,a2
	beq.w	return_17166
	cmpi.w	#$5A,invulnerable_time(a0)
	bcc.w	return_17166
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	subi.w	#8,d2
	moveq	#0,d5
	move.b	y_radius(a0),d5
	subq.b	#3,d5
	sub.w	d5,d3
	cmpi.b	#$4D,mapping_frame(a0)
	bne.s	loc_17104
	addi.w	#$C,d3
	moveq	#$A,d5

loc_17104:
	move.w	#6,d1
	move.w	#$C,d6
	move.w	#$10,d4
	add.w	d5,d5

loc_17112:
	tst.w	(a1)
	bne.w	loc_1715C
	move.w	2(a1),d0
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_1712A
	add.w	d6,d0
	bcs.s	loc_17130
	bra.w	loc_1715C
; ===========================================================================

loc_1712A:
	cmp.w	d4,d0
	bhi.w	loc_1715C

loc_17130:
	move.w	4(a1),d0
	sub.w	d1,d0
	sub.w	d3,d0
	bcc.s	loc_17142
	add.w	d6,d0
	bcs.s	loc_17148
	bra.w	loc_1715C
; ===========================================================================

loc_17142:
	cmp.w	d5,d0
	bhi.w	loc_1715C

loc_17148:
	move.w	#$604,(a1)
	bsr.s	loc_17168
	lea	($FFFFEF82).w,a3

loc_17152:
	tst.w	(a3)+
	bne.s	loc_17152
	move.w	a1,-(a3)
	addq.w	#1,($FFFFEF80).w

loc_1715C:
	lea	6(a1),a1
	cmpa.l	a1,a2
	bne.w	loc_17112

return_17166:
	rts
; ===========================================================================

loc_17168:
	subq.w	#1,(Perfect_rings_left).w
	cmpa.w	#MainCharacter,a0
	beq.w	loc_11FC8
	bra.w	loc_1201E
; ===========================================================================

loc_17178:
	movea.w	($FFFFF712).w,a0
	movea.w	($FFFFF714).w,a4
	cmpa.l	a0,a4
	bne.s	loc_17186
	rts
; ===========================================================================

loc_17186:
	lea	(Camera_X_pos).w,a3

loc_1718A:
	tst.w	(a0)
	bmi.w	loc_171EC
	move.w	2(a0),d3
	sub.w	(a3),d3
	addi.w	#$80,d3
	move.w	4(a0),d2
	sub.w	4(a3),d2
	andi.w	#$7FF,d2
	addi.w	#8,d2
	bmi.s	loc_171EC
	cmpi.w	#$F0,d2
	bge.s	loc_171EC
	addi.w	#$78,d2
	lea	(off_1736A).l,a1
	moveq	#0,d1
	move.b	1(a0),d1
	bne.s	loc_171C8
	move.b	(Rings_anim_frame).w,d1

loc_171C8:
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	move.w	(a1)+,d0
	addi.w	#$26BC,d0
	move.w	d0,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	add.w	d3,d0
	move.w	d0,(a2)+

loc_171EC:
	lea	6(a0),a0
	cmpa.l	a0,a4
	bne.w	loc_1718A
	rts
; ===========================================================================

loc_171F8:
	lea	(Camera_X_pos).w,a3
	move.w	#$78,d6
	movea.w	($FFFFF712).w,a0
	movea.w	($FFFFF714).w,a4
	cmpa.l	a0,a4
	bne.s	loc_17224
	rts
; ===========================================================================

loc_1720E:
	lea	($FFFFEE20).w,a3
	move.w	#$158,d6
	movea.w	($FFFFF716).w,a0
	movea.w	($FFFFF718).w,a4
	cmpa.l	a0,a4
	bne.s	loc_17224
	rts
; ===========================================================================

loc_17224:
	tst.w	(a0)
	bmi.w	loc_17288
	move.w	2(a0),d3
	sub.w	(a3),d3
	addi.w	#$80,d3
	move.w	4(a0),d2
	sub.w	4(a3),d2
	andi.w	#$7FF,d2
	addi.w	#$88,d2
	bmi.s	loc_17288
	cmpi.w	#$170,d2
	bge.s	loc_17288
	add.w	d6,d2
	lea	(off_1736A).l,a1
	moveq	#0,d1
	move.b	1(a0),d1
	bne.s	loc_17260
	move.b	(Rings_anim_frame).w,d1

loc_17260:
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.b	(a1)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,(a2)+
	move.b	(a1)+,d4
	move.b	byte_17294(pc,d4.w),(a2)+
	addq.b	#1,d5
	move.b	d5,(a2)+
	addq.w	#2,a1
	move.w	(a1)+,d0
	addi.w	#$235E,d0
	move.w	d0,(a2)+
	move.w	(a1)+,d0
	add.w	d3,d0
	move.w	d0,(a2)+

loc_17288:
	lea	6(a0),a0
	cmpa.l	a0,a4
	bne.w	loc_17224
	rts
; ===========================================================================
; unknown
byte_17294:
	dc.b   0,0	; 1
	dc.b   1,1	; 3
	dc.b   4,4	; 5
	dc.b   5,5	; 7
	dc.b   8,8	; 9
	dc.b   9,9	; 11
	dc.b  $C,$C	; 13
	dc.b  $D,$D	; 15
; ===========================================================================

loc_172A4:
	clearRAM Ring_Positions,$600
	; d0 = 0
	lea	($FFFFEF80).w,a1
	move.w	#bytesToLcnt($40),d1
-	move.l	d0,(a1)+
	dbf	d1,-

	moveq	#0,d5
	moveq	#0,d0
	move.w	(Current_ZoneAndAct).w,d0
	ror.b	#1,d0
	lsr.w	#6,d0
	lea	(Off_Rings).l,a1
	move.w	(a1,d0.w),d0
	lea	(a1,d0.w),a1
	lea	($FFFFE806).w,a2

loc_172E0:
	move.w	(a1)+,d2
	bmi.s	loc_17328
	move.w	(a1)+,d3
	bmi.s	loc_17308
	move.w	d3,d0
	rol.w	#4,d0
	andi.w	#7,d0
	andi.w	#$FFF,d3

loc_172F4:
	move.w	#0,(a2)+
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	addi.w	#$18,d2
	addq.w	#1,d5
	dbf	d0,loc_172F4
	bra.s	loc_172E0
; ===========================================================================

loc_17308:
	move.w	d3,d0
	rol.w	#4,d0
	andi.w	#7,d0
	andi.w	#$FFF,d3

loc_17314:
	move.w	#0,(a2)+
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	addi.w	#$18,d3
	addq.w	#1,d5
	dbf	d0,loc_17314
	bra.s	loc_172E0
; ===========================================================================

loc_17328:
	move.w	d5,(Perfect_rings_left).w
	move.w	#0,($FFFFFF42).w
	moveq	#-1,d0
	move.l	d0,(a2)+
	lea	($FFFFE802).w,a1
	move.w	#$FE,d3

loc_1733E:
	move.w	d3,d4
	lea	6(a1),a2
	move.w	(a1),d0

loc_17346:
	tst.w	(a2)
	beq.s	loc_17358
	cmp.w	(a2),d0
	bls.s	loc_17358
	move.l	(a1),d1
	move.l	(a2),d0
	move.l	d0,(a1)
	move.l	d1,(a2)
	swap	d0

loc_17358:
	lea	6(a2),a2
	dbf	d4,loc_17346
	lea	6(a1),a1
	dbf	d3,loc_1733E
	rts
; ===========================================================================
off_1736A:
	dc.w byte_1737A-off_1736A
	dc.w byte_17382-off_1736A; 1
	dc.w byte_1738A-off_1736A; 2
	dc.w byte_17392-off_1736A; 3
	dc.w byte_1739A-off_1736A; 4
	dc.w byte_173A2-off_1736A; 5
	dc.w byte_173AA-off_1736A; 6
	dc.w byte_173B2-off_1736A; 7
byte_1737A:
	dc.b $F8
	dc.b   5	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   0	; 4
	dc.b   0	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_17382:
	dc.b $F8
	dc.b   5	; 1
	dc.b   0	; 2
	dc.b   4	; 3
	dc.b   0	; 4
	dc.b   2	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_1738A:
	dc.b $F8
	dc.b   1	; 1
	dc.b   0	; 2
	dc.b   8	; 3
	dc.b   0	; 4
	dc.b   4	; 5
	dc.b $FF	; 6
	dc.b $FC	; 7
byte_17392:
	dc.b $F8
	dc.b   5	; 1
	dc.b   8	; 2
	dc.b   4	; 3
	dc.b   8	; 4
	dc.b   2	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_1739A:
	dc.b $F8
	dc.b   5	; 1
	dc.b   0	; 2
	dc.b  $A	; 3
	dc.b   0	; 4
	dc.b   5	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_173A2:
	dc.b $F8
	dc.b   5	; 1
	dc.b $18	; 2
	dc.b  $A	; 3
	dc.b $18	; 4
	dc.b   5	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_173AA:
	dc.b $F8
	dc.b   5	; 1
	dc.b   8	; 2
	dc.b  $A	; 3
	dc.b   8	; 4
	dc.b   5	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
byte_173B2:
	dc.b $F8
	dc.b   5	; 1
	dc.b $10	; 2
	dc.b  $A	; 3
	dc.b $10	; 4
	dc.b   5	; 5
	dc.b $FF	; 6
	dc.b $F8	; 7
	dc.b   0	; 8
	dc.b   0	; 9
; ===========================================================================




; ---------------------------------------------------------------------------
; Pseudo-object to do collision with (and initialize?) the special bumpers in CNZ.
; These are the bumpers that are part of the level layout but have object-like collision.
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_173BC:
SpecialCNZBumpers:
	moveq	#0,d0
	move.b	(CNZ_Bumper_routine).w,d0
	move.w	SpecialCNZBumpers_Index(pc,d0.w),d0
	jmp	SpecialCNZBumpers_Index(pc,d0.w)
; ===========================================================================
; off_173CA:
SpecialCNZBumpers_Index:
	dc.w loc_173CE-SpecialCNZBumpers_Index; 0
	dc.w loc_17422-SpecialCNZBumpers_Index; 1
; ===========================================================================

loc_173CE:
	addq.b	#2,(CNZ_Bumper_routine).w
	lea	(byte_1781A).l,a1
	tst.b	(Current_Act).w
	beq.s	loc_173E4
	lea	(byte_1795E).l,a1

loc_173E4:
	move.w	(Camera_X_pos).w,d4
	subq.w	#8,d4
	bhi.s	loc_173F4
	moveq	#1,d4
	bra.s	loc_173F4
; ===========================================================================

loc_173F0:
	lea	6(a1),a1

loc_173F4:
	cmp.w	2(a1),d4
	bhi.s	loc_173F0
	move.l	a1,($FFFFF71C).w
	move.l	a1,($FFFFF724).w
	addi.w	#$150,d4
	bra.s	loc_1740C
; ===========================================================================

loc_17408:
	lea	6(a1),a1

loc_1740C:
	cmp.w	2(a1),d4
	bhi.s	loc_17408
	move.l	a1,($FFFFF720).w
	move.l	a1,($FFFFF728).w
	move.b	#1,($FFFFF71B).w
	rts
; ===========================================================================

loc_17422:
	movea.l	($FFFFF71C).w,a1
	move.w	(Camera_X_pos).w,d4
	subq.w	#8,d4
	bhi.s	loc_17436
	moveq	#1,d4
	bra.s	loc_17436
; ===========================================================================

loc_17432:
	lea	6(a1),a1

loc_17436:
	cmp.w	2(a1),d4
	bhi.s	loc_17432
	bra.s	loc_17440
; ===========================================================================

loc_1743E:
	subq.w	#6,a1

loc_17440:
	cmp.w	-4(a1),d4
	bls.s	loc_1743E
	move.l	a1,($FFFFF71C).w
	movea.l	($FFFFF720).w,a2
	addi.w	#$150,d4
	bra.s	loc_17458
; ===========================================================================

loc_17454:
	lea	6(a2),a2

loc_17458:
	cmp.w	2(a2),d4
	bhi.s	loc_17454
	bra.s	loc_17462
; ===========================================================================

loc_17460:
	subq.w	#6,a2

loc_17462:
	cmp.w	-4(a2),d4
	bls.s	loc_17460
	move.l	a2,($FFFFF720).w
	tst.w	(Two_player_mode).w
	bne.s	loc_1747C
	move.l	a1,($FFFFF724).w
	move.l	a2,($FFFFF728).w
	rts
; ===========================================================================

loc_1747C:
	movea.l	($FFFFF724).w,a1
	move.w	($FFFFEE20).w,d4
	subq.w	#8,d4
	bhi.s	loc_17490
	moveq	#1,d4
	bra.s	loc_17490
; ===========================================================================

loc_1748C:
	lea	6(a1),a1

loc_17490:
	cmp.w	2(a1),d4
	bhi.s	loc_1748C
	bra.s	loc_1749A
; ===========================================================================

loc_17498:
	subq.w	#6,a1

loc_1749A:
	cmp.w	-4(a1),d4
	bls.s	loc_17498
	move.l	a1,($FFFFF724).w
	movea.l	($FFFFF728).w,a2
	addi.w	#$150,d4
	bra.s	loc_174B2
; ===========================================================================

loc_174AE:
	lea	6(a2),a2

loc_174B2:
	cmp.w	2(a2),d4
	bhi.s	loc_174AE
	bra.s	loc_174BC
; ===========================================================================

loc_174BA:
	subq.w	#6,a2

loc_174BC:
	cmp.w	-4(a2),d4
	bls.s	loc_174BA
	move.l	a2,($FFFFF728).w
	rts
; ===========================================================================

loc_174C8:
	movea.l	($FFFFF71C).w,a1
	movea.l	($FFFFF720).w,a2
	cmpa.w	#MainCharacter,a0
	beq.s	loc_174DE
	movea.l	($FFFFF724).w,a1
	movea.l	($FFFFF728).w,a2

loc_174DE:
	cmpa.l	a1,a2
	beq.w	return_17578
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	subi.w	#9,d2
	moveq	#0,d5
	move.b	y_radius(a0),d5
	subq.b	#3,d5
	sub.w	d5,d3
	cmpi.b	#$4D,mapping_frame(a0)
	bne.s	loc_17508
	addi.w	#$C,d3
	moveq	#$A,d5

loc_17508:
	move.w	#$12,d4
	add.w	d5,d5

loc_1750E:
	move.w	(a1),d0
	andi.w	#$E,d0
	lea	byte_17558(pc,d0.w),a3
	moveq	#0,d1
	move.b	(a3)+,d1
	move.w	2(a1),d0
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_17530
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	loc_17536
	bra.w	loc_1756E
; ===========================================================================

loc_17530:
	cmp.w	d4,d0
	bhi.w	loc_1756E

loc_17536:
	moveq	#0,d1
	move.b	(a3)+,d1
	move.w	4(a1),d0
	sub.w	d1,d0
	sub.w	d3,d0
	bcc.s	loc_17550
	add.w	d1,d1
	add.w	d1,d0
	bcs.w	loc_17564
	bra.w	loc_1756E
; ===========================================================================

loc_17550:
	cmp.w	d5,d0
	bhi.w	loc_1756E
	bra.s	loc_17564
; ===========================================================================
byte_17558:
	dc.b $20
	dc.b $20	; 1
	dc.b $20	; 2
	dc.b $20	; 3
	dc.b $40	; 4
	dc.b   8	; 5
	dc.b $40	; 6
	dc.b   8	; 7
	dc.b   8	; 8
	dc.b $40	; 9
	dc.b   8	; 10
	dc.b $40	; 11
; ===========================================================================

loc_17564:
	move.w	(a1),d0
	move.w	off_1757A(pc,d0.w),d0
	jmp	off_1757A(pc,d0.w)
; ===========================================================================

loc_1756E:
	lea	6(a1),a1
	cmpa.l	a1,a2
	bne.w	loc_1750E

return_17578:
	rts
; ===========================================================================
off_1757A:
	dc.w loc_17586-off_1757A
	dc.w loc_17638-off_1757A; 1
	dc.w loc_1769E-off_1757A; 2
	dc.w loc_176F6-off_1757A; 3
	dc.w loc_1774C-off_1757A; 4
	dc.w loc_177A4-off_1757A; 5
; ===========================================================================

loc_17586:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	neg.w	d0
	cmpi.w	#$20,d0
	blt.s	loc_175A0
	move.w	#$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_175A0:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	neg.w	d0
	cmpi.w	#$20,d0
	blt.s	loc_175BA
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_175BA:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#$20,d0
	blt.s	loc_175CC
	move.w	#$20,d0

loc_175CC:
	add.w	4(a1),d0
	subq.w	#8,d0
	move.w	y_pos(a0),d1
	addi.w	#$E,d1
	sub.w	d1,d0
	bcc.s	return_175E8
	move.w	#$20,d3
	bsr.s	loc_175EA
	bra.w	loc_177FA
; ===========================================================================

return_175E8:
	rts
; ===========================================================================

loc_175EA:
	move.w	x_vel(a0),d1
	move.w	y_vel(a0),d2
	jsr	(CalcAngle).l
	move.b	d0,($FFFFFFDC).w
	sub.w	d3,d0
	move.w	d0,d1
	bpl.s	loc_17604
	neg.w	d1

loc_17604:
	neg.w	d0
	add.w	d3,d0
	move.b	d0,($FFFFFFDD).w
	move.b	d1,($FFFFFFDF).w
	cmpi.b	#$38,d1
	bcs.s	loc_17618
	move.w	d3,d0

loc_17618:
	move.b	d0,($FFFFFFDE).w
	jsr	(CalcSine).l
	muls.w	#-$A00,d1
	asr.l	#8,d1
	move.w	d1,x_vel(a0)
	muls.w	#-$A00,d0
	asr.l	#8,d0
	move.w	d0,y_vel(a0)
	rts
; ===========================================================================

loc_17638:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	neg.w	d0
	cmpi.w	#$20,d0
	blt.s	loc_17652
	move.w	#$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_17652:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#$20,d0
	blt.s	loc_1766A
	move.w	#-$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_1766A:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	neg.w	d0
	cmpi.w	#$20,d0
	blt.s	loc_1767E
	move.w	#$20,d0

loc_1767E:
	add.w	4(a1),d0
	subq.w	#8,d0
	move.w	y_pos(a0),d1
	addi.w	#$E,d1
	sub.w	d1,d0
	bcc.s	return_1769C
	move.w	#$60,d3
	bsr.w	loc_175EA
	bra.w	loc_177FA
; ===========================================================================

return_1769C:
	rts
; ===========================================================================

loc_1769E:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	neg.w	d0
	cmpi.w	#8,d0
	blt.s	loc_176B8
	move.w	#$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_176B8:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#$40,d0
	blt.s	loc_176D0
	move.w	#-$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_176D0:
	neg.w	d0
	cmpi.w	#$40,d0
	blt.s	loc_176E2
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_176E2:
	move.w	#$38,d3
	tst.w	d0
	bmi.s	loc_176EE
	move.w	#$48,d3

loc_176EE:
	bsr.w	loc_175EA
	bra.w	loc_177FA
; ===========================================================================

loc_176F6:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	cmpi.w	#8,d0
	blt.s	loc_1770E
	move.w	#-$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_1770E:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#$40,d0
	blt.s	loc_17726
	move.w	#-$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_17726:
	neg.w	d0
	cmpi.w	#$40,d0
	blt.s	loc_17738
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_17738:
	move.w	#$C8,d3
	tst.w	d0
	bmi.s	loc_17744
	move.w	#$B8,d3

loc_17744:
	bsr.w	loc_175EA
	bra.w	loc_177FA
; ===========================================================================

loc_1774C:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	neg.w	d0
	cmpi.w	#8,d0
	blt.s	loc_17766
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_17766:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	cmpi.w	#$40,d0
	blt.s	loc_1777E
	move.w	#-$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_1777E:
	neg.w	d0
	cmpi.w	#$40,d0
	blt.s	loc_17790
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_17790:
	move.w	#8,d3
	tst.w	d0
	bmi.s	loc_1779C
	move.w	#$F8,d3

loc_1779C:
	bsr.w	loc_175EA
	bra.w	loc_177FA
; ===========================================================================

loc_177A4:
	move.w	2(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#8,d0
	blt.s	loc_177BC
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_177BC:
	move.w	4(a1),d0
	sub.w	y_pos(a0),d0
	cmpi.w	#$40,d0
	blt.s	loc_177D4
	move.w	#-$A00,y_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_177D4:
	neg.w	d0
	cmpi.w	#$40,d0
	blt.s	loc_177E6
	move.w	#$A00,x_vel(a0)
	bra.w	loc_177FA
; ===========================================================================

loc_177E6:
	move.w	#$78,d3
	tst.w	d0
	bmi.s	loc_177F2
	move.w	#$88,d3

loc_177F2:
	bsr.w	loc_175EA
	bra.w	loc_177FA
loc_177FA:
	bset	#1,status(a0)
	bclr	#4,status(a0)
	bclr	#5,status(a0)
	clr.b	jumping(a0)
	move.w	#$D9,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_1781A:	BINCLUDE	"level/objects/CNZ 1 bumpers.bin"
byte_1795E:	BINCLUDE	"level/objects/CNZ 2 bumpers.bin"
; ===========================================================================
	nop




; ===========================================================================
; Start of subroutine loc_17AA4
; Called by loc_41F8, loc_43A4, loc_4418
; Most likely the object placement engine.
; ----------------------------------------------------------------------------
; Format:
;  $0000  $0   $000 $00 $00
;  $XXXX %ABC0 $YYY $PP $SS
;  
;  $XXXX = X-position (2 bytes; 16 bits)
;     %A = Remeber object state flag (1 bit)
;     %B = Vertical flip flag (1 bit)
;     %C = Horizontal flip flag (1 bit)
;   $YYY = Y-position (1.5 bytes; 12 bits)
;    $PP = Object ID (1 byte)
;    $SS = Subtype (1 byte)
; ===========================================================================


loc_17AA4:
	moveq	#0,d0
	move.b	(Obj_placement_routine).w,d0
	move.w	off_17AB2(pc,d0.w),d0
	jmp	off_17AB2(pc,d0.w)
; ============== RELATIVE OFFSET LIST     ===================================
off_17AB2:
	dc.w ObjectsManager_Init-off_17AB2
	dc.w ObjectsManager_Main-off_17AB2; 2
; ============== END RELATIVE OFFSET LIST ===================================

ObjectsManager_Init:
	addq.b	#2,(Obj_placement_routine).w

	move.w	(Current_ZoneAndAct).w,d0	; If level == $0F (ARZ)...
	ror.b	#1,d0		; then this yields $87...
	lsr.w	#6,d0		; and this yields $0002.
	lea	(Off_Objects).l,a0	; Next, we load the first pointer in the object layout list pointer index,
	movea.l	a0,a1		; then copy it for quicker use later.
	adda.w	(a0,d0.w),a0	; (Point1 * 2) + $0002
	move.l	a0,(Obj_load_addr_0).w	; set object placement list
	move.l	a0,(Obj_load_addr_1).w
	move.l	a0,(Obj_load_addr_2).w
	move.l	a0,(Obj_load_addr_3).w

	lea	(Object_Respawn_Table).w,a2	; load respawn list
	move.w	#$101,(a2)+	; $01 $01
	move.w	#$5E,d0		; set loop counter

loc_17B0C:
	clr.l	(a2)+		; loop clears all other respawn values
	dbf	d0,loc_17B0C

	lea	(Object_Respawn_Table).w,a2	; reset
	moveq	#0,d2
	move.w	(Camera_X_pos).w,d6
	subi.w	#$80,d6
	bcc.s	loc_17B24	; if the result was not negative, skip the next instruction
	moveq	#0,d6		; no negative values allowed

loc_17B24:
	andi.w	#$FF80,d6
	movea.l	(Obj_load_addr_0).w,a0	; load address of object placement list

loc_17B2C:
	; at the beginning of a level this gives respawn table entries to any object that is one chunk
	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
	cmp.w	(a0),d6
	bls.s	loc_17B3E
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)	; does the object get a respawn table entry?
	bpl.s	loc_17B3A	; if not, branch
+	move.b	(a2),d2
	addq.b	#1,(a2)

loc_17B3A:
	addq.w	#6,a0
	bra.s	loc_17B2C
; ---------------------------------------------------------------------------

loc_17B3E:
	move.l	a0,(Obj_load_addr_0).w
	move.l	a0,(Obj_load_addr_2).w
	movea.l	(Obj_load_addr_1).w,a0
	subi.w	#$80,d6
	bcs.s	loc_17B62

loc_17B50:
	; count how many objects are behind the screen that are not in range and need to remember their state
	cmp.w	(a0),d6
	bls.s	loc_17B62
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17B5E
+	addq.b	#1,1(a2)

loc_17B5E:
	addq.w	#6,a0
	bra.s	loc_17B50
; ---------------------------------------------------------------------------

loc_17B62:
	move.l	a0,(Obj_load_addr_1).w
	move.l	a0,(Obj_load_addr_3).w
	move.w	#-1,($FFFFF76E).w	; $FFFF
	move.w	#-1,($FFFFF78C).w
; ===========================================================================

ObjectsManager_Main:
	move.w	(Camera_X_pos).w,d1
	subi.w	#$80,d1
	andi.w	#$FF80,d1
	move.w	d1,(Camera_X_pos_coarse).w
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d2
	move.w	(Camera_X_pos).w,d6
	andi.w	#$FF80,d6
	cmp.w	($FFFFF76E).w,d6
	beq.w	return_17C4E
	bge.w	ObjectsManager_GoingForward
	move.w	d6,($FFFFF76E).w
	movea.l	(Obj_load_addr_1).w,a0
	subi.w	#$80,d6
	bcs.s	loc_17BE6

-	; load all objects left of the screen that are now in range
	cmp.w	-6(a0),d6
	bge.s	loc_17BE6
	subq.w	#6,a0
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17BD0
+	subq.b	#1,1(a2)
	move.b	1(a2),d2

loc_17BD0:
	bsr.w	ChkLoadObj
	bne.s	+
	subq.w	#6,a0
	bra.s	-
; ---------------------------------------------------------------------------

+	; undo a few things, if the object couldn't load
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17BE4
+	addq.b	#1,1(a2)

loc_17BE4:
	addq.w	#6,a0

loc_17BE6:
	move.l	a0,(Obj_load_addr_1).w
	movea.l	(Obj_load_addr_0).w,a0
	addi.w	#$300,d6

loc_17BF2:
	; subtract number of objects that have been moved out of range (from the right side)
	cmp.w	-6(a0),d6
	bgt.s	loc_17C04
	cmpi.b	#$36,-2(a0)
	beq.s	+
	tst.b	-4(a0)
	bpl.s	loc_17C00
+	subq.b	#1,(a2)

loc_17C00:
	subq.w	#6,a0
	bra.s	loc_17BF2
; ---------------------------------------------------------------------------

loc_17C04:
	move.l	a0,(Obj_load_addr_0).w
	rts
; ---------------------------------------------------------------------------

ObjectsManager_GoingForward:
	move.w	d6,($FFFFF76E).w
	movea.l	(Obj_load_addr_0).w,a0
	addi.w	#$280,d6

-	; load all objects right of the screen that are now in range
	cmp.w	(a0),d6
	bls.s	loc_17C2A
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17C24
+	move.b	(a2),d2
	addq.b	#1,(a2)

loc_17C24:
	bsr.w	ChkLoadObj
	beq.s	-

loc_17C2A:
	move.l	a0,(Obj_load_addr_0).w
	movea.l	(Obj_load_addr_1).w,a0
	subi.w	#$300,d6
	bcs.s	loc_17C4A

loc_17C38:
	; subtract number of objects that have been moved out of range (from the left)
	cmp.w	(a0),d6
	bls.s	loc_17C4A
	cmpi.b	#$36,4(a0)
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17C46
+	addq.b	#1,1(a2)

loc_17C46:
	addq.w	#6,a0
	bra.s	loc_17C38
; ---------------------------------------------------------------------------

loc_17C4A:
	move.l	a0,(Obj_load_addr_1).w

return_17C4E:
	rts
; ===========================================================================
; ===========================================================================
; ===========================================================================

; >>> The two player stuff used to be here <<<

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check if an object needs to be loaded.
;
; input variables:
;  d2 = respawn index of object to be loaded
;
;  a0 = address in object placement list
;  a2 = object respawn table
;
; writes:
;  d0, d1
;  a1 = object
; ---------------------------------------------------------------------------
ChkLoadObj:
	move.b	4(a0),d5
	cmpi.b	#$36,d5
	beq.s	+
	tst.b	2(a0)
	bpl.s	loc_17F4A
+	bset	#7,2(a2,d2.w)
	beq.s	loc_17F4A
	addq.w	#6,a0
	moveq	#0,d0
	rts
; ---------------------------------------------------------------------------

loc_17F4A:
	bsr.w	SingleObjLoad
	bne.s	return_17F7E

	move.w	(a0)+,x_pos(a1)
	move.w	(a0)+,d0
	bmi.s	+
	cmpi.b	#$36,d5
	bne.s	loc_17F5C
+	move.b	d2,respawn_index(a1)

loc_17F5C:
	move.w	d0,d1
	andi.w	#$FFF,d0
	move.w	d0,y_pos(a1)
	rol.w	#3,d1
	andi.b	#3,d1
	move.b	d1,render_flags(a1)
	move.b	d1,status(a1)
	move.b	(a0)+,(a1) ; load obj
	move.b	(a0)+,subtype(a1)
	moveq	#0,d0

return_17F7E:
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_17FDA: ; allocObject:
SingleObjLoad:
	lea	(Object_RAM+$400).w,a1 ; a1=object
	move.w	#$6F,d0	; search to end of table
-
	tst.b	(a1)	; is object RAM slot empty?
	beq.s	return_17FF8	; if yes, branch
	lea	next_object(a1),a1 ; load obj address ; goto next object RAM slot
	dbf	d0,-	; repeat until end
	rts

return_17FF8:
;	move.w	d0,($FFFFF50A).w	; store remaining object slots (for debugging)
;	or	#%00000100,ccr		; force Z-flag
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array AFTER the current one in the table
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_17FFA: ; allocObjectAfterCurrent:
SingleObjLoad2:
	movea.l	a0,a1
	move.w	#Tails_Tails,d0	; $D000
	sub.w	a0,d0	; subtract current object location
	lsr.w	#6,d0	; divide by $40
	subq.w	#1,d0	; keep from going over the object zone
	bcs.s	return_18014

loc_18008:
	tst.b	(a1)	; is object RAM slot empty?
	beq.s	return_18014	; if yes, branch
	lea	next_object(a1),a1 ; load obj address ; goto next object RAM slot
	dbf	d0,loc_18008	; repeat until end

return_18014:
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object at or within < 12 slots after a3
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_18016:
SingleObjLoad3:
	movea.l	a3,a1
	move.w	#$B,d0

loc_1801C:
	tst.b	(a1)	; is object RAM slot empty?
	beq.s	return_18028	; if yes, branch
	lea	next_object(a1),a1 ; load obj address ; goto next object RAM slot
	dbf	d0,loc_1801C	; repeat until end

return_18028:
	rts
; ===========================================================================

;---------------------------------------------------------------------------------------
; CNZ act 1 object layout for 2-player mode (various objects were deleted)
;---------------------------------------------------------------------------------------
; byte_1802A;
Objects_CNZ1_2P:	BINCLUDE	"level/objects/CNZ_1_2P.bin"
;---------------------------------------------------------------------------------------
; CNZ act 2 object layout for 2-player mode (various objects were deleted)
;---------------------------------------------------------------------------------------
; byte_18492:
Objects_CNZ2_2P:	BINCLUDE	"level/objects/CNZ_2_2P.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 41 - Spring
; ----------------------------------------------------------------------------
; Sprite_18888:
Obj41:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1889C(pc,d0.w),d1
	jsr	off_1889C(pc,d1.w)
	jmp	MarkObjGone
; ===========================================================================
off_1889C:
	dc.w loc_188A8-off_1889C
	dc.w loc_18980-off_1889C; 1
	dc.w loc_18A70-off_1889C; 2
	dc.w loc_18C80-off_1889C; 3
	dc.w loc_18D6A-off_1889C; 4
	dc.w loc_18E9E-off_1889C; 5
; ===========================================================================

loc_188A8:
	addq.b	#2,routine(a0)
	move.l	#Obj41_MapUnc_1901C,mappings(a0)
	move.w	#$45C-$9E,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$E,d0
	move.w	off_188DE(pc,d0.w),d0
	jmp	off_188DE(pc,d0.w)
; ===========================================================================
off_188DE:
	dc.w loc_18954-off_188DE
	dc.w loc_188E8-off_188DE; 1
	dc.w loc_18908-off_188DE; 2
	dc.w loc_1891C-off_188DE; 3
	dc.w loc_18936-off_188DE; 4
; ===========================================================================

loc_188E8:
	move.b	#4,routine(a0)
	move.b	#2,anim(a0)
	move.b	#3,mapping_frame(a0)
	move.w	#$470-$9E,art_tile(a0)
	move.b	#8,width_pixels(a0)
	bra.s	loc_18954
; ===========================================================================

loc_18908:
	move.b	#6,routine(a0)
	move.b	#6,mapping_frame(a0)
	bset	#1,status(a0)
	bra.s	loc_18954
; ===========================================================================

loc_1891C:
	move.b	#8,routine(a0)
	move.b	#4,anim(a0)
	move.b	#7,mapping_frame(a0)
	move.w	#$43C-$9E,art_tile(a0)
	bra.s	loc_18954
; ===========================================================================

loc_18936:
	move.b	#$A,routine(a0)
	move.b	#4,anim(a0)
	move.b	#$A,mapping_frame(a0)
	move.w	#$43C-$9E,art_tile(a0)
	bset	#1,status(a0)

loc_18954:
	move.b	subtype(a0),d0
	andi.w	#2,d0
	move.w	word_1897C(pc,d0.w),objoff_30(a0)
	btst	#1,d0
	beq.s	loc_18976
	bset	#5,art_tile(a0)
	move.l	#Obj41_MapUnc_19032,mappings(a0)

loc_18976:
	bsr.w	Adjust2PArtPointer
	rts
; ===========================================================================
word_1897C:
	dc.w $F000
	dc.w $F600
; ===========================================================================

loc_18980:
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	loc_1978E
	btst	#3,status(a0)
	beq.s	loc_189A8
	bsr.s	loc_189CA

loc_189A8:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	loc_1978E
	btst	#4,status(a0)
	beq.s	loc_189C0
	bsr.s	loc_189CA

loc_189C0:
	lea	(off_18FE2).l,a1
	bra.w	AnimateSprite
; ===========================================================================

loc_189CA:
	move.w	#$100,anim(a0)
	addq.w	#8,y_pos(a1)
	move.w	objoff_30(a0),y_vel(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
;	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	subtype(a0),d0
	bpl.s	loc_189FE
	move.w	#0,x_vel(a1)

loc_189FE:
	btst	#0,d0
	beq.s	loc_18A3E
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
;	move.b	#0,anim(a1)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_18A2E
	move.b	#1,flips_remaining(a1)

loc_18A2E:
	btst	#0,status(a1)
	beq.s	loc_18A3E
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_18A3E:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_18A54
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_18A54:
	cmpi.b	#8,d0
	bne.s	loc_18A66
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_18A66:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_18A70:
	move.w	#$13,d1
	move.w	#$E,d2
	move.w	#$F,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	loc_1978E
	btst	#5,status(a0)
	beq.s	loc_18AB0
	move.b	status(a0),d1
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcs.s	loc_18AA8
	eori.b	#1,d1

loc_18AA8:
	andi.b	#1,d1
	bne.s	loc_18AB0
	bsr.s	loc_18AEE

loc_18AB0:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	loc_1978E
	btst	#6,status(a0)
	beq.s	loc_18AE0
	move.b	status(a0),d1
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcs.s	loc_18AD8
	eori.b	#1,d1

loc_18AD8:
	andi.b	#1,d1
	bne.s	loc_18AE0
	bsr.s	loc_18AEE

loc_18AE0:
	bsr.w	loc_18BC6
	lea	(off_18FE2).l,a1
	bra.w	AnimateSprite
; ===========================================================================

loc_18AEE:
	move.w	#$300,anim(a0)
	move.w	objoff_30(a0),x_vel(a1)
	addq.w	#8,x_pos(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_18B1C
	bclr	#0,status(a1)
	subi.w	#$10,x_pos(a1)
	neg.w	x_vel(a1)

loc_18B1C:
	move.w	#$F,move_lock(a1)
	move.w	x_vel(a1),inertia(a1)
	btst	#2,status(a1)
	bne.s	loc_18B36
	move.b	#0,anim(a1)

loc_18B36:
	move.b	subtype(a0),d0
	bpl.s	loc_18B42
	move.w	#0,y_vel(a1)

loc_18B42:
	btst	#0,d0
	beq.s	loc_18B82
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_18B72
	move.b	#3,flips_remaining(a1)

loc_18B72:
	btst	#0,status(a1)
	beq.s	loc_18B82
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_18B82:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_18B98
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_18B98:
	cmpi.b	#8,d0
	bne.s	loc_18BAA
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_18BAA:
	bclr	#5,status(a0)
	bclr	#6,status(a0)
	bclr	#5,status(a1)
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_18BC6:
	cmpi.b	#3,anim(a0)
	beq.w	return_18C7E
	move.w	x_pos(a0),d0
	move.w	d0,d1
	addi.w	#$28,d1
	btst	#0,status(a0)
	beq.s	loc_18BE8
	move.w	d0,d1
	subi.w	#$28,d0

loc_18BE8:
	move.w	y_pos(a0),d2
	move.w	d2,d3
	subi.w	#$18,d2
	addi.w	#$18,d3
	lea	(MainCharacter).w,a1 ; a1=character
	btst	#1,status(a1)
	bne.s	loc_18C3C
	move.w	inertia(a1),d4
	btst	#0,status(a0)
	beq.s	loc_18C10
	neg.w	d4

loc_18C10:
	tst.w	d4
	bmi.s	loc_18C3C
	move.w	x_pos(a1),d4
	cmp.w	d0,d4
	bcs.w	loc_18C3C
	cmp.w	d1,d4
	bcc.w	loc_18C3C
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.w	loc_18C3C
	cmp.w	d3,d4
	bcc.w	loc_18C3C
	move.w	d0,-(sp)
	bsr.w	loc_18AEE
	move.w	(sp)+,d0

loc_18C3C:
	lea	(Sidekick).w,a1 ; a1=character
	btst	#1,status(a1)
	bne.s	return_18C7E
	move.w	inertia(a1),d4
	btst	#0,status(a0)
	beq.s	loc_18C56
	neg.w	d4

loc_18C56:
	tst.w	d4
	bmi.s	return_18C7E
	move.w	x_pos(a1),d4
	cmp.w	d0,d4
	bcs.w	return_18C7E
	cmp.w	d1,d4
	bcc.w	return_18C7E
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.w	return_18C7E
	cmp.w	d3,d4
	bcc.w	return_18C7E
	bsr.w	loc_18AEE

return_18C7E:
	rts
; ===========================================================================

loc_18C80:
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	loc_1978E
	cmpi.w	#-2,d4
	bne.s	loc_18CA6
	bsr.s	loc_18CC6

loc_18CA6:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	loc_1978E
	cmpi.w	#-2,d4
	bne.s	loc_18CBC
	bsr.s	loc_18CC6

loc_18CBC:
	lea	(off_18FE2).l,a1
	bra.w	AnimateSprite
; ===========================================================================

loc_18CC6:
	move.w	#$100,anim(a0)
	subq.w	#8,y_pos(a1)
	move.w	objoff_30(a0),y_vel(a1)
	neg.w	y_vel(a1)
	move.b	subtype(a0),d0
	bpl.s	loc_18CE6
	move.w	#0,x_vel(a1)

loc_18CE6:
	btst	#0,d0
	beq.s	loc_18D26
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_18D16
	move.b	#1,flips_remaining(a1)

loc_18D16:
	btst	#0,status(a1)
	beq.s	loc_18D26
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_18D26:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_18D3C
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_18D3C:
	cmpi.b	#8,d0
	bne.s	loc_18D4E
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_18D4E:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_18D6A:
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	x_pos(a0),d4
	lea	byte_18FAA(pc),a2
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	SolidObject_Simple
	btst	#3,status(a0)
	beq.s	loc_18D92
	bsr.s	loc_18DB4

loc_18D92:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	SolidObject_Simple
	btst	#4,status(a0)
	beq.s	loc_18DAA
	bsr.s	loc_18DB4

loc_18DAA:
	lea	(off_18FE2).l,a1
	bra.w	AnimateSprite
; ===========================================================================

loc_18DB4:
	btst	#0,status(a0)
	bne.s	loc_18DCA
	move.w	x_pos(a0),d0
	subq.w	#4,d0
	cmp.w	x_pos(a1),d0
	bcs.s	loc_18DD8
	rts
; ===========================================================================

loc_18DCA:
	move.w	x_pos(a0),d0
	addq.w	#4,d0
	cmp.w	x_pos(a1),d0
	bcc.s	loc_18DD8
	rts
; ===========================================================================

loc_18DD8:
	move.w	#$500,anim(a0)
	move.w	objoff_30(a0),y_vel(a1)
	move.w	objoff_30(a0),x_vel(a1)
	addq.w	#6,y_pos(a1)
	addq.w	#6,x_pos(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_18E10
	bclr	#0,status(a1)
	subi.w	#$C,x_pos(a1)
	neg.w	x_vel(a1)

loc_18E10:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	subtype(a0),d0
	btst	#0,d0
	beq.s	loc_18E6C
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_18E5C
	move.b	#3,flips_remaining(a1)

loc_18E5C:
	btst	#0,status(a1)
	beq.s	loc_18E6C
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_18E6C:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_18E82
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_18E82:
	cmpi.b	#8,d0
	bne.s	loc_18E94
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_18E94:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_18E9E:
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	x_pos(a0),d4
	lea	byte_18FC6(pc),a2
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	SolidObject_Simple
	cmpi.w	#-2,d4
	bne.s	loc_18EC4
	bsr.s	loc_18EE6

loc_18EC4:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	SolidObject_Simple
	cmpi.w	#-2,d4
	bne.s	loc_18EDA
	bsr.s	loc_18EE6

loc_18EDA:
	lea	(off_18FE2).l,a1
	bra.w	AnimateSprite
; ===========================================================================
	rts
; ===========================================================================

loc_18EE6:
	move.w	#$500,anim(a0)
	move.w	objoff_30(a0),y_vel(a1)
	neg.w	y_vel(a1)
	move.w	objoff_30(a0),x_vel(a1)
	subq.w	#6,y_pos(a1)
	addq.w	#6,x_pos(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_18F22
	bclr	#0,status(a1)
	subi.w	#$C,x_pos(a1)
	neg.w	x_vel(a1)

loc_18F22:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.b	subtype(a0),d0
	btst	#0,d0
	beq.s	loc_18F78
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_18F68
	move.b	#3,flips_remaining(a1)

loc_18F68:
	btst	#0,status(a1)
	beq.s	loc_18F78
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_18F78:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_18F8E
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_18F8E:
	cmpi.b	#8,d0
	bne.s	loc_18FA0
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_18FA0:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_18FAA:
	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10, $E, $C, $A,  8
	dc.b   6,  4,  2,  0,$FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC; 16
byte_18FC6:
	dc.b $F4,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F2,$F4,$F6,$F8
	dc.b $FA,$FC,$FE,  0,  2,  4,  4,  4,  4,  4,  4,  4; 16

; animation script
off_18FE2:
	dc.w byte_18FEE-off_18FE2
	dc.w byte_18FF1-off_18FE2; 1
	dc.w byte_18FFD-off_18FE2; 2
	dc.w byte_19000-off_18FE2; 3
	dc.w byte_1900C-off_18FE2; 4
	dc.w byte_1900F-off_18FE2; 5
byte_18FEE:
	dc.b  $F
	dc.b   0	; 1
	dc.b $FF	; 2
byte_18FF1:
	dc.b   0
	dc.b   1	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   2	; 4
	dc.b   2	; 5
	dc.b   2	; 6
	dc.b   2	; 7
	dc.b   2	; 8
	dc.b   2	; 9
	dc.b $FD	; 10
	dc.b   0	; 11
byte_18FFD:
	dc.b  $F
	dc.b   3	; 1
	dc.b $FF	; 2
byte_19000:
	dc.b   0
	dc.b   4	; 1
	dc.b   3	; 2
	dc.b   3	; 3
	dc.b   5	; 4
	dc.b   5	; 5
	dc.b   5	; 6
	dc.b   5	; 7
	dc.b   5	; 8
	dc.b   5	; 9
	dc.b $FD	; 10
	dc.b   2	; 11
byte_1900C:
	dc.b  $F
	dc.b   7	; 1
	dc.b $FF	; 2
byte_1900F:
	dc.b   0
	dc.b   8	; 1
	dc.b   7	; 2
	dc.b   7	; 3
	dc.b   9	; 4
	dc.b   9	; 5
	dc.b   9	; 6
	dc.b   9	; 7
	dc.b   9	; 8
	dc.b   9	; 9
	dc.b $FD	; 10
	dc.b   4	; 11
	even

; ----------------------------------------------------------------------------
; Primary sprite mappings for springs
; ----------------------------------------------------------------------------
Obj41_MapUnc_1901C:
	dc.w word_19048-Obj41_MapUnc_1901C
	dc.w word_1905A-Obj41_MapUnc_1901C; 1
	dc.w word_19064-Obj41_MapUnc_1901C; 2
	dc.w word_19076-Obj41_MapUnc_1901C; 3
	dc.w word_19088-Obj41_MapUnc_1901C; 4
	dc.w word_19092-Obj41_MapUnc_1901C; 5
	dc.w word_190A4-Obj41_MapUnc_1901C; 6
	dc.w word_190B6-Obj41_MapUnc_1901C; 7
	dc.w word_190D8-Obj41_MapUnc_1901C; 8
	dc.w word_190F2-Obj41_MapUnc_1901C; 9
	dc.w word_19114-Obj41_MapUnc_1901C; 10
; -------------------------------------------------------------------------------
; Secondary sprite mappings for springs
; merged with the above mappings; can't split to file in a useful way...
; -------------------------------------------------------------------------------
Obj41_MapUnc_19032:
	dc.w word_19048-Obj41_MapUnc_19032
	dc.w word_1905A-Obj41_MapUnc_19032; 1
	dc.w word_19064-Obj41_MapUnc_19032; 2
	dc.w word_19076-Obj41_MapUnc_19032; 3
	dc.w word_19088-Obj41_MapUnc_19032; 4
	dc.w word_19092-Obj41_MapUnc_19032; 5
	dc.w word_190A4-Obj41_MapUnc_19032; 6
	dc.w word_19136-Obj41_MapUnc_19032; 7
	dc.w word_19158-Obj41_MapUnc_19032; 8
	dc.w word_19172-Obj41_MapUnc_19032; 9
	dc.w word_19194-Obj41_MapUnc_19032; 10
word_19048:
	dc.w 2
	dc.w $F00D,    0,    0,$FFF0
	dc.w	 5,    8,    4,$FFF8; 4
word_1905A:
	dc.w 1
	dc.w $F80D,    0,    0,$FFF0
word_19064:
	dc.w 2
	dc.w $E00D,    0,    0,$FFF0
	dc.w $F007,   $C,    6,$FFF8; 4
word_19076:
	dc.w 2
	dc.w $F003,    0,    0,	   0
	dc.w $F801,    4,    2,$FFF8; 4
word_19088:
	dc.w 1
	dc.w $F003,    0,    0,$FFF8
word_19092:
	dc.w 2
	dc.w $F003,    0,    0,	 $10
	dc.w $F809,    6,    3,$FFF8; 4
word_190A4:
	dc.w 2
	dc.w	$D,$1000,$1000,$FFF0
	dc.w $F005,$1008,$1004,$FFF8; 4
word_190B6:
	dc.w 4
	dc.w $F00D,    0,    0,$FFF0
	dc.w	 5,    8,    4,	   0; 4
	dc.w $FB05,   $C,    6,$FFF6; 8
	dc.w	 5,$201C,$200E,$FFF0; 12
word_190D8:
	dc.w 3
	dc.w $F60D,    0,    0,$FFEA
	dc.w  $605,    8,    4,$FFFA; 4
	dc.w	 5,$201C,$200E,$FFF0; 8
word_190F2:
	dc.w 4
	dc.w $E60D,    0,    0,$FFFB
	dc.w $F605,    8,    4,	  $B; 4
	dc.w $F30B,  $10,    8,$FFF6; 8
	dc.w	 5,$201C,$200E,$FFF0; 12
word_19114:
	dc.w 4
	dc.w	$D,$1000,$1000,$FFF0
	dc.w $F005,$1008,$1004,	   0; 4
	dc.w $F505,$100C,$1006,$FFF6; 8
	dc.w $F005,$301C,$300E,$FFF0; 12
word_19136:
	dc.w 4
	dc.w $F00D,    0,    0,$FFF0
	dc.w	 5,    8,    4,	   0; 4
	dc.w $FB05,   $C,    6,$FFF6; 8
	dc.w	 5,  $1C,   $E,$FFF0; 12
word_19158:
	dc.w 3
	dc.w $F60D,    0,    0,$FFEA
	dc.w  $605,    8,    4,$FFFA; 4
	dc.w	 5,  $1C,   $E,$FFF0; 8
word_19172:
	dc.w 4
	dc.w $E60D,    0,    0,$FFFB
	dc.w $F605,    8,    4,	  $B; 4
	dc.w $F30B,  $10,    8,$FFF6; 8
	dc.w	 5,  $1C,   $E,$FFF0; 12
word_19194:
	dc.w 4
	dc.w	$D,$1000,$1000,$FFF0
	dc.w $F005,$1008,$1004,	   0; 4
	dc.w $F505,$100C,$1006,$FFF6; 8
	dc.w $F005,$101C,$100E,$FFF0; 12
; ===========================================================================
	nop




; ----------------------------------------------------------------------------
; Object 0D - End of level sign post
; ----------------------------------------------------------------------------
; OST:
obj0D_spinframe		= objoff_30 ; $30(a0)
obj0D_sparkleframe	= objoff_34 ; $34(a0)
obj0D_finalanim		= objoff_36 ; $36(a0) ; 4 if Tails only, 3 otherwise (determines what character to show)
; ----------------------------------------------------------------------------

Obj0D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj0D_States(pc,d0.w),d1
	jsr	Obj0D_States(pc,d1.w)
	lea	(off_1958E).l,a1
	bsr.w	AnimateSprite
	bsr.w	loc_19534
	bra.w	MarkObjGone
; ===========================================================================
; off_191D8: Obj_0D_subtbl:
Obj0D_States:
	dc.w	Obj0D_Init - Obj0D_States
	dc.w	Obj0D_Main - Obj0D_States
; ===========================================================================
; loc_191DC: Obj_0D_sub_0:
Obj0D_Init:
	tst.w	(Two_player_mode).w
	beq.s	loc_19208
	move.l	#Obj0D_MapUnc_19656,mappings(a0)
	move.w	#$5E8,art_tile(a0)
	move.b	#-1,($FFFFFFCA).w
	moveq	#0,d1
	move.w	#$1020,d1
	move.w	#-$80,d4
	moveq	#0,d5
	bsr.w	loc_19564
	bra.s	loc_1922C
; ---------------------------------------------------------------------------

loc_19208:
	cmpi.w	#$401,(Current_ZoneAndAct).w
	beq.s	loc_1921E
	tst.b	(Current_Act).w
	beq.s	loc_1921E
	move.w	#0,x_pos(a0)
	rts
; ---------------------------------------------------------------------------
loc_1921E:
	move.l	#Obj0D_MapUnc_195BE,mappings(a0)
	move.w	#$434,art_tile(a0)

loc_1922C:
	addq.b	#2,routine(a0) ; => Obj0D_Main
	bsr.w	Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	#$3C3C,(Loser_Time_Left).w

; loc_1924C: Obj_0D_sub_2:
Obj0D_Main:
	tst.b	(Update_HUD_timer).w
	beq.w	loc_192D6
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	bcs.s	loc_192D6
	cmpi.w	#$20,d0
	bcc.s	loc_192D6
	move.w	#$CF,d0
	jsr	(PlayMusic).l	; play spinning sound
	clr.b	(Update_HUD_timer).w
	move.w	#1,anim(a0)
	move.w	#0,obj0D_spinframe(a0)
	move.w	(Camera_Max_X_pos).w,(Camera_Min_X_pos).w	; lock screen
	move.b	#2,routine_secondary(a0) ; => Obj0D_Main_State2
	cmpi.b	#$C,(Loser_Time_Left).w
	bhi.s	loc_192A0
	move.w	(Level_Music).w,d0
	jsr	(PlayMusic).l	; play zone music

loc_192A0:
	tst.b	obj0D_finalanim(a0)
	bne.w	loc_19350
	move.b	#3,obj0D_finalanim(a0)
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_192BC
	move.b	#4,obj0D_finalanim(a0)

loc_192BC:
	tst.w	(Two_player_mode).w
	beq.w	loc_19350
	move.w	#$3C3C,(Loser_Time_Left).w
	move.w	#$D3,d0		; play different spinning sound
	jsr	(PlaySound).l
	bra.s	loc_19350
; ---------------------------------------------------------------------------

loc_192D6:
	tst.w	(Two_player_mode).w
	beq.s	loc_19350
	tst.b	(Update_HUD_timer_2P).w
	beq.s	loc_19350
	lea	(Sidekick).w,a1 ; a1=character
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	bcs.s	loc_19350
	cmpi.w	#$20,d0
	bcc.s	loc_19350
	move.w	#$CF,d0
	jsr	(PlayMusic).l
	clr.b	(Update_HUD_timer_2P).w
	move.w	#1,anim(a0)
	move.w	#0,obj0D_spinframe(a0)
	move.w	(Tails_Max_X_pos).w,(Tails_Min_X_pos).w
	move.b	#2,routine_secondary(a0) ; => Obj0D_Main_State2
	cmpi.b	#$C,(Loser_Time_Left).w
	bhi.s	loc_1932E
	move.w	(Level_Music).w,d0
	jsr	(PlayMusic).l

loc_1932E:
	tst.b	obj0D_finalanim(a0)
	bne.s	loc_19350
	move.b	#4,obj0D_finalanim(a0)
	tst.w	(Two_player_mode).w
	beq.s	loc_19350
	move.w	#$3C3C,(Loser_Time_Left).w
	move.w	#$D3,d0
	jsr	(PlaySound).l

loc_19350:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	Obj0D_Main_States(pc,d0.w),d1
	jmp	Obj0D_Main_States(pc,d1.w)
; ===========================================================================
Obj0D_Main_States:
	dc.w	Obj0D_Main_StateNull - Obj0D_Main_States	; 0
	dc.w	Obj0D_Main_State2 - Obj0D_Main_States		; 2
	dc.w	Obj0D_Main_State3 - Obj0D_Main_States		; 4
	dc.w	Obj0D_Main_State4 - Obj0D_Main_States		; 6
; ===========================================================================
; return_19366:
Obj0D_Main_StateNull:
	rts
; ===========================================================================
; loc_19368:
Obj0D_Main_State2:
	subq.w	#1,obj0D_spinframe(a0)
	bpl.s	loc_19398
	move.w	#$3C,obj0D_spinframe(a0)
	addq.b	#1,anim(a0)
	cmpi.b	#3,anim(a0)
	bne.s	loc_19398
	move.b	#4,routine_secondary(a0) ; => Obj0D_Main_State3
	move.b	obj0D_finalanim(a0),anim(a0)
	tst.w	(Two_player_mode).w
	beq.s	loc_19398
	move.b	#6,routine_secondary(a0) ; => Obj0D_Main_State4

loc_19398:
	subq.w	#1,objoff_32(a0)
	bpl.s	return_19406
	move.w	#$B,objoff_32(a0)
	moveq	#0,d0
	move.b	obj0D_sparkleframe(a0),d0
	addq.b	#2,obj0D_sparkleframe(a0)
	andi.b	#$E,obj0D_sparkleframe(a0)
	lea	Obj0D_RingSparklePositions(pc,d0.w),a2
	bsr.w	SingleObjLoad
	bne.s	return_19406
	_move.b	#$25,0(a1) ; load obj25 (a ring) for the sparkly effects over the signpost
	move.b	#6,routine(a1) ; => Obj_25_sub_6
	move.b	(a2)+,d0
	ext.w	d0
	add.w	x_pos(a0),d0
	move.w	d0,x_pos(a1)
	move.b	(a2)+,d0
	ext.w	d0
	add.w	y_pos(a0),d0
	move.w	d0,y_pos(a1)
	move.l	#Obj25_MapUnc_12382,mappings(a1)
	move.w	#$26BC,art_tile(a1)
	bsr.w	Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#2,priority(a1)
	move.b	#8,width_pixels(a1)

return_19406:
	rts
; ===========================================================================
; byte_19408:
Obj0D_RingSparklePositions:
	dc.b -24,-16	; 1
	dc.b   8,  8	; 3
	dc.b -16,  0	; 5
	dc.b  24, -8	; 7
	dc.b   0, -8	; 9
	dc.b  16,  0	; 11
	dc.b -24,  8	; 13
	dc.b  24, 16	; 15
; ===========================================================================
; loc_19418:
Obj0D_Main_State3:
	tst.w	(Debug_placement_mode).w
	bne.w	return_194D0
	btst	#1,(MainCharacter+status).w
	bne.s	loc_19434
	move.b	#1,(Control_Locked).w
	move.w	#$800,(Ctrl_1_Logical).w

loc_19434:
	tst.b	(MainCharacter).w
	beq.s	loc_1944C
	move.w	(MainCharacter+x_pos).w,d0
	move.w	(Camera_Max_X_pos).w,d1
	addi.w	#$128,d1
	cmp.w	d1,d0
	bcs.w	return_194D0

loc_1944C:
	move.b	#0,routine_secondary(a0) ; => Obj0D_Main_StateNull

loc_19452:
	lea	(MainCharacter).w,a1 ; a1=character
	clr.b	status_secondary(a1)
	clr.b	(Update_HUD_timer).w
	bsr.w	SingleObjLoad
	bne.s	+
	move.b	#$3A,(a1) ; load obj3A (end of level results screen)
+
	moveq	#$26,d0
	cmpi.w	#2,(Player_mode).w
	bne.s	+
	moveq	#$42,d0
+
	jsr	(LoadPLC2).l
	move.b	#1,(Update_Bonus_score).w
	moveq	#0,d0
	move.b	(Timer_minute).w,d0
	mulu.w	#$3C,d0
	moveq	#0,d1
	move.b	(Timer_second).w,d1
	add.w	d1,d0
	divu.w	#$F,d0
	moveq	#$14,d1
	cmp.w	d1,d0
	bcs.s	+
	move.w	d1,d0
+
	add.w	d0,d0
	move.w	TimeBonuses(pc,d0.w),(Bonus_Countdown_1).w
	move.w	(Ring_count).w,d0
	mulu.w	#$A,d0
	move.w	d0,(Bonus_Countdown_2).w
	clr.w	($FFFFFF8E).w
	clr.w	($FFFFFF92).w
	tst.w	(Perfect_rings_left).w
	bne.s	+
	move.w	#5000,($FFFFFF92).w
+
	move.w	#$9A,d0
	jsr	(PlayMusic).l

return_194D0:
	rts
; ===========================================================================
; word_194D2:
TimeBonuses:
	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300
	dc.w  200,  200,  200, 200, 100, 100, 100, 100
	dc.w   50,   50,   50,  50,   0
; ===========================================================================
; loc_194FC:
Obj0D_Main_State4:
	subq.w	#1,obj0D_spinframe(a0)
	bpl.s	return_19532
	tst.b	(Time_Over_flag).w
	bne.s	return_19532
	tst.b	(Time_Over_flag_2P).w
	bne.s	return_19532
	tst.b	(Update_HUD_timer).w
	bne.s	return_19532
	tst.b	(Update_HUD_timer_2P).w
	bne.s	return_19532
	move.b	#0,(Last_star_pole_hit).w
	move.b	#0,(Last_star_pole_hit_2P).w
	move.b	#$18,(Game_Mode).w ; => TwoPlayerResults
	move.w	#0,(Results_Screen_2P).w

return_19532:
	rts
; ===========================================================================

loc_19534:
	tst.w	(Two_player_mode).w
	beq.s	return_1958C
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	cmp.b	($FFFFFFCA).w,d0
	beq.s	return_1958C
	move.b	d0,($FFFFFFCA).w
	lea	(Obj0D_MapUnc_196EE).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_1958C
	move.w	#$BD00,d4

loc_19560:
	moveq	#0,d1
	move.w	(a2)+,d1

loc_19564:
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.l	#5,d1
	addi.l	#ArtUnc_Signpost,d1
	move.w	d4,d2
	add.w	d3,d4
	add.w	d3,d4
	jsr	(QueueDMATransfer).l
	dbf	d5,loc_19560

return_1958C:
	rts
; ===========================================================================
; animation script
off_1958E:
	dc.w	byte_19598-off_1958E
	dc.w	byte_1959B-off_1958E
	dc.w	byte_195A9-off_1958E
	dc.w	byte_195B7-off_1958E
	dc.w	byte_195BA-off_1958E
byte_19598:	dc.b	$0F, $02, $FF
byte_1959B:	dc.b	$01, $02, $03, $04, $05, $01, $03, $04, $05, $00, $03, $04, $05, $FF
byte_195A9:	dc.b	$01, $02, $03, $04, $05, $01, $03, $04, $05, $00, $03, $04, $05, $FF
byte_195B7:	dc.b	$0F, $00, $FF
byte_195BA:	dc.b	$0F, $01, $FF
	even
; -------------------------------------------------------------------------------
; sprite mappings - Primary sprite table for object 0D (signpost)
; -------------------------------------------------------------------------------
; SprTbl_0D_Primary:
Obj0D_MapUnc_195BE:	BINCLUDE "mappings/sprite/obj0D_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings - Secondary sprite table for object 0D (signpost)
; -------------------------------------------------------------------------------
; SprTbl_0D_Scndary:
Obj0D_MapUnc_19656:	BINCLUDE "mappings/sprite/obj0D_b.bin"
; -------------------------------------------------------------------------------
; sprite mappings - Ternary sprite table for object 0D (signpost)
; -------------------------------------------------------------------------------
Obj0D_MapUnc_196EE:	BINCLUDE "mappings/sprite/obj0D_c.bin"
; ===========================================================================
	nop




; ---------------------------------------------------------------------------
; Solid object subroutines (includes spikes, blocks, rocks etc)
; These check collision of Sonic/Tails with objects on the screen
;
; input variables:
; d1 = object width
; d2 = object height / 2 (when jumping)
; d3 = object height / 2 (when walking)
; d4 = object x-axis position
;
; address registers:
; a0 = the object to check collision with
; a1 = sonic or tails (set inside these subroutines)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_19718:
SolidObject:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)	; store input registers
	bsr.s	+	; first check collision with Sonic
	movem.l	(sp)+,d1-d4	; restore input registers
	lea	(Sidekick).w,a1 ; a1=character ; now check collision with Tails
	tst.b	render_flags(a1)
	bpl.w	return_19776	; return if no Tails
	addq.b	#1,d6
+
	btst	d6,status(a0)
	beq.w	SolidObject_cont
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_1975A
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_1975A
	cmp.w	d2,d0
	bcs.s	loc_1976E

loc_1975A:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_1976E:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4

return_19776:
	rts

; ===========================================================================
; there are a few slightly different SolidObject functions
; specialized for certain objects, in this case, obj74 and obj30
; loc_19778:
SolidObject74_30:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_1978E
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

loc_1978E:
	btst	d6,status(a0)
	beq.w	loc_199F0
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_197B2
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_197B2
	cmp.w	d2,d0
	bcs.s	loc_197C6

loc_197B2:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_197C6:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4
	rts

; ===========================================================================
; loc_197D0:
SolidObject86_30:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	SolidObject_Simple
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

; this gets called from a few more places...
; loc_197E6:
SolidObject_Simple:
	btst	d6,status(a0)
	beq.w	SolidObject86_30_alt
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_1980A
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_1980A
	cmp.w	d2,d0
	bcs.s	loc_1981E

loc_1980A:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_1981E:
	move.w	d4,d2
	bsr.w	loc_19BCC
	moveq	#0,d4
	rts

; ===========================================================================
; unused/dead code for some SolidObject check
; SolidObject_Unk: loc_19828:
	; a0=object
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	+
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6
+
	btst	d6,status(a0)
	beq.w	SolidObject_Unk_cont
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_19862
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_19862
	cmp.w	d2,d0
	bcs.s	loc_19876

loc_19862:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_19876:
	move.w	d4,d2
	bsr.w	loc_19C0E
	moveq	#0,d4
	rts

; ===========================================================================
; loc_19880:
SolidObject45:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_19896
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

loc_19896:
	btst	d6,status(a0)
	beq.w	SolidObject45_alt
	btst	#1,status(a1)
	bne.s	loc_198B8
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_198B8
	add.w	d1,d1
	cmp.w	d1,d0
	bcs.s	loc_198CC

loc_198B8:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_198CC:
	move.w	y_pos(a0),d0
	sub.w	d2,d0
	add.w	d3,d0
	moveq	#0,d1
	move.b	y_radius(a1),d1
	sub.w	d1,d0
	move.w	d0,y_pos(a1)
	sub.w	x_pos(a0),d4
	sub.w	d4,x_pos(a1)
	moveq	#0,d4
	rts
; ===========================================================================
; loc_198EC:
SolidObject45_alt:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	loc_19AC4
	move.w	d1,d4
	add.w	d4,d4
	cmp.w	d4,d0
	bhi.w	loc_19AC4
	move.w	y_pos(a0),d5
	add.w	d3,d5
	move.b	y_radius(a1),d3
	ext.w	d3
	add.w	d3,d2
	move.w	y_pos(a1),d3
	sub.w	d5,d3
	addq.w	#4,d3
	add.w	d2,d3
	bmi.w	loc_19AC4
	move.w	d2,d4
	add.w	d4,d4
	cmp.w	d4,d3
	bcc.w	loc_19AC4
	bra.w	loc_19A2E
; ===========================================================================
; loc_1992E:
SolidObject86_30_alt:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	loc_19AC4
	move.w	d1,d3
	add.w	d3,d3
	cmp.w	d3,d0
	bhi.w	loc_19AC4
	move.w	d0,d5
	btst	#0,render_flags(a0)
	beq.s	+
	not.w	d5
	add.w	d3,d5
+
	lsr.w	#1,d5
	move.b	(a2,d5.w),d3
	sub.b	(a2),d3
	ext.w	d3
	move.w	y_pos(a0),d5
	sub.w	d3,d5
	move.b	y_radius(a1),d3
	ext.w	d3
	add.w	d3,d2
	move.w	y_pos(a1),d3
	sub.w	d5,d3
	addq.w	#4,d3
	add.w	d2,d3
	bmi.w	loc_19AC4
	move.w	d2,d4
	add.w	d4,d4
	cmp.w	d4,d3
	bcc.w	loc_19AC4
	bra.w	loc_19A2E
; ===========================================================================
; seems to be unused
; loc_19988:
SolidObject_Unk_cont:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	loc_19AC4
	move.w	d1,d3
	add.w	d3,d3
	cmp.w	d3,d0
	bhi.w	loc_19AC4
	move.w	d0,d5
	btst	#0,render_flags(a0)
	beq.s	+
	not.w	d5
	add.w	d3,d5
+
	andi.w	#$FFFE,d5
	move.b	(a2,d5.w),d3
	move.b	1(a2,d5.w),d2
	ext.w	d2
	ext.w	d3
	move.w	y_pos(a0),d5
	sub.w	d3,d5
	move.w	y_pos(a1),d3
	sub.w	d5,d3
	move.b	y_radius(a1),d5
	ext.w	d5
	add.w	d5,d3
	addq.w	#4,d3
	bmi.w	loc_19AC4
	add.w	d5,d2
	move.w	d2,d4
	add.w	d5,d4
	cmp.w	d4,d3
	bcc.w	loc_19AC4
	bra.w	loc_19A2E
; ===========================================================================
; loc_199E8:
SolidObject_cont:
	tst.b	render_flags(a0)
	bpl.w	loc_19AC4

loc_199F0:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	loc_19AC4
	move.w	d1,d3
	add.w	d3,d3
	cmp.w	d3,d0
	bhi.w	loc_19AC4
	move.b	y_radius(a1),d3
	ext.w	d3
	add.w	d3,d2
	move.w	y_pos(a1),d3
	sub.w	y_pos(a0),d3
	addq.w	#4,d3
	add.w	d2,d3
	bmi.w	loc_19AC4
	andi.w	#$7FF,d3
	move.w	d2,d4
	add.w	d4,d4
	cmp.w	d4,d3
	bcc.w	loc_19AC4

loc_19A2E:
	tst.b	obj_control(a1)
	bmi.w	loc_19AC4
	cmpi.b	#6,routine(a1)
	bcc.w	loc_19AEA
	tst.w	(Debug_placement_mode).w
	bne.w	loc_19AEA
	move.w	d0,d5
	cmp.w	d0,d1
	bcc.s	loc_19A56
	add.w	d1,d1
	sub.w	d1,d0
	move.w	d0,d5
	neg.w	d5

loc_19A56:
	move.w	d3,d1
	cmp.w	d3,d2
	bcc.s	loc_19A64
	subq.w	#4,d3
	sub.w	d4,d3
	move.w	d3,d1
	neg.w	d1

loc_19A64:
	cmp.w	d1,d5
	bhi.w	loc_19AEE

loc_19A6A:
	cmpi.w	#4,d1
	bls.s	loc_19AB6
	tst.w	d0
	beq.s	loc_19A90
	bmi.s	loc_19A7E
	tst.w	x_vel(a1)
	bmi.s	loc_19A90
	bra.s	loc_19A84
; ===========================================================================

loc_19A7E:
	tst.w	x_vel(a1)
	bpl.s	loc_19A90

loc_19A84:
	move.w	#0,inertia(a1)
	move.w	#0,x_vel(a1)

loc_19A90:
	sub.w	d0,x_pos(a1)
	btst	#1,status(a1)
	bne.s	loc_19AB6
	move.l	d6,d4
	addq.b	#2,d4
	bset	d4,status(a0)
	bset	#5,status(a1)
	move.w	d6,d4
	addi.b	#$D,d4
	bset	d4,d6
	moveq	#1,d4
	rts
; ===========================================================================

loc_19AB6:
	bsr.s	loc_19ADC
	move.w	d6,d4
	addi.b	#$D,d4
	bset	d4,d6
	moveq	#1,d4
	rts
; ===========================================================================

loc_19AC4:
	move.l	d6,d4
	addq.b	#2,d4
	btst	d4,status(a0)
	beq.s	loc_19AEA
	cmpi.b	#2,anim(a1)
	beq.s	loc_19ADC
	move.w	#1,anim(a1)

loc_19ADC:
	move.l	d6,d4
	addq.b	#2,d4
	bclr	d4,status(a0)
	bclr	#5,status(a1)

loc_19AEA:
	moveq	#0,d4
	rts
; ===========================================================================

loc_19AEE:
	tst.w	d3
	bmi.s	loc_19B06
	cmpi.w	#$10,d3
	bcs.s	loc_19B56
	cmpi.b	#-$7B,(a0)
	bne.s	loc_19AC4
	cmpi.w	#$14,d3
	bcs.s	loc_19B56
	bra.s	loc_19AC4
; ===========================================================================

loc_19B06:
	tst.w	y_vel(a1)
	beq.s	loc_19B28
	bpl.s	loc_19B1C
	tst.w	d3
	bpl.s	loc_19B1C
	sub.w	d3,y_pos(a1)
	move.w	#0,y_vel(a1)

loc_19B1C:
	move.w	d6,d4
	addi.b	#$F,d4
	bset	d4,d6
	moveq	#-2,d4
	rts
; ===========================================================================

loc_19B28:
	btst	#1,status(a1)
	bne.s	loc_19B1C
	move.w	d0,d4
	bpl.s	loc_19B36
	neg.w	d4

loc_19B36:
	cmpi.w	#$10,d4
	bcs.w	loc_19A6A
	move.l	a0,-(sp)
	movea.l	a1,a0
	jsr	(KillCharacter).l
	movea.l	(sp)+,a0 ; load 0bj address
	move.w	d6,d4
	addi.b	#$F,d4
	bset	d4,d6
	moveq	#-2,d4
	rts
; ===========================================================================

loc_19B56:
	subq.w	#4,d3
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	d1,d2
	add.w	d2,d2
	add.w	x_pos(a1),d1
	sub.w	x_pos(a0),d1
	bmi.s	loc_19B8E
	cmp.w	d2,d1
	bcc.s	loc_19B8E
	tst.w	y_vel(a1)
	bmi.s	loc_19B8E
	sub.w	d3,y_pos(a1)
	subq.w	#1,y_pos(a1)
	bsr.w	loc_19E14
	move.w	d6,d4
	addi.b	#$11,d4
	bset	d4,d6
	moveq	#-1,d4
	rts
; ===========================================================================

loc_19B8E:
	moveq	#0,d4
	rts
; ===========================================================================

; Subroutine to change Sonic's position with a platform
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; loc_19B92:

MvSonicOnPtfm:
	move.w	y_pos(a0),d0
	sub.w	d3,d0
	bra.s	loc_19BA2
; ===========================================================================
	; a couple lines of unused/leftover/dead code from Sonic 1 ; a0=object
	move.w	y_pos(a0),d0
	subi.w	#9,d0

loc_19BA2:
	tst.b	obj_control(a1)
	bmi.s	return_19BCA
	cmpi.b	#6,routine(a1)
	bcc.s	return_19BCA
	tst.w	(Debug_placement_mode).w
	bne.s	return_19BCA
	moveq	#0,d1
	move.b	y_radius(a1),d1
	sub.w	d1,d0
	move.w	d0,y_pos(a1)
	sub.w	x_pos(a0),d2
	sub.w	d2,x_pos(a1)

return_19BCA:
	rts
; ===========================================================================

loc_19BCC:
	btst	#3,status(a1)
	beq.s	return_19C0C
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	lsr.w	#1,d0
	btst	#0,render_flags(a0)
	beq.s	loc_19BEC
	not.w	d0
	add.w	d1,d0

loc_19BEC:
	move.b	(a2,d0.w),d1
	ext.w	d1
	move.w	y_pos(a0),d0
	sub.w	d1,d0
	moveq	#0,d1
	move.b	y_radius(a1),d1
	sub.w	d1,d0
	move.w	d0,y_pos(a1)
	sub.w	x_pos(a0),d2
	sub.w	d2,x_pos(a1)

return_19C0C:
	rts
; ===========================================================================

loc_19C0E:
	btst	#3,status(a1)
	beq.s	return_19C0C
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	btst	#0,render_flags(a0)
	beq.s	loc_19C2C
	not.w	d0
	add.w	d1,d0

loc_19C2C:
	andi.w	#$FFFE,d0
	bra.s	loc_19BEC
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to collide Sonic/Tails with the top of a platform
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_19C32:
PlatformObject:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	PlatformObject_SingleCharacter
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

; loc_19C48:
PlatformObject_SingleCharacter:
	btst	d6,status(a0)
	beq.w	loc_19DBA
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	+
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	+
	cmp.w	d2,d0
	bcs.s	loc_19C80
+

	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_19C80:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to collide Sonic/Tails with the top of a sloped platform like a seesaw
; ---------------------------------------------------------------------------

; loc_19C8A:
SlopeObject:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	SlopeObject_SingleCharacter
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

; loc_19CA0:
SlopeObject_SingleCharacter:
	btst	d6,status(a0)
	beq.w	loc_19E90
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_19CC4
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_19CC4
	cmp.w	d2,d0
	bcs.s	loc_19CD8

loc_19CC4:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ---------------------------------------------------------------------------
loc_19CD8:
	move.w	d4,d2
	bsr.w	loc_19BCC
	moveq	#0,d4
	rts
; ===========================================================================

loc_19CE2:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_19CF8
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

loc_19CF8:
	btst	d6,status(a0)
	beq.w	loc_19EC8
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_19D1C
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_19D1C
	cmp.w	d2,d0
	bcs.s	loc_19D30

loc_19D1C:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)
	moveq	#0,d4
	rts
; ===========================================================================

loc_19D30:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4
	rts
; ===========================================================================

loc_19D3A:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_19D50
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

loc_19D50:
	btst	d6,status(a0)
	bne.s	loc_19D62
	btst	#3,status(a1)
	bne.s	loc_19D8E
	bra.w	loc_19DBA
; ===========================================================================

loc_19D62:
	move.w	d1,d2
	add.w	d2,d2
	btst	#1,status(a1)
	bne.s	loc_19D7E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	loc_19D7E
	cmp.w	d2,d0
	bcs.s	loc_19D92

loc_19D7E:
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	d6,status(a0)

loc_19D8E:
	moveq	#0,d4
	rts
; ===========================================================================

loc_19D92:
	move.w	d4,d2
	bsr.w	MvSonicOnPtfm
	moveq	#0,d4
	rts
; ===========================================================================

loc_19D9C:
	tst.w	y_vel(a1)
	bmi.w	return_19E8E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	return_19E8E
	cmp.w	d2,d0
	bcc.w	return_19E8E
	bra.s	loc_19DD8
; ===========================================================================

loc_19DBA:
	tst.w	y_vel(a1)
	bmi.w	return_19E8E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	return_19E8E
	add.w	d1,d1
	cmp.w	d1,d0
	bcc.w	return_19E8E

loc_19DD8:
	move.w	y_pos(a0),d0
	sub.w	d3,d0

loc_19DDE:
	move.w	y_pos(a1),d2
	move.b	y_radius(a1),d1
	ext.w	d1
	add.w	d2,d1
	addq.w	#4,d1
	sub.w	d1,d0
	bhi.w	return_19E8E
	cmpi.w	#-$10,d0
	bcs.w	return_19E8E
	tst.b	obj_control(a1)
	bmi.w	return_19E8E
	cmpi.b	#6,routine(a1)
	bcc.w	return_19E8E
	add.w	d0,d2
	addq.w	#3,d2
	move.w	d2,y_pos(a1)

loc_19E14:
	btst	#3,status(a1)
	beq.s	loc_19E30
	moveq	#0,d0
	move.b	interact(a1),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a3	; a3=object
	bclr	d6,status(a3)

loc_19E30:
	move.w	a0,d0
	subi.w	#Object_RAM,d0
	lsr.w	#6,d0
	andi.w	#$7F,d0
	move.b	d0,interact(a1)
	move.b	#0,angle(a1)
	move.w	#0,y_vel(a1)
	move.w	x_vel(a1),inertia(a1)
	btst	#1,status(a1)
	beq.s	loc_19E7E
	move.l	a0,-(sp)
	movea.l	a1,a0
	move.w	a0,d1
	subi.w	#Object_RAM,d1
	bne.s	loc_19E76
	cmpi.w	#2,(Player_mode).w
	beq.s	loc_19E76
	jsr	(Sonic_ResetOnFloor_Part2).l
	bra.s	loc_19E7C
; ===========================================================================

loc_19E76:
	jsr	(Tails_ResetOnFloor_Part2).l

loc_19E7C:
	movea.l	(sp)+,a0 ; a0=character

loc_19E7E:
	bset	#3,status(a1)
	bclr	#1,status(a1)
	bset	d6,status(a0)

return_19E8E:
	rts
; ===========================================================================

loc_19E90:
	tst.w	y_vel(a1)
	bmi.w	return_19E8E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.s	return_19E8E
	add.w	d1,d1
	cmp.w	d1,d0
	bcc.s	return_19E8E
	btst	#0,render_flags(a0)
	beq.s	loc_19EB6
	not.w	d0
	add.w	d1,d0

loc_19EB6:
	lsr.w	#1,d0
	move.b	(a2,d0.w),d3
	ext.w	d3
	move.w	y_pos(a0),d0
	sub.w	d3,d0
	bra.w	loc_19DDE
; ===========================================================================

loc_19EC8:
	tst.w	y_vel(a1)
	bmi.w	return_19E8E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d1,d0
	bmi.w	return_19E8E
	add.w	d1,d1
	cmp.w	d1,d0
	bcc.w	return_19E8E
	move.w	y_pos(a0),d0
	sub.w	d3,d0
	bra.w	loc_19DDE
; ===========================================================================

loc_19EF0:
	lea	(MainCharacter).w,a1 ; a1=character
	btst	#3,status(a0)
	beq.s	loc_19F1E
	jsr	(loc_1EDA8).l
	tst.w	d1
	beq.s	loc_19F08
	bpl.s	loc_19F1E

loc_19F08:
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	#3,status(a0)

loc_19F1E:
	lea	(Sidekick).w,a1 ; a1=character
	btst	#4,status(a0)
	beq.s	loc_19F4C
	jsr	(loc_1EDA8).l
	tst.w	d1
	beq.s	loc_19F36
	bpl.s	loc_19F4C

loc_19F36:
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#3,status(a1)
	bset	#1,status(a1)
	bclr	#4,status(a0)

loc_19F4C:
	moveq	#0,d4
	rts




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 01 - Sonic
; ----------------------------------------------------------------------------
; Sprite_19F50: Object_Sonic:
Obj01:
	; a0=character
	tst.w	(Debug_placement_mode).w	; is debug mode being used?
	beq.s	Obj01_Normal			; if not, branch
	jmp	DebugMode
; ---------------------------------------------------------------------------
; loc_19F5C:
Obj01_Normal:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj01_States(pc,d0.w),d1
	jmp	Obj01_States(pc,d1.w)
; ============== JUMP TABLE =================================================
; off_19F6A: Obj01_Index:
Obj01_States:
	dc.w	Obj01_Init - Obj01_States	; 0
	dc.w	Obj01_Control - Obj01_States	; 2
	dc.w	Obj01_Hurt - Obj01_States	; 4
	dc.w	Obj01_Dead - Obj01_States	; 6
	dc.w	Obj01_Gone - Obj01_States	; 8
	dc.w	Obj01_Respawning - Obj01_States	;$A
; ============== END JUMP TABLE =============================================
; loc_19F76: Obj_01_Sub_0: Obj01_Main:
Obj01_Init:
	addq.b	#2,routine(a0)	; => Obj01_Control
	move.b	#$13,y_radius(a0) ; this sets Sonic's collision height (2*pixels)
	move.b	#9,x_radius(a0)
	move.l	#Mapunc_Sonic,mappings(a0)
	move.b	#2,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#4,render_flags(a0)
	move.w	#$600,(Sonic_top_speed).w	; set Sonic's top speed
	move.w	#$C,(Sonic_acceleration).w	; set Sonic's acceleration
	move.w	#$80,(Sonic_deceleration).w	; set Sonic's deceleration
	tst.b	(Last_star_pole_hit).w
	bne.s	Obj01_Init_Continued
	; only happens when not starting at a checkpoint:
	move.w	#$780,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$C,layer(a0)
	move.b	#$D,layer_plus(a0)
	move.w	x_pos(a0),(Saved_x_pos).w
	move.w	y_pos(a0),(Saved_y_pos).w
	move.w	art_tile(a0),(Saved_art_tile).w
	move.w	layer(a0),(Saved_layer).w

Obj01_Init_Continued:
	move.b	#0,flips_remaining(a0)
	move.b	#4,flip_speed(a0)
	move.b	#0,(Super_Sonic_flag).w
	move.b	#$1E,air_left(a0)
	subi.w	#$20,x_pos(a0)
	addi.w	#4,y_pos(a0)
	move.w	#0,(Sonic_Pos_Record_Index).w

	move.w	#$3F,d2
-	bsr.w	Sonic_RecordPos
	subq.w	#4,a1
	move.l	#0,(a1)
	dbf	d2,-

	addi.w	#$20,x_pos(a0)
	subi.w	#4,y_pos(a0)

; ---------------------------------------------------------------------------
; Normal state for Sonic
; ---------------------------------------------------------------------------
; loc_1A030: Obj_01_Sub_2:
Obj01_Control:
	tst.w	(Debug_mode_flag).w	; is debug cheat enabled?
	beq.s	+			; if not, branch
	btst	#4,(Ctrl_1_Press).w	; is button B pressed?
	beq.s	+			; if not, branch
	move.w	#1,(Debug_placement_mode).w	; change Sonic into a ring/item
	clr.b	(Control_Locked).w		; unlock control
	rts
; -----------------------------------------------------------------------
+	tst.b	(Control_Locked).w	; are controls locked?
	bne.s	+			; if yes, branch
	move.w	(Ctrl_1).w,(Ctrl_1_Logical).w	; copy new held buttons, to enable joypad control
+
	btst	#0,obj_control(a0)	; is Sonic interacting with another object that holds him in place or controls his movement somehow?
	bne.s	+			; if yes, branch to skip Sonic's control
	moveq	#0,d0
	move.b	status(a0),d0
	andi.w	#6,d0	; %0000 %0110
	move.w	Obj01_Modes(pc,d0.w),d1
	jsr	Obj01_Modes(pc,d1.w)	; run Sonic's movement control code
+
	cmpi.w	#-$100,(Camera_Min_Y_pos).w	; is vertical wrapping enabled?
	bne.s	+				; if not, branch
	andi.w	#$7FF,y_pos(a0) 		; perform wrapping of Sonic's y position
+
	bsr.s	Sonic_Display
	bsr.w	Sonic_Super
	bsr.w	Sonic_RecordPos
	bsr.w	Sonic_Water
	move.b	($FFFFF768).w,next_tilt(a0)
	move.b	($FFFFF76A).w,tilt(a0)
	tst.b	($FFFFF7C7).w
	beq.s	+
	tst.b	anim(a0)
	bne.s	+
	move.b	next_anim(a0),anim(a0)
+
	bsr.w	Sonic_Animate
	tst.b	obj_control(a0)
	bmi.s	+
	jsr	(TouchResponse).l
+
	bra.w	LoadSonicDynPLC

; ============== JUMP TABLE =================================================
; secondary states under state Obj01_Control
; off_1A0BE:
Obj01_Modes:
	dc.w	Obj01_MdNormal_Checks - Obj01_Modes	; not airborne or rolling
	dc.w	Obj01_MdAir - Obj01_Modes		; airborne
	dc.w	Obj01_MdRoll - Obj01_Modes		; rolling
	dc.w	Obj01_MdJump - Obj01_Modes		; jumping
; ============== END JUMP TABLE =============================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A0C6:
Sonic_Display:
	move.w	invulnerable_time(a0),d0
	beq.s	Obj01_Display
	subq.w	#1,invulnerable_time(a0)
	lsr.w	#3,d0
	bcc.s	Obj01_ChkInvin
; loc_1A0D4:
Obj01_Display:
	jsr	DisplaySprite
; loc_1A0DA:
Obj01_ChkInvin:		; Checks if invincibility has expired and disables it if it has.
	btst	#1,status_secondary(a0)
	beq.s	Obj01_ChkShoes
	tst.w	invincibility_time(a0)
	beq.s	Obj01_ChkShoes	; If there wasn't any time left, that means we're in Super Sonic mode.
	subq.w	#1,invincibility_time(a0)
	bne.s	Obj01_ChkShoes
	tst.b	(Current_Boss_ID).w	; Don't change music if in a boss fight
	bne.s	Obj01_RmvInvin
	cmpi.b	#$C,air_left(a0)	; Don't change music if drowning
	bcs.s	Obj01_RmvInvin
	move.w	(Level_Music).w,d0
	jsr	(PlayMusic).l
;loc_1A106:
Obj01_RmvInvin:
	bclr	#1,status_secondary(a0)
; loc_1A10C:
Obj01_ChkShoes:		; Checks if Speed Shoes have expired and disables them if they have.
	btst	#2,status_secondary(a0)
	beq.s	Obj01_ExitChk
	tst.w	speedshoes_time(a0)
	beq.s	Obj01_ExitChk
	subq.w	#1,speedshoes_time(a0)
	bne.s	Obj01_ExitChk
	move.w	#$600,(Sonic_top_speed).w
	move.w	#$C,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
	tst.b	(Super_Sonic_flag).w
	beq.s	Obj01_RmvSpeed
	move.w	#$A00,(Sonic_top_speed).w
	move.w	#$30,(Sonic_acceleration).w
	move.w	#$100,(Sonic_deceleration).w
; loc_1A14A:
Obj01_RmvSpeed:
	bclr	#2,status_secondary(a0)
	move.w	#$7C+$80,d0	; Slow down tempo
	jmp	(PlayMusic).l
; ---------------------------------------------------------------------------
; return_1A15A:
Obj01_ExitChk:
	rts
; End of subroutine Sonic_Display

; ---------------------------------------------------------------------------
; Subroutine to record Sonic's previous positions for invincibility stars
; and input/status flags for Tails' AI to follow
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A15C:
Sonic_RecordPos:
	move.w	(Sonic_Pos_Record_Index).w,d0
	lea	(Sonic_Pos_Record_Buf).w,a1
	lea	(a1,d0.w),a1
	move.w	x_pos(a0),(a1)+
	move.w	y_pos(a0),(a1)+
	addq.b	#4,(Sonic_Pos_Record_Index+1).w

	lea	(Sonic_Stat_Record_Buf).w,a1
	lea	(a1,d0.w),a1
	move.w	(Ctrl_1_Logical).w,(a1)+
	move.w	status(a0),(a1)+

	rts
; End of subroutine Sonic_RecordPos

; ---------------------------------------------------------------------------
; Subroutine for Sonic when he's underwater
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A186:
Sonic_Water:
	tst.b	(Water_flag).w	; does level have water?
	bne.s	Obj01_InWater	; if yes, branch

return_1A18C:
	rts
; ---------------------------------------------------------------------------
; loc_1A18E:
Obj01_InWater:
	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0	; is Sonic above the water?
	bge.s	Obj01_OutWater	; if yes, branch

	bset	#6,status(a0)	; set underwater flag
	bne.s	return_1A18C	; if already underwater, branch

	movea.l	a0,a1
	bsr.w	ResumeMusic
	move.b	#$A,(Object_RAM+$2080).w ; load Obj0A (sonic's breathing bubbles) at $FFFFD080
	move.b	#$81,(Object_RAM+$2080+subtype).w
	move.l	a0,(Object_RAM+$2080+$3C).w
	move.w	#$300,(Sonic_top_speed).w
	move.w	#6,(Sonic_acceleration).w
	move.w	#$40,(Sonic_deceleration).w
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	move.w	#$500,(Sonic_top_speed).w
	move.w	#$18,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
+
	asr.w	x_vel(a0)
	asr.w	y_vel(a0)	; memory operands can only be shifted one bit at a time
	asr.w	y_vel(a0)
	beq.s	return_1A18C
	move.w	#$100,(Sonic_Dust+anim).w	; splash animation
	move.w	#$2A+$80,d0	; splash sound
	jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; loc_1A1FE:
Obj01_OutWater:
	bclr	#6,status(a0) ; unset underwater flag
	beq.s	return_1A18C ; if already above water, branch

	movea.l	a0,a1
	bsr.w	ResumeMusic
	move.w	#$600,(Sonic_top_speed).w
	move.w	#$C,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	move.w	#$A00,(Sonic_top_speed).w
	move.w	#$30,(Sonic_acceleration).w
	move.w	#$100,(Sonic_deceleration).w
+
	cmpi.b	#4,routine(a0)	; is Sonic falling back from getting hurt?
	beq.s	+		; if yes, branch
	asl	y_vel(a0)
+
	tst.w	y_vel(a0)
	beq.w	return_1A18C
	move.w	#$100,(Sonic_Dust+anim).w	; splash animation
	movea.l	a0,a1
	bsr.w	ResumeMusic
	cmpi.w	#-$1000,y_vel(a0)
	bgt.s	+
	move.w	#-$1000,y_vel(a0)	; limit upward y velocity exiting the water
+
	move.w	#$2A+$80,d0	; splash sound
	jmp	(PlaySound).l
; End of subroutine Sonic_Water

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Obj01_MdNormal
; Called if Sonic is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; loc_1A26E:
Obj01_MdNormal_Checks:
	move.b	(Ctrl_1_Press_Logical).w,d0
	andi.b	#$70,d0
	bne.s	Obj01_MdNormal
	cmpi.b	#$A,anim(a0)
	beq.s	return_1A2DE
	cmpi.b	#$B,anim(a0)
	beq.s	return_1A2DE
	cmpi.b	#5,anim(a0)
	bne.s	Obj01_MdNormal
	cmpi.b	#$1E,anim_frame(a0)
	bcs.s	Obj01_MdNormal
	move.b	(Ctrl_1_Held_Logical).w,d0
	andi.b	#$7F,d0
	beq.s	return_1A2DE
	move.b	#$A,anim(a0)
	cmpi.b	#$AC,anim_frame(a0)
	bcs.s	return_1A2DE
	move.b	#$B,anim(a0)
	bra.s	return_1A2DE
; ---------------------------------------------------------------------------
; loc_1A2B8:
Obj01_MdNormal:
	bsr.w	Sonic_CheckSpindash
	bsr.w	Sonic_Jump
	bsr.w	Sonic_SlopeResist
	bsr.w	Sonic_Move
	bsr.w	Sonic_Roll
	bsr.w	Sonic_LevelBound
	jsr	ObjectMove
	bsr.w	AnglePos
	bsr.w	Sonic_SlopeRepel

return_1A2DE:
	rts
; End of subroutine Obj01_MdNormal
; ===========================================================================
; Start of subroutine Obj01_MdAir
; Called if Sonic is airborne, but not in a ball (thus, probably not jumping)
; loc_1A2E0: Obj01_MdJump
Obj01_MdAir:
	bsr.w	Sonic_JumpHeight
	bsr.w	Sonic_ChgJumpDir
	bsr.w	Sonic_LevelBound
	jsr	ObjectMoveAndFall
	btst	#6,status(a0)	; is Sonic underwater?
	beq.s	+		; if not, branch
	subi.w	#$28,y_vel(a0)	; reduce gravity by $28 ($38-$28=$10)
+
	bsr.w	Sonic_JumpAngle
	bsr.w	Sonic_DoLevelCollision
	rts
; End of subroutine Obj01_MdAir
; ===========================================================================
; Start of subroutine Obj01_MdRoll
; Called if Sonic is in a ball, but not airborne (thus, probably rolling)
; loc_1A30A:
Obj01_MdRoll:
	tst.b	spindash_flag(a0)
	bne.s	+
	bsr.w	Sonic_Jump
+
	bsr.w	Sonic_RollRepel
	bsr.w	Sonic_RollSpeed
	bsr.w	Sonic_LevelBound
	jsr	ObjectMove
	bsr.w	AnglePos
	bsr.w	Sonic_SlopeRepel
	rts
; End of subroutine Obj01_MdRoll
; ===========================================================================
; Start of subroutine Obj01_MdJump
; Called if Sonic is in a ball and airborne (he could be jumping but not necessarily)
; Notes: This is identical to Obj01_MdAir, at least at this outer level.
;        Why they gave it a separate copy of the code, I don't know.
; loc_1A330: Obj01_MdJump2:
Obj01_MdJump:
	bsr.w	Sonic_JumpHeight
	bsr.w	Sonic_ChgJumpDir
	bsr.w	Sonic_LevelBound
	jsr	ObjectMoveAndFall
	btst	#6,status(a0)	; is Sonic underwater?
	beq.s	+		; if not, branch
	subi.w	#$28,y_vel(a0)	; reduce gravity by $28 ($38-$28=$10)
+
	bsr.w	Sonic_JumpAngle
	bsr.w	Sonic_DoLevelCollision
	rts
; End of subroutine Obj01_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Sonic walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A35A:
Sonic_Move:
	move.w	(Sonic_top_speed).w,d6
	move.w	(Sonic_acceleration).w,d5
	move.w	(Sonic_deceleration).w,d4
	tst.b	status_secondary(a0)
	bmi.w	Obj01_Traction
	tst.w	move_lock(a0)
	bne.w	Obj01_ResetScr
	btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
	beq.s	Obj01_NotLeft			; if not, branch
	bsr.w	Sonic_MoveLeft
; loc_1A382:
Obj01_NotLeft:
	btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
	beq.s	Obj01_NotRight			; if not, branch
	bsr.w	Sonic_MoveRight
; loc_1A38E:
Obj01_NotRight:
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0		; is Sonic on a slope?
	bne.w	Obj01_ResetScr	; if yes, branch
	tst.w	inertia(a0)	; is Sonic moving?
	bne.w	Obj01_ResetScr	; if yes, branch
	bclr	#5,status(a0)
	move.b	#5,anim(a0)	; use "standing" animation
	btst	#3,status(a0)
	beq.w	Sonic_Balance
	moveq	#0,d0
	move.b	interact(a0),d0
	lsl.w	#6,d0
	lea	(MainCharacter).w,a1 ; a1=character
	lea	(a1,d0.w),a1 ; a1=object
	tst.b	status(a1)
	bmi.w	Sonic_Lookup
	moveq	#0,d1
	move.b	width_pixels(a1),d1
	move.w	d1,d2
	add.w	d2,d2
	subq.w	#2,d2
	add.w	x_pos(a0),d1
	sub.w	x_pos(a1),d1
	tst.b	(Super_Sonic_flag).w
	bne.w	SuperSonic_Balance
	cmpi.w	#2,d1
	blt.s	Sonic_BalanceOnObjLeft
	cmp.w	d2,d1
	bge.s	Sonic_BalanceOnObjRight
	bra.w	Sonic_Lookup
; ---------------------------------------------------------------------------
; loc_1A3FE:
SuperSonic_Balance:
	cmpi.w	#2,d1
	blt.w	SuperSonic_BalanceOnObjLeft
	cmp.w	d2,d1
	bge.w	SuperSonic_BalanceOnObjRight
	bra.w	Sonic_Lookup
; ---------------------------------------------------------------------------
; balancing checks for when you're on the right edge of an object
; loc_1A410:
Sonic_BalanceOnObjRight:
	btst	#0,status(a0)
	bne.s	+
	move.b	#6,anim(a0)
	addq.w	#6,d2
	cmp.w	d2,d1
	blt.w	Obj01_ResetScr
	move.b	#$C,anim(a0)
	bra.w	Obj01_ResetScr
	; on right edge of object but facing left:
+	move.b	#$1D,anim(a0)
	addq.w	#6,d2
	cmp.w	d2,d1
	blt.w	Obj01_ResetScr
	move.b	#$1E,anim(a0)
	bclr	#0,status(a0)
	bra.w	Obj01_ResetScr
; ---------------------------------------------------------------------------
; balancing checks for when you're on the left edge of an object
; loc_1A44E:
Sonic_BalanceOnObjLeft:
	btst	#0,status(a0)
	beq.s	+
	move.b	#6,anim(a0)
	cmpi.w	#-4,d1
	bge.w	Obj01_ResetScr
	move.b	#$C,anim(a0)
	bra.w	Obj01_ResetScr
	; on left edge of object but facing right:
+	move.b	#$1D,anim(a0)
	cmpi.w	#-4,d1
	bge.w	Obj01_ResetScr
	move.b	#$1E,anim(a0)
	bset	#0,status(a0)
	bra.w	Obj01_ResetScr
; ---------------------------------------------------------------------------
; balancing checks for when you're on the edge of part of the level
; loc_1A48C:
Sonic_Balance:
	jsr	(ChkFloorEdge).l
	cmpi.w	#$C,d1
	blt.w	Sonic_Lookup
	tst.b	(Super_Sonic_flag).w
	bne.w	SuperSonic_Balance2
	cmpi.b	#3,next_tilt(a0)
	bne.s	Sonic_BalanceLeft
	btst	#0,status(a0)
	bne.s	+
	move.b	#6,anim(a0)
	move.w	x_pos(a0),d3
	subq.w	#6,d3
	jsr	(ChkFloorEdge_Part2).l
	cmpi.w	#$C,d1
	blt.w	Obj01_ResetScr
	move.b	#$C,anim(a0)
	bra.w	Obj01_ResetScr
	; on right edge but facing left:
+	move.b	#$1D,anim(a0)
	move.w	x_pos(a0),d3
	subq.w	#6,d3
	jsr	(ChkFloorEdge_Part2).l
	cmpi.w	#$C,d1
	blt.w	Obj01_ResetScr
	move.b	#$1E,anim(a0)
	bclr	#0,status(a0)
	bra.w	Obj01_ResetScr
; ---------------------------------------------------------------------------
Sonic_BalanceLeft:
	cmpi.b	#3,tilt(a0)
	bne.s	Sonic_Lookup
	btst	#0,status(a0)
	beq.s	+
	move.b	#6,anim(a0)
	move.w	x_pos(a0),d3
	addq.w	#6,d3
	jsr	(ChkFloorEdge_Part2).l
	cmpi.w	#$C,d1
	blt.w	Obj01_ResetScr
	move.b	#$C,anim(a0)
	bra.w	Obj01_ResetScr
	; on left edge but facing right:
+	move.b	#$1D,anim(a0)
	move.w	x_pos(a0),d3
	addq.w	#6,d3
	jsr	(ChkFloorEdge_Part2).l
	cmpi.w	#$C,d1
	blt.w	Obj01_ResetScr
	move.b	#$1E,anim(a0)
	bset	#0,status(a0)
	bra.w	Obj01_ResetScr
; ---------------------------------------------------------------------------
; loc_1A55E:
SuperSonic_Balance2:
	cmpi.b	#3,next_tilt(a0)
	bne.s	loc_1A56E

; loc_1A566:
SuperSonic_BalanceOnObjRight:
	bclr	#0,status(a0)
	bra.s	loc_1A57C
; ---------------------------------------------------------------------------
loc_1A56E:
	cmpi.b	#3,tilt(a0)
	bne.s	Sonic_Lookup

; loc_1A576:
SuperSonic_BalanceOnObjLeft:
	bset	#0,status(a0)

loc_1A57C:
	move.b	#6,anim(a0)
	bra.s	Obj01_ResetScr
; ---------------------------------------------------------------------------
; loc_1A584:
Sonic_Lookup:
	btst	#0,(Ctrl_1_Held_Logical).w	; is up being pressed?
	beq.s	Sonic_Duck			; if not, branch
	move.b	#7,anim(a0)			; use "looking up" animation
	addq.w	#1,(Sonic_Look_delay_counter).w
	cmpi.w	#$78,(Sonic_Look_delay_counter).w
	bcs.s	Obj01_ResetScr_Part2
	move.w	#$78,(Sonic_Look_delay_counter).w
	cmpi.w	#$C8,(Camera_Y_pos_bias).w
	beq.s	Obj01_UpdateSpeedOnGround
	addq.w	#2,(Camera_Y_pos_bias).w
	bra.s	Obj01_UpdateSpeedOnGround
; ---------------------------------------------------------------------------
; loc_1A5B2:
Sonic_Duck:
	btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
	beq.s	Obj01_ResetScr			; if not, branch
	move.b	#8,anim(a0)			; use "ducking" animation
	addq.w	#1,(Sonic_Look_delay_counter).w
	cmpi.w	#$78,(Sonic_Look_delay_counter).w
	bcs.s	Obj01_ResetScr_Part2
	move.w	#$78,(Sonic_Look_delay_counter).w
	cmpi.w	#8,(Camera_Y_pos_bias).w
	beq.s	Obj01_UpdateSpeedOnGround
	subq.w	#2,(Camera_Y_pos_bias).w
	bra.s	Obj01_UpdateSpeedOnGround

; ===========================================================================
; moves the screen back to its normal position after looking up or down
; loc_1A5E0:
Obj01_ResetScr:
	move.w	#0,(Sonic_Look_delay_counter).w
; loc_1A5E6:
Obj01_ResetScr_Part2:
	cmpi.w	#$60,(Camera_Y_pos_bias).w	; is screen in its default position?
	beq.s	Obj01_UpdateSpeedOnGround	; if yes, branch.
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias).w	; or subtract 2

; ---------------------------------------------------------------------------
; updates Sonic's speed on the ground
; ---------------------------------------------------------------------------
; sub_1A5F8:
Obj01_UpdateSpeedOnGround:
	tst.b	(Super_Sonic_flag).w
	beq.w	+
	move.w	#$C,d5
+
	move.b	(Ctrl_1_Held_Logical).w,d0
	andi.b	#$C,d0		; is left/right pressed?
	bne.s	Obj01_Traction	; if yes, branch
	move.w	inertia(a0),d0
	beq.s	Obj01_Traction
	bmi.s	Obj01_SettleLeft

; slow down when facing right and not pressing a direction
; Obj01_SettleRight:
	sub.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)
	bra.s	Obj01_Traction
; ---------------------------------------------------------------------------
; slow down when facing left and not pressing a direction
; loc_1A624:
Obj01_SettleLeft:
	add.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)

; increase or decrease speed on the ground
; loc_1A630:
Obj01_Traction:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	inertia(a0),d1
	asr.l	#8,d1
	move.w	d1,x_vel(a0)
	muls.w	inertia(a0),d0
	asr.l	#8,d0
	move.w	d0,y_vel(a0)

; stops Sonic from running through walls that meet the ground
; loc_1A64E:
Obj01_CheckWallsOnGround:
	move.b	angle(a0),d0
	addi.b	#$40,d0
	bmi.s	return_1A6BE
	move.b	#$40,d1
	tst.w	inertia(a0)
	beq.s	return_1A6BE
	bmi.s	+
	neg.w	d1
+
	move.b	angle(a0),d0
	add.b	d1,d0
	move.w	d0,-(sp)
	bsr.w	CalcRoomInFront
	move.w	(sp)+,d0
	tst.w	d1
	bpl.s	return_1A6BE
	asl.w	#8,d1
	addi.b	#$20,d0
	andi.b	#$C0,d0
	beq.s	loc_1A6BA
	cmpi.b	#$40,d0
	beq.s	loc_1A6A8
	cmpi.b	#$80,d0
	beq.s	loc_1A6A2
	add.w	d1,x_vel(a0)
	bset	#5,status(a0)
	move.w	#0,inertia(a0)
	rts
; ---------------------------------------------------------------------------
loc_1A6A2:
	sub.w	d1,y_vel(a0)
	rts
; ---------------------------------------------------------------------------
loc_1A6A8:
	sub.w	d1,x_vel(a0)
	bset	#5,status(a0)
	move.w	#0,inertia(a0)
	rts
; ---------------------------------------------------------------------------
loc_1A6BA:
	add.w	d1,y_vel(a0)

return_1A6BE:
	rts
; End of subroutine Sonic_Move


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A6C0:
Sonic_MoveLeft:
	move.w	inertia(a0),d0
	beq.s	+
	bpl.s	Sonic_TurnLeft ; if Sonic is already moving to the right, branch
+
	bset	#0,status(a0)
	bne.s	+
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
+
	sub.w	d5,d0	; add acceleration to the left
	move.w	d6,d1
	neg.w	d1
	cmp.w	d1,d0	; compare new speed with top speed
	bgt.s	+	; if new speed is less than the maximum, branch
	add.w	d5,d0	; remove this frame's acceleration change
	cmp.w	d1,d0	; compare speed with top speed
	ble.s	+	; if speed was already greater than the maximum, branch
	move.w	d1,d0	; limit speed on ground going left
+
	move.w	d0,inertia(a0)
	move.b	#0,anim(a0)	; use walking animation
	rts
; ---------------------------------------------------------------------------
; loc_1A6FA:
Sonic_TurnLeft:
	sub.w	d4,d0
	bcc.s	+
	move.w	#-$80,d0
+
	move.w	d0,inertia(a0)
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	bne.s	return_1A744
	cmpi.w	#$400,d0
	blt.s	return_1A744
	move.b	#$D,anim(a0)	; use "stopping" animation
	bclr	#0,status(a0)
	move.w	#$A4,d0
	jsr	(PlaySound).l
	cmpi.b	#$C,air_left(a0)
	bcs.s	return_1A744	; if he's drowning, branch to not make dust
	move.b	#6,(Sonic_Dust+routine).w
	move.b	#$15,(Sonic_Dust+mapping_frame).w

return_1A744:
	rts
; End of subroutine Sonic_MoveLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A746:
Sonic_MoveRight:
	move.w	inertia(a0),d0
	bmi.s	Sonic_TurnRight	; if Sonic is already moving to the left, branch
	bclr	#0,status(a0)
	beq.s	+
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
+
	add.w	d5,d0	; add acceleration to the right
	cmp.w	d6,d0	; compare new speed with top speed
	blt.s	+	; if new speed is less than the maximum, branch
	sub.w	d5,d0	; remove this frame's acceleration change
	cmp.w	d6,d0	; compare speed with top speed
	bge.s	+	; if speed was already greater than the maximum, branch
	move.w	d6,d0	; limit speed on ground going right
+
	move.w	d0,inertia(a0)
	move.b	#0,anim(a0)	; use walking animation
	rts
; ---------------------------------------------------------------------------
; loc_1A77A:
Sonic_TurnRight:
	add.w	d4,d0
	bcc.s	+
	move.w	#$80,d0
+
	move.w	d0,inertia(a0)
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	bne.s	return_1A7C4
	cmpi.w	#-$400,d0
	bgt.s	return_1A7C4
	move.b	#$D,anim(a0)	; use "stopping" animation
	bset	#0,status(a0)
	move.w	#$24+$80,d0	; use "stopping" sound
	jsr	(PlaySound).l
	cmpi.b	#$C,air_left(a0)
	bcs.s	return_1A7C4	; if he's drowning, branch to not make dust
	move.b	#6,(Sonic_Dust+routine).w
	move.b	#$15,(Sonic_Dust+mapping_frame).w

return_1A7C4:
	rts
; End of subroutine Sonic_MoveRight

; ---------------------------------------------------------------------------
; Subroutine to change Sonic's speed as he rolls
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A7C6:
Sonic_RollSpeed:
	move.w	(Sonic_top_speed).w,d6
	asl.w	#1,d6
	move.w	(Sonic_acceleration).w,d5
	asr.w	#1,d5	; natural roll deceleration = 1/2 normal acceleration
	move.w	#$20,d4	; controlled roll deceleration... interestingly,
			; this should be Sonic_deceleration/4 according to Tails_RollSpeed,
			; which means Sonic is much better than Tails at slowing down his rolling when he's underwater
	tst.b	status_secondary(a0)
	bmi.w	Obj01_Roll_ResetScr
	tst.w	move_lock(a0)
	bne.s	Sonic_ApplyRollSpeed
	btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
	beq.s	+				; if not, branch
	bsr.w	Sonic_RollLeft
+
	btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
	beq.s	Sonic_ApplyRollSpeed		; if not, branch
	bsr.w	Sonic_RollRight

; loc_1A7FC:
Sonic_ApplyRollSpeed:
	move.w	inertia(a0),d0
	beq.s	Sonic_CheckRollStop
	bmi.s	Sonic_ApplyRollSpeedLeft

; Sonic_ApplyRollSpeedRight:
	sub.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)
	bra.s	Sonic_CheckRollStop
; ---------------------------------------------------------------------------
; loc_1A812:
Sonic_ApplyRollSpeedLeft:
	add.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)

; loc_1A81E:
Sonic_CheckRollStop:
	tst.w	inertia(a0)
	bne.s	Obj01_Roll_ResetScr
	tst.b	spindash_flag(a0) ; note: the spindash flag has a different meaning when Sonic's already rolling -- it's used to mean he's not allowed to stop rolling
	bne.s	Sonic_KeepRolling
	bclr	#2,status(a0)
	move.b	#$13,y_radius(a0)
	move.b	#9,x_radius(a0)
	move.b	#5,anim(a0)
	subq.w	#5,y_pos(a0)
	bra.s	Obj01_Roll_ResetScr

; ---------------------------------------------------------------------------
; magically gives Sonic an extra push if he's going to stop rolling where it's not allowed
; (such as in an S-curve in HTZ or a stopper chamber in CNZ)
; loc_1A848:
Sonic_KeepRolling:
	move.w	#$400,inertia(a0)
	btst	#0,status(a0)
	beq.s	Obj01_Roll_ResetScr
	neg.w	inertia(a0)

; resets the screen to normal while rolling, like Obj01_ResetScr
; loc_1A85A:
Obj01_Roll_ResetScr:
	cmpi.w	#$60,(Camera_Y_pos_bias).w	; is screen in its default position?
	beq.s	Sonic_SetRollSpeeds		; if yes, branch
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias).w	; or subtract 2

; loc_1A86C:
Sonic_SetRollSpeeds:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	inertia(a0),d0
	asr.l	#8,d0
	move.w	d0,y_vel(a0)	; set y velocity based on $14 and angle
	muls.w	inertia(a0),d1
	asr.l	#8,d1
	cmpi.w	#$1000,d1
	ble.s	+
	move.w	#$1000,d1	; limit Sonic's speed rolling right
+
	cmpi.w	#-$1000,d1
	bge.s	+
	move.w	#-$1000,d1	; limit Sonic's speed rolling left
+
	move.w	d1,x_vel(a0)	; set x velocity based on $14 and angle
	bra.w	Obj01_CheckWallsOnGround
; End of function Sonic_RollSpeed


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_1A8A2:
Sonic_RollLeft:
	move.w	inertia(a0),d0
	beq.s	+
	bpl.s	Sonic_BrakeRollingRight
+
	bset	#0,status(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	rts
; ---------------------------------------------------------------------------
; loc_1A8B8:
Sonic_BrakeRollingRight:
	sub.w	d4,d0	; reduce rightward rolling speed
	bcc.s	+
	move.w	#-$80,d0
+
	move.w	d0,inertia(a0)
	rts
; End of function Sonic_RollLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_1A8C6:
Sonic_RollRight:
	move.w	inertia(a0),d0
	bmi.s	Sonic_BrakeRollingLeft
	bclr	#0,status(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	rts
; ---------------------------------------------------------------------------
; loc_1A8DA:
Sonic_BrakeRollingLeft:
	add.w	d4,d0	; reduce leftward rolling speed
	bcc.s	+
	move.w	#$80,d0
+
	move.w	d0,inertia(a0)
	rts
; End of subroutine Sonic_RollRight


; ---------------------------------------------------------------------------
; Subroutine for moving Sonic left or right when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A8E8:
Sonic_ChgJumpDir:
	move.w	(Sonic_top_speed).w,d6
	move.w	(Sonic_acceleration).w,d5
	asl.w	#1,d5
	btst	#4,status(a0)		; did Sonic jump from rolling?
	bne.s	Obj01_Jump_ResetScr	; if yes, branch to skip midair control
	move.w	x_vel(a0),d0
	btst	#2,(Ctrl_1_Held_Logical).w
	beq.s	+	; if not holding left, branch
 
	bset	#0,status(a0)
	sub.w	d5,d0	; add acceleration to the left
	move.w	d6,d1
	neg.w	d1
	cmp.w	d1,d0	; compare new speed with top speed
	bgt.s	+	; if new speed is less than the maximum, branch
	add.w	d5,d0	; +++ remove this frame's acceleration change
	cmp.w	d1,d0	; +++ compare speed with top speed
	ble.s	+	; +++ if speed was already greater than the maximum, branch
	move.w	d1,d0	; limit speed in air going left, even if Sonic was already going faster (speed limit/cap)
+
	btst	#3,(Ctrl_1_Held_Logical).w
	beq.s	+	; if not holding right, branch
 
	bclr	#0,status(a0)
	add.w	d5,d0	; accelerate right in the air
	cmp.w	d6,d0	; compare new speed with top speed
	blt.s	+	; if new speed is less than the maximum, branch
	sub.w	d5,d0	; +++ remove this frame's acceleration change
	cmp.w	d1,d0	; +++ compare speed with top speed
	bge.s	+	; +++ if speed was already greater than the maximum, branch
	move.w	d6,d0	; limit speed in air going right, even if Sonic was already going faster (speed limit/cap)
; Obj01_JumpMove:
+	move.w	d0,x_vel(a0)

; loc_1A932: Obj01_ResetScr2:
Obj01_Jump_ResetScr:
	cmpi.w	#$60,(Camera_Y_pos_bias).w	; is screen in its default position?
	beq.s	Sonic_JumpPeakDecelerate	; if yes, branch
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias).w	; or subtract 2

; loc_1A944:
Sonic_JumpPeakDecelerate:
	cmpi.w	#-$400,y_vel(a0)	; is Sonic moving faster than -$400 upwards?
	bcs.s	return_1A972		; if yes, return
Sonic_JumpPeakDecelerate_SkipCheck:
	move.w	x_vel(a0),d0
	move.w	d0,d1
	asr.w	#5,d1		; d1 = x_velocity / 32
	beq.s	return_1A972	; return if d1 is 0
	bmi.s	Sonic_JumpPeakDecelerateLeft	; branch if moving left

; Sonic_JumpPeakDecelerateRight:
	sub.w	d1,d0	; reduce x velocity by d1
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,x_vel(a0)
	rts
;-------------------------------------------------------------
; loc_1A966:
Sonic_JumpPeakDecelerateLeft:
	sub.w	d1,d0	; reduce x velocity by d1
	bcs.s	+
	move.w	#0,d0
+
	move.w	d0,x_vel(a0)

return_1A972:
	rts
; End of subroutine Sonic_ChgJumpDir
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to prevent Sonic from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A974:
Sonic_LevelBound:
	move.l	x_pos(a0),d1
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d1
	swap	d1
	move.w	(Camera_Min_X_pos).w,d0
	addi.w	#$10,d0
	cmp.w	d1,d0			; has Sonic touched the left boundary?
	bhi.s	Sonic_Boundary_Sides	; if yes, branch
	move.w	(Camera_Max_X_pos).w,d0
	addi.w	#$128,d0
	tst.b	(Current_Boss_ID).w
	bne.s	+
	addi.w	#$40,d0
+
	cmp.w	d1,d0			; has Sonic touched the right boundary?
	bls.s	Sonic_Boundary_Sides	; if yes, branch

; loc_1A9A6:
Sonic_Boundary_CheckBottom:
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0		; has Sonic touched the bottom boundary?
	blt.s	Sonic_Boundary_Bottom	; if yes, branch
	rts
; ---------------------------------------------------------------------------
Sonic_Boundary_Bottom: ;;
	bra.w	JmpTo_KillCharacter
; ===========================================================================

; loc_1A9BA:
Sonic_Boundary_Sides:
	move.w	d0,x_pos(a0)
	move.w	#0,2+x_pos(a0) ; subpixel x
	move.w	#0,x_vel(a0)
	move.w	#0,inertia(a0)
	bra.s	Sonic_Boundary_CheckBottom
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to start rolling when he's moving
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A9D2:
Sonic_Roll:
	tst.b	status_secondary(a0)
	bmi.s	Obj01_NoRoll
	move.w	inertia(a0),d0
	bpl.s	+
	neg.w	d0
+
	cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
	bcs.s	Obj01_NoRoll	; if not, branch
	move.b	(Ctrl_1_Held_Logical).w,d0
	andi.b	#$C,d0		; is left/right being pressed?
	bne.s	Obj01_NoRoll	; if yes, branch
	btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
	bne.s	Obj01_ChkRoll			; if yes, branch
; return_1A9F8:
Obj01_NoRoll:
	rts

; ---------------------------------------------------------------------------
; loc_1A9FA:
Obj01_ChkRoll:
	btst	#2,status(a0)	; is Sonic already rolling?
	beq.s	Obj01_DoRoll	; if not, branch
	rts

; ---------------------------------------------------------------------------
; loc_1AA04:
Obj01_DoRoll:
	bset	#2,status(a0)
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	addq.w	#5,y_pos(a0)
	move.w	#$BE,d0
	jsr	(PlaySound).l	; play rolling sound
	tst.w	inertia(a0)
	bne.s	return_1AA36
	move.w	#$200,inertia(a0)

return_1AA36:
	rts
; End of function Sonic_Roll


; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to jump
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AA38:
Sonic_Jump:
	move.b	(Ctrl_1_Press_Logical).w,d0
	andi.b	#$70,d0		; is A, B or C pressed?
	beq.w	return_1AAE6	; if not, return
	moveq	#0,d0
	move.b	angle(a0),d0
	addi.b	#$80,d0
	bsr.w	CalcRoomOverHead
	cmpi.w	#6,d1			; does Sonic have enough room to jump?
	blt.w	return_1AAE6		; if not, branch
	move.w	#$680,d2
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	move.w	#$800,d2	; set higher jump speed if super
+
	btst	#6,status(a0)	; Test if underwater
	beq.s	+
	move.w	#$380,d2	; set lower jump speed if under
+
	moveq	#0,d0
	move.b	angle(a0),d0
	subi.b	#$40,d0
	jsr	(CalcSine).l
	muls.w	d2,d1
	asr.l	#8,d1
	add.w	d1,x_vel(a0)	; make Sonic jump (in X... this adds nothing on level ground)
	muls.w	d2,d0
	asr.l	#8,d0
	add.w	d0,y_vel(a0)	; make Sonic jump (in Y)
	bset	#1,status(a0)
	bclr	#5,status(a0)
	addq.l	#4,sp
	move.b	#1,jumping(a0)
	clr.b	stick_to_convex(a0)
	move.w	#$A0,d0
	jsr	(PlaySound).l	; play jumping sound
	move.b	#$13,y_radius(a0)
	move.b	#9,x_radius(a0)
	btst	#2,status(a0)
	bne.s	Sonic_RollJump
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)	; use "jumping" animation
	bset	#2,status(a0)
	addq.w	#5,y_pos(a0)

return_1AAE6:
	rts
; ---------------------------------------------------------------------------
; loc_1AAE8:
Sonic_RollJump:
	bset	#4,status(a0)	; set the rolling+jumping flag
	rts
; End of function Sonic_Jump


; ---------------------------------------------------------------------------
; Subroutine letting Sonic control the height of the jump
; when the jump button is released
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ===========================================================================
; loc_1AAF0:
Sonic_JumpHeight:
	tst.b	jumping(a0)	; is Sonic jumping?
	beq.s	Sonic_UpVelCap	; if not, branch

	move.w	#-$400,d1
	btst	#6,status(a0)	; is Sonic underwater?
	beq.s	+		; if not, branch
	move.w	#-$200,d1
+
	cmp.w	y_vel(a0),d1	; is Sonic going up faster than d1?
	ble.s	+		; if not, branch
	move.b	(Ctrl_1_Held_Logical).w,d0
	andi.b	#$70,d0		; is a jump button pressed?
	bne.s	+		; if yes, branch
	move.w	d1,y_vel(a0)	; immediately reduce Sonic's upward speed to d1
+
	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
	beq.s	Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic
	rts
; ---------------------------------------------------------------------------
; loc_1AB22:
Sonic_UpVelCap:
	tst.b	spindash_flag(a0)	; is Sonic charging a spindash or in a rolling-only area?
	bne.s	return_1AB36		; if yes, return
	cmpi.w	#-$FC0,y_vel(a0)	; is Sonic moving up really fast?
	bge.s	return_1AB36		; if not, return
	move.w	#-$FC0,y_vel(a0)	; cap upward speed

return_1AB36:
	rts
; End of subroutine Sonic_JumpHeight

; ---------------------------------------------------------------------------
; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
; if he has enough rings and emeralds
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AB38: test_set_SS:
Sonic_CheckGoSuper:
	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
	bne.s	return_1ABA4		; if yes, branch
	cmpi.b	#7,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
	bne.s	return_1ABA4		; if not, branch
	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
	bcs.s	return_1ABA4		; if not, branch

	move.b	#1,(Super_Sonic_palette).w
	move.b	#$F,(Palette_frame_count).w
	move.b	#1,(Super_Sonic_flag).w
	move.b	#$81,obj_control(a0)
	move.b	#$1F,anim(a0)			; use transformation animation
	move.b	#$7E,(Object_RAM+$2040).w	; load Obj7E (super sonic stars object) at $FFFFD040
	move.w	#$A00,(Sonic_top_speed).w
	move.w	#$30,(Sonic_acceleration).w
	move.w	#$100,(Sonic_deceleration).w
	move.w	#0,invincibility_time(a0)
	bset	#1,status_secondary(a0)	; make Sonic invincible
	move.w	#$5F+$80,d0
	jsr	(PlaySound).l	; Play transformation sound effect.
	move.w	#$16+$80,d0
	jmp	(PlayMusic).l	; load the Super Sonic song and return

; ---------------------------------------------------------------------------
return_1ABA4:
	rts
; End of subroutine Sonic_CheckGoSuper


; ---------------------------------------------------------------------------
; Subroutine doing the extra logic for Super Sonic
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1ABA6:
Sonic_Super:
	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
	beq.w	return_1AC3C
	tst.b	(Update_HUD_timer).w
	beq.s	Sonic_RevertToNormal ; ?
	subq.w	#1,(Super_Sonic_frame_count).w
	bpl.w	return_1AC3C
	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
	tst.w	(Ring_count).w
	beq.s	Sonic_RevertToNormal
	ori.b	#1,(Update_HUD_rings).w
	cmpi.w	#1,(Ring_count).w
	beq.s	+
	cmpi.w	#10,(Ring_count).w
	beq.s	+
	cmpi.w	#100,(Ring_count).w
	bne.s	++
+
	ori.b	#$80,(Update_HUD_rings).w
+
	subq.w	#1,(Ring_count).w
	bne.s	return_1AC3C
; loc_1ABF2:
Sonic_RevertToNormal:
	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
	move.w	#$28,($FFFFF65C).w	; Unknown
	move.b	#0,(Super_Sonic_flag).w
	move.b	#1,next_anim(a0)	; Change animation back to normal ?
	move.w	#1,invincibility_time(a0)	; Remove invincibility
	move.w	#$600,(Sonic_top_speed).w
	move.w	#$C,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
	btst	#6,status(a0)	; Check if underwater, return if not
	beq.s	return_1AC3C
	move.w	#$300,(Sonic_top_speed).w
	move.w	#6,(Sonic_acceleration).w
	move.w	#$40,(Sonic_deceleration).w

return_1AC3C:
	rts
; End of subroutine Sonic_Super

; ---------------------------------------------------------------------------
; Subroutine to check for starting to charge a spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AC3E:
Sonic_CheckSpindash:
	tst.b	spindash_flag(a0)
	bne.s	Sonic_UpdateSpindash
	cmpi.b	#8,anim(a0)
	bne.s	return_1AC8C
	move.b	(Ctrl_1_Press_Logical).w,d0
	andi.b	#$70,d0
	beq.w	return_1AC8C
	move.b	#9,anim(a0)
	move.w	#$E0,d0
	jsr	(PlaySound).l
	addq.l	#4,sp
	move.b	#1,spindash_flag(a0)
	move.w	#0,spindash_counter(a0)
	cmpi.b	#$C,air_left(a0)	; if he's drowning, branch to not make dust
	bcs.s	+
	move.b	#2,(Sonic_Dust+anim).w
+
	bsr.w	Sonic_LevelBound
	bsr.w	AnglePos

return_1AC8C:
	rts
; End of subroutine Sonic_CheckSpindash


; ---------------------------------------------------------------------------
; Subrouting to update an already-charging spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AC8E:
Sonic_UpdateSpindash:
	move.b	(Ctrl_1_Held_Logical).w,d0
	btst	#1,d0
	bne.w	Sonic_ChargingSpindash

	; unleash the charged spindash and start rolling quickly:
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)
	addq.w	#5,y_pos(a0)	; add the difference between Sonic's rolling and standing heights
	move.b	#0,spindash_flag(a0)
	moveq	#0,d0
	move.b	spindash_counter(a0),d0
	add.w	d0,d0
	move.w	SpindashSpeeds(pc,d0.w),inertia(a0)
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	move.w	SpindashSpeedsSuper(pc,d0.w),inertia(a0)
+
	move.w	inertia(a0),d0
	subi.w	#$800,d0
	add.w	d0,d0
	andi.w	#$1F00,d0
	neg.w	d0
	addi.w	#$2000,d0
	move.w	d0,($FFFFEED0).w
	btst	#0,status(a0)
	beq.s	+
	neg.w	inertia(a0)
+
	bset	#2,status(a0)
	move.b	#0,(Sonic_Dust+anim).w
	move.w	#$3C+$80,d0	; spindash zoom sound
	jsr	(PlaySound).l
	bra.s	Obj01_Spindash_ResetScr
; ===========================================================================
; word_1AD0C:
SpindashSpeeds:
	dc.w  $800	; 0
	dc.w  $880	; 1
	dc.w  $900	; 2
	dc.w  $980	; 3
	dc.w  $A00	; 4
	dc.w  $A80	; 5
	dc.w  $B00	; 6
	dc.w  $B80	; 7
	dc.w  $C00	; 8
; word_1AD1E:
SpindashSpeedsSuper:
	dc.w  $B00	; 0
	dc.w  $B80	; 1
	dc.w  $C00	; 2
	dc.w  $C80	; 3
	dc.w  $D00	; 4
	dc.w  $D80	; 5
	dc.w  $E00	; 6
	dc.w  $E80	; 7
	dc.w  $F00	; 8
; ===========================================================================
; loc_1AD30:
Sonic_ChargingSpindash:			; If still charging the dash...
	tst.w	spindash_counter(a0)
	beq.s	+
	move.w	spindash_counter(a0),d0
	lsr.w	#5,d0
	sub.w	d0,spindash_counter(a0)
	bcc.s	+
	move.w	#0,spindash_counter(a0)
+
	move.b	(Ctrl_1_Press_Logical).w,d0
	andi.b	#$70,d0
	beq.w	Obj01_Spindash_ResetScr
	move.w	#$900,anim(a0)
	move.w	#$E0,d0
	jsr	(PlaySound).l
	addi.w	#$200,spindash_counter(a0)
	cmpi.w	#$800,spindash_counter(a0)
	bcs.s	Obj01_Spindash_ResetScr
	move.w	#$800,spindash_counter(a0)

; loc_1AD78:
Obj01_Spindash_ResetScr:
	addq.l	#4,sp
	cmpi.w	#$60,(Camera_Y_pos_bias).w
	beq.s	loc_1AD8C
	bcc.s	+
	addq.w	#4,(Camera_Y_pos_bias).w
+	subq.w	#2,(Camera_Y_pos_bias).w

loc_1AD8C:
	bsr.w	Sonic_LevelBound
	bsr.w	AnglePos
	rts
; End of subroutine Sonic_UpdateSpindash


; ---------------------------------------------------------------------------
; Subroutine to slow Sonic walking up a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AD96:
Sonic_SlopeResist:
	move.b	angle(a0),d0
	addi.b	#$60,d0
	cmpi.b	#$C0,d0
	bcc.s	return_1ADCA
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	#$20,d0
	asr.l	#8,d0
	tst.w	inertia(a0)
	beq.s	return_1ADCA
	bmi.s	loc_1ADC6
	tst.w	d0
	beq.s	+
	add.w	d0,inertia(a0)	; change Sonic's $14
+
	rts
; ---------------------------------------------------------------------------

loc_1ADC6:
	add.w	d0,inertia(a0)

return_1ADCA:
	rts
; End of subroutine Sonic_SlopeResist

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope while he's rolling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1ADCC:
Sonic_RollRepel:
	move.b	angle(a0),d0
	addi.b	#$60,d0
	cmpi.b	#-$40,d0
	bcc.s	return_1AE06
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	#$50,d0
	asr.l	#8,d0
	tst.w	inertia(a0)
	bmi.s	loc_1ADFC
	tst.w	d0
	bpl.s	loc_1ADF6
	asr.l	#2,d0

loc_1ADF6:
	add.w	d0,inertia(a0)
	rts
; ===========================================================================

loc_1ADFC:
	tst.w	d0
	bmi.s	loc_1AE02
	asr.l	#2,d0

loc_1AE02:
	add.w	d0,inertia(a0)

return_1AE06:
	rts
; End of function Sonic_RollRepel

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AE08:
Sonic_SlopeRepel:
	nop
	tst.b	stick_to_convex(a0)
	bne.s	return_1AE42
	tst.w	move_lock(a0)
	bne.s	loc_1AE44
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	beq.s	return_1AE42
	move.w	inertia(a0),d0
	bpl.s	loc_1AE2C
	neg.w	d0

loc_1AE2C:
	cmpi.w	#$280,d0
	bcc.s	return_1AE42
	clr.w	inertia(a0)
	bset	#1,status(a0)
	move.w	#$1E,move_lock(a0)

return_1AE42:
	rts
; ===========================================================================

loc_1AE44:
	subq.w	#1,move_lock(a0)
	rts
; End of function Sonic_SlopeRepel

; ---------------------------------------------------------------------------
; Subroutine to return Sonic's angle to 0 as he jumps
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AE4A:
Sonic_JumpAngle:
	move.b	angle(a0),d0	; get Sonic's angle
	beq.s	Sonic_JumpFlip	; if already 0, branch
	bpl.s	loc_1AE5A	; if higher than 0, branch

	addq.b	#2,d0		; increase angle
	bcc.s	BranchTo_Sonic_JumpAngleSet
	moveq	#0,d0

BranchTo_Sonic_JumpAngleSet 
	bra.s	Sonic_JumpAngleSet
; ===========================================================================

loc_1AE5A:
	subq.b	#2,d0		; decrease angle
	bcc.s	Sonic_JumpAngleSet
	moveq	#0,d0

; loc_1AE60:
Sonic_JumpAngleSet:
	move.b	d0,angle(a0)
; End of function Sonic_JumpAngle
	; continue straight to Sonic_JumpFlip

; ---------------------------------------------------------------------------
; Updates Sonic's secondary angle if he's tumbling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AE64:
Sonic_JumpFlip:
	move.b	flip_angle(a0),d0
	beq.s	return_1AEA8
	tst.w	inertia(a0)
	bmi.s	Sonic_JumpLeftFlip
; loc_1AE70:
Sonic_JumpRightFlip:
	move.b	flip_speed(a0),d1
	add.b	d1,d0
	bcc.s	BranchTo_Sonic_JumpFlipSet
	subq.b	#1,flips_remaining(a0)
	bcc.s	BranchTo_Sonic_JumpFlipSet
	move.b	#0,flips_remaining(a0)
	moveq	#0,d0

BranchTo_Sonic_JumpFlipSet 
	bra.s	Sonic_JumpFlipSet
; ===========================================================================
; loc_1AE88:
Sonic_JumpLeftFlip:
	tst.b	flip_turned(a0)
	bne.s	Sonic_JumpRightFlip
	move.b	flip_speed(a0),d1
	sub.b	d1,d0
	bcc.s	Sonic_JumpFlipSet
	subq.b	#1,flips_remaining(a0)
	bcc.s	Sonic_JumpFlipSet
	move.b	#0,flips_remaining(a0)
	moveq	#0,d0
; loc_1AEA4:
Sonic_JumpFlipSet:
	move.b	d0,flip_angle(a0)

return_1AEA8:
	rts
; End of function Sonic_JumpFlip

; ---------------------------------------------------------------------------
; Subroutine for Sonic to interact with the floor and walls when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1AEAA: Sonic_Floor:
Sonic_DoLevelCollision:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer_plus(a0),d5
	move.w	x_vel(a0),d1
	move.w	y_vel(a0),d2
	jsr	(CalcAngle).l
	subi.b	#$20,d0
	andi.b	#$C0,d0
	cmpi.b	#$40,d0
	beq.w	Sonic_HitLeftWall
	cmpi.b	#$80,d0
	beq.w	Sonic_HitCeilingAndWalls
	cmpi.b	#-$40,d0
	beq.w	Sonic_HitRightWall
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	+
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0) ; stop Sonic since he hit a wall
+
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	+
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0) ; stop Sonic since he hit a wall
+
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1AF8A
	move.b	y_vel(a0),d2
	addq.b	#8,d2
	neg.b	d2
	cmp.b	d2,d1
	bge.s	+
	cmp.b	d2,d0
	blt.s	return_1AF8A
+
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Sonic_ResetOnFloor
	move.b	d3,d0
	addi.b	#$20,d0
	andi.b	#$40,d0
	bne.s	loc_1AF68
	move.b	d3,d0
	addi.b	#$10,d0
	andi.b	#$20,d0
	beq.s	loc_1AF5A
	asr	y_vel(a0)
	bra.s	loc_1AF7C
; ===========================================================================

loc_1AF5A:
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)
	rts
; ===========================================================================

loc_1AF68:
	move.w	#0,x_vel(a0) ; stop Sonic since he hit a wall
	cmpi.w	#$FC0,y_vel(a0)
	ble.s	loc_1AF7C
	move.w	#$FC0,y_vel(a0)

loc_1AF7C:
	move.w	y_vel(a0),inertia(a0)
	tst.b	d3
	bpl.s	return_1AF8A
	neg.w	inertia(a0)

return_1AF8A:
	rts
; ===========================================================================
; loc_1AF8C:
Sonic_HitLeftWall:
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	Sonic_HitCeiling ; branch if distance is positive (not inside wall)
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0) ; stop Sonic since he hit a wall
	move.w	y_vel(a0),inertia(a0)
	rts
; ===========================================================================
; loc_1AFA6:
Sonic_HitCeiling:
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	Sonic_HitFloor ; branch if distance is positive (not inside ceiling)
	sub.w	d1,y_pos(a0)
	tst.w	y_vel(a0)
	bpl.s	return_1AFBE
	move.w	#0,y_vel(a0) ; stop Sonic in y since he hit a ceiling

return_1AFBE:
	rts
; ===========================================================================
; loc_1AFC0:
Sonic_HitFloor:
	tst.w	y_vel(a0)
	bmi.s	return_1AFE6
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1AFE6
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Sonic_ResetOnFloor
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)

return_1AFE6:
	rts
; ===========================================================================
; loc_1AFE8:
Sonic_HitCeilingAndWalls:
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	+
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Sonic since he hit a wall
+
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	+
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Sonic since he hit a wall
+
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	return_1B042
	sub.w	d1,y_pos(a0)
	move.b	d3,d0
	addi.b	#$20,d0
	andi.b	#$40,d0
	bne.s	loc_1B02C
	move.w	#0,y_vel(a0) ; stop Sonic in y since he hit a ceiling
	rts
; ===========================================================================

loc_1B02C:
	move.b	d3,angle(a0)
	bsr.w	Sonic_ResetOnFloor
	move.w	y_vel(a0),inertia(a0)
	tst.b	d3
	bpl.s	return_1B042
	neg.w	inertia(a0)

return_1B042:
	rts
; ===========================================================================
; loc_1B044:
Sonic_HitRightWall:
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	Sonic_HitCeiling2
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0) ; stop Sonic since he hit a wall
	move.w	y_vel(a0),inertia(a0)
	rts
; ===========================================================================
; identical to Sonic_HitCeiling...
; loc_1B05E:
Sonic_HitCeiling2:
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	Sonic_HitFloor2
	sub.w	d1,y_pos(a0)
	tst.w	y_vel(a0)
	bpl.s	return_1B076
	move.w	#0,y_vel(a0) ; stop Sonic in y since he hit a ceiling

return_1B076:
	rts
; ===========================================================================
; identical to Sonic_HitFloor...
; loc_1B078:
Sonic_HitFloor2:
	tst.w	y_vel(a0)
	bmi.s	return_1B09E
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1B09E
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Sonic_ResetOnFloor
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)

return_1B09E:
	rts
; End of function Sonic_DoLevelCollision



; ---------------------------------------------------------------------------
; Subroutine to reset Sonic's mode when he lands on the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1B0A0:
Sonic_ResetOnFloor:
	tst.b	spindash_flag(a0)
	bne.s	Sonic_ResetOnFloor_Part3
	move.b	#0,anim(a0)
; loc_1B0AC:
Sonic_ResetOnFloor_Part2:
	; some routines outside of Tails' code can call Sonic_ResetOnFloor_Part2
	; when they mean to call Tails_ResetOnFloor_Part2, so fix that here
	_cmpi.b	#1,0(a0)	; is this object ID Sonic (obj01)?
	bne.w	Tails_ResetOnFloor_Part2	; if not, branch to the Tails version of this code

	btst	#2,status(a0)
	beq.s	Sonic_ResetOnFloor_Part3
	bclr	#2,status(a0)
	move.b	#$13,y_radius(a0) ; this increases Sonic's collision height to standing
	move.b	#9,x_radius(a0)
	move.b	#0,anim(a0)	; use running/walking/standing animation
	subq.w	#5,y_pos(a0)	; move Sonic up 5 pixels so the increased height doesn't push him into the ground
; loc_1B0DA:
Sonic_ResetOnFloor_Part3:
	bclr	#1,status(a0)
	bclr	#5,status(a0)
	bclr	#4,status(a0)
	move.b	#0,jumping(a0)
	move.w	#0,(Chain_Bonus_counter).w
	move.b	#0,flip_angle(a0)
	move.b	#0,flip_turned(a0)
	move.b	#0,flips_remaining(a0)
	move.w	#0,(Sonic_Look_delay_counter).w
	cmpi.b	#$14,anim(a0)
	bne.s	return_1B11E
	move.b	#0,anim(a0)

return_1B11E:
	rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he gets hurt
; ---------------------------------------------------------------------------
; loc_1B120: Obj_01_Sub_4:
Obj01_Hurt:
	tst.w	(Debug_mode_flag).w
	beq.s	Obj01_Hurt_Normal
	btst	#4,(Ctrl_1_Press).w
	beq.s	Obj01_Hurt_Normal
	move.w	#1,(Debug_placement_mode).w
	clr.b	(Control_Locked).w
	rts
; ---------------------------------------------------------------------------
; loc_1B13A:
Obj01_Hurt_Normal:
	move.w	x_vel(a0),d0	; save X-speed for later
	bclr	#0,status(a0)	; make Sonic face right
	tst.w	x_vel(a0)	; is Sonic moving to the right?
	bpl.s	+		; if yes, branch
	bset	#0,status(a0)	; make Sonic face left
	neg.w	d0		; make X-speed positive
+
; $22 fastest; $23 slower; $24 even slower; $1A even slower (normal); $25 almost slowest; $26 slowest
	move.w	y_vel(a0),d1	; get Y-speed
	bpl.s	+		; positive? branch
	neg.w	d1		; otherwise make it positive
+	cmp.w	d0,d1		; is Y-speed greater than X-speed?
	bmi.s	+		; if not, branch
	move.w	d1,d0		; otherwise, make Y-speed dominant
+
	cmpi.w	#$A00,d0	; speed >=$A00?
	blt.s	+		; if not, branch
	move.b	#$22,anim(a0)	; use animation $22
	bra.w	OHN_End		; skip to end
+
	cmpi.w	#$700,d0	; speed >=$700?
	blt.s	+		; if not, branch
	move.b	#$23,anim(a0)	; use animation $23
	bra.s	OHN_End		; skip to end
+
	cmpi.w	#$500,d0	; speed >=$500?
	blt.s	+		; if not, branch
	move.b	#$24,anim(a0)	; use animation $24
	bra.s	OHN_End		; skip to end
+
	cmpi.w	#$300,d0	; speed >=$300?
	blt.s	+		; if not, branch
	move.b	#$1A,anim(a0)	; use animation $1A
	bra.s	OHN_End		; skip to end
+
	cmpi.w	#$100,d0	; speed >=$100?
	blt.s	+		; if not, branch
	move.b	#$25,anim(a0)	; use animation $25
	bra.s	OHN_End		; skip to end
+
;	cmpi.w	#$100,d0	; speed >=$100?
;	blt.s	+		; if not, branch
	move.b	#$26,anim(a0)	; use animation $26
;	bra.s	OHN_End		; skip to end
OHN_End:
	move.b	anim(a0),next_anim(a0)	; make sure frame doesn't get reset

	tst.b	routine_secondary(a0)
	bmi.w	Sonic_HurtInstantRecover
	jsr	ObjectMove
	addi.w	#$30,y_vel(a0)
	btst	#6,status(a0)
	beq.s	+
	subi.w	#$20,y_vel(a0)
+
	cmpi.w	#-$100,(Camera_Min_Y_pos).w
	bne.s	+
	andi.w	#$7FF,y_pos(a0)
+
	bsr.w	Sonic_HurtStop
	bsr.w	Sonic_LevelBound
	bsr.w	Sonic_RecordPos
	bsr.w	Sonic_Animate
	bsr.w	LoadSonicDynPLC
	jmp	DisplaySprite
; ===========================================================================
; loc_1B184:
Sonic_HurtStop:
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	blt.w	JmpTo_KillCharacter
	bsr.w	Sonic_DoLevelCollision
	btst	#1,status(a0)
	bne.s	return_1B1C8
	moveq	#0,d0
	move.w	d0,y_vel(a0)
	;move.w	d0,x_vel(a0)
	move.w	d0,inertia(a0)
	move.b	d0,obj_control(a0)
	move.b	#0,anim(a0)
	subq.b	#2,routine(a0)	; => Obj01_Control
	;move.w	#$78,invulnerable_time(a0)
	move.w	#$1,invulnerable_time(a0)
	move.b	#0,spindash_flag(a0)

return_1B1C8:
	rts
; ===========================================================================
; makes Sonic recover control after being hurt before landing
; seems to be unused
; loc_1B1CA:
Sonic_HurtInstantRecover:
	subq.b	#2,routine(a0)	; => Obj01_Control
	move.b	#0,routine_secondary(a0)
	bsr.w	Sonic_RecordPos
	bsr.w	Sonic_Animate
	bsr.w	LoadSonicDynPLC
	jmp	DisplaySprite
; ===========================================================================

; ---------------------------------------------------------------------------
; Sonic when he dies
; ...poor Sonic
; ---------------------------------------------------------------------------

; loc_1B1E6: Obj_01_Sub_6:
Obj01_Dead:
	tst.w	(Debug_mode_flag).w
	beq.s	+
	btst	#4,(Ctrl_1_Press).w
	beq.s	+
	move.w	#1,(Debug_placement_mode).w
	clr.b	(Control_Locked).w
	rts
+
	bsr.w	CheckGameOver
	jsr	ObjectMoveAndFall
	bsr.w	Sonic_RecordPos
	bsr.w	Sonic_Animate
	bsr.w	LoadSonicDynPLC
	jmp	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1B21C:
CheckGameOver:
	move.b	#1,($FFFFEEBE).w
	move.b	#0,spindash_flag(a0)
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$100,d0
	cmp.w	y_pos(a0),d0
	bge.w	return_1B31A
	move.b	#8,routine(a0)	; => Obj01_Gone
	move.w	#$3C,spindash_counter(a0)
	addq.b	#1,(Update_HUD_lives).w	; update lives counter
	subq.b	#1,(Life_count).w	; subtract 1 from number of lives
	bne.s	Obj01_ResetLevel	; if it's not a game over, branch
	move.w	#0,spindash_counter(a0)
	move.b	#$39,(Object_RAM+$80).w ; load Obj39 (game over text)
	move.b	#$39,(Object_RAM+$C0).w ; load Obj39 (game over text)
	move.b	#1,(Object_RAM+$C0+mapping_frame).w
	move.w	a0,(Object_RAM+$80+parent).w
	clr.b	(Time_Over_flag).w
; loc_1B26E:
Obj01_Finished:
	clr.b	(Update_HUD_timer).w
	clr.b	(Update_HUD_timer_2P).w
	move.b	#8,routine(a0)	; => Obj01_Gone
	move.w	#$9B,d0
	jsr	(PlayMusic).l
	moveq	#3,d0
	jmp	(LoadPLC).l
; End of function CheckGameOver

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when the level is restarted
; ---------------------------------------------------------------------------
; loc_1B28E:
Obj01_ResetLevel:
	tst.b	(Time_Over_flag).w
	beq.s	Obj01_ResetLevel_Part2
	move.w	#0,spindash_counter(a0)
	move.b	#$39,(Object_RAM+$80).w ; load Obj39
	move.b	#$39,(Object_RAM+$C0).w ; load Obj39
	move.b	#2,(Object_RAM+$80+mapping_frame).w
	move.b	#3,(Object_RAM+$C0+mapping_frame).w
	move.w	a0,(Object_RAM+$80+parent).w
	bra.s	Obj01_Finished
; ---------------------------------------------------------------------------
Obj01_ResetLevel_Part2:
	tst.w	(Two_player_mode).w
	beq.s	return_1B31A
	move.b	#0,($FFFFEEBE).w
	move.b	#$A,routine(a0)	; => Obj01_Respawning
	move.w	(Saved_x_pos).w,x_pos(a0)
	move.w	(Saved_y_pos).w,y_pos(a0)
	move.w	(Saved_art_tile).w,art_tile(a0)
	move.w	(Saved_layer).w,layer(a0)
	clr.w	(Ring_count).w
	clr.b	(Extra_life_flags).w
	move.b	#0,obj_control(a0)
	move.b	#5,anim(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	move.w	#0,inertia(a0)
	move.b	#2,status(a0)
	move.w	#0,move_lock(a0)
	move.w	#0,spindash_counter(a0)

return_1B31A:
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he's offscreen and waiting for the level to restart
; ---------------------------------------------------------------------------
; loc_1B31C: Obj_01_Sub_8:
Obj01_Gone:
	tst.w	spindash_counter(a0)
	beq.s	+
	subq.w	#1,spindash_counter(a0)
	bne.s	+
	move.w	#1,(Level_Inactive_flag).w
+
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he's waiting for the camera to scroll back to where he respawned
; ---------------------------------------------------------------------------
; loc_1B330: Obj_01_Sub_A:
Obj01_Respawning:
	tst.w	($FFFFEEB0).w
	bne.s	+
	tst.w	($FFFFEEB2).w
	bne.s	+
	move.b	#2,routine(a0)	; => Obj01_Control
+
	bsr.w	Sonic_Animate
	bsr.w	LoadSonicDynPLC
	jmp	DisplaySprite
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to animate Sonic's sprites
; See also: AnimateSprite
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1B350:
Sonic_Animate:
	lea	(SonicAniData).l,a1
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	lea	(SuperSonicAniData).l,a1
+
	moveq	#0,d0
	move.b	anim(a0),d0
	cmp.b	next_anim(a0),d0	; has animation changed?
	beq.s	SAnim_Do		; if not, branch
	move.b	d0,next_anim(a0)	; set to next animation
	move.b	#0,anim_frame(a0)	; reset animation frame
	move.b	#0,anim_frame_duration(a0)	; reset frame duration
	bclr	#5,status(a0)
; loc_1B384:
SAnim_Do:
	add.w	d0,d0
	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
	move.b	(a1),d0
	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
	bpl.s	SAnim_Delay			; if time remains, branch
	move.b	d0,anim_frame_duration(a0)	; load frame duration
; loc_1B3AA:
SAnim_Do2:
	moveq	#0,d1
	move.b	anim_frame(a0),d1	; load current frame number
	move.b	1(a1,d1.w),d0		; read sprite number from script
	cmpi.b	#$F0,d0
	bcc.s	SAnim_End_FF		; if animation is complete, branch
; loc_1B3BA:
SAnim_Next:
	move.b	d0,mapping_frame(a0)	; load sprite number
	addq.b	#1,anim_frame(a0)	; go to next frame
; return_1B3C2:
SAnim_Delay:
	rts
; ===========================================================================
; loc_1B3C4:
SAnim_End_FF:
	addq.b	#1,d0		; is the end flag = $FF ?
	bne.s	SAnim_End_FE	; if not, branch
	move.b	#0,anim_frame(a0)	; restart the animation
	move.b	1(a1),d0	; read sprite number
	bra.s	SAnim_Next
; ===========================================================================
; loc_1B3D4:
SAnim_End_FE:
	addq.b	#1,d0		; is the end flag = $FE ?
	bne.s	SAnim_End_FD	; if not, branch
	move.b	2(a1,d1.w),d0	; read the next byte in the script
	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
	sub.b	d0,d1
	move.b	1(a1,d1.w),d0	; read sprite number
	bra.s	SAnim_Next
; ===========================================================================
; loc_1B3E8:
SAnim_End_FD:
	addq.b	#1,d0			; is the end flag = $FD ?
	bne.s	SAnim_End		; if not, branch
	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
; return_1B3F2:
SAnim_End:
	rts
; ===========================================================================
; loc_1B3F4:
SAnim_WalkRun:
	addq.b	#1,d0		; is the start flag = $FF ?
	bne.w	SAnim_Roll	; if not, branch
	moveq	#0,d0		; is animation walking/running?
	move.b	flip_angle(a0),d0	; if not, branch
	bne.w	SAnim_Tumble
	moveq	#0,d1
	move.b	angle(a0),d0	; get Sonic's angle
	bmi.s	+
	beq.s	+
	subq.b	#1,d0
+
	move.b	status(a0),d2
	andi.b	#1,d2		; is Sonic mirrored horizontally?
	bne.s	+		; if yes, branch
	not.b	d0		; reverse angle
+
	addi.b	#$10,d0		; add $10 to angle
	bpl.s	+		; if angle is $0-$7F, branch
	moveq	#3,d1
+
	andi.b	#$FC,render_flags(a0)
	eor.b	d1,d2
	or.b	d2,render_flags(a0)
	btst	#5,status(a0)
	bne.w	SAnim_Push
	lsr.b	#4,d0		; divide angle by 16
	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
	bpl.s	+
	neg.w	d2
+
	tst.b	status_secondary(a0)
	bpl.w	+
	add.w	d2,d2
+
	tst.b	(Super_Sonic_flag).w
	bne.s	SAnim_Super
	lea	(SonAni_Run).l,a1	; use running animation
	cmpi.w	#$600,d2		; is Sonic at running speed?
	bcc.s	+			; use running animation
	lea	(SonAni_Walk).l,a1	; if yes, branch
	add.b	d0,d0
+
	add.b	d0,d0
	move.b	d0,d3
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	1(a1,d1.w),d0
	cmpi.b	#-1,d0
	bne.s	+
	move.b	#0,anim_frame(a0)
	move.b	1(a1),d0
+
	move.b	d0,mapping_frame(a0)
	add.b	d3,mapping_frame(a0)
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_1B4AC
	neg.w	d2
	addi.w	#$800,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#8,d2
	move.b	d2,anim_frame_duration(a0)	; modify frame duration
	addq.b	#1,anim_frame(a0)		; modify frame number

return_1B4AC:
	rts
; ===========================================================================
; loc_1B4AE:
SAnim_Super:
	lea	(SupSonAni_Run).l,a1	; use fast animation
	cmpi.w	#$800,d2		; is Sonic moving fast?
	bcc.s	SAnim_SuperRun		; if yes, branch
	lea	(SupSonAni_Walk).l,a1	; use slower animation
	add.b	d0,d0
	add.b	d0,d0
	bra.s	SAnim_SuperWalk
; ---------------------------------------------------------------------------
; loc_1B4C6:
SAnim_SuperRun:
	lsr.b	#1,d0
; loc_1B4C8:
SAnim_SuperWalk:
	move.b	d0,d3
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	1(a1,d1.w),d0
	cmpi.b	#-1,d0
	bne.s	+
	move.b	#0,anim_frame(a0)
	move.b	1(a1),d0
+
	move.b	d0,mapping_frame(a0)
	add.b	d3,mapping_frame(a0)
	move.b	($FFFFFE05).w,d1
	andi.b	#3,d1
	bne.s	+
	cmpi.b	#-$4B,mapping_frame(a0)
	bcc.s	+
	addi.b	#$20,mapping_frame(a0)
+
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_1B51E
	neg.w	d2
	addi.w	#$800,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#8,d2
	move.b	d2,anim_frame_duration(a0)
	addq.b	#1,anim_frame(a0)

return_1B51E:
	rts
; ===========================================================================
; loc_1B520:
SAnim_Tumble:
	move.b	flip_angle(a0),d0
	moveq	#0,d1
	move.b	status(a0),d2
	andi.b	#1,d2
	bne.s	SAnim_Tumble_Left

	andi.b	#$FC,render_flags(a0)
	addi.b	#$B,d0
	divu.w	#$16,d0
	addi.b	#$5F,d0
	move.b	d0,mapping_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	rts
; ===========================================================================
; loc_1B54E:
SAnim_Tumble_Left:
	andi.b	#$FC,render_flags(a0)
	tst.b	flip_turned(a0)
	beq.s	loc_1B566
	ori.b	#1,render_flags(a0)
	addi.b	#$B,d0
	bra.s	loc_1B572
; ===========================================================================

loc_1B566:
	ori.b	#3,render_flags(a0)
	neg.b	d0
	addi.b	#$8F,d0

loc_1B572:
	divu.w	#$16,d0
	addi.b	#$5F,d0
	move.b	d0,mapping_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	rts
; ===========================================================================
; loc_1B586:
SAnim_Roll:
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
	bpl.w	SAnim_Delay			; if time remains, branch
	addq.b	#1,d0		; is the start flag = $FE ?
	bne.s	SAnim_Push	; if not, branch
	move.w	inertia(a0),d2
	bpl.s	+
	neg.w	d2
+
	lea	(SonAni_Roll2).l,a1
	cmpi.w	#$600,d2
	bcc.s	+
	lea	(SonAni_Roll).l,a1
+
	neg.w	d2
	addi.w	#$400,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#8,d2
	move.b	d2,anim_frame_duration(a0)
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	bra.w	SAnim_Do2
; ===========================================================================

SAnim_Push:
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
	bpl.w	SAnim_Delay			; if time remains, branch
	move.w	inertia(a0),d2
	bmi.s	+
	neg.w	d2
+
	addi.w	#$800,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#6,d2
	move.b	d2,anim_frame_duration(a0)
	lea	(SonAni_Push).l,a1
	tst.b	(Super_Sonic_flag).w
	beq.s	+
	lea	(SupSonAni_Push).l,a1
+
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	bra.w	SAnim_Do2
; ===========================================================================

; ---------------------------------------------------------------------------
; Animation script - Sonic
; ---------------------------------------------------------------------------
; off_1B618: SonAniData:
SonicAniData:
	dc.w SonAni_Walk - SonicAniData		; 0
	dc.w SonAni_Run - SonicAniData		; 1
	dc.w SonAni_Roll - SonicAniData		; 2
	dc.w SonAni_Roll2 - SonicAniData	; 3
	dc.w SonAni_Push - SonicAniData		; 4
	dc.w SonAni_Wait - SonicAniData		; 5
	dc.w SonAni_Balance - SonicAniData	; 6
	dc.w SonAni_LookUp - SonicAniData	; 7
	dc.w SonAni_Duck - SonicAniData		; 8
	dc.w SonAni_Spindash - SonicAniData	; 9
	dc.w SonAni_Blink - SonicAniData	; 10 ; $A
	dc.w SonAni_GetUp - SonicAniData	; 11 ; $B
	dc.w SonAni_Balance2 - SonicAniData	; 12 ; $C
	dc.w SonAni_Stop - SonicAniData		; 13 ; $D
	dc.w SonAni_Float - SonicAniData	; 14 ; $E
	dc.w SonAni_Float2 - SonicAniData	; 15 ; $F
	dc.w SonAni_Spring - SonicAniData	; 16 ; $10
	dc.w SonAni_Hang - SonicAniData		; 17 ; $11
	dc.w SonAni_Dash2 - SonicAniData	; 18 ; $12
	dc.w SonAni_Dash3 - SonicAniData	; 19 ; $13
	dc.w SonAni_Hang2 - SonicAniData	; 20 ; $14
	dc.w SonAni_Bubble - SonicAniData	; 21 ; $15
	dc.w SonAni_DeathBW - SonicAniData	; 22 ; $16
	dc.w SonAni_Drown - SonicAniData	; 23 ; $17
	dc.w SonAni_Death - SonicAniData	; 24 ; $18
	dc.w SonAni_Hurt - SonicAniData		; 25 ; $19
	dc.w SonAni_Hurt - SonicAniData		; 26 ; $1A
	dc.w SonAni_Slide - SonicAniData	; 27 ; $1B
	dc.w SonAni_Blank - SonicAniData	; 28 ; $1C
	dc.w SonAni_Balance3 - SonicAniData	; 29 ; $1D
	dc.w SonAni_Balance4 - SonicAniData	; 30 ; $1E
	dc.w SupSonAni_Transform - SonicAniData	; 31 ; $1F
	dc.w SonAni_Lying - SonicAniData	; 32 ; $20
	dc.w SonAni_LieDown - SonicAniData	; 33 ; $21
	dc.w SonAni_HurtFast1 - SonicAniData	; 34 ; $22
	dc.w SonAni_HurtFast2 - SonicAniData	; 35 ; $23
	dc.w SonAni_HurtFast3 - SonicAniData	; 36 ; $24
	dc.w SonAni_HurtFast4 - SonicAniData	; 37 ; $25
	dc.w SonAni_HurtFast5 - SonicAniData	; 37 ; $26

SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
SonAni_Wait:
	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
	dc.b   8,  9,  9,  9,$FE,  6
SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
SonAni_Spindash:dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
SonAni_Blink:	dc.b   1,  2,$FD,  0
SonAni_GetUp:	dc.b   3, $A,$FD,  0
SonAni_Balance2:dc.b   3,$C8,$C9,$CA,$CB,$FF
SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
SonAni_Float:	dc.b   7,$54,$59,$FF
SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
SonAni_Spring:	dc.b $2F,$5B,$FD,  0
SonAni_Hang:	dc.b   1,$50,$51,$FF
SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
SonAni_DeathBW:	dc.b $20,$5E,$FF
SonAni_Drown:	dc.b $20,$5D,$FF
SonAni_Death:	dc.b $20,$5C,$FF
SonAni_Hurt:
	dc.b $03
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
SonAni_HurtRev:	dc.b $04,$4E,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$4F,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$FF
SonAni_Slide:	dc.b   9,$4E,$4F,$FF
SonAni_Blank:	dc.b $77,  0,$FD,  0
SonAni_Balance3:dc.b $13,$D0,$D1,$FF
SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
SonAni_Lying:	dc.b   9,  8,  9,$FF
SonAni_LieDown:	dc.b   3,  7,$FD,  0
SonAni_HurtFast1:
	dc.b $00
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
SonAni_HurtFast2:
	dc.b $01
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
SonAni_HurtFast3:
	dc.b $02
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
SonAni_HurtFast4:
	dc.b $04
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
SonAni_HurtFast5:
	dc.b $05
	dc.b $4E,$DC,$DB,$DA,$D9,$D8,$D7,$D6, $4F,$DC,$DB,$DA,$D9,$D8,$D7,$D6
	dc.b $FF
	even

; ---------------------------------------------------------------------------
; Animation script - Super Sonic
; (many of these point to the data above this)
; ---------------------------------------------------------------------------
SuperSonicAniData:
	dc.w SupSonAni_Walk - SuperSonicAniData		; 0
	dc.w SupSonAni_Run - SuperSonicAniData          ; 1
	dc.w SonAni_Roll - SuperSonicAniData            ; 2
	dc.w SonAni_Roll2 - SuperSonicAniData           ; 3
	dc.w SupSonAni_Push - SuperSonicAniData         ; 4
	dc.w SupSonAni_Stand - SuperSonicAniData        ; 5
	dc.w SupSonAni_Balance - SuperSonicAniData      ; 6
	dc.w SonAni_LookUp - SuperSonicAniData          ; 7
	dc.w SupSonAni_Duck - SuperSonicAniData         ; 8
	dc.w SonAni_Spindash - SuperSonicAniData        ; 9
	dc.w SonAni_Blink - SuperSonicAniData           ; 10 ; $A
	dc.w SonAni_GetUp - SuperSonicAniData           ; 11 ; $B
	dc.w SonAni_Balance2 - SuperSonicAniData        ; 12 ; $C
	dc.w SonAni_Stop - SuperSonicAniData            ; 13 ; $D
	dc.w SonAni_Float - SuperSonicAniData           ; 14 ; $E
	dc.w SonAni_Float2 - SuperSonicAniData          ; 15 ; $F
	dc.w SonAni_Spring - SuperSonicAniData          ; 16 ; $10
	dc.w SonAni_Hang - SuperSonicAniData            ; 17 ; $11
	dc.w SonAni_Dash2 - SuperSonicAniData           ; 18 ; $12
	dc.w SonAni_Dash3 - SuperSonicAniData           ; 19 ; $13
	dc.w SonAni_Hang2 - SuperSonicAniData           ; 20 ; $14
	dc.w SonAni_Bubble - SuperSonicAniData          ; 21 ; $15
	dc.w SonAni_DeathBW - SuperSonicAniData         ; 22 ; $16
	dc.w SonAni_Drown - SuperSonicAniData           ; 23 ; $17
	dc.w SonAni_Death - SuperSonicAniData           ; 24 ; $18
	dc.w SonAni_Hurt - SuperSonicAniData            ; 25 ; $19
	dc.w SonAni_Hurt - SuperSonicAniData            ; 26 ; $1A
	dc.w SonAni_Slide - SuperSonicAniData           ; 27 ; $1B
	dc.w SonAni_Blank - SuperSonicAniData           ; 28 ; $1C
	dc.w SonAni_Balance3 - SuperSonicAniData        ; 29 ; $1D
	dc.w SonAni_Balance4 - SuperSonicAniData        ; 30 ; $1E
	dc.w SupSonAni_Transform - SuperSonicAniData    ; 31 ; $1F

SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
SupSonAni_Duck:		dc.b   5,$C1,$FF
SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
	even

; ---------------------------------------------------------------------------
; Sonic pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1B848:
LoadSonicDynPLC:

	moveq	#0,d0
	move.b	mapping_frame(a0),d0	; load frame number
; loc_1B84E:
LoadSonicDynPLC_Part2:
	cmp.b	($FFFFF766).w,d0
	beq.s	return_1B89A
	move.b	d0,($FFFFF766).w
	lea	(MapRUnc_Sonic).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_1B89A
	move.w	#-$1000,d4
; loc_1B86E:
SPLC_ReadEntry:
	moveq	#0,d1
	move.w	(a2)+,d1
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.l	#5,d1
	addi.l	#ArtUnc_Sonic,d1
	move.w	d4,d2
	add.w	d3,d4
	add.w	d3,d4
	jsr	(QueueDMATransfer).l
	dbf	d5,SPLC_ReadEntry	; repeat for number of entries

return_1B89A:
	rts
; ===========================================================================

JmpTo_KillCharacter 
	jmp	KillCharacter
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 02 - Tails
; ----------------------------------------------------------------------------
; Sprite_1B8A4: Object_Tails:
Obj02:
	; a0=character
	cmpi.w	#2,(Player_mode).w
	bne.s	+
	move.w	(Camera_Min_X_pos).w,(Tails_Min_X_pos).w
	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
	move.w	(Camera_Max_Y_pos_now).w,(Tails_Max_Y_pos).w
+
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj02_States(pc,d0.w),d1
	jmp	Obj02_States(pc,d1.w)
; ============== JUMP TABLE =================================================
; off_1B8CC: Obj02_Index:
Obj02_States:
	dc.w Obj02_Init - Obj02_States		; 0
	dc.w Obj02_Control - Obj02_States	; 2
	dc.w Obj02_Hurt - Obj02_States		; 4
	dc.w Obj02_Dead - Obj02_States		; 6
	dc.w Obj02_Gone - Obj02_States		; 8
	dc.w Obj02_Respawning - Obj02_States	;$A
; ============== END JUMP TABLE =============================================
; loc_1B8D8: Obj02_Main:
Obj02_Init:
	addq.b	#2,routine(a0)	; => Obj02_Normal
	move.b	#$F,y_radius(a0) ; this sets Tails' collision height (2*pixels) to less than Sonic's height
	move.b	#9,x_radius(a0)
	move.l	#MapUnc_Tails,mappings(a0)
	move.b	#2,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#$84,render_flags(a0) ; render_flags(Tails) = $80 | initial render_flags(Sonic)
	move.w	#$600,(Tails_top_speed).w	; set Tails' top speed
	move.w	#$C,(Tails_acceleration).w	; set Tails' acceleration
	move.w	#$80,(Tails_deceleration).w	; set Tails' deceleration
	cmpi.w	#2,(Player_mode).w
	bne.s	Obj02_Init_2Pmode
	tst.b	(Last_star_pole_hit).w
	bne.s	Obj02_Init_Continued
	; only happens when not starting at a checkpoint:
	move.w	#$7A0,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#$C,layer(a0)
	move.b	#$D,layer_plus(a0)
	move.w	x_pos(a0),(Saved_x_pos).w
	move.w	y_pos(a0),(Saved_y_pos).w
	move.w	art_tile(a0),(Saved_art_tile).w
	move.w	layer(a0),(Saved_layer).w
	bra.s	Obj02_Init_Continued
; ===========================================================================
; loc_1B952:
Obj02_Init_2Pmode:
	move.w	#$7A0,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.w	(MainCharacter+layer).w,layer(a0)
	tst.w	(MainCharacter+art_tile).w
	bpl.s	Obj02_Init_Continued
	ori.w	#$8000,art_tile(a0)
; loc_1B96E:
Obj02_Init_Continued:
	move.w	x_pos(a0),(Saved_x_pos_2P).w
	move.w	y_pos(a0),(Saved_y_pos_2P).w
	move.w	art_tile(a0),(Saved_art_tile_2P).w
	move.w	layer(a0),(Saved_layer_2P).w
	move.b	#0,flips_remaining(a0)
	move.b	#4,flip_speed(a0)
	move.b	#$1E,air_left(a0)
	move.w	#0,(Tails_CPU_routine).w	; set AI state to TailsCPU_Init
	move.w	#0,(Tails_control_counter).w
	move.w	#0,(Tails_respawn_counter).w
	move.b	#5,(Tails_Tails).w ; load Obj05 (Tails' Tails) at $FFFFD000
	move.w	a0,(Tails_Tails+parent).w ; set its parent object to this

; ---------------------------------------------------------------------------
; Normal state for Tails
; ---------------------------------------------------------------------------
; loc_1B9B4:
Obj02_Control:
	cmpa.w	#MainCharacter,a0
	bne.s	Obj02_Control_Joypad2
	move.w	(Ctrl_1_Logical).w,(Ctrl_2_Logical).w
	tst.b	(Control_Locked).w	; are controls locked?
	bne.s	Obj02_Control_Part2	; if yes, branch
	move.w	(Ctrl_1).w,(Ctrl_2_Logical).w	; copy new held buttons, to enable joypad control
	move.w	(Ctrl_1).w,(Ctrl_1_Logical).w
	bra.s	Obj02_Control_Part2
; ---------------------------------------------------------------------------
; loc_1B9D4:
Obj02_Control_Joypad2:
	tst.b	($FFFFF7CF).w
	bne.s	+
	move.w	(Ctrl_2).w,(Ctrl_2_Logical).w
+
	tst.w	(Two_player_mode).w
	bne.s	Obj02_Control_Part2
	bsr.w	TailsCPU_Control
; loc_1B9EA:
Obj02_Control_Part2:
	btst	#0,obj_control(a0)	; is Tails flying, or interacting with another object that holds him in place or controls his movement somehow?
	bne.s	+			; if yes, branch to skip Tails' control
	moveq	#0,d0
	move.b	status(a0),d0
	andi.w	#6,d0	; %0000 %0110
	move.w	Obj02_Modes(pc,d0.w),d1
	jsr	Obj02_Modes(pc,d1.w)	; run Tails' movement control code
+
	cmpi.w	#-$100,(Camera_Min_Y_pos).w	; is vertical wrapping enabled?
	bne.s	+                               ; if not, branch
	andi.w	#$7FF,y_pos(a0)                 ; perform wrapping of Sonic's y position
+
	bsr.s	Tails_Display
	bsr.w	Tails_RecordPos
	bsr.w	Tails_Water
	move.b	($FFFFF768).w,next_tilt(a0)
	move.b	($FFFFF76A).w,tilt(a0)
	tst.b	($FFFFF7C7).w
	beq.s	+
	tst.b	anim(a0)
	bne.s	+
	move.b	next_anim(a0),anim(a0)
+
	bsr.w	Tails_Animate
	tst.b	obj_control(a0)
	bmi.s	+
	jsr	(TouchResponse).l
+
	bra.w	LoadTailsDynPLC

; ===========================================================================
; secondary states under state Obj02_Normal
; off_1BA4E:
Obj02_Modes:
	dc.w Obj02_MdNormal - Obj02_Modes	; not airborne or rolling
	dc.w Obj02_MdAir - Obj02_Modes		; airborne
	dc.w Obj02_MdRoll - Obj02_Modes		; rolling
	dc.w Obj02_MdJump - Obj02_Modes		; jumping
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1BA56:
Tails_Display:
	move.w	invulnerable_time(a0),d0
	beq.s	Obj02_Display
	subq.w	#1,invulnerable_time(a0)
	lsr.w	#3,d0
	bcc.s	Obj02_ChkInvinc
; loc_1BA64:
Obj02_Display:
	jsr	DisplaySprite
; loc_1BA6A:
Obj02_ChkInvinc:	; Checks if invincibility has expired and disables it if it has.
	btst	#1,status_secondary(a0)
	beq.s	Obj02_ChkShoes
	tst.w	invincibility_time(a0)
	beq.s	Obj02_ChkShoes
	subq.w	#1,invincibility_time(a0)
	bne.s	Obj02_ChkShoes
	tst.b	(Current_Boss_ID).w	; Don't change music if in a boss fight
	bne.s	Obj02_RmvInvin
	cmpi.b	#$C,air_left(a0)	; Don't change music if drowning
	bcs.s	Obj02_RmvInvin
	move.w	(Level_Music).w,d0
	jsr	(PlayMusic).l
; loc_1BA96:
Obj02_RmvInvin:
	bclr	#1,status_secondary(a0)
; loc_1BA9C:
Obj02_ChkShoes:		; Checks if Speed Shoes have expired and disables them if they have.
	btst	#2,status_secondary(a0)
	beq.s	Obj02_ExitChk
	tst.w	speedshoes_time(a0)
	beq.s	Obj02_ExitChk
	subq.w	#1,speedshoes_time(a0)
	bne.s	Obj02_ExitChk
	move.w	#$600,(Tails_top_speed).w
	move.w	#$C,(Tails_acceleration).w
	move.w	#$80,(Tails_deceleration).w
; Obj02_RmvSpeed:
	bclr	#2,status_secondary(a0)
	move.w	#$7C+$80,d0	; Slow down tempo
	jmp	(PlayMusic).l
; ===========================================================================
; return_1BAD2:
Obj02_ExitChk:
	rts
; End of subroutine Tails_Display


; ---------------------------------------------------------------------------
; Tails' AI code for the Sonic and Tails mode 1-player game
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1BAD4:
TailsCPU_Control: ; a0=Tails
	move.b	(Ctrl_2_Held).w,d0	; did the real player 2 hit something?
	andi.b	#$7F,d0
	beq.s	+			; if not, branch
	move.w	#600,(Tails_control_counter).w ; give player 2 control for 10 seconds (minimum)
+
	lea	(MainCharacter).w,a1 ; a1=character ; a1=Sonic
	move.w	(Tails_CPU_routine).w,d0
	move.w	TailsCPU_States(pc,d0.w),d0
	jmp	TailsCPU_States(pc,d0.w)
; ===========================================================================
; off_1BAF4:
TailsCPU_States:
	dc.w TailsCPU_Init - TailsCPU_States	; 0
	dc.w TailsCPU_Spawning - TailsCPU_States; 2
	dc.w TailsCPU_Flying - TailsCPU_States	; 4
	dc.w TailsCPU_Normal - TailsCPU_States	; 6
	dc.w TailsCPU_Panic - TailsCPU_States	; 8

; ===========================================================================
; initial AI State
; ---------------------------------------------------------------------------
; loc_1BAFE:
TailsCPU_Init:
	move.w	#6,(Tails_CPU_routine).w	; => TailsCPU_Normal
	move.b	#0,obj_control(a0)
	move.b	#0,anim(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	move.w	#0,inertia(a0)
	move.b	#0,status(a0)
	move.w	#0,(Tails_respawn_counter).w
	rts

; ===========================================================================
; AI State where Tails is waiting to respawn
; ---------------------------------------------------------------------------
; loc_1BB30:
TailsCPU_Spawning:
	move.b	(Ctrl_2_Held_Logical).w,d0
	andi.b	#$F0,d0
	bne.s	TailsCPU_Respawn
	move.w	(Timer_frames).w,d0
	andi.w	#$3F,d0
	bne.s	return_1BB88
	tst.b	obj_control(a1)
	bne.s	return_1BB88
	move.b	status(a1),d0
	andi.b	#$D2,d0
	bne.s	return_1BB88
; loc_1BB54:
TailsCPU_Respawn:
	move.w	#4,(Tails_CPU_routine).w	; => TailsCPU_Flying
	move.w	x_pos(a1),d0
	move.w	d0,x_pos(a0)
	move.w	d0,(Tails_CPU_target_x).w
	move.w	y_pos(a1),d0
	move.w	d0,(Tails_CPU_target_y).w
	subi.w	#$C0,d0
	move.w	d0,y_pos(a0)
	ori.w	#$8000,art_tile(a0)
	move.b	#0,spindash_flag(a0)
	move.w	#0,spindash_counter(a0)

return_1BB88:
	rts

; ===========================================================================
; AI State where Tails pretends to be a helicopter
; ---------------------------------------------------------------------------
; loc_1BB8A:
TailsCPU_Flying:
	tst.b	render_flags(a0)
	bmi.s	TailsCPU_FlyingOnscreen
	addq.w	#1,(Tails_respawn_counter).w
	cmpi.w	#$12C,(Tails_respawn_counter).w
	bcs.s	TailsCPU_Flying_Part2
	move.w	#0,(Tails_respawn_counter).w
	move.w	#2,(Tails_CPU_routine).w	; => TailsCPU_Spawning
	move.b	#$81,obj_control(a0)
	move.b	#2,status(a0)
	move.w	#0,x_pos(a0)
	move.w	#0,y_pos(a0)
	move.b	#$20,anim(a0)
	rts
; ---------------------------------------------------------------------------
; loc_1BBC8:
TailsCPU_FlyingOnscreen:
	move.w	#0,(Tails_respawn_counter).w
; loc_1BBCE:
TailsCPU_Flying_Part2:
	lea	(Sonic_Pos_Record_Buf).w,a2
	move.w	#$10,d2
	lsl.b	#2,d2
	addq.b	#4,d2
	move.w	(Sonic_Pos_Record_Index).w,d3
	add.b	#4*8,d3	; reduce Tails' following delay
	sub.b	d2,d3
	move.w	(a2,d3.w),(Tails_CPU_target_x).w
	move.w	2(a2,d3.w),(Tails_CPU_target_y).w
	tst.b	(Water_flag).w
	beq.s	+
	move.w	(Water_Level_1).w,d0
	subi.w	#$10,d0
	cmp.w	(Tails_CPU_target_y).w,d0
	bge.s	+
	move.w	d0,(Tails_CPU_target_y).w
+
	move.w	x_pos(a0),d0
	sub.w	(Tails_CPU_target_x).w,d0
	beq.s	loc_1BC54
	move.w	d0,d2
	bpl.s	+
	neg.w	d2
+
	lsr.w	#4,d2
	cmpi.w	#$C,d2
	bcs.s	+
	moveq	#$C,d2
+
	move.b	x_vel(a1),d1
	bpl.s	+
	neg.b	d1
+
	add.b	d1,d2
	addq.w	#1,d2
	tst.w	d0
	bmi.s	loc_1BC40
	bset	#0,status(a0)
	cmp.w	d0,d2
	bcs.s	+
	move.w	d0,d2
	moveq	#0,d0
+
	neg.w	d2
	bra.s	loc_1BC50
; ---------------------------------------------------------------------------

loc_1BC40:
	bclr	#0,status(a0)
	neg.w	d0
	cmp.w	d0,d2
	bcs.s	loc_1BC50
	move.b	d0,d2
	moveq	#0,d0

loc_1BC50:
	add.w	d2,x_pos(a0)

loc_1BC54:
;	moveq	#1,d2
	move.w	y_vel(a1),d2
	bpl.s	+
	neg.w	d2
+	lsr.w	#8,d2
	andi.w	#$F,d2
	bne.s	+
	moveq	#1,d2
+
	move.w	y_pos(a0),d1
	sub.w	(Tails_CPU_target_y).w,d1
	beq.s	loc_1BC68
	bmi.s	loc_1BC64
	neg.w	d2

loc_1BC64:
	add.w	d2,y_pos(a0)

loc_1BC68:
	bra.w	return_1BCDE	; always make Tails be a helicopter

	lea	(Sonic_Stat_Record_Buf).w,a2
	move.b	2(a2,d3.w),d2
	andi.b	#$D2,d2
	bne.s	return_1BCDE
	or.w	d0,d1
	bne.s	return_1BCDE
	move.w	#6,(Tails_CPU_routine).w	; => TailsCPU_Normal
	move.b	#0,obj_control(a0)
	move.b	#0,anim(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	move.w	#0,inertia(a0)
	move.b	#2,status(a0)
	move.w	#0,move_lock(a0)
	andi.w	#$7FFF,art_tile(a0)
	tst.b	art_tile(a1)
	bpl.s	+
	ori.w	#$8000,art_tile(a0)
+
	move.b	layer(a1),layer(a0)
	move.b	layer_plus(a1),layer_plus(a0)
	cmpi.b	#9,anim(a1)
	beq.s	return_1BCDE
	move.b	spindash_flag(a0),d0
	beq.s	return_1BCDE
	move.b	d0,spindash_flag(a1)
	bsr.w	loc_212C4

return_1BCDE:
	rts

; ===========================================================================
; AI State where Tails follows the player normally
; ---------------------------------------------------------------------------
; loc_1BCE0:
TailsCPU_Normal:
	cmpi.b	#6,(MainCharacter+routine).w	; is Sonic dead?
;	bcs.s	TailsCPU_Normal_SonicOK		; if not, branch	; DISABLED, Tails always in helicopter mode
	; Sonic's dead; fly down to his corpse
	move.w	#4,(Tails_CPU_routine).w	; => TailsCPU_Flying
	move.b	#0,spindash_flag(a0)
	move.w	#0,spindash_counter(a0)
	move.b	#$81,obj_control(a0)
	move.b	#2,status(a0)
	move.b	#$20,anim(a0)
	rts
; ---------------------------------------------------------------------------
; loc_1BD0E:
TailsCPU_Normal_SonicOK:
	bsr.w	TailsCPU_CheckDespawn
	tst.w	(Tails_control_counter).w	; if CPU has control
	bne.w	TailsCPU_Normal_HumanControl		; (if not, branch)
	tst.b	obj_control(a0)			; and Tails isn't fully object controlled (&$80)
	bmi.w	TailsCPU_Normal_HumanControl		; (if not, branch)
	tst.w	move_lock(a0)			; and Tails' movement is locked (usually because he just fell down a slope)
	beq.s	+					; (if not, branch)
	tst.w	inertia(a0)			; and Tails is stopped, then...
	bne.s	+					; (if not, branch)
	move.w	#8,(Tails_CPU_routine).w	; => TailsCPU_Panic
+
	lea	(Sonic_Pos_Record_Buf).w,a1
	move.w	#$10,d1
	lsl.b	#2,d1
	addq.b	#4,d1
	move.w	(Sonic_Pos_Record_Index).w,d0
	sub.b	d1,d0
	move.w	(a1,d0.w),d2	; d2 = earlier x position of Sonic
	move.w	2(a1,d0.w),d3	; d3 = earlier y position of Sonic
	lea	(Sonic_Stat_Record_Buf).w,a1
	move.w	(a1,d0.w),d1	; d1 = earlier input of Sonic
	move.b	2(a1,d0.w),d4	; d4 = earlier status of Sonic
	move.w	d1,d0
	btst	#5,status(a0)	; is Tails pushing against something?
	beq.s	+		; if not, branch
	btst	#5,d4		; was Sonic pushing against something?
	beq.w	TailsCPU_Normal_FilterAction_Part2 ; if not, branch elsewhere

; either Tails isn't pushing, or Tails and Sonic are both pushing
+	sub.w	x_pos(a0),d2
	beq.s	TailsCPU_Normal_Stand ; branch if Tails is already lined up horizontally with Sonic
	bpl.s	TailsCPU_Normal_FollowRight
	neg.w	d2

; Tails wants to go left because that's where Sonic is
; loc_1BD76: TailsCPU_Normal_FollowLeft:
	cmpi.w	#$10,d2
	bcs.s	+
	andi.w	#$F3F3,d1 ; %1111001111110011
	ori.w	#$0404,d1 ; %0000010000000100
+
	tst.w	inertia(a0)
	beq.s	TailsCPU_Normal_FilterAction
	btst	#0,status(a0)
	beq.s	TailsCPU_Normal_FilterAction
	subq.w	#1,x_pos(a0)
	bra.s	TailsCPU_Normal_FilterAction
; ===========================================================================
; Tails wants to go right because that's where Sonic is
; loc_1BD98:
TailsCPU_Normal_FollowRight:
	cmpi.w	#$10,d2
	bcs.s	+
	andi.w	#$F3F3,d1 ; %1111001111110011
	ori.w	#$0808,d1 ; %0000100000001000
+
	tst.w	inertia(a0)
	beq.s	TailsCPU_Normal_FilterAction
	btst	#0,status(a0)
	bne.s	TailsCPU_Normal_FilterAction
	addq.w	#1,x_pos(a0)
	bra.s	TailsCPU_Normal_FilterAction
; ===========================================================================
; Tails is happy where he is
; loc_1BDBA:
TailsCPU_Normal_Stand:
	bclr	#0,status(a0)
	move.b	d4,d0
	andi.b	#1,d0
	beq.s	TailsCPU_Normal_FilterAction
	bset	#0,status(a0)

; Filter the action we chose depending on a few things
; loc_1BDCE:
TailsCPU_Normal_FilterAction:
	tst.b	($FFFFF70F).w
	beq.s	+
	ori.w	#$7000,d1
	btst	#1,status(a0)
	bne.s	TailsCPU_Normal_SendAction
	move.b	#0,($FFFFF70F).w
+
	move.w	(Timer_frames).w,d0
	andi.w	#$FF,d0
	beq.s	+
	cmpi.w	#$40,d2
	bcc.s	TailsCPU_Normal_SendAction
+
	sub.w	y_pos(a0),d3
	beq.s	TailsCPU_Normal_SendAction
	bpl.s	TailsCPU_Normal_SendAction
	neg.w	d3
	cmpi.w	#$20,d3
	bcs.s	TailsCPU_Normal_SendAction
; loc_1BE06:
TailsCPU_Normal_FilterAction_Part2:
	move.b	($FFFFFE05).w,d0
	andi.b	#$3F,d0
	bne.s	TailsCPU_Normal_SendAction
	cmpi.b	#8,anim(a0)
	beq.s	TailsCPU_Normal_SendAction
	ori.w	#$7070,d1
	move.b	#1,($FFFFF70F).w

; Send the action we chose by storing it into player 2's input
; loc_1BE22:
TailsCPU_Normal_SendAction:
	move.w	d1,(Ctrl_2_Logical).w
	rts

; ===========================================================================
; Follow orders from controller 2
; and decrease the counter to when the CPU will regain control
; loc_1BE28:
TailsCPU_Normal_HumanControl:
	tst.w	(Tails_control_counter).w
	beq.s	+	; don't decrease if it's already 0
	subq.w	#1,(Tails_control_counter).w
+
	rts

; ===========================================================================
; loc_1BE34:
TailsCPU_Despawn:
	move.w	#0,(Tails_control_counter).w
	move.w	#0,(Tails_respawn_counter).w
	move.w	#2,(Tails_CPU_routine).w	; => TailsCPU_Spawning
	move.b	#$81,obj_control(a0)
	move.b	#2,status(a0)
	move.w	#$4000,x_pos(a0)
	move.w	#0,y_pos(a0)
	move.b	#$20,anim(a0)
	rts
; ===========================================================================
; sub_1BE66:
TailsCPU_CheckDespawn:
	tst.b	render_flags(a0)
	bmi.s	TailsCPU_ResetRespawnTimer
	btst	#3,status(a0)
	beq.s	TailsCPU_TickRespawnTimer

	moveq	#0,d0
	move.b	interact(a0),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a3	; a3=object
	move.b	(Tails_interact_ID).w,d0
	cmp.b	(a3),d0
	bne.s	BranchTo_TailsCPU_Despawn

; loc_1BE8C:
TailsCPU_TickRespawnTimer:
	addq.w	#1,(Tails_respawn_counter).w
	cmpi.w	#$12C,(Tails_respawn_counter).w
	bcs.s	TailsCPU_UpdateObjInteract

BranchTo_TailsCPU_Despawn 
	bra.w	TailsCPU_Despawn
; ===========================================================================
; loc_1BE9C:
TailsCPU_ResetRespawnTimer:
	move.w	#0,(Tails_respawn_counter).w
; loc_1BEA2:
TailsCPU_UpdateObjInteract:
	moveq	#0,d0
	move.b	interact(a0),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a3	; a3=object
	move.b	(a3),(Tails_interact_ID).w
	rts

; ===========================================================================
; AI State where Tails stops, drops, and spindashes in Sonic's direction
; ---------------------------------------------------------------------------
; loc_1BEB8:
TailsCPU_Panic:
	bsr.w	TailsCPU_CheckDespawn
	tst.w	(Tails_control_counter).w
	bne.w	return_1BF36
	tst.w	move_lock(a0)
	bne.s	return_1BF36
	tst.b	spindash_flag(a0)
	bne.s	TailsCPU_Panic_ChargingDash

	tst.w	inertia(a0)
	bne.s	return_1BF36
	bclr	#0,status(a0)
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcs.s	+
	bset	#0,status(a0)
+
	move.w	#$0202,(Ctrl_2_Logical).w
	move.b	($FFFFFE05).w,d0
	andi.b	#$7F,d0
	beq.s	TailsCPU_Panic_ReleaseDash

	cmpi.b	#8,anim(a0)
	bne.s	return_1BF36
	move.w	#$7272,(Ctrl_2_Logical).w
	rts
; ---------------------------------------------------------------------------
; loc_1BF0C:
TailsCPU_Panic_ChargingDash:
	move.w	#$0202,(Ctrl_2_Logical).w
	move.b	($FFFFFE05).w,d0
	andi.b	#$7F,d0
	bne.s	TailsCPU_Panic_RevDash

; loc_1BF1C:
TailsCPU_Panic_ReleaseDash:
	move.w	#0,(Ctrl_2_Logical).w
	move.w	#6,(Tails_CPU_routine).w	; => TailsCPU_Normal
	rts
; ---------------------------------------------------------------------------
; loc_1BF2A:
TailsCPU_Panic_RevDash:
	andi.b	#$1F,d0
	bne.s	return_1BF36
	ori.w	#$7070,(Ctrl_2_Logical).w

return_1BF36:
	rts
; End of function TailsCPU_Control


; ---------------------------------------------------------------------------
; Subroutine to record Tails' previous positions for invincibility stars
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1BF38:
Tails_RecordPos:
	move.w	(Tails_Pos_Record_Index).w,d0
	lea	(Tails_Pos_Record_Buf).w,a1
	lea	(a1,d0.w),a1
	move.w	x_pos(a0),(a1)+
	move.w	y_pos(a0),(a1)+
	addq.b	#4,(Tails_Pos_Record_Index+1).w

	rts
; End of subroutine Tails_RecordPos

; ---------------------------------------------------------------------------
; Subroutine for Tails when he's underwater
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1BF52:
Tails_Water:
	tst.b	(Water_flag).w	; does level have water?
	bne.s	Obj02_InWater	; if yes, branch

return_1BF58:
	rts
; ---------------------------------------------------------------------------
; loc_1BF5A:
Obj02_InWater:
	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0	; is Sonic above the water?
	bge.s	Obj02_OutWater	; if yes, branch

	bset	#6,status(a0)	; set underwater flag
	bne.s	return_1BF58	; if already underwater, branch

	movea.l	a0,a1
	bsr.w	ResumeMusic
	move.b	#$A,(Object_RAM+$20C0).w ; load Obj0A (tail's breathing bubbles) at $FFFFD0C0
	move.b	#$81,(Object_RAM+$20C0+subtype).w
	move.l	a0,(Object_RAM+$20C0+$3C).w ; set its parent to be this (obj0A uses $3C instead of $3E for some reason)
	move.w	#$300,(Tails_top_speed).w
	move.w	#6,(Tails_acceleration).w
	move.w	#$40,(Tails_deceleration).w
	asr	x_vel(a0)
	asr	y_vel(a0)
	asr	y_vel(a0)
	beq.s	return_1BF58
	move.w	#$100,(Tails_Dust+anim).w	; splash animation
	move.w	#$2A+$80,d0	; splash sound
	jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; loc_1BFB2:
Obj02_OutWater:
	bclr	#6,status(a0)	; unset underwater flag
	beq.s	return_1BF58	; if already above water, branch

	movea.l	a0,a1
	bsr.w	ResumeMusic
	move.w	#$600,(Tails_top_speed).w
	move.w	#$C,(Tails_acceleration).w
	move.w	#$80,(Tails_deceleration).w

	cmpi.b	#4,routine(a0)	; is Tails falling back from getting hurt?
	beq.s	+		; if yes, branch
	asl	y_vel(a0)
+
	tst.w	y_vel(a0)
	beq.w	return_1BF58
	move.w	#$100,(Tails_Dust+anim).w	; splash animation
	movea.l	a0,a1
	bsr.w	ResumeMusic
	cmpi.w	#-$1000,y_vel(a0)
	bgt.s	+
	move.w	#-$1000,y_vel(a0)	; limit upward y velocity exiting the water
+
	move.w	#$2A+$80,d0	; splash sound
	jmp	(PlaySound).l
; End of subroutine Tails_Water

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Obj02_MdNormal
; Called if Tails is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; loc_1C00A:
Obj02_MdNormal:
	bsr.w	Tails_CheckSpindash
	bsr.w	Tails_Jump
	bsr.w	Tails_SlopeResist
	bsr.w	Tails_Move
	bsr.w	Tails_Roll
	bsr.w	Tails_LevelBound
	jsr	ObjectMove
	bsr.w	AnglePos
	bsr.w	Tails_SlopeRepel
	rts
; End of subroutine Obj02_MdNormal
; ===========================================================================
; Start of subroutine Obj02_MdAir
; Called if Tails is airborne, but not in a ball (thus, probably not jumping)
; loc_1C032: Obj02_MdJump
Obj02_MdAir:
	bsr.w	Tails_JumpHeight
	bsr.w	Tails_ChgJumpDir
	bsr.w	Tails_LevelBound
	jsr	ObjectMoveAndFall
	btst	#6,status(a0)	; is Tails underwater?
	beq.s	+		; if not, branch
	subi.w	#$28,y_vel(a0)	; reduce gravity by $28 ($38-$28=$10)
+
	bsr.w	Tails_JumpAngle
	bsr.w	Tails_DoLevelCollision
	rts
; End of subroutine Obj02_MdAir
; ===========================================================================
; Start of subroutine Obj02_MdRoll
; Called if Tails is in a ball, but not airborne (thus, probably rolling)
; loc_1C05C:
Obj02_MdRoll:
	tst.b	spindash_flag(a0)
	bne.s	+
	bsr.w	Tails_Jump
+
	bsr.w	Tails_RollRepel
	bsr.w	Tails_RollSpeed
	bsr.w	Tails_LevelBound
	jsr	ObjectMove
	bsr.w	AnglePos
	bsr.w	Tails_SlopeRepel
	rts
; End of subroutine Obj02_MdRoll
; ===========================================================================
; Start of subroutine Obj02_MdJump
; Called if Tails is in a ball and airborne (he could be jumping but not necessarily)
; Notes: This is identical to Obj02_MdAir, at least at this outer level.
;        Why they gave it a separate copy of the code, I don't know.
; loc_1C082: Obj02_MdJump2:
Obj02_MdJump:
	bsr.w	Tails_JumpHeight
	bsr.w	Tails_ChgJumpDir
	bsr.w	Tails_LevelBound
	jsr	ObjectMoveAndFall
	btst	#6,status(a0)	; is Tails underwater?
	beq.s	+		; if not, branch
	subi.w	#$28,y_vel(a0)	; reduce gravity by $28 ($38-$28=$10)
+
	bsr.w	Tails_JumpAngle
	bsr.w	Tails_DoLevelCollision
	rts
; End of subroutine Obj02_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Tails walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C0AC:
Tails_Move:
	move.w	(Tails_top_speed).w,d6
	move.w	(Tails_acceleration).w,d5
	move.w	(Tails_deceleration).w,d4
	tst.b	status_secondary(a0)
	bmi.w	Obj02_Traction
	tst.w	move_lock(a0)
	bne.w	Obj02_ResetScr
	btst	#2,(Ctrl_2_Held_Logical).w	; is left being pressed?
	beq.s	Obj02_NotLeft			; if not, branch
	bsr.w	Tails_MoveLeft
; loc_1C0D4:
Obj02_NotLeft:
	btst	#3,(Ctrl_2_Held_Logical).w	; is right being pressed?
	beq.s	Obj02_NotRight			; if not, branch
	bsr.w	Tails_MoveRight
; loc_1C0E0:
Obj02_NotRight:
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0		; is Tails on a slope?
	bne.w	Obj02_ResetScr	; if yes, branch
	tst.w	inertia(a0)	; is Tails moving?
	bne.w	Obj02_ResetScr	; if yes, branch
	bclr	#5,status(a0)
	move.b	#5,anim(a0)	; use "standing" animation
	btst	#3,status(a0)
	beq.s	Tails_Balance
	moveq	#0,d0
	move.b	interact(a0),d0
	lsl.w	#6,d0
	lea	(MainCharacter).w,a1 ; a1=character
	lea	(a1,d0.w),a1 ; a1=object
	tst.b	status(a1)
	bmi.s	Tails_Lookup
	moveq	#0,d1
	move.b	width_pixels(a1),d1
	move.w	d1,d2
	add.w	d2,d2
	subq.w	#4,d2
	add.w	x_pos(a0),d1
	sub.w	x_pos(a1),d1
	cmpi.w	#4,d1
	blt.s	Tails_BalanceOnObjLeft
	cmp.w	d2,d1
	bge.s	Tails_BalanceOnObjRight
	bra.s	Tails_Lookup
; ---------------------------------------------------------------------------
; balancing checks for Tails
; loc_1C142:
Tails_Balance:
	jsr	(ChkFloorEdge).l
	cmpi.w	#$C,d1
	blt.s	Tails_Lookup
	cmpi.b	#3,next_tilt(a0)
	bne.s	Tails_BalanceLeft
; loc_1C156:
Tails_BalanceOnObjRight:
	bclr	#0,status(a0)
	bra.s	Tails_BalanceDone
; ---------------------------------------------------------------------------
; loc_1C15E:
Tails_BalanceLeft:
	cmpi.b	#3,tilt(a0)
	bne.s	Tails_Lookup
; loc_1C166:
Tails_BalanceOnObjLeft:
	bset	#0,status(a0)
; loc_1C16C:
Tails_BalanceDone:
	move.b	#6,anim(a0)
	bra.s	Obj02_ResetScr
; ---------------------------------------------------------------------------
; loc_1C174:
Tails_Lookup:
	btst	#0,(Ctrl_2_Held_Logical).w	; is up being pressed?
	beq.s	Tails_Duck			; if not, branch
	move.b	#7,anim(a0)			; use "looking up" animation
	addq.w	#1,(Tails_Look_delay_counter).w
	cmpi.w	#$78,(Tails_Look_delay_counter).w
	bcs.s	Obj02_ResetScr_Part2
	move.w	#$78,(Tails_Look_delay_counter).w
	cmpi.w	#$C8,(Camera_Y_pos_bias_2P).w
	beq.s	Obj02_UpdateSpeedOnGround
	addq.w	#2,(Camera_Y_pos_bias_2P).w
	bra.s	Obj02_UpdateSpeedOnGround
; ---------------------------------------------------------------------------
; loc_1C1A2:
Tails_Duck:
	btst	#1,(Ctrl_2_Held_Logical).w	; is down being pressed?
	beq.s	Obj02_ResetScr			; if not, branch
	move.b	#8,anim(a0)			; use "ducking" animation
	addq.w	#1,(Tails_Look_delay_counter).w
	cmpi.w	#$78,(Tails_Look_delay_counter).w
	bcs.s	Obj02_ResetScr_Part2
	move.w	#$78,(Tails_Look_delay_counter).w
	cmpi.w	#8,(Camera_Y_pos_bias_2P).w
	beq.s	Obj02_UpdateSpeedOnGround
	subq.w	#2,(Camera_Y_pos_bias_2P).w
	bra.s	Obj02_UpdateSpeedOnGround

; ===========================================================================
; moves the screen back to its normal position after looking up or down
; loc_1C1D0:
Obj02_ResetScr:
	move.w	#0,(Tails_Look_delay_counter).w
; loc_1C1D6:
Obj02_ResetScr_Part2:
	cmpi.w	#$60,(Camera_Y_pos_bias_2P).w	; is screen in its default position?
	beq.s	Obj02_UpdateSpeedOnGround	; if yes, branch.
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias_2P).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias_2P).w	; or subtract 2

; ---------------------------------------------------------------------------
; updates Tails' speed on the ground
; ---------------------------------------------------------------------------
; loc_1C1E8:
Obj02_UpdateSpeedOnGround:
	move.b	(Ctrl_2_Held_Logical).w,d0
	andi.b	#$C,d0		; is left/right pressed?
	bne.s	Obj02_Traction	; if yes, branch
	move.w	inertia(a0),d0
	beq.s	Obj02_Traction
	bmi.s	Obj02_SettleLeft

; slow down when facing right and not pressing a direction
; Obj02_SettleRight:
	sub.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)
	bra.s	Obj02_Traction
; ---------------------------------------------------------------------------
; slow down when facing left and not pressing a direction
; loc_1C208:
Obj02_SettleLeft:
	add.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)

; increase or decrease speed on the ground
; loc_1C214:
Obj02_Traction:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	inertia(a0),d1
	asr.l	#8,d1
	move.w	d1,x_vel(a0)
	muls.w	inertia(a0),d0
	asr.l	#8,d0
	move.w	d0,y_vel(a0)

; stops Tails from running through walls that meet the ground
; loc_1C232:
Obj02_CheckWallsOnGround:
	move.b	angle(a0),d0
	addi.b	#$40,d0
	bmi.s	return_1C2A2
	move.b	#$40,d1
	tst.w	inertia(a0)
	beq.s	return_1C2A2
	bmi.s	+
	neg.w	d1
+
	move.b	angle(a0),d0
	add.b	d1,d0
	move.w	d0,-(sp)
	bsr.w	CalcRoomInFront
	move.w	(sp)+,d0
	tst.w	d1
	bpl.s	return_1C2A2
	asl.w	#8,d1
	addi.b	#$20,d0
	andi.b	#$C0,d0
	beq.s	loc_1C29E
	cmpi.b	#$40,d0
	beq.s	loc_1C28C
	cmpi.b	#$80,d0
	beq.s	loc_1C286
	add.w	d1,x_vel(a0)
	bset	#5,status(a0)
	move.w	#0,inertia(a0)
	rts
; ---------------------------------------------------------------------------

loc_1C286:
	sub.w	d1,y_vel(a0)
	rts
; ---------------------------------------------------------------------------

loc_1C28C:
	sub.w	d1,x_vel(a0)
	bset	#5,status(a0)
	move.w	#0,inertia(a0)
	rts
; ---------------------------------------------------------------------------
loc_1C29E:
	add.w	d1,y_vel(a0)

return_1C2A2:
	rts
; End of subroutine Tails_Move


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C2A4:
Tails_MoveLeft:
	move.w	inertia(a0),d0
	beq.s	+
	bpl.s	Tails_TurnLeft	; if Tails is already moving to the right, branch
+
	bset	#0,status(a0)
	bne.s	+
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
+
	sub.w	d5,d0	; add acceleration to the left
	move.w	d6,d1
	neg.w	d1
	cmp.w	d1,d0	; compare new speed with top speed
	bgt.s	+	; if new speed is less than the maximum, branch
	add.w	d5,d0	; remove this frame's acceleration change
	cmp.w	d1,d0	; compare speed with top speed
	ble.s	+	; if speed was already greater than the maximum, branch
	move.w	d1,d0	; limit speed on ground going left
+
	move.w	d0,inertia(a0)
	move.b	#0,anim(a0)	; use walking animation
	rts
; ---------------------------------------------------------------------------
; loc_1C2DE:
Tails_TurnLeft:
	sub.w	d4,d0
	bcc.s	+
	move.w	#-$80,d0
+
	move.w	d0,inertia(a0)
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	bne.s	return_1C328
	cmpi.w	#$400,d0
	blt.s	return_1C328
	move.b	#$D,anim(a0)	; use "stopping" animation
	bclr	#0,status(a0)
	move.w	#$A4,d0
	jsr	(PlaySound).l
	cmpi.b	#$C,air_left(a0)
	bcs.s	return_1C328	; if he's drowning, branch to not make dust
	move.b	#6,(Tails_Dust+routine).w
	move.b	#$15,(Tails_Dust+mapping_frame).w

return_1C328:
	rts
; End of subroutine Tails_MoveLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C32A:
Tails_MoveRight:
	move.w	inertia(a0),d0
	bmi.s	Tails_TurnRight
	bclr	#0,status(a0)
	beq.s	+
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
+
	add.w	d5,d0	; add acceleration to the right
	cmp.w	d6,d0	; compare new speed with top speed
	blt.s	+	; if new speed is less than the maximum, branch
	sub.w	d5,d0	; remove this frame's acceleration change
	cmp.w	d6,d0	; compare speed with top speed
	bge.s	+	; if speed was already greater than the maximum, branch
	move.w	d6,d0	; limit speed on ground going right
+
	move.w	d0,inertia(a0)
	move.b	#0,anim(a0)	; use walking animation
	rts
; ---------------------------------------------------------------------------
; loc_1C35E:
Tails_TurnRight:
	add.w	d4,d0
	bcc.s	+
	move.w	#$80,d0
+
	move.w	d0,inertia(a0)
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	bne.s	return_1C3A8
	cmpi.w	#-$400,d0
	bgt.s	return_1C3A8
	move.b	#$D,anim(a0)	; use "stopping" animation
	bset	#0,status(a0)
	move.w	#$24+$80,d0	; use "stopping" sound
	jsr	(PlaySound).l
	cmpi.b	#$C,air_left(a0)
	bcs.s	return_1C3A8	; if he's drowning, branch to not make dust
	move.b	#6,(Tails_Dust+routine).w
	move.b	#$15,(Tails_Dust+mapping_frame).w

return_1C3A8:
	rts
; End of subroutine Tails_MoveRight

; ---------------------------------------------------------------------------
; Subroutine to change Tails' speed as he rolls
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C3AA:
Tails_RollSpeed:
	move.w	(Tails_top_speed).w,d6
	asl.w	#1,d6
	move.w	(Tails_acceleration).w,d5
	asr.w	#1,d5	; natural roll deceleration = 1/2 normal acceleration
	move.w	(Tails_deceleration).w,d4
	asr.w	#2,d4	; controlled roll deceleration...
			; interestingly, Tails is much worse at this than Sonic when underwater
	tst.b	status_secondary(a0)
	bmi.w	Obj02_Roll_ResetScr
	tst.w	move_lock(a0)
	bne.s	Tails_ApplyRollSpeed
	btst	#2,(Ctrl_2_Held_Logical).w	; is left being pressed?
	beq.s	+				; if not, branch
	bsr.w	Tails_RollLeft
+
	btst	#3,(Ctrl_2_Held_Logical).w	; is right being pressed?
	beq.s	Tails_ApplyRollSpeed		; if not, branch
	bsr.w	Tails_RollRight

; loc_1C3E2:
Tails_ApplyRollSpeed:
	move.w	inertia(a0),d0
	beq.s	Tails_CheckRollStop
	bmi.s	Tails_ApplyRollSpeedLeft

; Tails_ApplyRollSpeedRight:
	sub.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)
	bra.s	Tails_CheckRollStop
; ---------------------------------------------------------------------------
; loc_1C3F8:
Tails_ApplyRollSpeedLeft:
	add.w	d5,d0
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,inertia(a0)

; loc_1C404
Tails_CheckRollStop:
	tst.w	inertia(a0)
	bne.s	Obj02_Roll_ResetScr
	tst.b	spindash_flag(a0)  ; note: the spindash flag has a different meaning when Tails is already rolling -- it's used to mean he's not allowed to stop rolling
	bne.s	Tails_KeepRolling
	bclr	#2,status(a0)
	move.b	#$F,y_radius(a0) ; sets standing height to only slightly higher than rolling height, unlike Sonic
	move.b	#9,x_radius(a0)
	move.b	#5,anim(a0)
	subq.w	#1,y_pos(a0)
	bra.s	Obj02_Roll_ResetScr

; ---------------------------------------------------------------------------
; magically gives Tails an extra push if he's going to stop rolling where it's not allowed
; (such as in an S-curve in HTZ or a stopper chamber in CNZ)
; loc_1C42E:
Tails_KeepRolling:
	move.w	#$400,inertia(a0)
	btst	#0,status(a0)
	beq.s	Obj02_Roll_ResetScr
	neg.w	inertia(a0)

; resets the screen to normal while rolling, like Obj02_ResetScr
; loc_1C440:
Obj02_Roll_ResetScr:
	cmpi.w	#$60,(Camera_Y_pos_bias_2P).w	; is screen in its default position?
	beq.s	Tails_SetRollSpeed		; if yes, branch
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias_2P).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias_2P).w	; or subtract 2

; loc_1C452:
Tails_SetRollSpeed:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	inertia(a0),d0
	asr.l	#8,d0
	move.w	d0,y_vel(a0)	; set y velocity based on $14 and angle
	muls.w	inertia(a0),d1
	asr.l	#8,d1
	cmpi.w	#$1000,d1
	ble.s	+
	move.w	#$1000,d1	; limit Tails' speed rolling right
+
	cmpi.w	#-$1000,d1
	bge.s	+
	move.w	#-$1000,d1	; limit Tails' speed rolling left
+
	move.w	d1,x_vel(a0)	; set x velocity based on $14 and angle
	bra.w	Obj02_CheckWallsOnGround
; End of function Tails_RollSpeed


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_1C488:
Tails_RollLeft:
	move.w	inertia(a0),d0
	beq.s	+
	bpl.s	Tails_BrakeRollingRight
+
	bset	#0,status(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	rts
; ---------------------------------------------------------------------------
; loc_1C49E:
Tails_BrakeRollingRight:
	sub.w	d4,d0	; reduce rightward rolling speed
	bcc.s	+
	move.w	#-$80,d0
+
	move.w	d0,inertia(a0)
	rts
; End of function Tails_RollLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_1C4AC:
Tails_RollRight:
	move.w	inertia(a0),d0
	bmi.s	Tails_BrakeRollingLeft
	bclr	#0,status(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	rts
; ---------------------------------------------------------------------------
; loc_1C4C0:
Tails_BrakeRollingLeft:
	add.w	d4,d0		; reduce leftward rolling speed
	bcc.s	+
	move.w	#$80,d0
+
	move.w	d0,inertia(a0)
	rts
; End of subroutine Tails_RollRight


; ---------------------------------------------------------------------------
; Subroutine for moving Tails left or right when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C4CE:
Tails_ChgJumpDir:
	move.w	(Tails_top_speed).w,d6
	move.w	(Tails_acceleration).w,d5
	asl.w	#1,d5
	btst	#4,status(a0)		; did Tails jump from rolling?
	bne.s	Obj02_Jump_ResetScr	; if yes, branch to skip midair control
	move.w	x_vel(a0),d0
	btst	#2,(Ctrl_2_Held_Logical).w
	beq.s	+	; if not holding left, branch

	bset	#0,status(a0)
	sub.w	d5,d0	; add acceleration to the left
	move.w	d6,d1
	neg.w	d1
	cmp.w	d1,d0	; compare new speed with top speed
	bgt.s	+	; if new speed is less than the maximum, branch
	move.w	d1,d0	; limit speed in air going left, even if Tails was already going faster (speed limit/cap)
+
	btst	#3,(Ctrl_2_Held_Logical).w
	beq.s	+	; if not holding right, branch

	bclr	#0,status(a0)
	add.w	d5,d0	; accelerate right in the air
	cmp.w	d6,d0	; compare new speed with top speed
	blt.s	+	; if new speed is less than the maximum, branch
	move.w	d6,d0	; limit speed in air going right, even if Tails was already going faster (speed limit/cap)
; Obj02_JumpMove:
+	move.w	d0,x_vel(a0)

; loc_1C518: Obj02_ResetScr2:
Obj02_Jump_ResetScr:
	cmpi.w	#$60,(Camera_Y_pos_bias_2P).w	; is screen in its default position?
	beq.s	Tails_JumpPeakDecelerate			; if yes, branch
	bcc.s	+				; depending on the sign of the difference,
	addq.w	#4,(Camera_Y_pos_bias_2P).w	; either add 2
+	subq.w	#2,(Camera_Y_pos_bias_2P).w	; or subtract 2

; loc_1C52A:
Tails_JumpPeakDecelerate:
	cmpi.w	#-$400,y_vel(a0)	; is Tails moving faster than -$400 upwards?
	bcs.s	return_1C558		; if yes, return
	move.w	x_vel(a0),d0
	move.w	d0,d1
	asr.w	#5,d1		; d1 = x_velocity / 32
	beq.s	return_1C558	; return if d1 is 0
	bmi.s	Tails_JumpPeakDecelerateLeft

; Tails_JumpPeakDecelerateRight:
	sub.w	d1,d0	; reduce x velocity by d1
	bcc.s	+
	move.w	#0,d0
+
	move.w	d0,x_vel(a0)
	rts
; ---------------------------------------------------------------------------
; loc_1C54C:
Tails_JumpPeakDecelerateLeft:
	sub.w	d1,d0	; reduce x velocity by d1
	bcs.s	+
	move.w	#0,d0
+
	move.w	d0,x_vel(a0)

return_1C558:
	rts
; End of subroutine Tails_ChgJumpDir
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to prevent Tails from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C55A:
Tails_LevelBound:
	move.l	x_pos(a0),d1
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d1
	swap	d1
	move.w	(Tails_Min_X_pos).w,d0
	addi.w	#$10,d0
	cmp.w	d1,d0			; has Tails touched the left boundary?
	bhi.s	Tails_Boundary_Sides	; if yes, branch
	move.w	(Tails_Max_X_pos).w,d0
	addi.w	#$128,d0
	tst.b	(Current_Boss_ID).w
	bne.s	+
	addi.w	#$40,d0
+
	cmp.w	d1,d0			; has Tails touched the right boundary?
	bls.s	Tails_Boundary_Sides	; if yes, branch

; loc_1C58C:
Tails_Boundary_CheckBottom:
	move.w	(Tails_Max_Y_pos).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0		; has Tails touched the bottom boundary?
	blt.s	Tails_Boundary_Bottom	; if yes, branch
	rts
; ---------------------------------------------------------------------------
Tails_Boundary_Bottom: ;;
	bra.w	JmpTo2_KillCharacter
; ===========================================================================

; loc_1C5A0:
Tails_Boundary_Sides:
	move.w	d0,x_pos(a0)
	move.w	#0,2+x_pos(a0) ; subpixel x
	move.w	#0,x_vel(a0)
	move.w	#0,inertia(a0)
	bra.s	Tails_Boundary_CheckBottom
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine allowing Tails to start rolling when he's moving
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C5B8:
Tails_Roll:
	tst.b	status_secondary(a0)
	bmi.s	Obj02_NoRoll
	move.w	inertia(a0),d0
	bpl.s	+
	neg.w	d0
+
	cmpi.w	#$80,d0		; is Tails moving at $80 speed or faster?
	bcs.s	Obj02_NoRoll	; if not, branch
	move.b	(Ctrl_2_Held_Logical).w,d0
	andi.b	#$C,d0		; is left/right being pressed?
	bne.s	Obj02_NoRoll	; if yes, branch
	btst	#1,(Ctrl_2_Held_Logical).w	; is down being pressed?
	bne.s	Obj02_ChkRoll			; if yes, branch
; return_1C5DE:
Obj02_NoRoll:
	rts

; ---------------------------------------------------------------------------
; loc_1C5E0:
Obj02_ChkRoll:
	btst	#2,status(a0)	; is Tails already rolling?
	beq.s	Obj02_DoRoll	; if not, branch
	rts

; ---------------------------------------------------------------------------
; loc_1C5EA:
Obj02_DoRoll:
	bset	#2,status(a0)
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)	; use "rolling" animation
	addq.w	#1,y_pos(a0)
	move.w	#$BE,d0
	jsr	(PlaySound).l	; play rolling sound
	tst.w	inertia(a0)
	bne.s	return_1C61C
	move.w	#$200,inertia(a0)

return_1C61C:
	rts
; End of function Tails_Roll


; ---------------------------------------------------------------------------
; Subroutine allowing Tails to jump
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C61E:
Tails_Jump:
	move.b	(Ctrl_2_Press_Logical).w,d0
	andi.b	#$70,d0		; is A, B or C pressed?
	beq.w	return_1C6C2	; if not, return
	moveq	#0,d0
	move.b	angle(a0),d0
	addi.b	#$80,d0
	bsr.w	CalcRoomOverHead
	cmpi.w	#6,d1		; does Tails have enough room to jump?
	blt.w	return_1C6C2	; if not, branch
	move.w	#$680,d2
	btst	#6,status(a0)	; Test if underwater
	beq.s	+
	move.w	#$380,d2	; set lower jump speed if underwater
+
	moveq	#0,d0
	move.b	angle(a0),d0
	subi.b	#$40,d0
	jsr	(CalcSine).l
	muls.w	d2,d1
	asr.l	#8,d1
	add.w	d1,x_vel(a0)	; make Tails jump (in X... this adds nothing on level ground)
	muls.w	d2,d0
	asr.l	#8,d0
	add.w	d0,y_vel(a0)	; make Tails jump (in Y)
	bset	#1,status(a0)
	bclr	#5,status(a0)
	addq.l	#4,sp
	move.b	#1,jumping(a0)
	clr.b	stick_to_convex(a0)
	move.w	#$A0,d0
	jsr	(PlaySound).l	; play jumping sound
	move.b	#$F,y_radius(a0)
	move.b	#9,x_radius(a0)
	btst	#2,status(a0)
	bne.s	Tails_RollJump
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)	; use "jumping" animation
	bset	#2,status(a0)
	addq.w	#1,y_pos(a0)

return_1C6C2:
	rts
; ---------------------------------------------------------------------------
; loc_1C6C4:
Tails_RollJump:
	bset	#4,status(a0) ; set the rolling+jumping flag
	rts
; End of function Tails_Jump


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ===========================================================================
; loc_1C6CC:
Tails_JumpHeight:
	tst.b	jumping(a0)	; is Tails jumping?
	beq.s	Tails_UpVelCap	; if not, branch

	move.w	#-$400,d1
	btst	#6,status(a0)	; is Tails underwater?
	beq.s	+		; if not, branch
	move.w	#-$200,d1
+
	cmp.w	y_vel(a0),d1	; is Tails going up faster than d1?
	ble.s	+		; if not, branch
	move.b	(Ctrl_2_Held_Logical).w,d0
	andi.b	#$70,d0		; is a jump button pressed?
	bne.s	+		; if yes, branch
	move.w	d1,y_vel(a0)	; immediately reduce Tails's upward speed to d1
+
	rts
; ---------------------------------------------------------------------------
; loc_1C6F8:
Tails_UpVelCap:
	tst.b	spindash_flag(a0)	; is Tails charging a spindash or in a rolling-only area?
	bne.s	return_1C70C		; if yes, return
	cmpi.w	#-$FC0,y_vel(a0)	; is Tails moving up really fast?
	bge.s	return_1C70C		; if not, return
	move.w	#-$FC0,y_vel(a0)	; cap upward speed

return_1C70C:
	rts
; End of subroutine Tails_JumpHeight

; ---------------------------------------------------------------------------
; Subroutine to check for starting to charge a spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C70E:
Tails_CheckSpindash:
	tst.b	spindash_flag(a0)
	bne.s	Tails_UpdateSpindash
	cmpi.b	#8,anim(a0)
	bne.s	return_1C75C
	move.b	(Ctrl_2_Press_Logical).w,d0
	andi.b	#$70,d0
	beq.w	return_1C75C
	move.b	#9,anim(a0)
	move.w	#$E0,d0
	jsr	(PlaySound).l
	addq.l	#4,sp
	move.b	#1,spindash_flag(a0)
	move.w	#0,spindash_counter(a0)
	cmpi.b	#$C,air_left(a0)	; if he's drowning, branch to not make dust
	bcs.s	loc_1C754
	move.b	#2,(Tails_Dust+anim).w

loc_1C754:
	bsr.w	Tails_LevelBound
	bsr.w	AnglePos

return_1C75C:
	rts
; End of subroutine Tails_CheckSpindash


; ---------------------------------------------------------------------------
; Subrouting to update an already-charging spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C75E:
Tails_UpdateSpindash:
	move.b	(Ctrl_2_Held_Logical).w,d0
	btst	#1,d0
	bne.s	Tails_ChargingSpindash

	; unleash the charged spindash and start rolling quickly:
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.b	#2,anim(a0)
	addq.w	#1,y_pos(a0)	; add the difference between Tails' rolling and standing heights
	move.b	#0,spindash_flag(a0)
	moveq	#0,d0
	move.b	spindash_counter(a0),d0
	add.w	d0,d0
	move.w	Tails_SpindashSpeeds(pc,d0.w),inertia(a0)
	move.w	inertia(a0),d0
	subi.w	#$800,d0
	add.w	d0,d0
	andi.w	#$1F00,d0
	neg.w	d0
	addi.w	#$2000,d0
	move.w	d0,($FFFFEED4).w
	btst	#0,status(a0)
	beq.s	+
	neg.w	inertia(a0)
+
	bset	#2,status(a0)
	move.b	#0,(Tails_Dust+anim).w
	move.w	#$3C+$80,d0	; spindash zoom sound
	jsr	(PlaySound).l
	bra.s	loc_1C828
; ===========================================================================
; word_1C7CE:
Tails_SpindashSpeeds:
	dc.w  $800	; 0
	dc.w  $880	; 1
	dc.w  $900	; 2
	dc.w  $980	; 3
	dc.w  $A00	; 4
	dc.w  $A80	; 5
	dc.w  $B00	; 6
	dc.w  $B80	; 7
	dc.w  $C00	; 8
; ===========================================================================
; loc_1C7E0:
Tails_ChargingSpindash:			; If still charging the dash...
	tst.w	spindash_counter(a0)
	beq.s	loc_1C7F8
	move.w	spindash_counter(a0),d0
	lsr.w	#5,d0
	sub.w	d0,spindash_counter(a0)
	bcc.s	loc_1C7F8
	move.w	#0,spindash_counter(a0)

loc_1C7F8:
	move.b	(Ctrl_2_Press_Logical).w,d0
	andi.b	#$70,d0
	beq.w	loc_1C828
	move.w	#$900,anim(a0)
	move.w	#$E0,d0
	jsr	(PlaySound).l
	addi.w	#$200,spindash_counter(a0)
	cmpi.w	#$800,spindash_counter(a0)
	bcs.s	loc_1C828
	move.w	#$800,spindash_counter(a0)

loc_1C828:
	addq.l	#4,sp
	cmpi.w	#$60,(Camera_Y_pos_bias_2P).w
	beq.s	loc_1C83C
	bcc.s	+
	addq.w	#4,(Camera_Y_pos_bias_2P).w
+	subq.w	#2,(Camera_Y_pos_bias_2P).w

loc_1C83C:
	bsr.w	Tails_LevelBound
	bsr.w	AnglePos
	rts
; End of subroutine Tails_UpdateSpindash


; ---------------------------------------------------------------------------
; Subroutine to slow Tails walking up a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C846:
Tails_SlopeResist:
	move.b	angle(a0),d0
	addi.b	#$60,d0
	cmpi.b	#$C0,d0
	bcc.s	return_1C87A
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	#$20,d0
	asr.l	#8,d0
	tst.w	inertia(a0)
	beq.s	return_1C87A
	bmi.s	loc_1C876
	tst.w	d0
	beq.s	+
	add.w	d0,inertia(a0)	; change Tails' $14
+
	rts
; ---------------------------------------------------------------------------

loc_1C876:
	add.w	d0,inertia(a0)

return_1C87A:
	rts
; End of subroutine Tails_SlopeResist

; ---------------------------------------------------------------------------
; Subroutine to push Tails down a slope while he's rolling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C87C:
Tails_RollRepel:
	move.b	angle(a0),d0
	addi.b	#$60,d0
	cmpi.b	#-$40,d0
	bcc.s	return_1C8B6
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	#$50,d0
	asr.l	#8,d0
	tst.w	inertia(a0)
	bmi.s	loc_1C8AC
	tst.w	d0
	bpl.s	loc_1C8A6
	asr.l	#2,d0

loc_1C8A6:
	add.w	d0,inertia(a0)
	rts
; ===========================================================================

loc_1C8AC:
	tst.w	d0
	bmi.s	loc_1C8B2
	asr.l	#2,d0

loc_1C8B2:
	add.w	d0,inertia(a0)

return_1C8B6:
	rts
; End of function Tails_RollRepel

; ---------------------------------------------------------------------------
; Subroutine to push Tails down a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C8B8:
Tails_SlopeRepel:
	nop
	tst.b	stick_to_convex(a0)
	bne.s	return_1C8F2
	tst.w	move_lock(a0)
	bne.s	loc_1C8F4
	move.b	angle(a0),d0
	addi.b	#$20,d0
	andi.b	#$C0,d0
	beq.s	return_1C8F2
	move.w	inertia(a0),d0
	bpl.s	loc_1C8DC
	neg.w	d0

loc_1C8DC:
	cmpi.w	#$280,d0
	bcc.s	return_1C8F2
	clr.w	inertia(a0)
	bset	#1,status(a0)
	move.w	#$1E,move_lock(a0)

return_1C8F2:
	rts
; ===========================================================================

loc_1C8F4:
	subq.w	#1,move_lock(a0)
	rts
; End of function Tails_SlopeRepel

; ---------------------------------------------------------------------------
; Subroutine to return Tails' angle to 0 as he jumps
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C8FA:
Tails_JumpAngle:
	move.b	angle(a0),d0	; get Tails' angle
	beq.s	Tails_JumpFlip	; if already 0, branch
	bpl.s	loc_1C90A	; if higher than 0, branch

	addq.b	#2,d0		; increase angle
	bcc.s	BranchTo_Tails_JumpAngleSet
	moveq	#0,d0

BranchTo_Tails_JumpAngleSet 
	bra.s	Tails_JumpAngleSet
; ===========================================================================

loc_1C90A:
	subq.b	#2,d0		; decrease angle
	bcc.s	Tails_JumpAngleSet
	moveq	#0,d0

; loc_1C910:
Tails_JumpAngleSet:
	move.b	d0,angle(a0)
; End of function Tails_JumpAngle
	; continue straight to Tails_JumpFlip

; ---------------------------------------------------------------------------
; Updates Tails' secondary angle if he's tumbling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C914:
Tails_JumpFlip:
	move.b	flip_angle(a0),d0
	beq.s	return_1C958
	tst.w	inertia(a0)
	bmi.s	Tails_JumpLeftFlip
; loc_1C920:
Tails_JumpRightFlip:
	move.b	flip_speed(a0),d1
	add.b	d1,d0
	bcc.s	BranchTo_Tails_JumpFlipSet
	subq.b	#1,flips_remaining(a0)
	bcc.s	BranchTo_Tails_JumpFlipSet
	move.b	#0,flips_remaining(a0)
	moveq	#0,d0

BranchTo_Tails_JumpFlipSet 
	bra.s	Tails_JumpFlipSet
; ===========================================================================
; loc_1C938:
Tails_JumpLeftFlip:
	tst.b	flip_turned(a0)
	bne.s	Tails_JumpRightFlip
	move.b	flip_speed(a0),d1
	sub.b	d1,d0
	bcc.s	Tails_JumpFlipSet
	subq.b	#1,flips_remaining(a0)
	bcc.s	Tails_JumpFlipSet
	move.b	#0,flips_remaining(a0)
	moveq	#0,d0
; loc_1C954:
Tails_JumpFlipSet:
	move.b	d0,flip_angle(a0)

return_1C958:
	rts
; End of function Tails_JumpFlip

; ---------------------------------------------------------------------------
; Subroutine for Tails to interact with the floor and walls when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1C95A: Tails_Floor:
Tails_DoLevelCollision:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer_plus(a0),d5
	move.w	x_vel(a0),d1
	move.w	y_vel(a0),d2
	jsr	(CalcAngle).l
	subi.b	#$20,d0
	andi.b	#$C0,d0
	cmpi.b	#$40,d0
	beq.w	Tails_HitLeftWall
	cmpi.b	#$80,d0
	beq.w	Tails_HitCeilingAndWalls
	cmpi.b	#-$40,d0
	beq.w	Tails_HitRightWall
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	+
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
+
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	+
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
+
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1CA3A
	move.b	y_vel(a0),d2
	addq.b	#8,d2
	neg.b	d2
	cmp.b	d2,d1
	bge.s	+
	cmp.b	d2,d0
	blt.s	return_1CA3A
+
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Tails_ResetOnFloor
	move.b	d3,d0
	addi.b	#$20,d0
	andi.b	#$40,d0
	bne.s	loc_1CA18
	move.b	d3,d0
	addi.b	#$10,d0
	andi.b	#$20,d0
	beq.s	loc_1CA0A
	asr	y_vel(a0)
	bra.s	loc_1CA2C
; ===========================================================================

loc_1CA0A:
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)
	rts
; ===========================================================================

loc_1CA18:
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
	cmpi.w	#$FC0,y_vel(a0)
	ble.s	loc_1CA2C
	move.w	#$FC0,y_vel(a0)

loc_1CA2C:
	move.w	y_vel(a0),inertia(a0)
	tst.b	d3
	bpl.s	return_1CA3A
	neg.w	inertia(a0)

return_1CA3A:
	rts
; ===========================================================================
; loc_1CA3C:
Tails_HitLeftWall:
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	Tails_HitCeiling ; branch if distance is positive (not inside wall)
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
	move.w	y_vel(a0),inertia(a0)
	rts
; ===========================================================================
; loc_1CA56:
Tails_HitCeiling:
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	Tails_HitFloor	; branch if distance is positive (not inside ceiling)
	sub.w	d1,y_pos(a0)
	tst.w	y_vel(a0)
	bpl.s	return_1CA6E
	move.w	#0,y_vel(a0)	; stop Tails in y since he hit a ceiling

return_1CA6E:
	rts
; ===========================================================================
; loc_1CA70:
Tails_HitFloor:
	tst.w	y_vel(a0)
	bmi.s	return_1CA96
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1CA96
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Tails_ResetOnFloor
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)

return_1CA96:
	rts
; ===========================================================================
; loc_1CA98:
Tails_HitCeilingAndWalls:
	bsr.w	CheckLeftWallDist
	tst.w	d1
	bpl.s	+
	sub.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
+
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	+
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
+
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	return_1CAF2
	sub.w	d1,y_pos(a0)
	move.b	d3,d0
	addi.b	#$20,d0
	andi.b	#$40,d0
	bne.s	loc_1CADC
	move.w	#0,y_vel(a0)	; stop Tails in y since he hit a ceiling
	rts
; ===========================================================================

loc_1CADC:
	move.b	d3,angle(a0)
	bsr.w	Tails_ResetOnFloor
	move.w	y_vel(a0),inertia(a0)
	tst.b	d3
	bpl.s	return_1CAF2
	neg.w	inertia(a0)

return_1CAF2:
	rts
; ===========================================================================
; loc_1CAF4:
Tails_HitRightWall:
	bsr.w	CheckRightWallDist
	tst.w	d1
	bpl.s	Tails_HitCeiling2
	add.w	d1,x_pos(a0)
	move.w	#0,x_vel(a0)	; stop Tails since he hit a wall
	move.w	y_vel(a0),inertia(a0)
	rts
; ===========================================================================
; identical to Tails_HitCeiling...
; loc_1CB0E:
Tails_HitCeiling2:
	bsr.w	CheckCeilingDist
	tst.w	d1
	bpl.s	Tails_HitFloor2
	sub.w	d1,y_pos(a0)
	tst.w	y_vel(a0)
	bpl.s	return_1CB26
	move.w	#0,y_vel(a0)	; stop Tails in y since he hit a ceiling

return_1CB26:
	rts
; ===========================================================================
; identical to Tails_HitFloor...
; loc_1CB28:
Tails_HitFloor2:
	tst.w	y_vel(a0)
	bmi.s	return_1CB4E
	bsr.w	Sonic_CheckFloor
	tst.w	d1
	bpl.s	return_1CB4E
	add.w	d1,y_pos(a0)
	move.b	d3,angle(a0)
	bsr.w	Tails_ResetOnFloor
	move.w	#0,y_vel(a0)
	move.w	x_vel(a0),inertia(a0)

return_1CB4E:
	rts
; End of function Tails_DoLevelCollision



; ---------------------------------------------------------------------------
; Subroutine to reset Tails' mode when he lands on the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1CB50:
Tails_ResetOnFloor:
	tst.b	spindash_flag(a0)
	bne.s	Tails_ResetOnFloor_Part3
	move.b	#0,anim(a0)
; loc_1CB5C:
Tails_ResetOnFloor_Part2:
	btst	#2,status(a0)
	beq.s	Tails_ResetOnFloor_Part3
	bclr	#2,status(a0)
	move.b	#$F,y_radius(a0) ; this slightly increases Tails' collision height to standing
	move.b	#9,x_radius(a0)
	move.b	#0,anim(a0)	; use running/walking/standing animation
	subq.w	#1,y_pos(a0)	; move Tails up 1 pixel so the increased height doesn't push him slightly into the ground
; loc_1CB80:
Tails_ResetOnFloor_Part3:
	bclr	#1,status(a0)
	bclr	#5,status(a0)
	bclr	#4,status(a0)
	move.b	#0,jumping(a0)
	move.w	#0,(Chain_Bonus_counter).w
	move.b	#0,flip_angle(a0)
	move.b	#0,flip_turned(a0)
	move.b	#0,flips_remaining(a0)
	move.w	#0,(Tails_Look_delay_counter).w
	cmpi.b	#$14,anim(a0)
	bne.s	return_1CBC4
	move.b	#0,anim(a0)

return_1CBC4:
	rts
; End of subroutine Tails_ResetOnFloor

; ===========================================================================
; ---------------------------------------------------------------------------
; Tails when he gets hurt
; ---------------------------------------------------------------------------
; loc_1CBC6:
Obj02_Hurt:
	jsr	ObjectMove
	addi.w	#$30,y_vel(a0)
	btst	#6,status(a0)
	beq.s	+
	subi.w	#$20,y_vel(a0)
+
	cmpi.w	#-$100,(Camera_Min_Y_pos).w
	bne.s	+
	andi.w	#$7FF,y_pos(a0)
+
	bsr.w	Tails_HurtStop
	bsr.w	Tails_LevelBound
	bsr.w	Tails_RecordPos
	bsr.w	Tails_Animate
	bsr.w	LoadTailsDynPLC
	jmp	DisplaySprite
; ===========================================================================
; loc_1CC08:
Tails_HurtStop:
	move.w	(Tails_Max_Y_pos).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	blt.w	JmpTo2_KillCharacter
	bsr.w	Tails_DoLevelCollision
	btst	#1,status(a0)
	bne.s	return_1CC4E
	moveq	#0,d0
	move.w	d0,y_vel(a0)
	move.w	d0,x_vel(a0)
	move.w	d0,inertia(a0)
	move.b	d0,obj_control(a0)
	move.b	#0,anim(a0)
	move.b	#2,routine(a0)	; => Obj02_Control
	move.w	#$78,invulnerable_time(a0)
	move.b	#0,spindash_flag(a0)

return_1CC4E:
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Tails when he dies
; .
; ---------------------------------------------------------------------------

; loc_1CC50:
Obj02_Dead:
	bsr.w	Obj02_CheckGameOver
	jsr	ObjectMoveAndFall
	bsr.w	Tails_RecordPos
	bsr.w	Tails_Animate
	bsr.w	LoadTailsDynPLC
	jmp	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1CC6C:
Obj02_CheckGameOver:
	cmpi.w	#2,(Player_mode).w	; is it a Tails Alone game?
	beq.w	CheckGameOver		; if yes, branch... goodness, code reuse
	move.b	#1,($FFFFEEBF).w
	move.b	#0,spindash_flag(a0)
	move.w	(Tails_Max_Y_pos).w,d0
	addi.w	#$100,d0
	cmp.w	y_pos(a0),d0
	bge.w	return_1CD8E
	move.b	#2,routine(a0)
	tst.w	(Two_player_mode).w
	bne.s	Obj02_CheckGameOver_2Pmode
	bra.w	TailsCPU_Despawn
; ---------------------------------------------------------------------------
; loc_1CCA2:
Obj02_CheckGameOver_2Pmode:
	addq.b	#1,(Update_HUD_lives_2P).w
	subq.b	#1,(Life_count_2P).w
	bne.s	Obj02_ResetLevel
	move.w	#0,spindash_counter(a0)
	move.b	#$39,(Object_RAM+$80).w ; load Obj39
	move.b	#$39,(Object_RAM+$C0).w ; load Obj39
	move.b	#1,(Object_RAM+$C0+mapping_frame).w
	move.w	a0,(Object_RAM+$80+parent).w
	clr.b	(Time_Over_flag_2P).w
; loc_1CCCC:
Obj02_Finished:
	clr.b	(Update_HUD_timer).w
	clr.b	(Update_HUD_timer_2P).w
	move.b	#8,routine(a0)
	move.w	#$9B,d0
	jsr	(PlayMusic).l
	moveq	#3,d0
	jmp	(LoadPLC).l
; End of function Obj02_CheckGameOver

; ===========================================================================
; ---------------------------------------------------------------------------
; Tails when the level is restarted
; ---------------------------------------------------------------------------
; loc_1CCEC:
Obj02_ResetLevel:
	tst.b	(Time_Over_flag).w
	beq.s	Obj02_ResetLevel_Part2
	tst.b	(Time_Over_flag_2P).w
	beq.s	Obj02_ResetLevel_Part3
	move.w	#0,spindash_counter(a0)
	clr.b	(Update_HUD_timer).w
	clr.b	(Update_HUD_timer_2P).w
	move.b	#8,routine(a0)
	rts
; ---------------------------------------------------------------------------
Obj02_ResetLevel_Part2:
	tst.b	(Time_Over_flag_2P).w
	beq.s	Obj02_ResetLevel_Part3
	move.w	#0,spindash_counter(a0)
	move.b	#$39,(Object_RAM+$80).w ; load Obj39
	move.b	#$39,(Object_RAM+$C0).w ; load Obj39
	move.b	#2,(Object_RAM+$80+mapping_frame).w
	move.b	#3,(Object_RAM+$C0+mapping_frame).w
	move.w	a0,(Object_RAM+$80+parent).w
	bra.s	Obj02_Finished
; ---------------------------------------------------------------------------
Obj02_ResetLevel_Part3:
	move.b	#0,($FFFFEEBF).w
	move.b	#$A,routine(a0)	; => Obj02_Respawning
	move.w	(Saved_x_pos_2P).w,x_pos(a0)
	move.w	(Saved_y_pos_2P).w,y_pos(a0)
	move.w	(Saved_art_tile_2P).w,art_tile(a0)
	move.w	(Saved_layer_2P).w,layer(a0)
	clr.w	(Ring_count_2P).w
	clr.b	(Extra_life_flags_2P).w
	move.b	#0,obj_control(a0)
	move.b	#5,anim(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	move.w	#0,inertia(a0)
	move.b	#2,status(a0)
	move.w	#0,move_lock(a0)

return_1CD8E:
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Tails when he's offscreen and waiting for the level to restart
; ---------------------------------------------------------------------------
; loc_1CD90:
Obj02_Gone:
	tst.w	spindash_counter(a0)
	beq.s	+
	subq.w	#1,spindash_counter(a0)
	bne.s	+
	move.w	#1,(Level_Inactive_flag).w
+
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Tails when he's waiting for the camera to scroll back to where he respawned
; ---------------------------------------------------------------------------
; loc_1CDA4:
Obj02_Respawning:
	tst.w	($FFFFEEB8).w
	bne.s	+
	tst.w	($FFFFEEBA).w
	bne.s	+
	move.b	#2,routine(a0)
+
	bsr.w	Tails_Animate
	bsr.w	LoadTailsDynPLC
	jmp	DisplaySprite
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to animate Tails' sprites
; See also: AnimateSprite and Sonic_Animate
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1CDC4:
Tails_Animate:
	lea	(TailsAniData).l,a1
; loc_1CDCA:
Tails_Animate_Part2:
	moveq	#0,d0
	move.b	anim(a0),d0
	cmp.b	next_anim(a0),d0	; has animation changed?
	beq.s	TAnim_Do		; if not, branch
	move.b	d0,next_anim(a0)	; set to next animation
	move.b	#0,anim_frame(a0)	; reset animation frame
	move.b	#0,anim_frame_duration(a0)	; reset frame duration
	bclr	#5,status(a0)
; loc_1CDEC:
TAnim_Do:
	add.w	d0,d0
	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
	move.b	(a1),d0
	bmi.s	TAnim_WalkRunZoom	; if animation is walk/run/roll/jump, branch
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
	bpl.s	TAnim_Delay			; if time remains, branch
	move.b	d0,anim_frame_duration(a0)	; load frame duration
; loc_1CE12:
TAnim_Do2:
	moveq	#0,d1
	move.b	anim_frame(a0),d1	; load current frame number
	move.b	1(a1,d1.w),d0		; read sprite number from script
	cmpi.b	#$F0,d0
	bcc.s	TAnim_End_FF		; if animation is complete, branch
; loc_1CE22:
TAnim_Next:
	move.b	d0,mapping_frame(a0)
	addq.b	#1,anim_frame(a0)
; return_1CE2A:
TAnim_Delay:
	rts
; ===========================================================================
; loc_1CE2C:
TAnim_End_FF:
	addq.b	#1,d0			; is the end flag = $FF ?
	bne.s	TAnim_End_FE		; if not, branch
	move.b	#0,anim_frame(a0)	; restart the animation
	move.b	1(a1),d0        	; read sprite number
	bra.s	TAnim_Next
; ===========================================================================
; loc_1CE3C:
TAnim_End_FE:
	addq.b	#1,d0			; is the end flag = $FE ?
	bne.s	TAnim_End_FD		; if not, branch
	move.b	2(a1,d1.w),d0		; read the next byte in the script
	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
	sub.b	d0,d1
	move.b	1(a1,d1.w),d0		; read sprite number
	bra.s	TAnim_Next
; ===========================================================================
; loc_1CE50:
TAnim_End_FD:
	addq.b	#1,d0			; is the end flag = $FD ?
	bne.s	TAnim_End		; if not, branch
	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
; return_1CE5A:
TAnim_End:
	rts
; ===========================================================================
; loc_1CE5C:
TAnim_WalkRunZoom: ; a0=character
	; note: for some reason SAnim_WalkRun doesn't need to do this here...
	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from Tails' frame duration
	bpl.s	TAnim_Delay			; if time remains, branch

	addq.b	#1,d0		; is the end flag = $FF ?
	bne.w	TAnim_Roll	; if not, branch
	moveq	#0,d0		; is animation walking/running?
	move.b	flip_angle(a0),d0	; if not, branch
	bne.w	loc_1CF08
	moveq	#0,d1
	move.b	angle(a0),d0	; get Tails' angle
	bmi.s	+
	beq.s	+
	subq.b	#1,d0
+
	move.b	status(a0),d2
	andi.b	#1,d2		; is Tails mirrored horizontally?
	bne.s	+		; if yes, branch
	not.b	d0		; reverse angle
+
	addi.b	#$10,d0		; add $10 to angle
	bpl.s	+		; if angle is $0-$7F, branch
	moveq	#3,d1
+
	andi.b	#$FC,render_flags(a0)
	eor.b	d1,d2
	or.b	d2,render_flags(a0)
	btst	#5,status(a0)
	bne.w	loc_1CFB2
	lsr.b	#4,d0		; divide angle by 16
	andi.b	#6,d0		; make it 0, 2, 4 or 6
	move.w	inertia(a0),d2	; get Tails' "speed" for animation purposes
	bpl.s	+
	neg.w	d2
+
	tst.b	status_secondary(a0)
	bpl.w	+
	add.w	d2,d2
+
	move.b	d0,d3
	add.b	d3,d3
	add.b	d3,d3
	lea	(TailsAni_Walk).l,a1

	cmpi.w	#$600,d2		; is Tails going pretty fast?
	bcs.s	TAnim_SpeedSelected	; if not, branch
	lea	(TailsAni_Run).l,a1
	move.b	d0,d1
	lsr.b	#1,d1
	add.b	d1,d0
	add.b	d0,d0
	move.b	d0,d3

	cmpi.w	#$700,d2		; is Tails going really fast?
	bcs.s	TAnim_SpeedSelected	; if not, branch
	lea	(TailsAni_HaulAss).l,a1

; loc_1CEEE:
TAnim_SpeedSelected:
	neg.w	d2
	addi.w	#$800,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#8,d2
	move.b	d2,anim_frame_duration(a0)
	bsr.w	TAnim_Do2
	add.b	d3,mapping_frame(a0)
	rts
; ===========================================================================

loc_1CF08:
	move.b	flip_angle(a0),d0
	moveq	#0,d1
	move.b	status(a0),d2
	andi.b	#1,d2
	bne.s	loc_1CF36
	andi.b	#$FC,render_flags(a0)
	addi.b	#$B,d0
	divu.w	#$16,d0
	addi.b	#$75,d0
	move.b	d0,mapping_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_1CF36:
	andi.b	#$FC,render_flags(a0)
	tst.b	flip_turned(a0)
	beq.s	loc_1CF4E
	ori.b	#1,render_flags(a0)
	addi.b	#$B,d0
	bra.s	loc_1CF5A
; ===========================================================================

loc_1CF4E:
	ori.b	#3,render_flags(a0)
	neg.b	d0
	addi.b	#-$71,d0

loc_1CF5A:
	divu.w	#$16,d0
	addi.b	#$75,d0
	move.b	d0,mapping_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	rts

; ===========================================================================
; loc_1CF6E:
TAnim_Roll:
	addq.b	#1,d0		; is the end flag = $FE ?
	bne.s	TAnim_Push	; if not, branch
	move.w	inertia(a0),d2
	bpl.s	+
	neg.w	d2
+
	lea	(TailsAni_Roll2).l,a1
	cmpi.w	#$600,d2
	bcc.s	+
	lea	(TailsAni_Roll).l,a1
+
	neg.w	d2
	addi.w	#$400,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#8,d2
	move.b	d2,anim_frame_duration(a0)
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	bra.w	TAnim_Do2
; ===========================================================================

loc_1CFB2:
	move.w	inertia(a0),d2
	bmi.s	+
	neg.w	d2
+
	addi.w	#$800,d2
	bpl.s	+
	moveq	#0,d2
+
	lsr.w	#6,d2
	move.b	d2,anim_frame_duration(a0)
	lea	(TailsAni_Push).l,a1
	move.b	status(a0),d1
	andi.b	#1,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	bra.w	TAnim_Do2

; ===========================================================================
; loc_1CFE4:
TAnim_Push:
	move.w	x_vel(a2),d1
	move.w	y_vel(a2),d2
	jsr	(CalcAngle).l
	moveq	#0,d1
	move.b	status(a0),d2
	andi.b	#1,d2
	bne.s	loc_1D002
	not.b	d0
	bra.s	loc_1D006
; ===========================================================================

loc_1D002:
	addi.b	#$80,d0

loc_1D006:
	addi.b	#$10,d0
	bpl.s	+
	moveq	#3,d1
+
	andi.b	#$FC,render_flags(a0)
	eor.b	d1,d2
	or.b	d2,render_flags(a0)
	lsr.b	#3,d0
	andi.b	#$C,d0
	move.b	d0,d3
	lea	(Obj05Ani_Directional).l,a1
	move.b	#3,anim_frame_duration(a0)
	bsr.w	TAnim_Do2
	add.b	d3,mapping_frame(a0)
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Animation script - Tails
; ---------------------------------------------------------------------------
; off_1D038:
TailsAniData:
	dc.w TailsAni_Walk - TailsAniData	; 0
	dc.w TailsAni_Run - TailsAniData	; 1
	dc.w TailsAni_Roll - TailsAniData	; 2
	dc.w TailsAni_Roll2 - TailsAniData	; 3
	dc.w TailsAni_Push - TailsAniData	; 4
	dc.w TailsAni_Wait - TailsAniData	; 5
	dc.w TailsAni_Balance - TailsAniData	; 6
	dc.w TailsAni_LookUp - TailsAniData	; 7
	dc.w TailsAni_Duck - TailsAniData	; 8
	dc.w TailsAni_Spindash - TailsAniData	; 9
	dc.w TailsAni_Dummy1 - TailsAniData	; 10 ; $A
	dc.w TailsAni_Dummy2 - TailsAniData	; 11 ; $B
	dc.w TailsAni_Dummy3 - TailsAniData	; 12 ; $C
	dc.w TailsAni_Stop - TailsAniData	; 13 ; $D
	dc.w TailsAni_Float - TailsAniData	; 14 ; $E
	dc.w TailsAni_Float2 - TailsAniData	; 15 ; $F
	dc.w TailsAni_Spring - TailsAniData	; 16 ; $10
	dc.w TailsAni_Hang - TailsAniData	; 17 ; $11
	dc.w TailsAni_Blink - TailsAniData	; 18 ; $12
	dc.w TailsAni_Blink2 - TailsAniData	; 19 ; $13
	dc.w TailsAni_Hang2 - TailsAniData	; 20 ; $14
	dc.w TailsAni_Bubble - TailsAniData	; 21 ; $15
	dc.w TailsAni_Death3 - TailsAniData	; 22 ; $16
	dc.w TailsAni_Drown - TailsAniData	; 23 ; $17
	dc.w TailsAni_Death - TailsAniData	; 24 ; $18
	dc.w TailsAni_Death2 - TailsAniData	; 25 ; $19
	dc.w TailsAni_Hurt - TailsAniData	; 26 ; $1A
	dc.w TailsAni_Slide - TailsAniData	; 27 ; $1B
	dc.w TailsAni_Blank - TailsAniData	; 28 ; $1C
	dc.w TailsAni_Dummy4 - TailsAniData	; 29 ; $1D
	dc.w TailsAni_Dummy5 - TailsAniData	; 30 ; $1E
	dc.w TailsAni_HaulAss - TailsAniData	; 31 ; $1F
	dc.w TailsAni_Fly - TailsAniData	; 32 ; $20
TailsAni_Walk:	dc.b $FF,$10,$11,$12,$13,$14,$15, $E, $F,$FF
TailsAni_Run:	dc.b $FF,$2E,$2F,$30,$31,$FF,$FF,$FF,$FF,$FF
TailsAni_Roll:	dc.b   1,$48,$47,$46,$FF
TailsAni_Roll2:	dc.b   1,$48,$47,$46,$FF
TailsAni_Push:	dc.b $FD,$63,$64,$65,$66,$FF,$FF,$FF,$FF,$FF
TailsAni_Wait:	dc.b   7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  2,  1,  1,  1
		dc.b   1,  1,  1,  1,  1,  3,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
		dc.b   6,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  6,$FE,$1C
TailsAni_Balance:	dc.b   9,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A
			dc.b $6A,$69,$69,$6A,$6A,$69,$6A,$FF
TailsAni_LookUp:	dc.b $3F,  4,$FF
TailsAni_Duck:		dc.b $3F,$5B,$FF
TailsAni_Spindash:	dc.b   0,$60,$61,$62,$FF
TailsAni_Dummy1:	dc.b $3F,$82,$FF
TailsAni_Dummy2:	dc.b   7,  8,  8,  9,$FD,  5
TailsAni_Dummy3:	dc.b   7,  9,$FD,  5
TailsAni_Stop:		dc.b   7,$67,$68,$67,$68,$FD,  0
TailsAni_Float:		dc.b   9,$6E,$73,$FF
TailsAni_Float2:	dc.b   9,$6E,$6F,$70,$71,$72,$FF
TailsAni_Spring:	dc.b   3,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$FD,  0
TailsAni_Hang:		dc.b   5,$6C,$6D,$FF
TailsAni_Blink:		dc.b  $F,  1,  2,  3,$FE,  1
TailsAni_Blink2:	dc.b  $F,  1,  2,$FE,  1
TailsAni_Hang2:		dc.b $13,$85,$86,$FF
TailsAni_Bubble:	dc.b  $B,$74,$74,$12,$13,$FD,  0
TailsAni_Death3:	dc.b $20,$5D,$FF
TailsAni_Drown:		dc.b $2F,$5D,$FF
TailsAni_Death:		dc.b   3,$5D,$FF
TailsAni_Death2:	dc.b   3,$5D,$FF
TailsAni_Hurt:		dc.b   3,$5C,$FF
TailsAni_Slide:		dc.b   9,$6B,$5C,$FF
TailsAni_Blank:		dc.b $77,  0,$FD,  0
TailsAni_Dummy4:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF
TailsAni_Dummy5:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF
TailsAni_HaulAss:	dc.b $FF,$32,$33,$FF
			dc.b $FF,$FF,$FF,$FF,$FF,$FF
TailsAni_Fly:		dc.b   1,$5E,$5F,$FF
	even
; ===========================================================================

; ---------------------------------------------------------------------------
; Tails' Tails pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1D184:
LoadTailsTailsDynPLC:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	cmp.b	($FFFFF7DF).w,d0
	beq.s	return_1D1FE
	move.b	d0,($FFFFF7DF).w
	lea	(MapRUnc_Tails).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_1D1FE
	move.w	#-$A00,d4
	bra.s	TPLC_ReadEntry

; ---------------------------------------------------------------------------
; Tails pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1D1AC:
LoadTailsDynPLC:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0	; load frame number
; loc_1D1B2:
LoadTailsDynPLC_Part2:
	cmp.b	($FFFFF7DE).w,d0
	beq.s	return_1D1FE
	move.b	d0,($FFFFF7DE).w
	lea	(MapRUnc_Tails).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_1D1FE
	move.w	#-$C00,d4
; loc_1D1D2:
TPLC_ReadEntry:
	moveq	#0,d1
	move.w	(a2)+,d1
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.l	#5,d1
	addi.l	#ArtUnc_Tails,d1
	move.w	d4,d2
	add.w	d3,d4
	add.w	d3,d4
	jsr	(QueueDMATransfer).l
	dbf	d5,TPLC_ReadEntry	; repeat for number of entries

return_1D1FE:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 05 - Tails' tails
; ----------------------------------------------------------------------------
; Sprite_1D200:
Obj05:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj05_States(pc,d0.w),d1
	jmp	Obj05_States(pc,d1.w)
; ===========================================================================
; off_1D20E:
Obj05_States:
	dc.w Obj05_Init - Obj05_States
	dc.w Obj05_Main - Obj05_States
; ===========================================================================
; loc_1D212
Obj05_Init:
	addq.b	#2,routine(a0) ; => Obj05_Main
	move.l	#MapUnc_Tails,mappings(a0)
	move.w	#$7B0,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	move.b	#2,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#4,render_flags(a0)

; loc_1D23A:
Obj05_Main:
	movea.w	parent(a0),a2 ; a2=character
	move.b	angle(a2),angle(a0)
	move.b	status(a2),status(a0)
	move.w	x_pos(a2),x_pos(a0)
	move.w	y_pos(a2),y_pos(a0)
	andi.w	#$7FFF,art_tile(a0)
	tst.w	art_tile(a2)
	bpl.s	+
	ori.w	#$8000,art_tile(a0)
+
	moveq	#0,d0
	move.b	anim(a2),d0
	btst	#5,status(a2)
	beq.s	+
	moveq	#4,d0
+
	cmp.b	objoff_30(a0),d0
	beq.s	loc_1D288
	move.b	d0,objoff_30(a0)
	move.b	Obj05AniSelection(pc,d0.w),anim(a0)

loc_1D288:
	lea	(Obj05AniData).l,a1
	bsr.w	Tails_Animate_Part2
	bsr.w	LoadTailsTailsDynPLC
	jsr	DisplaySprite
	rts
; ===========================================================================
; animation master script table for the tails
; chooses which animation script to run depending on what Tails is doing
; byte_1D29E:
Obj05AniSelection:
	dc.b	0,0	; TailsAni_Walk,Run	->
	dc.b	3	; TailsAni_Roll		-> Directional
	dc.b	3	; TailsAni_Roll2	-> Directional
	dc.b	9	; TailsAni_Push		-> Pushing
	dc.b	1	; TailsAni_Wait		-> Swish
	dc.b	0	; TailsAni_Balance	-> Blank
	dc.b	2	; TailsAni_LookUp	-> Flick
	dc.b	1	; TailsAni_Duck		-> Swish
	dc.b	7	; TailsAni_Spindash	-> Spindash
	dc.b	0,0,0	; TailsAni_Dummy1,2,3	->
	dc.b	8	; TailsAni_Stop		-> Skidding
	dc.b	0,0	; TailsAni_Float,2	->
	dc.b	0	; TailsAni_Spring	->
	dc.b	0	; TailsAni_Hang		->
	dc.b	0,0	; TailsAni_Blink,2	->
	dc.b	$A	; TailsAni_Hang2	-> Hanging
	dc.b	0	; TailsAni_Bubble	->
	dc.b	0,0,0,0	; TailsAni_Death,2,3,4	->
	dc.b	0,0	; TailsAni_Hurt,Slide	->
	dc.b	0	; TailsAni_Blank	->
	dc.b	0,0	; TailsAni_Dummy4,5	->
	dc.b	0	; TailsAni_HaulAss	->
	dc.b	0	; TailsAni_Fly		->
	even

; ---------------------------------------------------------------------------
; Animation script - Tails' tails
; ---------------------------------------------------------------------------
; off_1D2C0:
Obj05AniData:
	dc.w Obj05Ani_Blank - Obj05AniData	; 0
	dc.w Obj05Ani_Swish - Obj05AniData	; 1
	dc.w Obj05Ani_Flick - Obj05AniData	; 2
	dc.w Obj05Ani_Directional - Obj05AniData; 3
	dc.w Obj05Ani_DownLeft - Obj05AniData	; 4
	dc.w Obj05Ani_Down - Obj05AniData	; 5
	dc.w Obj05Ani_DownRight - Obj05AniData	; 6
	dc.w Obj05Ani_Spindash - Obj05AniData	; 7
	dc.w Obj05Ani_Skidding - Obj05AniData	; 8
	dc.w Obj05Ani_Pushing - Obj05AniData	; 9
	dc.w Obj05Ani_Hanging - Obj05AniData	;$A
Obj05Ani_Blank:		dc.b $20,  0,$FF
Obj05Ani_Swish:		dc.b   7,  9, $A, $B, $C, $D,$FF
Obj05Ani_Flick:		dc.b   3,  9, $A, $B, $C, $D,$FD,  1
Obj05Ani_Directional:	dc.b $FC,$49,$4A,$4B,$4C,$FF ; Tails is moving right
Obj05Ani_DownLeft:	dc.b   3,$4D,$4E,$4F,$50,$FF ; Tails is moving up-right
Obj05Ani_Down:		dc.b   3,$51,$52,$53,$54,$FF ; Tails is moving up
Obj05Ani_DownRight:	dc.b   3,$55,$56,$57,$58,$FF ; Tails is moving up-left
Obj05Ani_Spindash:	dc.b   2,$81,$82,$83,$84,$FF
Obj05Ani_Skidding:	dc.b   2,$87,$88,$89,$8A,$FF
Obj05Ani_Pushing:	dc.b   9,$87,$88,$89,$8A,$FF
Obj05Ani_Hanging:	dc.b   9,$81,$82,$83,$84,$FF
	even
; ===========================================================================

JmpTo2_KillCharacter 
	jmp	KillCharacter
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0A - Small bubbles from Sonic's face while underwater
; ----------------------------------------------------------------------------
; Sprite_1D320:
Obj0A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj0A_States(pc,d0.w),d1
	jmp	Obj0A_States(pc,d1.w)
; ===========================================================================
; off_1D32E:
Obj0A_States:
	dc.w Obj0A_Init - Obj0A_States		; 0
	dc.w Obj0A_Animate - Obj0A_States	; 2
	dc.w Obj0A_ChkWater - Obj0A_States	; 4
	dc.w Obj0A_Display - Obj0A_States	; 6
	dc.w JmpTo5_DeleteObject - Obj0A_States	; 8
	dc.w Obj0A_Countdown - Obj0A_States	; $A
	dc.w Obj0A_AirLeft - Obj0A_States	; $C
	dc.w Obj0A_DisplayNumber - Obj0A_States	; $E
	dc.w JmpTo5_DeleteObject - Obj0A_States	; $10
; ===========================================================================
; loc_1D340: Obj0A_Main:
Obj0A_Init:
	addq.b	#2,routine(a0)
	move.l	#Obj24_MapUnc_1FBF6,mappings(a0)
	tst.b	objoff_3F(a0)
	beq.s	+
	move.l	#Obj24_MapUnc_1FC18,mappings(a0)
+
	move.w	#$855B,art_tile(a0)
	move.b	#$84,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	subtype(a0),d0
	bpl.s	loc_1D388
	addq.b	#8,routine(a0)
	andi.w	#$7F,d0
	move.b	d0,objoff_33(a0)
	bra.w	Obj0A_Countdown
; ===========================================================================

loc_1D388:
	move.b	d0,anim(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	#-$88,y_vel(a0)

; loc_1D398:
Obj0A_Animate:
	lea	(Ani_obj0A).l,a1
	jsr	AnimateSprite

; loc_1D3A4:
Obj0A_ChkWater:
	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0		; has bubble reached the water surface?
	bcs.s	Obj0A_Wobble		; if not, branch
	; pop the bubble:
	move.b	#6,routine(a0)
	addq.b	#7,anim(a0)
	cmpi.b	#$D,anim(a0)
	beq.s	Obj0A_Display
	bcs.s	Obj0A_Display
	move.b	#$D,anim(a0)
	bra.s	Obj0A_Display
; ===========================================================================
; loc_1D3CA:
Obj0A_Wobble:
	tst.b	($FFFFF7C7).w
	beq.s	+
	addq.w	#4,objoff_30(a0)
+
	move.b	angle(a0),d0
	addq.b	#1,angle(a0)
	andi.w	#$7F,d0
	lea	(Obj0A_WobbleData).l,a1
	move.b	(a1,d0.w),d0
	ext.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	bsr.s	Obj0A_ShowNumber
	jsr	ObjectMove
	tst.b	render_flags(a0)
	bpl.s	JmpTo4_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo4_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; loc_1D40E:
Obj0A_DisplayNumber:
	movea.l	objoff_3C(a0),a2 ; a2=character
	cmpi.b	#$C,air_left(a2)
	bhi.s	JmpTo5_DeleteObject

; loc_1D41A:
Obj0A_Display:
	bsr.s	Obj0A_ShowNumber
	lea	(Ani_obj0A).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

JmpTo5_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; loc_1D434:
Obj0A_AirLeft:
	movea.l	objoff_3C(a0),a2 ; a2=character
	cmpi.b	#$C,air_left(a2)	; check air remaining
	bhi.s	JmpTo6_DeleteObject	; if higher than $C, branch
	subq.w	#1,objoff_38(a0)
	bne.s	Obj0A_Display2
	move.b	#$E,routine(a0)
	addq.b	#7,anim(a0)
	bra.s	Obj0A_Display
; ===========================================================================
; loc_1D452:
Obj0A_Display2:
	lea	(Ani_obj0A).l,a1
	jsr	AnimateSprite
	bsr.w	Obj0A_LoadCountdownArt
	tst.b	render_flags(a0)
	bpl.s	JmpTo6_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo6_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; loc_1D474:
Obj0A_ShowNumber:
	tst.w	objoff_38(a0)
	beq.s	return_1D4BE
	subq.w	#1,objoff_38(a0)
	bne.s	return_1D4BE
	cmpi.b	#7,anim(a0)
	bcc.s	return_1D4BE
	move.w	#$F,objoff_38(a0)
	clr.w	y_vel(a0)
	move.b	#$80,render_flags(a0)
	move.w	x_pos(a0),d0
	sub.w	(Camera_X_pos).w,d0
	addi.w	#$80,d0
	move.w	d0,x_pos(a0)
	move.w	y_pos(a0),d0
	sub.w	(Camera_Y_pos).w,d0
	addi.w	#$80,d0
	move.w	d0,objoff_A(a0)
	move.b	#$C,routine(a0)

return_1D4BE:
	rts
; ===========================================================================
; byte_1D4C0:
Obj0A_WobbleData:
	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2;16
	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;32
	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2;48
	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0;64
	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3;80
	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4;96
	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3;112
	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1;128
	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2;144
	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;160
	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2;176
	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0;192
	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3;208
	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4;224
	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3;240
	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1;256
; ===========================================================================
; the countdown numbers go over the dust and splash effect tiles in VRAM
; loc_1D5C0:
Obj0A_LoadCountdownArt:
	moveq	#0,d1
	move.b	mapping_frame(a0),d1
	cmpi.b	#8,d1
	bcs.s	return_1D604
	cmpi.b	#$E,d1
	bcc.s	return_1D604
	cmp.b	objoff_2E(a0),d1
	beq.s	return_1D604
	move.b	d1,objoff_2E(a0)
	subq.w	#8,d1
	move.w	d1,d0
	add.w	d1,d1
	add.w	d0,d1
	lsl.w	#6,d1
	addi.l	#ArtUnc_Countdown,d1
	move.w	#$9380,d2
	tst.b	objoff_3F(a0)
	beq.s	+
	move.w	#$9180,d2
+
	move.w	#$60,d3
	jsr	(QueueDMATransfer).l

return_1D604:
	rts
; ===========================================================================

; loc_1D606:
Obj0A_Countdown:
	movea.l	objoff_3C(a0),a2 ; a2=character
	tst.w	objoff_2C(a0)
	bne.w	loc_1D708
	cmpi.b	#6,routine(a2)
	bcc.w	return_1D81C
	btst	#6,status(a2)
	beq.w	return_1D81C
	subq.w	#1,objoff_38(a0)
	bpl.w	loc_1D72C
	move.w	#$3B,objoff_38(a0)
	move.w	#1,objoff_36(a0)
	jsr	(RandomNumber).l
	andi.w	#1,d0
	move.b	d0,objoff_34(a0)
	moveq	#0,d0
	move.b	air_left(a2),d0	; check air remaining
	cmpi.w	#$19,d0
	beq.s	Obj0A_WarnSound	; play ding sound if air is $19
	cmpi.w	#$14,d0
	beq.s	Obj0A_WarnSound	; play ding sound if air is $14
	cmpi.w	#$F,d0
	beq.s	Obj0A_WarnSound	; play ding sound if air is $F
	cmpi.w	#$C,d0
	bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
	bne.s	+
	tst.b	objoff_3F(a0)
	bne.s	+
	move.w	#$1F+$80,d0
	jsr	(PlayMusic).l	; play countdown music
+
	subq.b	#1,objoff_32(a0)
	bpl.s	Obj0A_ReduceAir
	move.b	objoff_33(a0),objoff_32(a0)
	bset	#7,objoff_36(a0)
	bra.s	Obj0A_ReduceAir
; ===========================================================================
; loc_1D68C:
Obj0A_WarnSound:
	tst.b	objoff_3F(a0)
	bne.s	Obj0A_ReduceAir
	move.w	#$42+$80,d0
	jsr	(PlaySound).l	; play "ding-ding" warning sound

; loc_1D69C:
Obj0A_ReduceAir:
	subq.b	#1,air_left(a2)		; subtract 1 from air remaining
	bcc.w	BranchTo_Obj0A_MakeItem	; if air is above 0, branch
	move.b	#$81,obj_control(a2)	; lock controls
	move.w	#$32+$80,d0
	jsr	(PlaySound).l		; play drowning sound
	move.b	#$A,objoff_34(a0)
	move.w	#1,objoff_36(a0)
	move.w	#$78,objoff_2C(a0)
	movea.l	a2,a1
	bsr.w	ResumeMusic
	move.l	a0,-(sp)
	movea.l	a2,a0
	bsr.w	Sonic_ResetOnFloor_Part2
	move.b	#$17,anim(a0)	; use Sonic's drowning animation
	bset	#1,status(a0)
	bset	#7,art_tile(a0)
	move.w	#0,y_vel(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,inertia(a0)
	movea.l	(sp)+,a0 ; load 0bj address ; restore a0 = obj0A
	cmpa.w	#MainCharacter,a2
	bne.s	+	; if it isn't player 1, branch
	move.b	#1,($FFFFEEDC).w
+
	rts
; ===========================================================================

loc_1D708:
	subq.w	#1,objoff_2C(a0)
	bne.s	+
	move.b	#6,routine(a2)
	rts
; ---------------------------------------------------------------------------
+	move.l	a0,-(sp)
	movea.l	a2,a0
	jsr	ObjectMove
	addi.w	#$10,y_vel(a0)
	movea.l	(sp)+,a0 ; load 0bj address
	bra.s	loc_1D72C
; ===========================================================================

BranchTo_Obj0A_MakeItem 
	bra.s	Obj0A_MakeItem
; ===========================================================================

loc_1D72C:
	tst.w	objoff_36(a0)
	beq.w	return_1D81C
	subq.w	#1,objoff_3A(a0)
	bpl.w	return_1D81C

; loc_1D73C:
Obj0A_MakeItem:
	jsr	(RandomNumber).l
	andi.w	#$F,d0
	addq.w	#8,d0
	move.w	d0,objoff_3A(a0)
	jsr	(SingleObjLoad).l
	bne.w	return_1D81C
	_move.b	0(a0),0(a1)		; load obj0A
	move.w	x_pos(a2),x_pos(a1)	; match its X position to Sonic
	moveq	#6,d0
	btst	#0,status(a2)
	beq.s	+
	neg.w	d0
	move.b	#$40,angle(a1)
+
	add.w	d0,x_pos(a1)
	move.w	y_pos(a2),y_pos(a1)
	move.l	objoff_3C(a0),objoff_3C(a1)
	move.b	#6,subtype(a1)
	tst.w	objoff_2C(a0)
	beq.w	loc_1D7C6

	andi.w	#7,objoff_3A(a0)
	addi.w	#0,objoff_3A(a0)
	move.w	y_pos(a2),d0
	subi.w	#$C,d0
	move.w	d0,y_pos(a1)
	jsr	(RandomNumber).l
	move.b	d0,angle(a1)
	move.w	(Timer_frames).w,d0
	andi.b	#3,d0
	bne.s	loc_1D812
	move.b	#$E,subtype(a1)
	bra.s	loc_1D812
; ---------------------------------------------------------------------------
; has something to do with making bubbles come out less regularly
; when Sonic is almost drowning
loc_1D7C6:
	btst	#7,objoff_36(a0)
	beq.s	loc_1D812
	moveq	#0,d2
	move.b	air_left(a2),d2
	cmpi.b	#$C,d2
	bcc.s	loc_1D812
	lsr.w	#1,d2
	jsr	(RandomNumber).l
	andi.w	#3,d0
	bne.s	+
	bset	#6,objoff_36(a0)
	bne.s	loc_1D812
	move.b	d2,subtype(a1)
	move.w	#$1C,objoff_38(a1)
+
	tst.b	objoff_34(a0)
	bne.s	loc_1D812
	bset	#6,objoff_36(a0)
	bne.s	loc_1D812
	move.b	d2,subtype(a1)
	move.w	#$1C,objoff_38(a1)

loc_1D812:
	subq.b	#1,objoff_34(a0)
	bpl.s	return_1D81C
	clr.w	objoff_36(a0)

return_1D81C:
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to play music after a countdown (when Sonic leaves the water)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1D81E:
ResumeMusic:
	cmpi.b	#$C,air_left(a1)
	bhi.s	ResumeMusic_Done	; branch if countdown hasn't started yet

	cmpa.w	#MainCharacter,a1
	bne.s	ResumeMusic_Done	; branch if it isn't player 1

	move.w	(Level_Music).w,d0	; prepare to play current level's music

	btst	#1,status_secondary(a1)
	beq.s	+		; branch if Sonic is not invincible
	move.w	#$17+$80,d0	; prepare to play invincibility music
+
	tst.b	(Super_Sonic_flag).w
	beq.w	+		; branch if it isn't Super Sonic
	move.w	#$16+$80,d0	; prepare to play super sonic music
+
	tst.b	(Current_Boss_ID).w
	beq.s	+		; branch if not in a boss fight
	move.w	#$13+$80,d0	; prepare to play boss music
+
	jsr	(PlayMusic).l
; return_1D858:
ResumeMusic_Done:
	move.b	#$1E,air_left(a1)	; reset air to full
	rts

; ===========================================================================
; animation script for the bubbles
; off_1D860:
Ani_obj0A:
	dc.w byte_1D87E - Ani_obj0A; 0
	dc.w byte_1D887 - Ani_obj0A; 1
	dc.w byte_1D890 - Ani_obj0A; 2
	dc.w byte_1D899 - Ani_obj0A; 3
	dc.w byte_1D8A2 - Ani_obj0A; 4
	dc.w byte_1D8AB - Ani_obj0A; 5
	dc.w byte_1D8B4 - Ani_obj0A; 6
	dc.w byte_1D8B9 - Ani_obj0A; 7
	dc.w byte_1D8C1 - Ani_obj0A; 8
	dc.w byte_1D8C9 - Ani_obj0A; 9
	dc.w byte_1D8D1 - Ani_obj0A; 10
	dc.w byte_1D8D9 - Ani_obj0A; 11
	dc.w byte_1D8E1 - Ani_obj0A; 12
	dc.w byte_1D8E9 - Ani_obj0A; 13
	dc.w byte_1D8EB - Ani_obj0A; 14
byte_1D87E:	dc.b   5,  0,  1,  2,  3,  4,  8,  8,$FC
byte_1D887:	dc.b   5,  0,  1,  2,  3,  4,  9,  9,$FC
byte_1D890:	dc.b   5,  0,  1,  2,  3,  4, $A, $A,$FC
byte_1D899:	dc.b   5,  0,  1,  2,  3,  4, $B, $B,$FC
byte_1D8A2:	dc.b   5,  0,  1,  2,  3,  4, $C, $C,$FC
byte_1D8AB:	dc.b   5,  0,  1,  2,  3,  4, $D, $D,$FC
byte_1D8B4:	dc.b  $E,  0,  1,  2,$FC
byte_1D8B9:	dc.b   7,$10,  8,$10,  8,$10,  8,$FC
byte_1D8C1:	dc.b   7,$10,  9,$10,  9,$10,  9,$FC
byte_1D8C9:	dc.b   7,$10, $A,$10, $A,$10, $A,$FC
byte_1D8D1:	dc.b   7,$10, $B,$10, $B,$10, $B,$FC
byte_1D8D9:	dc.b   7,$10, $C,$10, $C,$10, $C,$FC
byte_1D8E1:	dc.b   7,$10, $D,$10, $D,$10, $D,$FC
byte_1D8E9:	dc.b  $E,$FC
byte_1D8EB:	dc.b  $E,  1,  2,  3,  4,$FC
	even




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 38 - Shield
; ----------------------------------------------------------------------------
; Sprite_1D8F2:
Obj38:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj38_Index(pc,d0.w),d1
	jmp	Obj38_Index(pc,d1.w)
; ===========================================================================
; off_1D900:
Obj38_Index:
	dc.w Obj38_Main-Obj38_Index
	dc.w Obj38_Shield-Obj38_Index; 1
; ===========================================================================
; loc_1D904:
Obj38_Main:
	addq.b	#2,routine(a0)
	move.l	#Obj38_MapUnc_1DBE4,mappings(a0)
	move.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.w	#$4BE,art_tile(a0)
	bsr.w	Adjust2PArtPointer
; loc_1D92C:
Obj38_Shield:
	movea.w	parent(a0),a2 ; a2=character
	btst	#1,status_secondary(a2)
	bne.s	return_1D976
	btst	#0,status_secondary(a2)
	beq.s	JmpTo7_DeleteObject
	move.w	x_pos(a2),x_pos(a0)
	move.w	y_pos(a2),y_pos(a0)
	move.b	status(a2),status(a0)
	andi.w	#$7FFF,art_tile(a0)
	tst.w	art_tile(a2)
	bpl.s	Obj38_Display
	ori.w	#$8000,art_tile(a0)
; loc_1D964:
Obj38_Display:
	lea	(byte_1DBD6).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

return_1D976:
	rts
; ===========================================================================

JmpTo7_DeleteObject 
	jmp	DeleteObject
; ===========================================================================


		dc.b   0,  1,  2,  3,  4,  5,  6, $FF

; ----------------------------------------------------------------------------
; Object 35 - Invincibility Stars
; ----------------------------------------------------------------------------
; Sprite_1D97E:
Obj35:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj35_Index(pc,d0.w),d1
	jmp	Obj35_Index(pc,d1.w)
; ===========================================================================
Obj35_Index:
	dc.w Obj35_Init-Obj35_Index
	dc.w Obj35_Spawn-Obj35_Index; 1
	dc.w loc_1DA80-Obj35_Index; 2
; ===========================================================================

Obj35_Init:
	tst.b	$30(a0)		; is frame interval empty?
	beq.s	+		; if yes, create new explosion
	subq.b	#1,$30(a0)	; if not, substract one from interval
	rts			; return

+	addq.b	#1,$31(a0)	; increase number of spawned explosins
	cmpi.b	#5,$31(a0)	; five explosions reached?
	beq.s	Obj35_Delete	; if yes, delete object
	move.b	#2,$30(a0)	; reset frame interval

	addq.b	#2,routine(a0)	; spawn an explosion in the next frame

	rts			; return

Obj35_Delete:
	jmp	(DeleteObject).l; delete

; ===========================================================================

Obj35_Spawn:
	subq.b	#2,routine(a0)		; go back to main routine

	lea	(MainCharacter).w,a2	; get Sonic's RAM
	jsr	SingleObjLoad		; find a new object
	bne.s	+			; skip if SST is full
	move.b	#$58,(a1)		; load Explosion object
	move.w	x_pos(a2),x_pos(a1)	; copy Sonic's X-position
	move.w	y_pos(a2),y_pos(a1)	; copy Sonic's Y-position

	move.b	$31(a0),d0	; get explosion counter
	andi.b	#1,d0		; only look at the first bit
	move.b	d0,$30(a1)	; disable explosion sound on every other explosion

+	rts
; ===========================================================================


	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_1D98C(pc,d0.w),d1
	jmp	off_1D98C(pc,d1.w)
; ===========================================================================
off_1D98C:
	dc.w loc_1D9A4-off_1D98C
	dc.w loc_1DA0C-off_1D98C; 1
	dc.w loc_1DA80-off_1D98C; 2
	dc.l byte_1DB8F
	dc.w $B
	dc.l byte_1DBA4
	dc.w $160D
	dc.l byte_1DBBD
	dc.w $2C0D
; ===========================================================================

loc_1D9A4:
	moveq	#0,d2
	lea	off_1D98C(pc),a2
	lea	(a0),a1
	moveq	#3,d1

loc_1D9AE:
	_move.b	0(a0),0(a1) ; load obj35
	move.b	#4,objoff_A(a1)

	;move.l	#Obj58_MapUnc_2D50A,mappings(a1)
	;move.w	#$8000+($73C0/$20),art_tile(a1)

	move.l	#Obj35_MapUnc_1DCBC,mappings(a1)
	move.w	#$4DE,art_tile(a1)

	bsr.w	Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#$10,objoff_E(a1)
	move.b	#2,objoff_F(a1)
	move.w	parent(a0),parent(a1)
	move.b	d2,objoff_36(a1)
	addq.w	#1,d2
	move.l	(a2)+,objoff_30(a1)
	move.w	(a2)+,objoff_34(a1)
	lea	next_object(a1),a1 ; a1=object
	dbf	d1,loc_1D9AE
	move.b	#2,objoff_A(a0)
	move.b	#4,objoff_34(a0)

loc_1DA0C:
	movea.w	parent(a0),a1 ; a1=character
	btst	#1,status_secondary(a1)
	beq.w	DeleteObject
	move.w	x_pos(a1),d0
	move.w	d0,x_pos(a0)
	move.w	y_pos(a1),d1
	move.w	d1,y_pos(a0)
	lea	$10(a0),a2
	lea	byte_1DB82(pc),a3
	moveq	#0,d5

loc_1DA34:
	move.w	objoff_38(a0),d2
	move.b	(a3,d2.w),d5
	bpl.s	loc_1DA44
	clr.w	objoff_38(a0)
	bra.s	loc_1DA34
; ===========================================================================

loc_1DA44:
	addq.w	#1,objoff_38(a0)
	lea	byte_1DB42(pc),a6
	move.b	objoff_34(a0),d6
	jsr	loc_1DB2C(pc)
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	d5,(a2)+
	addi.w	#$20,d6
	jsr	loc_1DB2C(pc)
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	d5,(a2)+
	moveq	#$12,d0
	btst	#0,status(a1)
	beq.s	loc_1DA74
	neg.w	d0

loc_1DA74:
	add.b	d0,objoff_34(a0)
	move.w	#$80,d0
	bra.w	DisplaySprite3
; ===========================================================================

loc_1DA80:
	movea.w	parent(a0),a1 ; a1=character
	btst	#1,status_secondary(a1)
	beq.w	DeleteObject
	cmpi.w	#2,(Player_mode).w
	beq.s	loc_1DAA4
	lea	(Sonic_Pos_Record_Index).w,a5
	lea	(Sonic_Pos_Record_Buf).w,a6
	tst.b	objoff_3F(a0)
	beq.s	loc_1DAAC

loc_1DAA4:
	lea	(Tails_Pos_Record_Index).w,a5
	lea	(Tails_Pos_Record_Buf).w,a6

loc_1DAAC:
	move.b	objoff_36(a0),d1
	lsl.b	#2,d1
	move.w	d1,d2
	add.w	d1,d1
	add.w	d2,d1
	move.w	(a5),d0
	sub.b	d1,d0
	lea	(a6,d0.w),a2
	move.w	(a2)+,d0
	move.w	(a2)+,d1
	move.w	d0,x_pos(a0)
	move.w	d1,y_pos(a0)
	lea	$10(a0),a2
	movea.l	objoff_30(a0),a3

loc_1DAD4:
	move.w	objoff_38(a0),d2
	move.b	(a3,d2.w),d5
	bpl.s	loc_1DAE4
	clr.w	objoff_38(a0)
	bra.s	loc_1DAD4
; ===========================================================================

loc_1DAE4:
	swap	d5
	add.b	objoff_35(a0),d2
	move.b	(a3,d2.w),d5
	addq.w	#1,objoff_38(a0)
	lea	byte_1DB42(pc),a6
	move.b	objoff_34(a0),d6
	jsr	loc_1DB2C(pc)
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	d5,(a2)+
	addi.w	#$20,d6
	swap	d5
	jsr	loc_1DB2C(pc)
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	d5,(a2)+
	moveq	#2,d0
	btst	#0,status(a1)
	beq.s	loc_1DB20
	neg.w	d0

loc_1DB20:
	add.b	d0,objoff_34(a0)
	move.w	#$80,d0
	bra.w	DisplaySprite3
; ===========================================================================

loc_1DB2C:
	andi.w	#$3E,d6
	move.b	(a6,d6.w),d2
	move.b	1(a6,d6.w),d3
	ext.w	d2
	ext.w	d3
	add.w	d0,d2
	add.w	d1,d3
	rts
; ===========================================================================
; unknown
byte_1DB42:	dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC


byte_1DB82:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
byte_1DB8F:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
byte_1DBA4:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
byte_1DBBD:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
byte_1DBD6:	dc.b   0,  2,  0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF
		even
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj38_MapUnc_1DBE4:	BINCLUDE "mappings/sprite/obj38.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj35_MapUnc_1DCBC:	BINCLUDE "mappings/sprite/obj35.bin"

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 08 - Water splash in Aquatic Ruin Zone, Spindash dust
; ----------------------------------------------------------------------------
; Sprite_1DD20:
Obj08:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1DD2E(pc,d0.w),d1
	jmp	off_1DD2E(pc,d1.w)
; ===========================================================================
off_1DD2E:
	dc.w Obj08_Init - off_1DD2E
	dc.w Obj08_Main - off_1DD2E; 1
	dc.w BranchTo16_DeleteObject - off_1DD2E; 2
	dc.w Obj08_CheckSkid - off_1DD2E; 3
; ===========================================================================
; loc_1DD36:
Obj08_Init:
	addq.b	#2,routine(a0)
	move.l	#Obj08_MapUnc_1DF5E,mappings(a0)
	ori.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.w	#$49C,art_tile(a0)
	move.w	#MainCharacter,parent(a0)
	move.w	#$9380,objoff_3C(a0)
	cmpa.w	#Sonic_Dust,a0
	beq.s	+
	move.b	#1,objoff_34(a0)
	cmpi.w	#2,(Player_mode).w
	beq.s	+
	move.w	#$48C,art_tile(a0)
	move.w	#Sidekick,parent(a0)
	move.w	#$9180,objoff_3C(a0)
+
	bsr.w	Adjust2PArtPointer

; loc_1DD90:
Obj08_Main:
	movea.w	parent(a0),a2 ; a2=character
	moveq	#0,d0
	move.b	anim(a0),d0	; use current animation as a secondary routine counter
	add.w	d0,d0
	move.w	Obj08_DisplayModes(pc,d0.w),d1
	jmp	Obj08_DisplayModes(pc,d1.w)
; ===========================================================================
; off_1DDA4:
Obj08_DisplayModes:
	dc.w Obj08_Display - Obj08_DisplayModes; 0
	dc.w Obj08_MdSplash - Obj08_DisplayModes; 1
	dc.w Obj08_MdSpindashDust - Obj08_DisplayModes; 2
	dc.w Obj08_MdSkidDust - Obj08_DisplayModes; 3
; ===========================================================================
; loc_1DDAC:
Obj08_MdSplash:
	move.w	(Water_Level_1).w,y_pos(a0)
	tst.b	next_anim(a0)
	bne.s	Obj08_Display
	move.w	x_pos(a2),x_pos(a0)
	move.b	#0,status(a0)
	andi.w	#$7FFF,art_tile(a0)
	bra.s	Obj08_Display
; ===========================================================================
; loc_1DDCC:
Obj08_MdSpindashDust:
	cmpi.b	#$C,air_left(a2)
	bcs.s	Obj08_ResetDisplayMode
	cmpi.b	#4,routine(a2)
	bcc.s	Obj08_ResetDisplayMode
	tst.b	spindash_flag(a2)
	beq.s	Obj08_ResetDisplayMode
	move.w	x_pos(a2),x_pos(a0)
	move.w	y_pos(a2),y_pos(a0)
	move.b	status(a2),status(a0)
	andi.b	#1,status(a0)
	tst.b	objoff_34(a0)
	beq.s	+
	subi.w	#4,y_pos(a0)
+
	tst.b	next_anim(a0)
	bne.s	Obj08_Display
	andi.w	#$7FFF,art_tile(a0)
	tst.w	art_tile(a2)
	bpl.s	Obj08_Display
	ori.w	#$8000,art_tile(a0)
	bra.s	Obj08_Display
; ===========================================================================
; loc_1DE20:
Obj08_MdSkidDust:
	cmpi.b	#$C,air_left(a2)
	bcs.s	Obj08_ResetDisplayMode

; loc_1DE28:
Obj08_Display:
	lea	(Ani_obj08).l,a1
	jsr	AnimateSprite
	bsr.w	Obj08_LoadDustOrSplashArt
	jmp	DisplaySprite
; ===========================================================================
; loc_1DE3E:
Obj08_ResetDisplayMode:
	move.b	#0,anim(a0)
	rts
; ===========================================================================

BranchTo16_DeleteObject 
	bra.w	DeleteObject
; ===========================================================================
; loc_1DE4A:
Obj08_CheckSkid:
	movea.w	parent(a0),a2 ; a2=character
	cmpi.b	#$D,anim(a2)	; SonAni_Stop
	beq.s	Obj08_SkidDust
	move.b	#2,routine(a0)
	move.b	#0,objoff_32(a0)
	rts
; ===========================================================================
; loc_1DE64:
Obj08_SkidDust:
	subq.b	#1,objoff_32(a0)
	bpl.s	loc_1DEE0
	move.b	#3,objoff_32(a0)
	bsr.w	SingleObjLoad
	bne.s	loc_1DEE0
	_move.b	0(a0),0(a1) ; load obj08
	move.w	x_pos(a2),x_pos(a1)
	move.w	y_pos(a2),y_pos(a1)
	addi.w	#$10,y_pos(a1)
	tst.b	objoff_34(a0)
	beq.s	+
	subi.w	#4,y_pos(a1)
+
	move.b	#0,status(a1)
	move.b	#3,anim(a1)
	addq.b	#2,routine(a1)
	move.l	mappings(a0),mappings(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#1,priority(a1)
	move.b	#4,width_pixels(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.w	parent(a0),parent(a1)
	andi.w	#$7FFF,art_tile(a1)
	tst.w	art_tile(a2)
	bpl.s	loc_1DEE0
	ori.w	#$8000,art_tile(a1)

loc_1DEE0:
	bsr.s	Obj08_LoadDustOrSplashArt
	rts
; ===========================================================================
; loc_1DEE4:
Obj08_LoadDustOrSplashArt:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	cmp.b	objoff_30(a0),d0
	beq.s	return_1DF36
	move.b	d0,objoff_30(a0)
	lea	(Obj08_MapRUnc_1E074).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_1DF36
	move.w	objoff_3C(a0),d4

-	moveq	#0,d1
	move.w	(a2)+,d1
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.l	#5,d1
	addi.l	#ArtUnc_Splash,d1
	move.w	d4,d2
	add.w	d3,d4
	add.w	d3,d4
	jsr	(QueueDMATransfer).l
	dbf	d5,-

return_1DF36:
	rts
; ===========================================================================
; animation script
; off_1DF38:
Ani_obj08:
	dc.w Obj08Ani_Null-Ani_obj08	; 0
	dc.w Obj08Ani_Splash-Ani_obj08	; 1
	dc.w Obj08Ani_Dash-Ani_obj08	; 2
	dc.w Obj08Ani_Skid-Ani_obj08	; 3
Obj08Ani_Null:	dc.b $1F,  0,$FF
Obj08Ani_Splash:dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0
Obj08Ani_Dash:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF
Obj08Ani_Skid:	dc.b   3,$11,$12,$13,$14,$FC
	even
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj08_MapUnc_1DF5E:	BINCLUDE "mappings/sprite/obj08.bin"
; -------------------------------------------------------------------------------
; dynamic pattern loading cues
; -------------------------------------------------------------------------------
Obj08_MapRUnc_1E074:	BINCLUDE "mappings/spriteDPLC/obj08.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7E - Super Sonic's stars
; ----------------------------------------------------------------------------
; Sprite_1E0F0:
Obj7E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj7E_States(pc,d0.w),d1
	jmp	Obj7E_States(pc,d1.w)
; ===========================================================================
; off_1E0FE:
Obj7E_States:
	dc.w Obj7E_Init-Obj7E_States
	dc.w Obj7E_Main-Obj7E_States
; ===========================================================================
; loc_1E102:
Obj7E_Init:
	addq.b	#2,routine(a0)
	move.l	#Obj7E_MapUnc_1E1BE,mappings(a0)
	move.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.w	#$5F2,art_tile(a0)
	bsr.w	Adjust2PArtPointer
	btst	#7,(MainCharacter+art_tile).w
	beq.s	Obj7E_Main
	bset	#7,art_tile(a0)
; loc_1E138:
Obj7E_Main:
	tst.b	(Super_Sonic_flag).w
	beq.s	JmpTo8_DeleteObject
	tst.b	objoff_30(a0)
	beq.s	loc_1E188
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_1E170
	move.b	#1,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#6,mapping_frame(a0)
	bcs.s	loc_1E170
	move.b	#0,mapping_frame(a0)
	move.b	#0,objoff_30(a0)
	move.b	#1,objoff_31(a0)
	rts
; ===========================================================================

loc_1E170:
	tst.b	objoff_31(a0)
	bne.s	JmpTo6_DisplaySprite

loc_1E176:
	move.w	(MainCharacter+x_pos).w,x_pos(a0)
	move.w	(MainCharacter+y_pos).w,y_pos(a0)

JmpTo6_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

loc_1E188:
	tst.b	(MainCharacter+obj_control).w
	bne.s	loc_1E1AA
	move.w	(MainCharacter+inertia).w,d0
	bpl.s	loc_1E196
	neg.w	d0

loc_1E196:
	cmpi.w	#$800,d0
	bcs.s	loc_1E1AA
	move.b	#0,mapping_frame(a0)
	move.b	#1,objoff_30(a0)
	bra.s	loc_1E176
; ===========================================================================

loc_1E1AA:
	move.b	#0,objoff_30(a0)
	move.b	#0,objoff_31(a0)
	rts
; ===========================================================================

JmpTo8_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj7E_MapUnc_1E1BE:	BINCLUDE "mappings/sprite/obj7E.bin"
; ===========================================================================
	nop




; ---------------------------------------------------------------------------
; Subroutine to change Sonic's angle & position as he walks along the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E234: Sonic_AnglePos:
AnglePos:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer(a0),d5
	btst	#3,status(a0)
	beq.s	+
	moveq	#0,d0
	move.b	d0,($FFFFF768).w
	move.b	d0,($FFFFF76A).w
	rts
; ---------------------------------------------------------------------------
+	moveq	#3,d0
	move.b	d0,($FFFFF768).w
	move.b	d0,($FFFFF76A).w
	move.b	angle(a0),d0
	addi.b	#$20,d0
	bpl.s	loc_1E286
	move.b	angle(a0),d0
	bpl.s	+
	subq.b	#1,d0
+
	addi.b	#$20,d0
	bra.s	loc_1E292
; ---------------------------------------------------------------------------
loc_1E286:
	move.b	angle(a0),d0
	bpl.s	loc_1E28E
	addq.b	#1,d0

loc_1E28E:
	addi.b	#$1F,d0

loc_1E292:
	andi.b	#$C0,d0
	cmpi.b	#$40,d0
	beq.w	loc_1E4E8
	cmpi.b	#$80,d0
	beq.w	loc_1E43A
	cmpi.b	#$C0,d0
	beq.w	Sonic_WalkVertR
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindFloor
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	neg.w	d0
	add.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindFloor
	move.w	(sp)+,d0
	bsr.w	Sonic_Angle
	tst.w	d1
	beq.s	return_1E31C
	bpl.s	loc_1E31E
	cmpi.w	#-$E,d1
	blt.s	return_1E31C
	add.w	d1,y_pos(a0)

return_1E31C:
	rts
; ===========================================================================

loc_1E31E:
	move.b	x_vel(a0),d0
	bpl.s	+
	neg.b	d0
+
	addq.b	#4,d0
	cmpi.b	#$E,d0
	bcs.s	+
	move.b	#$E,d0
+
	cmp.b	d0,d1
	bgt.s	loc_1E33C

loc_1E336:
	add.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_1E33C:
	tst.b	stick_to_convex(a0)
	bne.s	loc_1E336
	bset	#1,status(a0)
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to change Sonic's angle as he walks along the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E356:
Sonic_Angle:
	move.b	($FFFFF76A).w,d2
	cmp.w	d0,d1
	ble.s	+
	move.b	($FFFFF768).w,d2
	move.w	d0,d1
+
	btst	#0,d2
	bne.s	loc_1E380
	move.b	d2,d0
	sub.b	angle(a0),d0
	bpl.s	+
	neg.b	d0
+
	cmpi.b	#$20,d0
	bcc.s	loc_1E380
	move.b	d2,angle(a0)
	rts
; ===========================================================================

loc_1E380:
	move.b	angle(a0),d2
	addi.b	#$20,d2
	andi.b	#$C0,d2
	move.b	d2,angle(a0)
	rts
; End of function Sonic_Angle

; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to walk up a vertical slope/wall to his right
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E392:
Sonic_WalkVertR:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	neg.w	d0
	add.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindWall
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindWall
	move.w	(sp)+,d0
	bsr.w	Sonic_Angle
	tst.w	d1
	beq.s	return_1E400
	bpl.s	loc_1E402
	cmpi.w	#-$E,d1
	blt.s	return_1E400
	add.w	d1,x_pos(a0)

return_1E400:
	rts
; ===========================================================================

loc_1E402:
	move.b	y_vel(a0),d0
	bpl.s	+
	neg.b	d0
+
	addq.b	#4,d0
	cmpi.b	#$E,d0
	bcs.s	+
	move.b	#$E,d0
+
	cmp.b	d0,d1
	bgt.s	loc_1E420

loc_1E41A:
	add.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_1E420:
	tst.b	stick_to_convex(a0)
	bne.s	loc_1E41A
	bset	#1,status(a0)
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
	rts
; ===========================================================================

loc_1E43A:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	eori.w	#$F,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	bsr.w	FindFloor
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	eori.w	#$F,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	bsr.w	FindFloor
	move.w	(sp)+,d0
	bsr.w	Sonic_Angle
	tst.w	d1
	beq.s	return_1E4AE
	bpl.s	loc_1E4B0
	cmpi.w	#-$E,d1
	blt.s	return_1E4AE
	sub.w	d1,y_pos(a0)

return_1E4AE:
	rts
; ===========================================================================

loc_1E4B0:
	move.b	x_vel(a0),d0
	bpl.s	+
	neg.b	d0
+
	addq.b	#4,d0
	cmpi.b	#$E,d0
	bcs.s	+
	move.b	#$E,d0
+
	cmp.b	d0,d1
	bgt.s	loc_1E4CE

loc_1E4C8:
	sub.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_1E4CE:
	tst.b	stick_to_convex(a0)
	bne.s	loc_1E4C8
	bset	#1,status(a0)
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
	rts
; ===========================================================================

loc_1E4E8:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	eori.w	#$F,d3
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$400,d6
	bsr.w	FindWall
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	eori.w	#$F,d3
	lea	($FFFFF76A).w,a4
	movea.w	#-$10,a3
	move.w	#$400,d6
	bsr.w	FindWall
	move.w	(sp)+,d0
	bsr.w	Sonic_Angle
	tst.w	d1
	beq.s	return_1E55C
	bpl.s	loc_1E55E
	cmpi.w	#-$E,d1
	blt.s	return_1E55C
	sub.w	d1,x_pos(a0)

return_1E55C:
	rts
; ===========================================================================

loc_1E55E:
	move.b	y_vel(a0),d0
	bpl.s	+
	neg.b	d0
+
	addq.b	#4,d0
	cmpi.b	#$E,d0
	bcs.s	+
	move.b	#$E,d0
+
	cmp.b	d0,d1
	bgt.s	loc_1E57C

loc_1E576:
	sub.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_1E57C:
	tst.b	stick_to_convex(a0)
	bne.s	loc_1E576
	bset	#1,status(a0)
	bclr	#5,status(a0)
	move.b	#1,next_anim(a0)
	rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to find which tile the object is standing on
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E596:
Floor_ChkTile:
	move.w	d2,d0
	add.w	d0,d0
	andi.w	#$F00,d0
	move.w	d3,d1
	lsr.w	#3,d1
	move.w	d1,d4
	lsr.w	#4,d1
	andi.w	#$7F,d1
	add.w	d1,d0
	moveq	#-1,d1
	clr.w	d1
	lea	(Level_Layout).w,a1
	move.b	(a1,d0.w),d1
	add.w	d1,d1
	move.w	word_1E5D0(pc,d1.w),d1
	move.w	d2,d0
	andi.w	#$70,d0
	add.w	d0,d1
	andi.w	#$E,d4
	add.w	d4,d1
	movea.l	d1,a1
	rts
; ===========================================================================
; precalculated values for Floor_ChkTile
; (Sonic 1 calculated it every time instead of using a table)
word_1E5D0:
	dc.w	 0,  $80
	dc.w  $100, $180
	dc.w  $200, $280
	dc.w  $300, $380
	dc.w  $400, $480
	dc.w  $500, $580
	dc.w  $600, $680
	dc.w  $700, $780
	dc.w  $800, $880
	dc.w  $900, $980
	dc.w  $A00, $A80
	dc.w  $B00, $B80
	dc.w  $C00, $C80
	dc.w  $D00, $D80
	dc.w  $E00, $E80
	dc.w  $F00, $F80
	dc.w $1000,$1080
	dc.w $1100,$1180
	dc.w $1200,$1280
	dc.w $1300,$1380
	dc.w $1400,$1480
	dc.w $1500,$1580
	dc.w $1600,$1680
	dc.w $1700,$1780
	dc.w $1800,$1880
	dc.w $1900,$1980
	dc.w $1A00,$1A80
	dc.w $1B00,$1B80
	dc.w $1C00,$1C80
	dc.w $1D00,$1D80
	dc.w $1E00,$1E80
	dc.w $1F00,$1F80
	dc.w $2000,$2080
	dc.w $2100,$2180
	dc.w $2200,$2280
	dc.w $2300,$2380
	dc.w $2400,$2480
	dc.w $2500,$2580
	dc.w $2600,$2680
	dc.w $2700,$2780
	dc.w $2800,$2880
	dc.w $2900,$2980
	dc.w $2A00,$2A80
	dc.w $2B00,$2B80
	dc.w $2C00,$2C80
	dc.w $2D00,$2D80
	dc.w $2E00,$2E80
	dc.w $2F00,$2F80
	dc.w $3000,$3080
	dc.w $3100,$3180
	dc.w $3200,$3280
	dc.w $3300,$3380
	dc.w $3400,$3480
	dc.w $3500,$3580
	dc.w $3600,$3680
	dc.w $3700,$3780
	dc.w $3800,$3880
	dc.w $3900,$3980
	dc.w $3A00,$3A80
	dc.w $3B00,$3B80
	dc.w $3C00,$3C80
	dc.w $3D00,$3D80
	dc.w $3E00,$3E80
	dc.w $3F00,$3F80
	dc.w $4000,$4080
	dc.w $4100,$4180
	dc.w $4200,$4280
	dc.w $4300,$4380
	dc.w $4400,$4480
	dc.w $4500,$4580
	dc.w $4600,$4680
	dc.w $4700,$4780
	dc.w $4800,$4880
	dc.w $4900,$4980
	dc.w $4A00,$4A80
	dc.w $4B00,$4B80
	dc.w $4C00,$4C80
	dc.w $4D00,$4D80
	dc.w $4E00,$4E80
	dc.w $4F00,$4F80
	dc.w $5000,$5080
	dc.w $5100,$5180
	dc.w $5200,$5280
	dc.w $5300,$5380
	dc.w $5400,$5480
	dc.w $5500,$5580
	dc.w $5600,$5680
	dc.w $5700,$5780
	dc.w $5800,$5880
	dc.w $5900,$5980
	dc.w $5A00,$5A80
	dc.w $5B00,$5B80
	dc.w $5C00,$5C80
	dc.w $5D00,$5D80
	dc.w $5E00,$5E80
	dc.w $5F00,$5F80
	dc.w $6000,$6080
	dc.w $6100,$6180
	dc.w $6200,$6280
	dc.w $6300,$6380
	dc.w $6400,$6480
	dc.w $6500,$6580
	dc.w $6600,$6680
	dc.w $6700,$6780
	dc.w $6800,$6880
	dc.w $6900,$6980
	dc.w $6A00,$6A80
	dc.w $6B00,$6B80
	dc.w $6C00,$6C80
	dc.w $6D00,$6D80
	dc.w $6E00,$6E80
	dc.w $6F00,$6F80
	dc.w $7000,$7080
	dc.w $7100,$7180
	dc.w $7200,$7280
	dc.w $7300,$7380
	dc.w $7400,$7480
	dc.w $7500,$7580
	dc.w $7600,$7680
	dc.w $7700,$7780
	dc.w $7800,$7880
	dc.w $7900,$7980
	dc.w $7A00,$7A80
	dc.w $7B00,$7B80
	dc.w $7C00,$7C80
	dc.w $7D00,$7D80
	dc.w $7E00,$7E80
	dc.w $7F00,$7F80
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E7D0:
FindFloor:
	bsr.w	Floor_ChkTile
	move.w	(a1),d0
	move.w	d0,d4
	andi.w	#$3FF,d0
	beq.s	loc_1E7E2
	btst	d5,d4
	bne.s	loc_1E7F0

loc_1E7E2:
	add.w	a3,d2
	bsr.w	FindFloor2
	sub.w	a3,d2
	addi.w	#$10,d1
	rts
; ===========================================================================

loc_1E7F0:
	movea.l	(Collision_addr).w,a2
	move.b	(a2,d0.w),d0
	andi.w	#$FF,d0
	beq.s	loc_1E7E2
	lea	(ColCurveMap).l,a2
	move.b	(a2,d0.w),(a4)
	lsl.w	#4,d0
	move.w	d3,d1
	btst	#$A,d4
	beq.s	+
	not.w	d1
	neg.b	(a4)
+
	btst	#$B,d4
	beq.s	+
	addi.b	#$40,(a4)
	neg.b	(a4)
	subi.b	#$40,(a4)
+
	andi.w	#$F,d1
	add.w	d0,d1
	lea	(ColArray).l,a2
	move.b	(a2,d1.w),d0
	ext.w	d0
	eor.w	d6,d4
	btst	#$B,d4
	beq.s	+
	neg.w	d0
+
	tst.w	d0
	beq.s	loc_1E7E2
	bmi.s	loc_1E85E
	cmpi.b	#$10,d0
	beq.s	loc_1E86A
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	move.w	#$F,d1
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1E85E:
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	bpl.w	loc_1E7E2

loc_1E86A:
	sub.w	a3,d2
	bsr.w	FindFloor2
	add.w	a3,d2
	subi.w	#$10,d1
	rts
; End of function FindFloor


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


; loc_1E878:
FindFloor2:
	bsr.w	Floor_ChkTile
	move.w	(a1),d0
	move.w	d0,d4
	andi.w	#$3FF,d0
	beq.s	loc_1E88A
	btst	d5,d4
	bne.s	loc_1E898

loc_1E88A:
	move.w	#$F,d1
	move.w	d2,d0
	andi.w	#$F,d0
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1E898:
	movea.l	(Collision_addr).w,a2
	move.b	(a2,d0.w),d0
	andi.w	#$FF,d0
	beq.s	loc_1E88A
	lea	(ColCurveMap).l,a2
	move.b	(a2,d0.w),(a4)
	lsl.w	#4,d0
	move.w	d3,d1
	btst	#$A,d4
	beq.s	+
	not.w	d1
	neg.b	(a4)
+
	btst	#$B,d4
	beq.s	+
	addi.b	#$40,(a4)
	neg.b	(a4)
	subi.b	#$40,(a4)
+
	andi.w	#$F,d1
	add.w	d0,d1
	lea	(ColArray).l,a2
	move.b	(a2,d1.w),d0
	ext.w	d0
	eor.w	d6,d4
	btst	#$B,d4
	beq.s	+
	neg.w	d0
+
	tst.w	d0
	beq.s	loc_1E88A
	bmi.s	loc_1E900
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	move.w	#$F,d1
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1E900:
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	bpl.w	loc_1E88A
	not.w	d1
	rts
; ===========================================================================
; loc_1E910:
Obj_CheckInFloor:
	bsr.w	Floor_ChkTile
	move.w	(a1),d0
	move.w	d0,d4
	andi.w	#$3FF,d0
	beq.s	loc_1E922
	btst	d5,d4
	bne.s	loc_1E928

loc_1E922:
	move.w	#$10,d1
	rts
; ===========================================================================

loc_1E928:
	movea.l	(Collision_addr).w,a2
	move.b	(a2,d0.w),d0
	andi.w	#$FF,d0
	beq.s	loc_1E922
	lea	(ColCurveMap).l,a2
	move.b	(a2,d0.w),(a4)
	lsl.w	#4,d0
	move.w	d3,d1
	btst	#$A,d4
	beq.s	+
	not.w	d1
	neg.b	(a4)
+
	btst	#$B,d4
	beq.s	+
	addi.b	#$40,(a4)
	neg.b	(a4)
	subi.b	#$40,(a4)
+
	andi.w	#$F,d1
	add.w	d0,d1
	lea	(ColArray).l,a2
	move.b	(a2,d1.w),d0
	ext.w	d0
	eor.w	d6,d4
	btst	#$B,d4
	beq.s	+
	neg.w	d0
+
	tst.w	d0
	beq.s	loc_1E922
	bmi.s	loc_1E996
	cmpi.b	#$10,d0
	beq.s	loc_1E9A2
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	move.w	#$F,d1
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1E996:
	move.w	d2,d1
	andi.w	#$F,d1
	add.w	d1,d0
	bpl.w	loc_1E922

loc_1E9A2:
	sub.w	a3,d2
	bsr.w	FindFloor2
	add.w	a3,d2
	subi.w	#$10,d1
	rts
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1E9B0:
FindWall:
	bsr.w	Floor_ChkTile
	move.w	(a1),d0
	move.w	d0,d4
	andi.w	#$3FF,d0
	beq.s	loc_1E9C2
	btst	d5,d4
	bne.s	loc_1E9D0

loc_1E9C2:
	add.w	a3,d3
	bsr.w	FindWall2
	sub.w	a3,d3
	addi.w	#$10,d1
	rts
; ===========================================================================

loc_1E9D0:
	movea.l	(Collision_addr).w,a2
	move.b	(a2,d0.w),d0
	andi.w	#$FF,d0
	beq.s	loc_1E9C2
	lea	(ColCurveMap).l,a2
	move.b	(a2,d0.w),(a4)
	lsl.w	#4,d0
	move.w	d2,d1
	btst	#$B,d4
	beq.s	+
	not.w	d1
	addi.b	#$40,(a4)
	neg.b	(a4)
	subi.b	#$40,(a4)
+
	btst	#$A,d4
	beq.s	+
	neg.b	(a4)
+
	andi.w	#$F,d1
	add.w	d0,d1
	lea	(ColArray+$1000).l,a2
	move.b	(a2,d1.w),d0
	ext.w	d0
	eor.w	d6,d4
	btst	#$A,d4
	beq.s	+
	neg.w	d0
+
	tst.w	d0
	beq.s	loc_1E9C2
	bmi.s	loc_1EA3E
	cmpi.b	#$10,d0
	beq.s	loc_1EA4A
	move.w	d3,d1
	andi.w	#$F,d1
	add.w	d1,d0
	move.w	#$F,d1
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1EA3E:
	move.w	d3,d1
	andi.w	#$F,d1
	add.w	d1,d0
	bpl.w	loc_1E9C2

loc_1EA4A:
	sub.w	a3,d3
	bsr.w	FindWall2
	add.w	a3,d3
	subi.w	#$10,d1
	rts
; End of function FindWall


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EA58:
FindWall2:
	bsr.w	Floor_ChkTile
	move.w	(a1),d0
	move.w	d0,d4
	andi.w	#$3FF,d0
	beq.s	loc_1EA6A
	btst	d5,d4
	bne.s	loc_1EA78

loc_1EA6A:
	move.w	#$F,d1
	move.w	d3,d0
	andi.w	#$F,d0
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1EA78:
	movea.l	(Collision_addr).w,a2
	move.b	(a2,d0.w),d0
	andi.w	#$FF,d0
	beq.s	loc_1EA6A
	lea	(ColCurveMap).l,a2
	move.b	(a2,d0.w),(a4)
	lsl.w	#4,d0
	move.w	d2,d1
	btst	#$B,d4
	beq.s	+
	not.w	d1
	addi.b	#$40,(a4)
	neg.b	(a4)
	subi.b	#$40,(a4)
+
	btst	#$A,d4
	beq.s	+
	neg.b	(a4)
+
	andi.w	#$F,d1
	add.w	d0,d1
	lea	(ColArray+$1000).l,a2
	move.b	(a2,d1.w),d0
	ext.w	d0
	eor.w	d6,d4
	btst	#$A,d4
	beq.s	+
	neg.w	d0
+
	tst.w	d0
	beq.s	loc_1EA6A
	bmi.s	loc_1EAE0
	move.w	d3,d1
	andi.w	#$F,d1
	add.w	d1,d0
	move.w	#$F,d1
	sub.w	d0,d1
	rts
; ===========================================================================

loc_1EAE0:
	move.w	d3,d1
	andi.w	#$F,d1
	add.w	d1,d0
	bpl.w	loc_1EA6A
	not.w	d1
	rts
; End of function FindWall2

; ---------------------------------------------------------------------------
; Unused floor/wall subroutine - logs something to do with collision
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; return_1EAF0:
FloorLog_Unk:
	rts
; ---------------------------------------------------------------------------
	lea	(ColArray).l,a1
	lea	(ColArray).l,a2

	; for d3 from 255 to 0
	move.w	#$FF,d3
-	moveq	#$10,d5
	; for d2 from 15 to 0
	move.w	#$F,d2
-	moveq	#0,d4
	; for d1 from 15 to 0
	move.w	#$F,d1
-	move.w	(a1)+,d0
	lsr.l	d5,d0
	addx.w	d4,d4
	dbf	d1,- ; end for d1
	move.w	d4,(a2)+
	suba.w	#$20,a1
	subq.w	#1,d5
	dbf	d2,-- ; end for d2
	adda.w	#$20,a1
	dbf	d3,--- ; end for d3

	lea	(ColArray).l,a1
	lea	(ColArray+$1000).l,a2
	bsr.s	FloorLog_Unk2
	lea	(ColArray).l,a1
	lea	(ColArray).l,a2

; End of function FloorLog_Unk

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EB46:
FloorLog_Unk2:
	move.w	#$FFF,d3

loc_1EB4A:
	moveq	#0,d2
	move.w	#$F,d1
	move.w	(a1)+,d0
	beq.s	loc_1EB78
	bmi.s	loc_1EB62

-	lsr.w	#1,d0
	bcc.s	+
	addq.b	#1,d2
+
	dbf	d1,-

	bra.s	loc_1EB7A
; ===========================================================================

loc_1EB62:
	cmpi.w	#-1,d0
	beq.s	loc_1EB74

-	lsl.w	#1,d0
	bcc.s	+
	subq.b	#1,d2
+
	dbf	d1,-

	bra.s	loc_1EB7A
; ===========================================================================

loc_1EB74:
	move.w	#$10,d0

loc_1EB78:
	move.w	d0,d2

loc_1EB7A:
	move.b	d2,(a2)+
	dbf	d3,loc_1EB4A

	rts

; End of function FloorLog_Unk2
	nop

; ---------------------------------------------------------------------------
; Subroutine to calculate how much space is in front of Sonic or Tails on the ground
; d0 = some input angle
; d1 = output about how many pixels (up to some high enough amount)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EB84: Sonic_WalkSpeed:
CalcRoomInFront:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer_plus(a0),d5
	move.l	x_pos(a0),d3
	move.l	y_pos(a0),d2
	move.w	x_vel(a0),d1
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d3
	move.w	y_vel(a0),d1
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d2
	swap	d2
	swap	d3
	move.b	d0,($FFFFF768).w
	move.b	d0,($FFFFF76A).w
	move.b	d0,d1
	addi.b	#$20,d0
	bpl.s	loc_1EBDC

	move.b	d1,d0
	bpl.s	+
	subq.b	#1,d0
+
	addi.b	#$20,d0
	bra.s	loc_1EBE6
; ---------------------------------------------------------------------------
loc_1EBDC:
	move.b	d1,d0
	bpl.s	+
	addq.b	#1,d0
+
	addi.b	#$1F,d0

loc_1EBE6:
	andi.b	#$C0,d0
	beq.w	loc_1ECE6
	cmpi.b	#$80,d0
	beq.w	CheckSlopeDist
	andi.b	#$38,d1
	bne.s	+
	addq.w	#8,d2
+
	cmpi.b	#$40,d0
	beq.w	CheckLeftWallDist_Part2
	bra.w	CheckRightWallDist_Part2

; End of function CalcRoomInFront


; ---------------------------------------------------------------------------
; Subroutine to calculate how much space is empty above Sonic's/Tails' head
; d0 = input angle perpendicular to the spine
; d1 = output about how many pixels are overhead (up to some high enough amount)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1EC0A:
CalcRoomOverHead:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer_plus(a0),d5
	move.b	d0,($FFFFF768).w
	move.b	d0,($FFFFF76A).w
	addi.b	#$20,d0
	andi.b	#$C0,d0
	cmpi.b	#$40,d0
	beq.w	CheckLeftCeilingDist
	cmpi.b	#$80,d0
	beq.w	CheckCeilingDist
	cmpi.b	#$C0,d0
	beq.w	CheckRightCeilingDist

; End of function CalcRoomOverHead

; ---------------------------------------------------------------------------
; Subroutine to check if Sonic/Tails is near the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EC4E: Sonic_HitFloor:
Sonic_CheckFloor:
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	move.b	layer(a0),d5
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindFloor
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindFloor
	move.w	(sp)+,d0
	move.b	#0,d2

loc_1ECC6:
	move.b	($FFFFF76A).w,d3
	cmp.w	d0,d1
	ble.s	loc_1ECD4
	move.b	($FFFFF768).w,d3
	exg	d0,d1

loc_1ECD4:
	btst	#0,d3
	beq.s	+
	move.b	d2,d3
+
	rts
; ===========================================================================

	; a bit of unused/dead code here
	move.w	y_pos(a0),d2 ; a0=character
	move.w	x_pos(a0),d3

	; no idea what this is for, some collision check
loc_1ECE6:
	addi.w	#$A,d2
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindFloor
	move.b	#0,d2

	; called at the end of the wall checking routines... don't know what it does either
loc_1ECFE:
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	d2,d3
+
	rts
; ===========================================================================

	; Unused collision checking subroutine

	move.w	x_pos(a0),d3 ; a0=character
	move.w	y_pos(a0),d2
	subq.w	#4,d2
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$D,layer_plus(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	move.b	layer_plus(a0),d5
	bsr.w	FindFloor
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#0,d3
+
	rts

; ===========================================================================
; loc_1ED56:
ChkFloorEdge:
	move.w	x_pos(a0),d3
; loc_1ED5A:
ChkFloorEdge_Part2:
	move.w	y_pos(a0),d2
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a0)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	move.b	layer(a0),d5
	bsr.w	FindFloor
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#0,d3
+
	rts
; ===========================================================================

loc_1EDA8:
	move.w	x_pos(a1),d3
	move.w	y_pos(a1),d2
	moveq	#0,d0
	move.b	y_radius(a1),d0
	ext.w	d0
	add.w	d0,d2
	move.l	#Primary_Collision,(Collision_addr).w
	cmpi.b	#$C,layer(a1)
	beq.s	+
	move.l	#Secondary_Collision,(Collision_addr).w
+
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	move.b	layer(a1),d5
	bsr.w	FindFloor
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	return_1EDF8
	move.b	#0,d3

return_1EDF8:
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine checking if an object should interact with the floor
; (objects such as a monitor Sonic bumps from underneath)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EDFA: ObjHitFloor:
ObjCheckFloorDist:
	move.w	x_pos(a0),d3
	move.w	y_pos(a0),d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	moveq	#$C,d5
	bsr.w	FindFloor
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#0,d3
+
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Collision check used to let the HTZ boss fire attack to hit the ground
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EE30:
FireCheckFloorDist:
	move.w	x_pos(a1),d3
	move.w	y_pos(a1),d2
	move.b	y_radius(a1),d0
	ext.w	d0
	add.w	d0,d2
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	moveq	#$C,d5
	bra.w	FindFloor
; End of function FireCheckFloorDist

; ---------------------------------------------------------------------------
; Collision check used to let scattered rings bounce on the ground
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EE56:
RingCheckFloorDist:
	move.w	x_pos(a0),d3
	move.w	y_pos(a0),d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	moveq	#$C,d5
	bra.w	Obj_CheckInFloor
; End of function RingCheckFloorDist

; ---------------------------------------------------------------------------
; Stores a distance to the nearest wall above Sonic/Tails,
; where "above" = right, into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EE7C:
CheckRightCeilingDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindWall
	move.w	d1,-(sp)
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindWall
	move.w	(sp)+,d0
	move.b	#-$40,d2
	bra.w	loc_1ECC6
; End of function CheckRightCeilingDist

; ---------------------------------------------------------------------------
; Stores a distance to the nearest wall on the right of Sonic/Tails into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1EEDC:
CheckRightWallDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
; loc_1EEE4:
CheckRightWallDist_Part2:
	addi.w	#$A,d3
	lea	($FFFFF768).w,a4
	movea.w	#$10,a3
	move.w	#0,d6
	bsr.w	FindWall
	move.b	#-$40,d2
	bra.w	loc_1ECFE
; End of function CheckRightWallDist

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EF00:
ObjCheckLeftWallDist:
	add.w	x_pos(a0),d3
	move.w	y_pos(a0),d2
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#$10,a3
	move.w	#0,d6
	moveq	#$D,d5
	bsr.w	FindWall
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#-$40,d3
+
	rts
; End of function ObjCheckLeftWallDist

; ---------------------------------------------------------------------------
; Stores a distance from Sonic/Tails to the nearest ceiling into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EF2E: Sonic_DontRunOnWalls:
CheckCeilingDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	eori.w	#$F,d2 ; flip position upside-down within the current 16x16 block?
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d3
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	bsr.w	FindFloor
	move.w	d1,-(sp)

	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	eori.w	#$F,d2
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	lea	($FFFFF76A).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	bsr.w	FindFloor
	move.w	(sp)+,d0

	move.b	#$80,d2
	bra.w	loc_1ECC6
; End of function CheckCeilingDist

; ===========================================================================
	; a bit of unused/dead code here
	move.w	y_pos(a0),d2 ; a0=character
	move.w	x_pos(a0),d3

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; called when Sonic/Tails walks up a curving slope... I'm not sure what it does
; loc_1EF9E:
CheckSlopeDist:
	subi.w	#$A,d2
	eori.w	#$F,d2
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	bsr.w	FindFloor
	move.b	#$80,d2
	bra.w	loc_1ECFE
; End of function CheckSlopeDist

; ---------------------------------------------------------------------------
; Stores a distance to the nearest wall above the object into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EFBE: ObjHitCeiling:
ObjCheckCeilingDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	eori.w	#$F,d2
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$800,d6
	moveq	#$D,d5
	bsr.w	FindFloor
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#$80,d3
+
	rts
; End of function ObjCheckCeilingDist

; ---------------------------------------------------------------------------
; Stores a distance to the nearest wall above Sonic/Tails,
; where "above" = left, into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1EFF6:
CheckLeftCeilingDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	sub.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	eori.w	#$F,d3
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$400,d6
	bsr.w	FindWall
	move.w	d1,-(sp)

	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
	moveq	#0,d0
	move.b	x_radius(a0),d0
	ext.w	d0
	add.w	d0,d2
	move.b	y_radius(a0),d0
	ext.w	d0
	sub.w	d0,d3
	eori.w	#$F,d3
	lea	($FFFFF76A).w,a4
	movea.w	#-$10,a3
	move.w	#$400,d6
	bsr.w	FindWall
	move.w	(sp)+,d0
	move.b	#$40,d2
	bra.w	loc_1ECC6
; End of function CheckLeftCeilingDist

; ---------------------------------------------------------------------------
; Stores a distance to the nearest wall on the left of Sonic/Tails into d1
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1F05E: Sonic_HitWall:
CheckLeftWallDist:
	move.w	y_pos(a0),d2
	move.w	x_pos(a0),d3
; loc_1F066:
CheckLeftWallDist_Part2:
	subi.w	#$A,d3
	eori.w	#$F,d3
	lea	($FFFFF768).w,a4
	movea.w	#-$10,a3
	move.w	#$400,d6
	bsr.w	FindWall
	move.b	#$40,d2
	bra.w	loc_1ECFE
; End of function CheckLeftWallDist

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1F086:
ObjCheckRightWallDist:
	add.w	x_pos(a0),d3
	move.w	y_pos(a0),d2
	lea	($FFFFF768).w,a4
	move.b	#0,(a4)
	movea.w	#-$10,a3
	move.w	#$400,d6
	moveq	#$D,d5
	bsr.w	FindWall
	move.b	($FFFFF768).w,d3
	btst	#0,d3
	beq.s	+
	move.b	#$40,d3
+
	rts




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 79 - Star pole / starpost / checkpoint
; ----------------------------------------------------------------------------
; Sprite_1F0B4:
Obj79:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj79_States(pc,d0.w),d1
	jmp	Obj79_States(pc,d1.w)
; ===========================================================================
; off_1F0C2:
Obj79_States:
	dc.w Obj79_Init - Obj79_States; 0
	dc.w Obj79_Main - Obj79_States; 2
	dc.w Obj79_Animate - Obj79_States; 4
	dc.w Obj79_Dongle - Obj79_States; 6
	dc.w Obj79_Star - Obj79_States; 8
; ===========================================================================
; loc_1F0CC:
Obj79_Init:
	addq.b	#2,routine(a0) ; => Obj79_Main
	move.l	#Obj79_MapUnc_1F424,mappings(a0)
	move.w	#$47C,art_tile(a0)
	bsr.w	JmpTo3_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#8,width_pixels(a0)
	move.b	#5,priority(a0)
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	bclr	#7,2(a2,d0.w)
	btst	#0,2(a2,d0.w)
	bne.s	loc_1F120
	move.b	(Last_star_pole_hit).w,d1
	andi.b	#$7F,d1
	move.b	subtype(a0),d2
	andi.b	#$7F,d2
	cmp.b	d2,d1
	bcs.s	Obj79_Main

loc_1F120:
	bset	#0,2(a2,d0.w)
	move.b	#2,anim(a0)

; loc_1F12C:
Obj79_Main:
	tst.w	(Debug_placement_mode).w
	bne.w	Obj79_Animate
	lea	(MainCharacter).w,a3 ; a3=character
	move.b	(Last_star_pole_hit).w,d1
	bsr.s	Obj79_CheckActivation
	tst.w	(Two_player_mode).w
	beq.w	Obj79_Animate
	lea	(Sidekick).w,a3 ; a3=character
	move.b	(Last_star_pole_hit_2P).w,d1
	bsr.s	Obj79_CheckActivation
	bra.w	Obj79_Animate
; ---------------------------------------------------------------------------
; loc_1F154:
Obj79_CheckActivation:
	andi.b	#$7F,d1
	move.b	subtype(a0),d2
	andi.b	#$7F,d2
	cmp.b	d2,d1
	bcc.w	loc_1F222
	move.w	x_pos(a3),d0
	sub.w	x_pos(a0),d0
	addi.w	#8,d0
	cmpi.w	#$10,d0
	bcc.w	return_1F220
	move.w	y_pos(a3),d0
	sub.w	y_pos(a0),d0
	addi.w	#$40,d0
	cmpi.w	#$68,d0
	bcc.w	return_1F220
	move.w	#$21+$80,d0 ; checkpoint ding-dong sound
	jsr	(PlaySound).l
	jsr	(SingleObjLoad).l
	bne.s	loc_1F206
	_move.b	#$79,0(a1) ; load obj79
	move.b	#6,routine(a1) ; => Obj79_Dongle
	move.w	x_pos(a0),objoff_30(a1)
	move.w	y_pos(a0),objoff_32(a1)
	subi.w	#$14,objoff_32(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#8,width_pixels(a1)
	move.b	#4,priority(a1)
	move.b	#2,mapping_frame(a1)
	move.w	#$20,objoff_36(a1)
	move.w	a0,parent(a1)
	tst.w	(Two_player_mode).w
	bne.s	loc_1F206
	cmpi.b	#7,(Emerald_count).w
	beq.s	loc_1F206
	cmpi.w	#$32,(Ring_count).w
	bcs.s	loc_1F206
	bsr.w	Obj79_MakeSpecialStars

loc_1F206:
	move.b	#1,anim(a0)
	bsr.w	Obj79_SaveData
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	bset	#0,2(a2,d0.w)

return_1F220:
	rts
; ===========================================================================

loc_1F222:
	tst.b	anim(a0)
	bne.s	return_1F22E
	move.b	#2,anim(a0)

return_1F22E:
	rts
; ===========================================================================
; loc_1F230:
Obj79_Animate:
	lea	(off_1F414).l,a1
	bsr.w	JmpTo2_AnimateSprite
	jmp	MarkObjGone
; ===========================================================================
; loc_1F240:
Obj79_Dongle:
	subq.w	#1,objoff_36(a0)
	bpl.s	Obj79_MoveDonglyThing
	movea.w	parent(a0),a1 ; a1=object
	cmpi.b	#$79,(a1)
	bne.s	+
	move.b	#2,anim(a1)
	move.b	#0,mapping_frame(a1)
+
	jmp	DeleteObject
; ===========================================================================
; loc_1F262:
Obj79_MoveDonglyThing:
	move.b	angle(a0),d0
	subi.b	#$10,angle(a0)
	subi.b	#$40,d0
	jsr	(CalcSine).l
	muls.w	#$C00,d1
	swap	d1
	add.w	objoff_30(a0),d1
	move.w	d1,x_pos(a0)
	muls.w	#$C00,d0
	swap	d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	jmp	MarkObjGone
; ===========================================================================
; hit a starpost / save checkpoint
; loc_1F298:
Obj79_SaveData:
	cmpa.w	#MainCharacter,a3	; is it player 1?
	bne.w	Obj79_SaveDataPlayer2	; if not, branch
	move.b	subtype(a0),(Last_star_pole_hit).w
	move.b	(Last_star_pole_hit).w,(Saved_Last_star_pole_hit).w
	move.w	x_pos(a0),(Saved_x_pos).w
	move.w	y_pos(a0),(Saved_y_pos).w
	move.w	(MainCharacter+art_tile).w,(Saved_art_tile).w
	move.w	(MainCharacter+layer).w,(Saved_layer).w
	move.w	(Ring_count).w,(Saved_Ring_count).w
	move.b	(Extra_life_flags).w,(Saved_Extra_life_flags).w
	move.l	(Timer).w,(Saved_Timer).w
	move.b	(Dynamic_Resize_Routine).w,(Saved_Dynamic_Resize_Routine).w
	move.w	(Camera_Max_Y_pos_now).w,(Saved_Camera_Max_Y_pos).w
	move.w	(Camera_X_pos).w,(Saved_Camera_X_pos).w
	move.w	(Camera_Y_pos).w,(Saved_Camera_Y_pos).w
	move.w	($FFFFEE08).w,($FFFFFE44).w
	move.w	($FFFFEE0C).w,($FFFFFE46).w
	move.w	($FFFFEE10).w,($FFFFFE48).w
	move.w	($FFFFEE14).w,($FFFFFE4A).w
	move.w	($FFFFEE18).w,($FFFFFE4C).w
	move.w	($FFFFEE1C).w,($FFFFFE4E).w
	move.w	(Water_Level_2).w,(Saved_Water_Level).w
	move.b	(Water_routine).w,(Saved_Water_routine).w
	move.b	(Water_move).w,(Saved_Water_move).w
	rts
; ===========================================================================
; second player hit a checkpoint in 2-player mode
; loc_1F326:
Obj79_SaveDataPlayer2:
	move.b	subtype(a0),(Last_star_pole_hit_2P).w
	move.b	(Last_star_pole_hit_2P).w,(Saved_Last_star_pole_hit_2P).w
	move.w	x_pos(a0),(Saved_x_pos_2P).w
	move.w	y_pos(a0),(Saved_y_pos_2P).w
	move.w	(Sidekick+art_tile).w,(Saved_art_tile_2P).w
	move.w	(Sidekick+layer).w,(Saved_layer_2P).w
	move.w	(Ring_count_2P).w,(Saved_Ring_count_2P).w
	move.b	(Extra_life_flags_2P).w,(Saved_Extra_life_flags_2P).w
	move.l	(Timer_2P).w,(Saved_Timer_2P).w
	rts
; ===========================================================================
; continue from a starpost / load checkpoint
; loc_1F35E:
Obj79_LoadData:
	move.b	(Saved_Last_star_pole_hit).w,(Last_star_pole_hit).w
	move.w	(Saved_x_pos).w,(MainCharacter+x_pos).w
	move.w	(Saved_y_pos).w,(MainCharacter+y_pos).w
	move.w	(Saved_Ring_count).w,(Ring_count).w
	move.b	(Saved_Extra_life_flags).w,(Extra_life_flags).w
	clr.w	(Ring_count).w
	clr.b	(Extra_life_flags).w
	move.l	(Saved_Timer).w,(Timer).w
	move.b	#59,(Timer_centisecond).w
	subq.b	#1,(Timer_second).w
	move.w	(Saved_art_tile).w,(MainCharacter+art_tile).w
	move.w	(Saved_layer).w,(MainCharacter+layer).w
	move.b	(Saved_Dynamic_Resize_Routine).w,(Dynamic_Resize_Routine).w
	move.b	(Saved_Water_routine).w,(Water_routine).w
	move.w	(Saved_Camera_Max_Y_pos).w,(Camera_Max_Y_pos_now).w
	move.w	(Saved_Camera_Max_Y_pos).w,(Camera_Max_Y_pos).w
	move.w	(Saved_Camera_X_pos).w,(Camera_X_pos).w
	move.w	(Saved_Camera_Y_pos).w,(Camera_Y_pos).w
	move.w	($FFFFFE44).w,($FFFFEE08).w
	move.w	($FFFFFE46).w,($FFFFEE0C).w
	move.w	($FFFFFE48).w,($FFFFEE10).w
	move.w	($FFFFFE4A).w,($FFFFEE14).w
	move.w	($FFFFFE4C).w,($FFFFEE18).w
	move.w	($FFFFFE4E).w,($FFFFEE1C).w
	tst.b	(Water_flag).w	; does the level have water?
	beq.s	+		; if not, branch to skip loading water stuff
	move.w	(Saved_Water_Level).w,(Water_Level_2).w
	move.b	(Saved_Water_routine).w,(Water_routine).w
	move.b	(Saved_Water_move).w,(Water_move).w
+
	tst.b	(Last_star_pole_hit).w
	bpl.s	return_1F412
	move.w	(Saved_x_pos).w,d0
	subi.w	#$A0,d0
	move.w	d0,(Camera_Min_X_pos).w

return_1F412:
	rts
; ===========================================================================
; animation script
off_1F414:
	dc.w byte_1F41A-off_1F414
	dc.w byte_1F41D-off_1F414
	dc.w byte_1F420-off_1F414
byte_1F41A:
	dc.b  $F,  0,$FF
byte_1F41D:
	dc.b  $F,  1,$FF
byte_1F420:
	dc.b   3,  0,  4,$FF
	even
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj79_MapUnc_1F424:	BINCLUDE "mappings/sprite/obj79_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj79_MapUnc_1F4A0:	BINCLUDE "mappings/sprite/obj79_b.bin"
; ===========================================================================

; loc_1F4C4:
Obj79_MakeSpecialStars:
	moveq	#4-1,d1 ; execute the loop 4 times (1 for each star)
	moveq	#0,d2

-	bsr.w	SingleObjLoad2
	bne.s	return_1F534
	_move.b	0(a0),0(a1) ; load obj79
	move.l	#Obj79_MapUnc_1F4A0,mappings(a1)
	move.w	#$47C,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#8,routine(a1) ; => Obj79_Star
	move.w	x_pos(a0),d0
	move.w	d0,x_pos(a1)
	move.w	d0,objoff_30(a1)
	move.w	y_pos(a0),d0
	subi.w	#$30,d0
	move.w	d0,y_pos(a1)
	move.w	d0,objoff_32(a1)
	move.b	priority(a0),priority(a1)
	move.b	#8,width_pixels(a1)
	move.b	#1,mapping_frame(a1)
	move.w	#-$400,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.w	d2,objoff_34(a1) ; set the angle
	addi.w	#$40,d2 ; increase the angle for next time
	dbf	d1,- ; loop

return_1F534:
	rts
; ===========================================================================
; loc_1F536:
Obj79_Star:
	move.b	collision_property(a0),d0
	beq.w	loc_1F554
	andi.b	#1,d0
	beq.s	+
	move.b	#1,($FFFFF7CD).w
	move.b	#$10,(Game_Mode).w ; => SpecialStage
+
	clr.b	collision_property(a0)

loc_1F554:
	addi.w	#$A,objoff_34(a0)
	move.w	objoff_34(a0),d0
	andi.w	#$FF,d0
	jsr	(CalcSine).l
	asr.w	#5,d0
	asr.w	#3,d1
	move.w	d1,d3
	move.w	objoff_34(a0),d2
	andi.w	#$3E0,d2
	lsr.w	#5,d2
	moveq	#2,d5
	moveq	#0,d4
	cmpi.w	#$10,d2
	ble.s	+
	neg.w	d1
+
	andi.w	#$F,d2
	cmpi.w	#8,d2
	ble.s	loc_1F594
	neg.w	d2
	andi.w	#7,d2

loc_1F594:
	lsr.w	#1,d2
	beq.s	+
	add.w	d1,d4
+
	asl.w	#1,d1
	dbf	d5,loc_1F594

	asr.w	#4,d4
	add.w	d4,d0
	addq.w	#1,objoff_36(a0)
	move.w	objoff_36(a0),d1
	cmpi.w	#$80,d1
	beq.s	loc_1F5BE
	bgt.s	loc_1F5C4

loc_1F5B4:
	muls.w	d1,d0
	muls.w	d1,d3
	asr.w	#7,d0
	asr.w	#7,d3
	bra.s	loc_1F5D6
; ===========================================================================

loc_1F5BE:
	move.b	#$D8,collision_flags(a0)

loc_1F5C4:
	cmpi.w	#$180,d1
	ble.s	loc_1F5D6
	neg.w	d1
	addi.w	#$200,d1
	bmi.w	JmpTo10_DeleteObject
	bra.s	loc_1F5B4
; ===========================================================================

loc_1F5D6:
	move.w	objoff_30(a0),d2
	add.w	d3,d2
	move.w	d2,x_pos(a0)
	move.w	objoff_32(a0),d2
	add.w	d0,d2
	move.w	d2,y_pos(a0)
	addq.b	#1,anim_frame(a0)
	move.b	anim_frame(a0),d0
	andi.w	#6,d0
	lsr.w	#1,d0
	cmpi.b	#3,d0
	bne.s	+
	moveq	#1,d0
+
	move.b	d0,mapping_frame(a0)
	bra.w	JmpTo_MarkObjGone
; ===========================================================================

JmpTo10_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
	nop

JmpTo_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo2_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo3_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7D - Points that can be gotten at the end of an act (leftover from S1)  (unused)
; ----------------------------------------------------------------------------
; Sprite_1F624:
Obj7D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj7D_States(pc,d0.w),d1
	jmp	Obj7D_States(pc,d1.w)
; ===========================================================================
; off_1F632:
Obj7D_States:
	dc.w Obj7D_Init - Obj7D_States; 0
	dc.w Obj7D_Main - Obj7D_States; 2
; ===========================================================================
; loc_1F636:
Obj7D_Init:
	moveq	#$10,d2
	move.w	d2,d3
	add.w	d3,d3
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d2,d0
	cmp.w	d3,d0
	bcc.s	Obj7D_NoAdd
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	add.w	d2,d1
	cmp.w	d3,d1
	bcc.s	Obj7D_NoAdd
	tst.w	(Debug_placement_mode).w
	bne.s	Obj7D_NoAdd
	tst.b	($FFFFF7CD).w
	bne.s	Obj7D_NoAdd
	addq.b	#2,routine(a0)
	move.l	#Obj7D_MapUnc_1F6FE,mappings(a0)
	move.w	#$84B6,art_tile(a0)
	bsr.w	JmpTo4_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#0,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.b	subtype(a0),mapping_frame(a0)
	move.w	#$77,objoff_30(a0)
	move.w	#$C9,d0
	jsr	(PlaySound).l
	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.w	word_1F6D2(pc,d0.w),d0
	jsr	AddPoints

Obj7D_NoAdd:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	JmpTo11_DeleteObject
	rts
; ===========================================================================

JmpTo11_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
word_1F6D2:
	dc.w	 0
	dc.w  $3E8	; 1
	dc.w   $64	; 2
	dc.w	 1	; 3
; ===========================================================================
; loc_1F6DA:
Obj7D_Main:
	subq.w	#1,objoff_30(a0)
	bmi.s	JmpTo12_DeleteObject
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	JmpTo12_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo12_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; -------------------------------------------------------------------------------
; Unused sprite mappings
; -------------------------------------------------------------------------------
Obj7D_MapUnc_1F6FE:	BINCLUDE "mappings/sprite/obj7D.bin"
; ===========================================================================
	nop

JmpTo4_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 44 - Round bumper from Casino Night Zone
; ----------------------------------------------------------------------------
; Sprite_1F730:
Obj44:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj44_States(pc,d0.w),d1
	jmp	Obj44_States(pc,d1.w)
; ===========================================================================
; off_1F73E:
Obj44_States:
	dc.w Obj44_Init - Obj44_States; 0
	dc.w Obj44_Main - Obj44_States; 1
; ===========================================================================
; loc_1F742:
Obj44_Init:
	addq.b	#2,routine(a0) ; => Obj44_Main
	move.l	#Obj44_MapUnc_1F85A,mappings(a0)
	move.w	#$439A,art_tile(a0)
	bsr.w	JmpTo5_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	#$D7,collision_flags(a0)

; loc_1F770:
Obj44_Main:
	move.b	collision_property(a0),d0
	beq.w	loc_1F83E
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#0,collision_property(a0)
	beq.s	+
	bsr.s	Obj44_BumpCharacter
+
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#1,collision_property(a0)
	beq.s	+
	bsr.s	Obj44_BumpCharacter
+
	clr.b	collision_property(a0)
	bra.w	loc_1F83E
; ===========================================================================
; loc_1F79C:
Obj44_BumpCharacter:
	move.w	x_pos(a0),d1
	move.w	y_pos(a0),d2
	sub.w	x_pos(a1),d1
	sub.w	y_pos(a1),d2
	jsr	(CalcAngle).l
	move.b	(Timer_frames).w,d1
	andi.w	#3,d1
	add.w	d1,d0
	jsr	(CalcSine).l
	muls.w	#-$700,d1
	asr.l	#8,d1
	move.w	d1,x_vel(a1)
	muls.w	#-$700,d0
	asr.l	#8,d0
	move.w	d0,y_vel(a1)
	bset	#1,status(a1)
	bclr	#4,status(a1)
	bclr	#5,status(a1)
	clr.b	jumping(a1)
	move.b	#1,anim(a0)
	move.w	#$B4,d0
	jsr	(PlaySound).l
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	cmpi.b	#$8A,2(a2,d0.w)
	bcc.s	return_1F83C
	addq.b	#1,2(a2,d0.w)
+
	moveq	#1,d0
	movea.w	a1,a3
	jsr	AddPoints2
	bsr.w	SingleObjLoad
	bne.s	return_1F83C
	_move.b	#$29,0(a1) ; load obj29
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#4,mapping_frame(a1)

return_1F83C:
	rts
; ===========================================================================

loc_1F83E:
	lea	(off_1F84C).l,a1
	bsr.w	JmpTo3_AnimateSprite
	bra.w	JmpTo2_MarkObjGone
; ===========================================================================
off_1F84C:
	dc.w byte_1F850-off_1F84C
	dc.w byte_1F853-off_1F84C; 1
byte_1F850:
	dc.b  $F,  0,$FF
byte_1F853:
	dc.b   3,  1,  0,  1,$FD,  0,  0
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj44_MapUnc_1F85A:	BINCLUDE "mappings/sprite/obj44.bin"
; ===========================================================================
	nop

JmpTo2_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo3_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo5_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 24 - Bubbles in Aquatic Ruin Zone
; ----------------------------------------------------------------------------
; Sprite_1F8A8:
Obj24:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_1F8B6(pc,d0.w),d1
	jmp	off_1F8B6(pc,d1.w)
; ===========================================================================
off_1F8B6:
	dc.w loc_1F8C2-off_1F8B6
	dc.w loc_1F924-off_1F8B6; 1
	dc.w loc_1F93E-off_1F8B6; 2
	dc.w loc_1F99E-off_1F8B6; 3
	dc.w BranchTo_JmpTo15_DeleteObject-off_1F8B6; 4
	dc.w loc_1F9C0-off_1F8B6; 5
; ===========================================================================

loc_1F8C2:
	addq.b	#2,routine(a0)
	move.l	#Obj24_MapUnc_1FBF6,mappings(a0)
	move.w	#$855B,art_tile(a0)
	bsr.w	JmpTo6_Adjust2PArtPointer
	move.b	#$84,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	subtype(a0),d0
	bpl.s	loc_1F90A
	addq.b	#8,routine(a0)
	andi.w	#$7F,d0
	move.b	d0,objoff_32(a0)
	move.b	d0,objoff_33(a0)
	move.b	#6,anim(a0)
	bra.w	loc_1F9C0
; ===========================================================================

loc_1F90A:
	move.b	d0,anim(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	#-$88,y_vel(a0)
	jsr	(RandomNumber).l
	move.b	d0,angle(a0)

loc_1F924:
	lea	(off_1FBCC).l,a1
	jsr	AnimateSprite
	cmpi.b	#6,mapping_frame(a0)
	bne.s	loc_1F93E
	move.b	#1,objoff_2E(a0)

loc_1F93E:

	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0
	bcs.s	loc_1F956
	move.b	#6,routine(a0)
	addq.b	#3,anim(a0)
	bra.w	loc_1F99E
; ===========================================================================

loc_1F956:
	move.b	angle(a0),d0
	addq.b	#1,angle(a0)
	andi.w	#$7F,d0
	lea	(Obj0A_WobbleData).l,a1
	move.b	(a1,d0.w),d0
	ext.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	tst.b	objoff_2E(a0)
	beq.s	loc_1F988
	bsr.w	loc_1FB02
	cmpi.b	#6,routine(a0)
	beq.s	loc_1F99E

loc_1F988:
	bsr.w	JmpTo3_ObjectMove
	tst.b	render_flags(a0)
	bpl.s	JmpTo13_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo13_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_1F99E:

	lea	(off_1FBCC).l,a1
	jsr	AnimateSprite
	tst.b	render_flags(a0)
	bpl.s	JmpTo14_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo14_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

BranchTo_JmpTo15_DeleteObject 
	bra.w	JmpTo15_DeleteObject
; ===========================================================================

loc_1F9C0:

	tst.w	objoff_36(a0)
	bne.s	loc_1FA22
	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0
	bcc.w	loc_1FACE
	tst.b	render_flags(a0)
	bpl.w	loc_1FACE
	subq.w	#1,objoff_38(a0)
	bpl.w	loc_1FAC2
	move.w	#1,objoff_36(a0)

loc_1F9E8:
	jsr	(RandomNumber).l
	move.w	d0,d1
	andi.w	#7,d0
	cmpi.w	#6,d0
	bcc.s	loc_1F9E8
	move.b	d0,objoff_34(a0)
	andi.w	#$C,d1
	lea	(byte_1FAF0).l,a1
	adda.w	d1,a1
	move.l	a1,objoff_3C(a0)
	subq.b	#1,objoff_32(a0)
	bpl.s	BranchTo_loc_1FA2A
	move.b	objoff_33(a0),objoff_32(a0)
	bset	#7,objoff_36(a0)

BranchTo_loc_1FA2A 
	bra.s	loc_1FA2A
; ===========================================================================

loc_1FA22:
	subq.w	#1,objoff_38(a0)
	bpl.w	loc_1FAC2

loc_1FA2A:
	jsr	(RandomNumber).l
	andi.w	#$1F,d0
	move.w	d0,objoff_38(a0)
	bsr.w	SingleObjLoad
	bne.s	loc_1FAA6
	_move.b	0(a0),0(a1) ; load obj24
	move.w	x_pos(a0),x_pos(a1)
	jsr	(RandomNumber).l
	andi.w	#$F,d0
	subq.w	#8,d0
	add.w	d0,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	movea.l	objoff_3C(a0),a2 ; a2=object
	move.b	(a2,d0.w),subtype(a1)
	btst	#7,objoff_36(a0)
	beq.s	loc_1FAA6
	jsr	(RandomNumber).l
	andi.w	#3,d0
	bne.s	loc_1FA92
	bset	#6,objoff_36(a0)
	bne.s	loc_1FAA6
	move.b	#2,subtype(a1)

loc_1FA92:
	tst.b	objoff_34(a0)
	bne.s	loc_1FAA6
	bset	#6,objoff_36(a0)
	bne.s	loc_1FAA6
	move.b	#2,subtype(a1)

loc_1FAA6:
	subq.b	#1,objoff_34(a0)
	bpl.s	loc_1FAC2
	jsr	(RandomNumber).l
	andi.w	#$7F,d0
	addi.w	#$80,d0
	add.w	d0,objoff_38(a0)
	clr.w	objoff_36(a0)

loc_1FAC2:
	lea	(off_1FBCC).l,a1
	jsr	AnimateSprite

loc_1FACE:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo15_DeleteObject
	move.w	(Water_Level_1).w,d0
	cmp.w	y_pos(a0),d0
	bcs.w	JmpTo7_DisplaySprite
	rts
; ===========================================================================
byte_1FAF0:
	dc.b   0
	dc.b   1	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   0	; 4
	dc.b   0	; 5
	dc.b   1	; 6
	dc.b   0	; 7
	dc.b   0	; 8
	dc.b   0	; 9
	dc.b   0	; 10
	dc.b   1	; 11
	dc.b   0	; 12
	dc.b   1	; 13
	dc.b   0	; 14
	dc.b   0	; 15
	dc.b   1	; 16
	dc.b   0	; 17
; ===========================================================================

loc_1FB02:
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_1FB0C
	lea	(Sidekick).w,a1 ; a1=character

loc_1FB0C:
	tst.b	obj_control(a1)
	bmi.w	return_1FBCA
	move.w	x_pos(a1),d0
	move.w	x_pos(a0),d1
	subi.w	#$10,d1
	cmp.w	d0,d1
	bcc.w	return_1FBCA
	addi.w	#$20,d1
	cmp.w	d0,d1
	bcs.w	return_1FBCA
	move.w	y_pos(a1),d0
	move.w	y_pos(a0),d1
	cmp.w	d0,d1
	bcc.w	return_1FBCA
	addi.w	#$10,d1
	cmp.w	d0,d1
	bcs.w	return_1FBCA
	bsr.w	ResumeMusic
	move.w	#$AD,d0
	jsr	(PlaySound).l
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	move.b	#$15,anim(a1)
	move.w	#$23,move_lock(a1)
	move.b	#0,jumping(a1)
	bclr	#5,status(a1)
	bclr	#4,status(a1)
	btst	#2,status(a1)
	beq.w	loc_1FBB8
	cmpi.b	#1,(a1)
	bne.s	loc_1FBA8
	bclr	#2,status(a1)
	move.b	#$13,y_radius(a1)
	move.b	#9,x_radius(a1)
	subq.w	#5,y_pos(a1)
	bra.s	loc_1FBB8
; ===========================================================================

loc_1FBA8:
	move.b	#$F,y_radius(a1)
	move.b	#9,x_radius(a1)
	subq.w	#1,y_pos(a1)

loc_1FBB8:
	cmpi.b	#6,routine(a0)
	beq.s	return_1FBCA
	move.b	#6,routine(a0)
	addq.b	#3,anim(a0)

return_1FBCA:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite animations
; -------------------------------------------------------------------------------
off_1FBCC:
	dc.w byte_1FBDA-off_1FBCC
	dc.w byte_1FBDF-off_1FBCC; 1
	dc.w byte_1FBE5-off_1FBCC; 2
	dc.w byte_1FBEC-off_1FBCC; 3
	dc.w byte_1FBEC-off_1FBCC; 4
	dc.w byte_1FBEE-off_1FBCC; 5
	dc.w byte_1FBF2-off_1FBCC; 6
byte_1FBDA:
	dc.b  $E,  0,  1,  2,$FC
byte_1FBDF:
	dc.b  $E,  1,  2,  3,  4,$FC
byte_1FBE5:
	dc.b  $E,  2,  3,  4,  5,  6,$FC
byte_1FBEC:
	dc.b   4,$FC
byte_1FBEE:
	dc.b   4,  6,  7,$FC
byte_1FBF2:
	dc.b  $F, $E, $F,$FF
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj24_MapUnc_1FBF6:
	dc.w word_1FC3A-Obj24_MapUnc_1FBF6
	dc.w word_1FC44-Obj24_MapUnc_1FBF6; 1
	dc.w word_1FC44-Obj24_MapUnc_1FBF6; 2
	dc.w word_1FC4E-Obj24_MapUnc_1FBF6; 3
	dc.w word_1FC58-Obj24_MapUnc_1FBF6; 4
	dc.w word_1FC62-Obj24_MapUnc_1FBF6; 5
	dc.w word_1FC6C-Obj24_MapUnc_1FBF6; 6
	dc.w word_1FC76-Obj24_MapUnc_1FBF6; 7
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 8
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 9
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 10
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 11
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 12
	dc.w word_1FC98-Obj24_MapUnc_1FBF6; 13
	dc.w word_1FCA2-Obj24_MapUnc_1FBF6; 14
	dc.w word_1FCAC-Obj24_MapUnc_1FBF6; 15
	dc.w word_1FCB6-Obj24_MapUnc_1FBF6; 16
; -------------------------------------------------------------------------------
; sprite mappings
; merged with the above mappings, can't split to file in a useful way...
; -------------------------------------------------------------------------------
Obj24_MapUnc_1FC18:
	dc.w	word_1FC3A-Obj24_MapUnc_1FC18
	dc.w	word_1FC44-Obj24_MapUnc_1FC18; 1
	dc.w	word_1FC44-Obj24_MapUnc_1FC18; 2
	dc.w	word_1FC4E-Obj24_MapUnc_1FC18; 3
	dc.w	word_1FC58-Obj24_MapUnc_1FC18; 4
	dc.w	word_1FC62-Obj24_MapUnc_1FC18; 5
	dc.w	word_1FC6C-Obj24_MapUnc_1FC18; 6
	dc.w	word_1FC76-Obj24_MapUnc_1FC18; 7
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 8
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 9
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 10
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 11
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 12
	dc.w	word_1FCB8-Obj24_MapUnc_1FC18; 13
	dc.w	word_1FCA2-Obj24_MapUnc_1FC18; 14
	dc.w	word_1FCAC-Obj24_MapUnc_1FC18; 15
	dc.w	word_1FCB6-Obj24_MapUnc_1FC18; 16
word_1FC3A:
	dc.w	1
	dc.w	$FC00, $008D, $0046, $FFFC
word_1FC44:
	dc.w	1
	dc.w	$FC00, $008E, $0047, $FFFC
word_1FC4E:
	dc.w	1
	dc.w	$F805, $008F, $0047, $FFF8
word_1FC58:
	dc.w	1
	dc.w	$F805, $0093, $0049, $FFF8
word_1FC62:
	dc.w	1
	dc.w	$F40A, $001C, $000E, $FFF4
word_1FC6C:
	dc.w	1
	dc.w	$F00F, $0008, $0004, $FFF0
word_1FC76:
	dc.w	4
	dc.w	$F005, $0018, $000C, $FFF0
	dc.w	$F005, $0818, $080C, $0000
	dc.w	$0005, $1018, $100C, $FFF0
	dc.w	$0005, $1818, $180C, $0000
word_1FC98:
	dc.w	1
	dc.w	$F406, $1F41, $1BA0, $FFF8
word_1FCA2:
	dc.w	1
	dc.w	$F805, $0000, $0000, $FFF8
word_1FCAC:
	dc.w	1
	dc.w	$F805, $0004, $0002, $FFF8
word_1FCB6:
	dc.w	0
word_1FCB8:
	dc.w	$0001, $F406, $1F31, $1B98
	dc.w	$FFF8
; ===========================================================================
	nop
; ===========================================================================

JmpTo7_DisplaySprite 
	jmp	DisplaySprite
JmpTo15_DeleteObject 
	jmp	DeleteObject
JmpTo6_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; loc_1FCD6:
JmpTo3_ObjectMove 
	jmp	ObjectMove




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 03 - Collision plane/layer switcher
; ----------------------------------------------------------------------------
; Sprite_1FCDC:
Obj03:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj03_Index(pc,d0.w),d1
	jsr	Obj03_Index(pc,d1.w)
	jmp	MarkObjGone3
; ===========================================================================
; off_1FCF0:
Obj03_Index:
	dc.w Obj03_Init - Obj03_Index
	dc.w Obj03_MainX - Obj03_Index; 1
	dc.w Obj03_MainY - Obj03_Index; 2
; ===========================================================================
; loc_1FCF6:
Obj03_Init:
	addq.b	#2,routine(a0) ; => Obj03_MainX
	move.l	#Obj03_MapUnc_1FFB8,mappings(a0)
	move.w	#$26BC,art_tile(a0)
	bsr.w	JmpTo7_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#5,priority(a0)
	move.b	subtype(a0),d0
	btst	#2,d0
	beq.s	Obj03_Init_CheckX
;Obj03_Init_CheckY:
	addq.b	#2,routine(a0) ; => Obj03_MainY
	andi.w	#7,d0
	move.b	d0,mapping_frame(a0)
	andi.w	#3,d0
	add.w	d0,d0
	move.w	word_1FD68(pc,d0.w),objoff_32(a0)
	move.w	y_pos(a0),d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.w	y_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_34(a0)
+
	lea	(Sidekick).w,a1 ; a1=character
	cmp.w	y_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_35(a0)
+
	bra.w	Obj03_MainY
; ===========================================================================
word_1FD68:
	dc.w   $20
	dc.w   $40	; 1
	dc.w   $80	; 2
	dc.w  $100	; 3
; ===========================================================================
; loc_1FD70:
Obj03_Init_CheckX:
	andi.w	#3,d0
	move.b	d0,mapping_frame(a0)
	add.w	d0,d0
	move.w	word_1FD68(pc,d0.w),objoff_32(a0)
	move.w	x_pos(a0),d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_34(a0)
+
	lea	(Sidekick).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_35(a0)
+

; loc_1FDA4:
Obj03_MainX:
	tst.w	(Debug_placement_mode).w
	bne.w	return_1FEAC
	move.w	x_pos(a0),d1
	lea	objoff_34(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character

+	tst.b	(a2)+
	bne.s	Obj03_MainX_Alt
	cmp.w	x_pos(a1),d1
	bhi.w	return_1FEAC
	move.b	#1,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	blt.w	return_1FEAC
	cmp.w	d3,d4
	bge.w	return_1FEAC
	move.b	subtype(a0),d0
	bpl.s	+
	btst	#1,status(a1)
	bne.w	return_1FEAC
+
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)
	btst	#3,d0
	beq.s	+
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)
+
	andi.w	#$7FFF,art_tile(a1)
	btst	#5,d0
	beq.s	return_1FEAC
	ori.w	#$8000,art_tile(a1)
	bra.s	return_1FEAC
; ===========================================================================
; loc_1FE38:
Obj03_MainX_Alt:
	cmp.w	x_pos(a1),d1
	bls.w	return_1FEAC
	move.b	#0,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	blt.w	return_1FEAC
	cmp.w	d3,d4
	bge.w	return_1FEAC
	move.b	subtype(a0),d0
	bpl.s	+
	btst	#1,status(a1)
	bne.w	return_1FEAC
+
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)
	btst	#4,d0
	beq.s	+
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)
+
	andi.w	#$7FFF,art_tile(a1)
	btst	#6,d0
	beq.s	return_1FEAC
	ori.w	#$8000,art_tile(a1)

return_1FEAC:
	rts
; ===========================================================================

Obj03_MainY:
	tst.w	(Debug_placement_mode).w
	bne.w	return_1FFB6
	move.w	y_pos(a0),d1
	lea	objoff_34(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character

+	tst.b	(a2)+
	bne.s	Obj03_MainY_Alt
	cmp.w	y_pos(a1),d1
	bhi.w	return_1FFB6
	move.b	#1,-1(a2)
	move.w	x_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	x_pos(a1),d4
	cmp.w	d2,d4
	blt.w	return_1FFB6
	cmp.w	d3,d4
	bge.w	return_1FFB6
	move.b	subtype(a0),d0
	bpl.s	+
	btst	#1,status(a1)
	bne.w	return_1FFB6
+
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)
	btst	#3,d0
	beq.s	+
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)
+
	andi.w	#$7FFF,art_tile(a1)
	btst	#5,d0
	beq.s	return_1FFB6
	ori.w	#$8000,art_tile(a1)
	bra.s	return_1FFB6
; ===========================================================================
; loc_1FF42:
Obj03_MainY_Alt:
	cmp.w	y_pos(a1),d1
	bls.w	return_1FFB6
	move.b	#0,-1(a2)
	move.w	x_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	x_pos(a1),d4
	cmp.w	d2,d4
	blt.w	return_1FFB6
	cmp.w	d3,d4
	bge.w	return_1FFB6
	move.b	subtype(a0),d0
	bpl.s	+
	btst	#1,status(a1)
	bne.w	return_1FFB6
+
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)
	btst	#4,d0
	beq.s	+
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)
+
	andi.w	#$7FFF,art_tile(a1)
	btst	#6,d0
	beq.s	return_1FFB6
	ori.w	#$8000,art_tile(a1)

return_1FFB6:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj03_MapUnc_1FFB8:	BINCLUDE "mappings/sprite/obj03.bin"
; ===========================================================================

JmpTo7_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0B - Section of pipe that tips you off from CPZ
; ----------------------------------------------------------------------------
; Sprite_2009C:
Obj0B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_200AA(pc,d0.w),d1
	jmp	off_200AA(pc,d1.w)
; ===========================================================================
off_200AA:
	dc.w loc_200B0-off_200AA
	dc.w loc_20104-off_200AA; 1
	dc.w loc_20112-off_200AA; 2
; ===========================================================================

loc_200B0:
	addq.b	#2,routine(a0)
	move.l	#Obj0B_MapUnc_201A0,mappings(a0)
	move.w	#$E3B0,art_tile(a0)
	bsr.w	JmpTo8_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F0,d0
	addi.w	#$10,d0
	move.w	d0,d1
	subq.w	#1,d0
	move.w	d0,objoff_30(a0)
	move.w	d0,objoff_32(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	addq.w	#1,d0
	lsl.w	#4,d0
	move.b	d0,objoff_36(a0)

loc_20104:
	move.b	($FFFFFE0F).w,d0
	add.b	objoff_36(a0),d0
	bne.s	loc_2013C
	addq.b	#2,routine(a0)

loc_20112:
	subq.w	#1,objoff_30(a0)
	bpl.s	loc_20130
	move.w	#$7F,objoff_30(a0)
	tst.b	anim(a0)
	beq.s	loc_2012A
	move.w	objoff_32(a0),objoff_30(a0)

loc_2012A:
	bchg	#0,anim(a0)

loc_20130:
	lea	(off_2018C).l,a1
	jsr	AnimateSprite

loc_2013C:
	tst.b	mapping_frame(a0)
	bne.s	loc_20156
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	PlatformObject
	bra.w	JmpTo3_MarkObjGone
; ===========================================================================

loc_20156:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	BranchTo_JmpTo3_MarkObjGone
	bclr	#3,status(a0)
	beq.s	loc_20174
	bclr	#3,(MainCharacter+status).w
	bset	#1,(MainCharacter+status).w

loc_20174:
	bclr	#4,status(a0)
	beq.s	BranchTo_JmpTo3_MarkObjGone
	bclr	#3,(Sidekick+status).w
	bset	#1,(Sidekick+status).w

BranchTo_JmpTo3_MarkObjGone 
	bra.w	JmpTo3_MarkObjGone
; ===========================================================================
; animation script
off_2018C:
	dc.w byte_20190-off_2018C
	dc.w byte_20198-off_2018C
byte_20190:
	dc.b   7,  0,  1,  2,  3,  4,$FE,  1
byte_20198:
	dc.b   7,  4,  3,  2,  1,  0,$FE,  1
	even
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj0B_MapUnc_201A0:	BINCLUDE "mappings/sprite/obj0B.bin"
; ===========================================================================

JmpTo3_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo8_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0C - Small floating platform (unused)
; ----------------------------------------------------------------------------
; Sprite_20210:
Obj0C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2021E(pc,d0.w),d1
	jmp	off_2021E(pc,d1.w)
; ===========================================================================
off_2021E:
	dc.w loc_20222-off_2021E
	dc.w loc_20282-off_2021E; 1
; ===========================================================================

loc_20222:
	addq.b	#2,routine(a0)
	move.l	#Obj0C_MapUnc_202FA,mappings(a0)
	move.w	#$E418,art_tile(a0)
	bsr.w	JmpTo9_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),d0
	subi.w	#$10,d0
	move.w	d0,objoff_3A(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F0,d0
	addi.w	#$10,d0
	move.w	d0,d1
	subq.w	#1,d0
	move.w	d0,objoff_30(a0)
	move.w	d0,objoff_32(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	move.b	d0,objoff_3E(a0)
	move.b	d0,objoff_3F(a0)

loc_20282:
	move.b	objoff_3C(a0),d0
	beq.s	loc_202C0
	cmpi.b	#$80,d0
	bne.s	loc_202D0
	move.b	objoff_3D(a0),d1
	bne.s	loc_202A2
	subq.b	#1,objoff_3E(a0)
	bpl.s	loc_202A2
	move.b	objoff_3F(a0),objoff_3E(a0)
	bra.s	loc_202D0
; ===========================================================================

loc_202A2:
	addq.b	#1,objoff_3D(a0)
	move.b	d1,d0
	bsr.w	JmpTo5_CalcSine
	addi.w	#8,d0
	asr.w	#6,d0
	subi.w	#$10,d0
	add.w	objoff_3A(a0),d0
	move.w	d0,y_pos(a0)
	bra.s	loc_202E6
; ===========================================================================

loc_202C0:
	move.w	($FFFFFE0E).w,d1
	andi.w	#$3FF,d1
	bne.s	loc_202D4
	move.b	#1,objoff_3D(a0)

loc_202D0:
	addq.b	#1,objoff_3C(a0)

loc_202D4:
	bsr.w	JmpTo5_CalcSine
	addi.w	#8,d1
	asr.w	#4,d1
	add.w	objoff_3A(a0),d1
	move.w	d1,y_pos(a0)

loc_202E6:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#9,d3
	move.w	x_pos(a0),d4
	bsr.w	PlatformObject
	bra.w	JmpTo4_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Unused sprite mappings
; ----------------------------------------------------------------------------
Obj0C_MapUnc_202FA:	BINCLUDE "mappings/sprite/obj0C.bin"
; ===========================================================================
	nop

JmpTo4_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo9_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo5_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 12 - Emerald from Hidden Palace Zone (unused)
; ----------------------------------------------------------------------------
; Sprite_2031C:
Obj12:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2032A(pc,d0.w),d1
	jmp	off_2032A(pc,d1.w)
; ===========================================================================
off_2032A:
	dc.w loc_2032E-off_2032A
	dc.w loc_20356-off_2032A
; ===========================================================================

loc_2032E:
	addq.b	#2,routine(a0)
	move.l	#Obj12_MapUnc_20382,mappings(a0)
	move.w	#$6392,art_tile(a0)
	bsr.w	JmpTo10_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#4,priority(a0)

loc_20356:
	move.w	#$20,d1
	move.w	#$10,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo16_DeleteObject
	bra.w	JmpTo8_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings (unused)
; -------------------------------------------------------------------------------
Obj12_MapUnc_20382:	BINCLUDE "mappings/sprite/obj12.bin"
; ===========================================================================
	nop

JmpTo8_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo16_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo10_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 13 - Waterfall in Hidden Palace Zone (unused)
; ----------------------------------------------------------------------------
; Sprite_203AC:
Obj13:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_203BA(pc,d0.w),d1
	jmp	off_203BA(pc,d1.w)
; ===========================================================================
off_203BA:
	dc.w loc_203C0-off_203BA
	dc.w loc_20486-off_203BA; 1
	dc.w loc_20510-off_203BA; 2
; ===========================================================================

loc_203C0:
	addq.b	#2,routine(a0)
	move.l	#Obj13_MapUnc_20528,mappings(a0)
	move.w	#$E315,art_tile(a0)
	bsr.w	JmpTo11_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	#$12,mapping_frame(a0)
	bsr.s	loc_20428
	move.b	#$A0,y_radius(a1)
	bset	#4,render_flags(a1)
	move.l	a1,objoff_38(a0)
	move.w	y_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_36(a0)
	cmpi.b	#$10,subtype(a0)
	bcs.s	loc_2046C
	bsr.s	loc_20428
	move.l	a1,objoff_3C(a0)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$98,y_pos(a1)
	bra.s	loc_2046C
; ===========================================================================

loc_20428:
	jsr	(SingleObjLoad2).l
	bne.s	return_2046A
	_move.b	#$13,0(a1) ; load obj13
	addq.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	#Obj13_MapUnc_20528,mappings(a1)
	move.w	#$E315,art_tile(a1)
	bsr.w	JmpTo2_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#1,priority(a1)

return_2046A:
	rts
; ===========================================================================

loc_2046C:
	moveq	#0,d1
	move.b	subtype(a0),d1
	move.w	objoff_34(a0),d0
	subi.w	#$78,d0
	lsl.w	#4,d1
	add.w	d1,d0
	move.w	d0,y_pos(a0)
	move.w	d0,objoff_34(a0)

loc_20486:
	movea.l	objoff_38(a0),a1 ; a1=object
	move.b	#$12,mapping_frame(a0)
	move.w	objoff_34(a0),d0
	move.w	(Water_Level_1).w,d1
	cmp.w	d0,d1
	bcc.s	loc_2049E
	move.w	d1,d0

loc_2049E:
	move.w	d0,y_pos(a0)
	sub.w	objoff_36(a0),d0
	addi.w	#$80,d0
	bmi.s	loc_204F0
	lsr.w	#4,d0
	move.w	d0,d1
	cmpi.w	#$F,d0
	bcs.s	loc_204B8
	moveq	#$F,d0

loc_204B8:
	move.b	d0,mapping_frame(a1)
	cmpi.b	#$10,subtype(a0)
	bcs.s	loc_204D8
	movea.l	objoff_3C(a0),a1 ; a1=object
	subi.w	#$F,d1
	bcc.s	loc_204D0
	moveq	#0,d1

loc_204D0:
	addi.w	#$13,d1
	move.b	d1,mapping_frame(a1)

loc_204D8:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo17_DeleteObject
	bra.w	JmpTo9_DisplaySprite
; ===========================================================================

loc_204F0:
	moveq	#$13,d0
	move.b	d0,mapping_frame(a0)
	move.b	d0,mapping_frame(a1)
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo17_DeleteObject
	rts
; ===========================================================================

loc_20510:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo17_DeleteObject
	bra.w	JmpTo9_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings (unused)
; -------------------------------------------------------------------------------
Obj13_MapUnc_20528:	BINCLUDE "mappings/sprite/obj13.bin"
; ===========================================================================

JmpTo9_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo17_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo2_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo11_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 04 - Surface of the water - water surface
; ----------------------------------------------------------------------------

Obj04:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj04_Index(pc,d0.w),d1
	jmp	Obj04_Index(pc,d1.w)
; ===========================================================================
; off_208EA;
Obj04_Index:
	dc.w Obj04_Main - Obj04_Index
	dc.w Obj04_Action - Obj04_Index; 1
	dc.w Obj04_Action2 - Obj04_Index; 2
; ===========================================================================
; loc_208F0:
Obj04_Main:
	addq.b	#2,routine(a0) ; => Obj04_Action
	move.l	#Obj04_MapUnc_20A0E,mappings(a0)
	move.w	#$8400,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$80,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	cmpi.b	#$F,(Current_Zone).w
	bne.s	Obj04_Action
	addq.b	#2,routine(a0) ; Obj04_Action2
	move.l	#Obj04_MapUnc_20AFE,mappings(a0)
	bra.w	Obj04_Action2
; ===========================================================================
; loc_20930:
Obj04_Action:
	move.w	(Water_Level_1).w,d1
	move.w	d1,y_pos(a0)
	tst.b	objoff_32(a0)
	bne.s	Obj04_Animate
	btst	#7,(Ctrl_1_Press).w	; is Start button pressed?
	beq.s	loc_20962	; if not, branch
	addq.b	#3,mapping_frame(a0)	; use different frames
	move.b	#1,objoff_32(a0)	; stop animation
	bra.s	loc_20962
; ===========================================================================
; loc_20952:
Obj04_Animate:
	tst.w	(Game_paused).w	; is the game paused?
	bne.s	loc_20962	; if yes, branch
	move.b	#0,objoff_32(a0)	; resume animation
	subq.b	#3,mapping_frame(a0)	; use normal frames

loc_20962:
	lea	(Anim_obj04).l,a1
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	(a1,d1.w),mapping_frame(a0)
	addq.b	#1,anim_frame(a0)
	andi.b	#$3F,anim_frame(a0)
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================
; water sprite animation 'script' (custom format for this object)
; byte_20982:
Anim_obj04:
	dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1
	dc.b 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
	dc.b 2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1
	dc.b 1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
; ===========================================================================
; loc_209C2:
Obj04_Action2:
	move.w	(Water_Level_1).w,d1
	move.w	d1,y_pos(a0)
	tst.b	objoff_32(a0)
	bne.s	Obj04_Animate2
	btst	#7,(Ctrl_1_Press).w	; is Start button pressed?
	beq.s	loc_209F4		; if not, branch
	addq.b	#2,mapping_frame(a0)    ; use different frames
	move.b	#1,objoff_32(a0)		; stop animation
	bra.s	BranchTo_JmpTo10_DisplaySprite
; ===========================================================================
; loc_209E4:
Obj04_Animate2:
	tst.w	(Game_paused).w	; is the game paused?
	bne.s	BranchTo_JmpTo10_DisplaySprite	; if yes, branch
	move.b	#0,objoff_32(a0)	; resume animation
	subq.b	#2,mapping_frame(a0)	; use normal frames

loc_209F4:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo_JmpTo10_DisplaySprite
	move.b	#5,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#1,mapping_frame(a0)

BranchTo_JmpTo10_DisplaySprite 
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj04_MapUnc_20A0E:	BINCLUDE "mappings/sprite/obj04_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj04_MapUnc_20AFE:	BINCLUDE "mappings/sprite/obj04_b.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 49 - Waterfall from EHZ
; ----------------------------------------------------------------------------
; Sprite_20B9E:
Obj49:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj49_Index(pc,d0.w),d1
	jmp	Obj49_Index(pc,d1.w)
; ===========================================================================
; off_20BAC:
Obj49_Index:
	dc.w Obj49_Main-Obj49_Index
	dc.w Obj49_ChkDel-Obj49_Index; 1
; ===========================================================================
; loc_20BB0:
Obj49_Main:
	addq.b	#2,routine(a0)
	move.l	#Obj49_MapUnc_20C50,mappings(a0)
	move.w	#$239E,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.b	#0,priority(a0)
	move.b	#$80,y_radius(a0)
	bset	#4,render_flags(a0)
; loc_20BEA:
Obj49_ChkDel:
	tst.w	(Two_player_mode).w
	bne.s	loc_20C04
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo18_DeleteObject

loc_20C04:
	move.w	x_pos(a0),d1
	move.w	d1,d2
	subi.w	#$40,d1
	addi.w	#$40,d2
	move.b	subtype(a0),d3
	move.b	#0,mapping_frame(a0)
	move.w	(MainCharacter+x_pos).w,d0
	cmp.w	d1,d0
	bcs.s	loc_20C36
	cmp.w	d2,d0
	bcc.s	loc_20C36
	move.b	#1,mapping_frame(a0)
	add.b	d3,mapping_frame(a0)
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================

loc_20C36:
	move.w	(Sidekick+x_pos).w,d0
	cmp.w	d1,d0
	bcs.s	Obj49_Display
	cmp.w	d2,d0
	bcc.s	Obj49_Display
	move.b	#1,mapping_frame(a0)
; loc_20C48:
Obj49_Display:
	add.b	d3,mapping_frame(a0)
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj49_MapUnc_20C50:	BINCLUDE "mappings/sprite/obj49.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 31 - Lava collision marker
; ----------------------------------------------------------------------------
; Sprite_20DEC:
Obj31:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj31_States(pc,d0.w),d1
	jmp	Obj31_States(pc,d1.w)
; ===========================================================================
; off_20DFA:
Obj31_States:
	dc.w Obj31_Init - Obj31_States
	dc.w Obj31_Main - Obj31_States
; ---------------------------------------------------------------------------
byte_20DFE:
	dc.b $96
	dc.b $94	; 1
	dc.b $95	; 2
	dc.b   0	; 3
; ===========================================================================
; loc_20E02:
Obj31_Init:
	addq.b	#2,routine(a0) ; => Obj31_Main
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.b	byte_20DFE(pc,d0.w),collision_flags(a0)
	move.l	#Obj31_MapUnc_20E6C,mappings(a0)
	tst.w	(Debug_placement_mode).w
	beq.s	+
	move.l	#Obj31_MapUnc_20E74,mappings(a0)
+
	move.w	#$8680,art_tile(a0)
	move.b	#$84,render_flags(a0)
	move.b	#$80,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),mapping_frame(a0)

; loc_20E46:
Obj31_Main:
	tst.w	(Two_player_mode).w
	bne.s	+
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo18_DeleteObject
+
	tst.w	(Debug_placement_mode).w
	beq.s	return_20E6A
	bsr.w	JmpTo10_DisplaySprite

return_20E6A:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite non-mappings
; -------------------------------------------------------------------------------
Obj31_MapUnc_20E6C:	BINCLUDE "mappings/sprite/obj31_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj31_MapUnc_20E74:	BINCLUDE "mappings/sprite/obj31_b.bin"
; ===========================================================================




; ----------------------------------------------------------------------------
; Object 74 - Invisible solid block
; ----------------------------------------------------------------------------
; Sprite_20EE0:
Obj74:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj74_States(pc,d0.w),d1
	jmp	Obj74_States(pc,d1.w)
; ===========================================================================
; off_20EEE:
Obj74_States:
	dc.w Obj74_Init - Obj74_States
	dc.w Obj74_Main - Obj74_States
; ===========================================================================
; loc_20EF2:
Obj74_Init:
	addq.b	#2,routine(a0) ; => Obj74_Main
	move.l	#Obj74_MapUnc_20F66,mappings(a0)
	move.w	#$8680,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	subtype(a0),d0
	move.b	d0,d1
	andi.w	#$F0,d0
	addi.w	#$10,d0
	lsr.w	#1,d0
	move.b	d0,width_pixels(a0)
	andi.w	#$F,d1
	addq.w	#1,d1
	lsl.w	#3,d1
	move.b	d1,y_radius(a0)

; loc_20F2E:
Obj74_Main:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	SolidObject74_30
	tst.w	(Two_player_mode).w
	bne.s	return_20F64
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo18_DeleteObject

return_20F64:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj74_MapUnc_20F66:	BINCLUDE "mappings/sprite/obj74.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7C - Big pylon in foreground of CPZ
; ----------------------------------------------------------------------------
; Sprite_20FD2:
Obj7C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj7C_States(pc,d0.w),d1
	jmp	Obj7C_States(pc,d1.w)
; ===========================================================================
; off_20FE0:
Obj7C_States:
	dc.w Obj7C_Init - Obj7C_States
	dc.w Obj7C_Main - Obj7C_States
; ===========================================================================
; loc_20FE4:
Obj7C_Init:
	addq.b	#2,routine(a0) ; => Obj7C_Main
	move.l	#Obj7C_MapUnc_2103C,mappings(a0)
	move.w	#$C373,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	move.b	#$10,width_pixels(a0)
	move.b	#7,priority(a0)

; loc_21006:
Obj7C_Main:
	move.w	(Camera_X_pos).w,d1
	andi.w	#$3FF,d1
	cmpi.w	#$2E0,d1
	bcc.s	return_2103A
	asr.w	#1,d1
	move.w	d1,d0
	asr.w	#1,d1
	add.w	d1,d0
	neg.w	d0
	move.w	d0,x_pos(a0)
	move.w	(Camera_Y_pos).w,d1
	asr.w	#1,d1
	andi.w	#$3F,d1
	neg.w	d1
	addi.w	#$100,d1
	move.w	d1,objoff_A(a0)
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================

return_2103A:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj7C_MapUnc_2103C:	BINCLUDE "mappings/sprite/obj7C.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 27 - An explosion, giving off an animal and 100 points
; ----------------------------------------------------------------------------
; Sprite_21088:
Obj27:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj27_States(pc,d0.w),d1
	jmp	Obj27_States(pc,d1.w)
; ===========================================================================
; off_21096:
Obj27_States:
	dc.w Obj27_Init - Obj27_States	; 0
	dc.w Obj27_Init2 - Obj27_States	; 2
	dc.w Obj27_Main - Obj27_States	; 4
; ===========================================================================
; loc_2109C:
Obj27_Init:
	addq.b	#2,routine(a0) ; => Obj27_Init2
	bsr.w	JmpTo2_SingleObjLoad
	bne.s	Obj27_Init2
	_move.b	#$28,0(a1) ; load obj28 (Animal and 100 points)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	parent(a0),parent(a1)

; loc_210BE:
Obj27_Init2:
	addq.b	#2,routine(a0) ; => Obj27_Main
	move.l	#Obj27_MapUnc_21120,mappings(a0)
	move.w	#$5A4,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#1,priority(a0)
	move.b	#0,collision_flags(a0)
	move.b	#$C,width_pixels(a0)
	move.b	#3,anim_frame_duration(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#$C1,d0
	jsr	(PlaySound).l

; loc_21102:
Obj27_Main:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	+
	move.b	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#5,mapping_frame(a0)
	beq.w	JmpTo18_DeleteObject
+
	bra.w	JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj27_MapUnc_21120:	BINCLUDE "mappings/sprite/obj27.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 84 - Pinball mode enable/disable
; (used in Casino Night Zone to determine when Sonic should stay in a ball)
; ----------------------------------------------------------------------------
; Sprite_2115C:
Obj84:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj84_States(pc,d0.w),d1
	jsr	Obj84_States(pc,d1.w)
	jmp	MarkObjGone3
; ===========================================================================
; off_21170:
Obj84_States:
	dc.w Obj84_Init - Obj84_States	; 0
	dc.w Obj84_MainX - Obj84_States	; 2
	dc.w Obj84_MainY - Obj84_States	; 4
; ===========================================================================
; loc_21176:
Obj84_Init:
	addq.b	#2,routine(a0) ; => Obj84_MainX
	move.l	#Obj03_MapUnc_1FFB8,mappings(a0)
	move.w	#$6BC,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#5,priority(a0)
	move.b	subtype(a0),d0
	btst	#2,d0
	beq.s	Obj84_Init_CheckX
	addq.b	#2,routine(a0) ; => Obj84_MainY
	andi.w	#7,d0
	move.b	d0,mapping_frame(a0)
	andi.w	#3,d0
	add.w	d0,d0
	move.w	word_211E8(pc,d0.w),objoff_32(a0)
	move.w	y_pos(a0),d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.w	y_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_34(a0)
+
	lea	(Sidekick).w,a1 ; a1=character
	cmp.w	y_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_35(a0)
+
	bra.w	Obj84_MainY
; ===========================================================================
word_211E8:
	dc.w   $20
	dc.w   $40	; 1
	dc.w   $80	; 2
	dc.w  $100	; 3
; ===========================================================================
; loc_211F0:
Obj84_Init_CheckX:
	andi.w	#3,d0
	move.b	d0,mapping_frame(a0)
	add.w	d0,d0
	move.w	word_211E8(pc,d0.w),objoff_32(a0)
	move.w	x_pos(a0),d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	+
	move.b	#1,objoff_34(a0)
+
	lea	(Sidekick).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	Obj84_MainX
	move.b	#1,objoff_35(a0)

; loc_21224:
Obj84_MainX:

	tst.w	(Debug_placement_mode).w
	bne.s	return_21284
	move.w	x_pos(a0),d1
	lea	objoff_34(a0),a2 ; a2=object
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
	cmpi.w	#4,(Tails_CPU_routine).w	; TailsCPU_Flying
	beq.s	return_21284

+	tst.b	(a2)+
	bne.s	Obj84_MainX_Alt
	cmp.w	x_pos(a1),d1
	bhi.s	return_21284
	move.b	#1,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_21284
	cmp.w	d3,d4
	bcc.s	return_21284
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#1,spindash_flag(a1) ; enable must-roll "pinball mode"
	bra.s	loc_212C4
; ---------------------------------------------------------------------------
+	move.b	#0,spindash_flag(a1) ; disable pinball mode

return_21284:
	rts
; ===========================================================================
; loc_21286:
Obj84_MainX_Alt:
	cmp.w	x_pos(a1),d1
	bls.s	return_21284
	move.b	#0,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_21284
	cmp.w	d3,d4
	bcc.s	return_21284
	btst	#0,render_flags(a0)
	beq.s	loc_212BC
	move.b	#1,spindash_flag(a1)
	bra.s	loc_212C4
; ===========================================================================

loc_212BC:
	move.b	#0,spindash_flag(a1)
	rts
; ===========================================================================

loc_212C4:
	btst	#2,status(a1)
	beq.s	+
	rts
; ---------------------------------------------------------------------------
+	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	addq.w	#5,y_pos(a1)
	move.w	#$BE,d0
	jsr	(PlaySound).l
	rts

; ===========================================================================
; loc_212F6:
Obj84_MainY:

	tst.w	(Debug_placement_mode).w
	bne.s	return_21350
	move.w	y_pos(a0),d1
	lea	objoff_34(a0),a2 ; a2=object
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
+
	tst.b	(a2)+
	bne.s	Obj84_MainY_Alt
	cmp.w	y_pos(a1),d1
	bhi.s	return_21350
	move.b	#1,-1(a2)
	move.w	x_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	x_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_21350
	cmp.w	d3,d4
	bcc.s	return_21350
	btst	#0,render_flags(a0)
	bne.s	+
	move.b	#1,spindash_flag(a1)
	bra.w	loc_212C4
; ---------------------------------------------------------------------------
+	move.b	#0,spindash_flag(a1)

return_21350:
	rts
; ===========================================================================
; loc_21352:
Obj84_MainY_Alt:
	cmp.w	y_pos(a1),d1
	bls.s	return_21350
	move.b	#0,-1(a2)
	move.w	x_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	x_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_21350
	cmp.w	d3,d4
	bcc.s	return_21350
	btst	#0,render_flags(a0)
	beq.s	+
	move.b	#1,spindash_flag(a1)
	bra.w	loc_212C4
; ---------------------------------------------------------------------------
+	move.b	#0,spindash_flag(a1)
	rts




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8B - Cycling palette switcher from Wing Fortress Zone
; ----------------------------------------------------------------------------
; Sprite_21392:
Obj8B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_213A6(pc,d0.w),d1
	jsr	off_213A6(pc,d1.w)
	jmp	MarkObjGone3
; ===========================================================================
off_213A6:
	dc.w loc_213B2-off_213A6
	dc.w loc_21412-off_213A6; 1
word_213AA:
	dc.w   $20
	dc.w   $40	; 1
	dc.w   $80	; 2
	dc.w  $100	; 3
; ===========================================================================

loc_213B2:
	addq.b	#2,routine(a0)
	move.l	#Obj03_MapUnc_1FFB8,mappings(a0)
	move.w	#$6BC,art_tile(a0)
	bsr.w	JmpTo12_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#5,priority(a0)
	move.b	subtype(a0),d0
	andi.w	#3,d0
	move.b	d0,mapping_frame(a0)
	add.w	d0,d0
	move.w	word_213AA(pc,d0.w),objoff_32(a0)
	move.w	x_pos(a0),d1
	lea	(MainCharacter).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	PortA_Ok02
	move.b	#1,objoff_34(a0)

PortA_Ok02:
	lea	(Sidekick).w,a1 ; a1=character
	cmp.w	x_pos(a1),d1
	bcc.s	loc_21412
	move.b	#1,objoff_35(a0)

loc_21412:

	tst.w	(Debug_placement_mode).w
	bne.s	return_2146A
	move.w	x_pos(a0),d1
	lea	objoff_34(a0),a2 ; a2=object
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_2142A
	lea	(Sidekick).w,a1 ; a1=character

loc_2142A:
	tst.b	(a2)+
	bne.s	loc_2146C
	cmp.w	x_pos(a1),d1
	bhi.s	return_2146A
	move.b	#1,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_2146A
	cmp.w	d3,d4
	bcc.s	return_2146A
	btst	#0,render_flags(a0)
	bne.s	loc_21464
	move.b	#1,($FFFFF72E).w
	rts
; ===========================================================================

loc_21464:
	move.b	#0,($FFFFF72E).w

return_2146A:
	rts
; ===========================================================================

loc_2146C:
	cmp.w	x_pos(a1),d1
	bls.s	return_2146A
	move.b	#0,-1(a2)
	move.w	y_pos(a0),d2
	move.w	d2,d3
	move.w	objoff_32(a0),d4
	sub.w	d4,d2
	add.w	d4,d3
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.s	return_2146A
	cmp.w	d3,d4
	bcc.s	return_2146A
	btst	#0,render_flags(a0)
	beq.s	loc_214A2
	move.b	#1,($FFFFF72E).w
	rts
; ===========================================================================

loc_214A2:
	move.b	#0,($FFFFF72E).w
	rts
; ===========================================================================
	nop
; loc_214AC:
JmpTo10_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo18_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo2_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo12_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 06 - Rotating cylinder in MTZ, twisting spiral pathway in EHZ
; ----------------------------------------------------------------------------
; Sprite_214C4:
Obj06:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj06_Index(pc,d0.w),d1
	jsr	Obj06_Index(pc,d1.w)
	tst.w	(Two_player_mode).w
	beq.s	Obj06_ChkDel
	rts
; ---------------------------------------------------------------------------
; seems to be an optimization to delete the object the instant it goes offscreen
; only in 1-player mode, because it would screw up the other player
; loc_214DA:
Obj06_ChkDel:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	JmpTo19_DeleteObject
	rts
; ---------------------------------------------------------------------------
JmpTo19_DeleteObject 
	jmp	DeleteObject

; ===========================================================================
; off_214F4:
Obj06_Index:
	dc.w Obj06_Init - Obj06_Index		; 0
	dc.w Obj06_Spiral - Obj06_Index		; 2
	dc.w Obj06_Cylinder - Obj06_Index	; 4

; ===========================================================================
; loc_214FA:
Obj06_Init:
	addq.b	#2,routine(a0) ; => Obj06_Spiral
	move.b	#$D0,width_pixels(a0)
	tst.b	subtype(a0)
	bpl.s	Obj06_Spiral
	addq.b	#2,routine(a0) ; => Obj06_Cylinder
	bra.w	Obj06_Cylinder

; ===========================================================================
; spiral pathway from EHZ
; loc_21512:
Obj06_Spiral:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6
+
	btst	d6,status(a0)
	bne.w	loc_215C0
	btst	#1,status(a1)
	bne.w	return_215BE
	btst	#3,status(a1)
	bne.s	loc_21580
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	tst.w	x_vel(a1)
	bmi.s	loc_21556
	cmpi.w	#-$C0,d0
	bgt.s	return_215BE
	cmpi.w	#-$D0,d0
	blt.s	return_215BE
	bra.s	loc_21562
; ---------------------------------------------------------------------------

loc_21556:
	cmpi.w	#$C0,d0
	blt.s	return_215BE
	cmpi.w	#$D0,d0
	bgt.s	return_215BE

loc_21562:
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	subi.w	#$10,d1
	cmpi.w	#$30,d1
	bcc.s	return_215BE
	tst.b	obj_control(a1)
	bne.s	return_215BE
	bsr.w	loc_19E14
	rts
; ---------------------------------------------------------------------------

loc_21580:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	tst.w	x_vel(a1)
	bmi.s	loc_2159C
	cmpi.w	#-$B0,d0
	bgt.s	return_215BE
	cmpi.w	#-$C0,d0
	blt.s	return_215BE
	bra.s	loc_215A8
; ---------------------------------------------------------------------------

loc_2159C:
	cmpi.w	#$B0,d0
	blt.s	return_215BE
	cmpi.w	#$C0,d0
	bgt.s	return_215BE

loc_215A8:
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	subi.w	#$10,d1
	cmpi.w	#$30,d1
	bcc.s	return_215BE
	bsr.w	loc_19E14

return_215BE:
	rts
; ---------------------------------------------------------------------------

loc_215C0:
	move.w	inertia(a1),d0
	bpl.s	+
	neg.w	d0
+
	cmpi.w	#$600,d0
	bcs.s	Obj06_Spiral_CharacterFallsOff
	btst	#1,status(a1)
	bne.s	Obj06_Spiral_CharacterFallsOff
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$D0,d0
	bmi.s	Obj06_Spiral_CharacterFallsOff
	cmpi.w	#$1A0,d0
	bcs.s	Obj06_Spiral_MoveCharacter

; loc_215EA:
Obj06_Spiral_CharacterFallsOff:
	bclr	#3,status(a1)
	bclr	d6,status(a0)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	rts

; ---------------------------------------------------------------------------
; loc_21602:
Obj06_Spiral_MoveCharacter:
	btst	#3,status(a1)
	beq.s	return_215BE
	move.b	Obj06_CosineTable(pc,d0.w),d1
	ext.w	d1
	move.w	y_pos(a0),d2
	add.w	d1,d2
	moveq	#0,d1
	move.b	y_radius(a1),d1
	subi.w	#$13,d1
	sub.w	d1,d2
	move.w	d2,y_pos(a1)
	lsr.w	#3,d0
	andi.w	#$3F,d0
	move.b	Obj06_FlipAngleTable(pc,d0.w),flip_angle(a1)
	rts

; ===========================================================================
; byte_21634:
Obj06_FlipAngleTable:
	dc.b	 0,    0,    1,	   1; 4
	dc.b   $16,  $16,  $16,	 $16; 8
	dc.b   $2C,  $2C,  $2C,	 $2C; 12
	dc.b   $42,  $42,  $42,	 $42; 16
	dc.b   $58,  $58,  $58,	 $58; 20
	dc.b   $6E,  $6E,  $6E,	 $6E; 24
	dc.b   $84,  $84,  $84,	 $84; 28
	dc.b   $9A,  $9A,  $9A,	 $9A; 32
	dc.b   $B0,  $B0,  $B0,	 $B0; 36
	dc.b   $C6,  $C6,  $C6,	 $C6; 40
	dc.b   $DC,  $DC,  $DC,	 $DC; 44
	dc.b   $F2,  $F2,  $F2,	 $F2; 48
	dc.b	 1,    1,    0,	   0; 52
; byte_21668:
Obj06_CosineTable:
	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32;  16
	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31;  32
	dc.b  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30;  48
	dc.b  30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 28, 28, 28, 28, 27;  64
	dc.b  27, 27, 27, 26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 22, 22;  80
	dc.b  21, 21, 20, 20, 19, 18, 18, 17, 16, 16, 15, 14, 14, 13, 12, 12;  96
	dc.b  11, 10, 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1; 112
	dc.b   0, -1, -2, -2, -3, -4, -4, -5, -6, -7, -7, -8, -9, -9,-10,-10; 128
	dc.b -11,-11,-12,-12,-13,-14,-14,-15,-15,-16,-16,-17,-17,-18,-18,-19; 144
	dc.b -19,-19,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-26,-26,-27; 160
	dc.b -27,-28,-28,-28,-29,-29,-30,-30,-30,-31,-31,-31,-32,-32,-32,-33; 176
	dc.b -33,-33,-33,-34,-34,-34,-35,-35,-35,-35,-35,-35,-35,-35,-36,-36; 192
	dc.b -36,-36,-36,-36,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-37,-37; 208
	dc.b -37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37; 224
	dc.b -37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-36,-35,-35,-35,-35,-35; 240
	dc.b -35,-35,-35,-34,-34,-34,-33,-33,-33,-33,-32,-32,-32,-31,-31,-31; 256
	dc.b -30,-30,-30,-29,-29,-28,-28,-28,-27,-27,-26,-26,-25,-25,-24,-24; 272
	dc.b -23,-23,-22,-22,-21,-21,-20,-19,-19,-18,-18,-17,-16,-16,-15,-14; 288
	dc.b -14,-13,-12,-11,-11,-10, -9, -8, -7, -7, -6, -5, -4, -3, -2, -1; 304
	dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 10, 11, 12, 13; 320
	dc.b  13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21; 336
	dc.b  21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26; 352
	dc.b  27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29; 368
	dc.b  29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31; 384
	dc.b  31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 400
	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 416

; ===========================================================================
; rotating meshed cage from MTZ
; loc_21808:
Obj06_Cylinder:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	($FFFFF7B2).w,a2
	moveq	#3,d6
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
	lea	($FFFFF7B3).w,a2
	addq.b	#1,d6
+
	btst	d6,status(a0)
	bne.w	loc_2188C
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	cmpi.w	#-$C0,d0
	blt.s	return_2188A
	cmpi.w	#$C0,d0
	bge.s	return_2188A
	move.w	y_pos(a0),d0
	addi.w	#$3C,d0
	move.w	y_pos(a1),d2
	move.b	y_radius(a1),d1
	ext.w	d1
	add.w	d2,d1
	addq.w	#4,d1
	sub.w	d1,d0
	bhi.s	return_2188A
	cmpi.w	#-$10,d0
	bcs.s	return_2188A
	cmpi.b	#6,routine(a1)
	bcc.s	return_2188A
	add.w	d0,d2
	addq.w	#3,d2
	move.w	d2,y_pos(a1)
	move.b	#1,flip_turned(a1) ; face the other way
	bsr.w	loc_19E14
	move.w	#1,anim(a1)
	move.b	#0,(a2)
	tst.w	inertia(a1)
	bne.s	return_2188A
	move.w	#1,inertia(a1)

return_2188A:
	rts
; ===========================================================================

loc_2188C:
	btst	#1,status(a1)
	bne.s	loc_218C6
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$C0,d0
	bmi.s	loc_218A8
	cmpi.w	#$180,d0
	bcs.s	loc_218E0

loc_218A8:
	bclr	#3,status(a1)
	bclr	d6,status(a0)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	bset	#1,status(a1)
	rts
; ---------------------------------------------------------------------------
loc_218C6:
	move.b	(a2),d0
	addi.b	#$20,d0
	cmpi.b	#$40,d0
	bcc.s	+
	asr	y_vel(a1)
	bra.s	loc_218A8
; ---------------------------------------------------------------------------
+	move.w	#0,y_vel(a1)
	bra.s	loc_218A8
; ===========================================================================

loc_218E0:
	btst	#3,status(a1)
	beq.s	return_2188A
	move.b	(a2),d0
	bsr.w	JmpTo6_CalcSine
	muls.w	#$2800,d1
	swap	d1
	move.w	y_pos(a0),d2
	add.w	d1,d2
	moveq	#0,d1
	move.b	y_radius(a1),d1
	subi.w	#$13,d1
	sub.w	d1,d2
	move.w	d2,y_pos(a1)
	move.b	(a2),d0
	move.b	d0,flip_angle(a1)
	addq.b	#4,(a2)
	tst.w	inertia(a1)
	bne.s	return_2191E
	move.w	#1,inertia(a1)

return_2191E:
	rts
; ===========================================================================

JmpTo6_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 14 - See saw from Hill Top Zone
; ----------------------------------------------------------------------------
; Sprite_21928:
Obj14:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2193E(pc,d0.w),d1
	jsr	off_2193E(pc,d1.w)
	move.w	objoff_30(a0),d0
	bra.w	JmpTo_MarkObjGone2
; ===========================================================================
off_2193E:
	dc.w loc_2194A-off_2193E
	dc.w loc_219B8-off_2193E; 1
	dc.w return_21A74-off_2193E; 2
	dc.w loc_21AA2-off_2193E; 3
	dc.w loc_21AFC-off_2193E; 4
	dc.w loc_21B94-off_2193E; 5
; ===========================================================================

loc_2194A:
	addq.b	#2,routine(a0)
	move.l	#Obj14_MapUnc_21CF0,mappings(a0)
	move.w	#$3C6,art_tile(a0)
	bsr.w	JmpTo13_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$30,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	tst.b	subtype(a0)
	bne.s	loc_219A4
	bsr.w	JmpTo3_SingleObjLoad2
	bne.s	loc_219A4
	_move.b	#$14,0(a1) ; load obj14
	addq.b	#6,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	status(a0),status(a1)
	move.l	a0,objoff_3C(a1)

loc_219A4:
	btst	#0,status(a0)
	beq.s	loc_219B2
	move.b	#2,mapping_frame(a0)

loc_219B2:
	move.b	mapping_frame(a0),objoff_3A(a0)

loc_219B8:
	move.b	objoff_3A(a0),d1
	btst	#3,status(a0)
	beq.s	loc_21A12
	moveq	#2,d1
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	+
	neg.w	d0
	moveq	#0,d1
+
	cmpi.w	#8,d0
	bcc.s	+
	moveq	#1,d1
+
	btst	#4,status(a0)
	beq.s	loc_21A4A
	moveq	#2,d2
	lea	(Sidekick).w,a1 ; a1=character
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	+
	neg.w	d0
	moveq	#0,d2
+
	cmpi.w	#8,d0
	bcc.s	+
	moveq	#1,d2
+
	add.w	d2,d1
	cmpi.w	#3,d1
	bne.s	+
	addq.w	#1,d1
+
	lsr.w	#1,d1
	bra.s	loc_21A4A
; ===========================================================================

loc_21A12:
	btst	#4,status(a0)
	beq.s	loc_21A38
	moveq	#2,d1
	lea	(Sidekick).w,a1 ; a1=character
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	+
	neg.w	d0
	moveq	#0,d1
+
	cmpi.w	#8,d0
	bcc.s	loc_21A4A
	moveq	#1,d1
	bra.s	loc_21A4A
; ===========================================================================

loc_21A38:
	move.w	(MainCharacter+y_vel).w,d0
	move.w	(Sidekick+y_vel).w,d2
	cmp.w	d0,d2
	blt.s	+
	move.w	d2,d0
+
	move.w	d0,objoff_38(a0)

loc_21A4A:
	bsr.w	loc_21A76
	lea	(byte_21C8E).l,a2
	btst	#0,mapping_frame(a0)
	beq.s	+
	lea	(byte_21CBF).l,a2
+
	move.w	x_pos(a0),-(sp)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#8,d3
	move.w	(sp)+,d4
	bra.w	SlopeObject
; ===========================================================================

return_21A74:
	rts
; ===========================================================================

loc_21A76:
	move.b	mapping_frame(a0),d0
	cmp.b	d1,d0
	beq.s	return_21AA0
	bcc.s	+
	addq.b	#2,d0
+
	subq.b	#1,d0
	move.b	d0,mapping_frame(a0)
	move.b	d1,objoff_3A(a0)
	bclr	#0,render_flags(a0)
	btst	#1,mapping_frame(a0)
	beq.s	return_21AA0
	bset	#0,render_flags(a0)

return_21AA0:
	rts
; ===========================================================================

loc_21AA2:
	addq.b	#2,routine(a0)
	move.l	#Obj14_MapUnc_21D7C,mappings(a0)
	move.w	#$3DE,art_tile(a0)
	bsr.w	JmpTo13_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$8B,collision_flags(a0)
	move.b	#$C,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	addi.w	#$28,x_pos(a0)
	addi.w	#$10,y_pos(a0)
	move.w	y_pos(a0),objoff_34(a0)
	btst	#0,status(a0)
	beq.s	loc_21AFC
	subi.w	#$50,x_pos(a0)
	move.b	#2,objoff_3A(a0)

loc_21AFC:

	bsr.w	loc_21C66
	movea.l	objoff_3C(a0),a1 ; a1=object
	moveq	#0,d0
	move.b	objoff_3A(a0),d0
	sub.b	objoff_3A(a1),d0
	beq.s	loc_21B56
	bcc.s	+
	neg.b	d0
+
	move.w	#-$818,d1
	move.w	#-$114,d2
	cmpi.b	#1,d0
	beq.s	+
	move.w	#-$AF0,d1
	move.w	#-$CC,d2
	cmpi.w	#$A00,objoff_38(a1)
	blt.s	+
	move.w	#-$E00,d1
	move.w	#-$A0,d2
+
	move.w	d1,y_vel(a0)
	move.w	d2,x_vel(a0)
	move.w	x_pos(a0),d0
	sub.w	objoff_30(a0),d0
	bcc.s	+
	neg.w	x_vel(a0)
+
	addq.b	#2,routine(a0)
	bra.s	loc_21B94
; ===========================================================================

loc_21B56:
	lea	(Obj14_YOffsets).l,a2
	moveq	#0,d0
	move.b	mapping_frame(a1),d0
	move.w	#$28,d2
	move.w	x_pos(a0),d1
	sub.w	objoff_30(a0),d1
	bcc.s	+
	neg.w	d2
	addq.w	#2,d0
+
	add.w	d0,d0
	move.w	objoff_34(a0),d1
	add.w	(a2,d0.w),d1
	move.w	d1,y_pos(a0)
	add.w	objoff_30(a0),d2
	move.w	d2,x_pos(a0)
	clr.w	objoff_E(a0)
	clr.w	objoff_A(a0)
	rts
; ===========================================================================

loc_21B94:

	bsr.w	loc_21C66
	tst.w	y_vel(a0)
	bpl.s	loc_21BB6
	bsr.w	JmpTo_ObjectMoveAndFall
	move.w	objoff_34(a0),d0
	subi.w	#$2F,d0
	cmp.w	y_pos(a0),d0
	bgt.s	return_21BB4
	bsr.w	JmpTo_ObjectMoveAndFall

return_21BB4:
	rts
; ===========================================================================

loc_21BB6:
	bsr.w	JmpTo_ObjectMoveAndFall
	movea.l	objoff_3C(a0),a1 ; a1=object
	lea	(Obj14_YOffsets).l,a2
	moveq	#0,d0
	move.b	mapping_frame(a1),d0
	move.w	x_pos(a0),d1
	sub.w	objoff_30(a0),d1
	bcc.s	+
	addq.w	#2,d0
+
	add.w	d0,d0
	move.w	objoff_34(a0),d1
	add.w	(a2,d0.w),d1
	cmp.w	y_pos(a0),d1
	bgt.s	return_21C2A
	movea.l	objoff_3C(a0),a1 ; a1=object
	moveq	#2,d1
	tst.w	x_vel(a0)
	bmi.s	+
	moveq	#0,d1
+
	move.b	d1,objoff_3A(a1)
	move.b	d1,objoff_3A(a0)
	cmp.b	mapping_frame(a1),d1
	beq.s	loc_21C1E
	lea	(MainCharacter).w,a2 ; a2=character
	bclr	#3,status(a1)
	beq.s	+
	bsr.s	loc_21C2C
+
	lea	(Sidekick).w,a2 ; a2=character
	bclr	#4,status(a1)
	beq.s	loc_21C1E
	bsr.s	loc_21C2C

loc_21C1E:
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	subq.b	#2,routine(a0)

return_21C2A:
	rts
; ===========================================================================

loc_21C2C:
	move.w	y_vel(a0),y_vel(a2)
	neg.w	y_vel(a2)
	bset	#1,status(a2)
	bclr	#3,status(a2)
	clr.b	jumping(a2)
	move.b	#$10,anim(a2)
	move.b	#2,routine(a2)
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================
; heights of the contact point of the ball on the seesaw
; word_21C5C:
Obj14_YOffsets:
	dc.w -8, -$1C, -$2F, -$1C, -8
; ===========================================================================

loc_21C66:
	move.b	($FFFFFE05).w,d0
	andi.b	#3,d0
	bne.s	+
	bchg	#5,art_tile(a0)
+
	andi.b	#$FE,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	bcs.s	return_21C8C
	ori.b	#1,render_flags(a0)

return_21C8C:
	rts
; ===========================================================================
byte_21C8E:
	dc.b $14,$14,$16,$18,$1A,$1C,$1A,$18,$16,$14,$13,$12,$11,$10, $F, $E
	dc.b  $D, $C, $B, $A,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,$FF,$FE; 16
	dc.b $FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F2,$F2,$F2,$F2; 32
	dc.b $F2	; 48
byte_21CBF:
	dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
	dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 16
	dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 32
	dc.b   0	; 48
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj14_MapUnc_21CF0:	BINCLUDE "mappings/sprite/obj14_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj14_MapUnc_21D7C:	BINCLUDE "mappings/sprite/obj14_b.bin"
; ===========================================================================

JmpTo3_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo13_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================

JmpTo_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 16 - Diagonally moving lift from HTZ
; ----------------------------------------------------------------------------
; Sprite_21DAC:
Obj16:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_21DBA(pc,d0.w),d1
	jmp	off_21DBA(pc,d1.w)
; ===========================================================================
off_21DBA:
	dc.w loc_21DBE-off_21DBA
	dc.w loc_21E10-off_21DBA; 1
; ===========================================================================

loc_21DBE:
	addq.b	#2,routine(a0)
	move.l	#Obj16_MapUnc_21F14,mappings(a0)
	move.w	#$43E6,art_tile(a0)
	bsr.w	JmpTo14_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#0,mapping_frame(a0)
	move.b	#1,priority(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	#$40,y_radius(a0)
	bset	#4,render_flags(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#3,d0
	move.w	d0,objoff_34(a0)

loc_21E10:
	move.w	x_pos(a0),-(sp)
	bsr.w	loc_21E2C
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	#-$28,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo3_PlatformObject
	bra.w	JmpTo5_MarkObjGone
; ===========================================================================

loc_21E2C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_21E3A(pc,d0.w),d1
	jmp	off_21E3A(pc,d1.w)
; ===========================================================================
off_21E3A:
	dc.w loc_21E40-off_21E3A
	dc.w loc_21E68-off_21E3A; 1
	dc.w loc_21EC2-off_21E3A; 2
; ===========================================================================

loc_21E40:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_21E66
	addq.b	#2,routine_secondary(a0)
	move.w	#$200,x_vel(a0)
	btst	#0,status(a0)
	beq.s	loc_21E60
	neg.w	x_vel(a0)

loc_21E60:
	move.w	#$100,y_vel(a0)

return_21E66:
	rts
; ===========================================================================

loc_21E68:
	move.w	(Timer_frames).w,d0
	andi.w	#$F,d0
	bne.s	loc_21E7C
	move.w	#$E4,d0
	jsr	(PlaySound).l

loc_21E7C:
	bsr.w	JmpTo4_ObjectMove
	subq.w	#1,objoff_34(a0)
	bne.s	return_21EC0
	addq.b	#2,routine_secondary(a0)
	move.b	#2,mapping_frame(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	bsr.w	JmpTo4_SingleObjLoad2
	bne.s	return_21EC0
	_move.b	#$1C,0(a1) ; load obj1C
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#6,subtype(a1)

return_21EC0:
	rts
; ===========================================================================

loc_21EC2:
	bsr.w	JmpTo4_ObjectMove
	addi.w	#$38,y_vel(a0)
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcc.s	return_21F12
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	loc_21F0C
	bclr	#3,status(a0)
	beq.s	loc_21EF8
	bclr	#3,(MainCharacter+status).w
	bset	#1,(MainCharacter+status).w

loc_21EF8:
	bclr	#4,status(a0)
	beq.s	loc_21F0C
	bclr	#3,(Sidekick+status).w
	bset	#1,(Sidekick+status).w

loc_21F0C:
	move.w	#$4000,x_pos(a0)

return_21F12:
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj16_MapUnc_21F14:	BINCLUDE "mappings/sprite/obj16.bin"
; ===========================================================================

JmpTo5_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo4_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo14_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo3_PlatformObject 
	jmp	PlatformObject
; ===========================================================================
; loc_22010:
JmpTo4_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 19 - Platform from CPZ, OOZ and WFZ
; ----------------------------------------------------------------------------
; Sprite_22018:
Obj19:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj19_States(pc,d0.w),d1
	jmp	Obj19_States(pc,d1.w)
; ===========================================================================
; off_22026:
Obj19_States:
	dc.w Obj19_Init-Obj19_States
	dc.w Obj19_Main-Obj19_States; 1
; ---------------------------------------------------------------------------
; word_2202A:
Obj19_SubtypeProperties:
	dc.b $20, 0
	dc.b $18, 1
	dc.b $40, 2
	dc.b $20, 3
; ===========================================================================
; loc_22032:
Obj19_Init:
	addq.b	#2,routine(a0) ; => Obj19_Main
	move.l	#Obj19_MapUnc_2222A,mappings(a0)

	move.w	#$63A0,art_tile(a0)	; set default art

	cmpi.b	#$A,(Current_Zone).w	; are we in OOZ?
	bne.s	+			; if not, branch
	move.w	#$62F4,art_tile(a0)	; set OOZ art
+
	cmpi.b	#6,(Current_Zone).w	; are we in WFZ?
	bne.s	+			; if not, branch
	move.w	#$A46D,art_tile(a0)	; set WTZ art
+
	bsr.w	JmpTo15_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$1E,d0
	lea	Obj19_SubtypeProperties(pc,d0.w),a2
	move.b	(a2)+,width_pixels(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.b	#4,priority(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	andi.b	#$F,subtype(a0)
	cmpi.b	#3,subtype(a0)
	bne.s	loc_220AA
	btst	#0,status(a0)
	bne.s	loc_220B2

loc_220AA:
	cmpi.b	#7,subtype(a0)
	bne.s	Obj19_Main

loc_220B2:
	subi.w	#$C0,y_pos(a0)

; loc_220B8:
Obj19_Main:
	move.w	x_pos(a0),-(sp)
	bsr.w	Obj19_Move
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	#$11,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo4_PlatformObject
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo20_DeleteObject
	bra.w	JmpTo11_DisplaySprite
; ---------------------------------------------------------------------------
; loc_220E8:
Obj19_Move:
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	add.w	d0,d0
	move.w	Obj19_MoveTypes(pc,d0.w),d1
	jmp	Obj19_MoveTypes(pc,d1.w)
; ===========================================================================
; platform movement routine table
; off_220FC:
Obj19_MoveTypes:
	dc.w Obj19_MoveRoutine1 - Obj19_MoveTypes	;  0
	dc.w Obj19_MoveRoutine2 - Obj19_MoveTypes	;  1
	dc.w Obj19_MoveRoutine3 - Obj19_MoveTypes	;  2
	dc.w Obj19_MoveRoutine4 - Obj19_MoveTypes	;  3
	dc.w Obj19_MoveRoutine5 - Obj19_MoveTypes	;  4
	dc.w Obj19_MoveRoutineNull - Obj19_MoveTypes	;  5
	dc.w Obj19_MoveRoutine6 - Obj19_MoveTypes	;  6
	dc.w Obj19_MoveRoutine6 - Obj19_MoveTypes	;  7
	dc.w Obj19_MoveRoutine7 - Obj19_MoveTypes	;  8
	dc.w Obj19_MoveRoutine7 - Obj19_MoveTypes	;  9
	dc.w Obj19_MoveRoutine7 - Obj19_MoveTypes	; $A
	dc.w Obj19_MoveRoutine7 - Obj19_MoveTypes	; $B
	dc.w Obj19_MoveRoutine8 - Obj19_MoveTypes	; $C
	dc.w Obj19_MoveRoutine8 - Obj19_MoveTypes	; $D
	dc.w Obj19_MoveRoutine8 - Obj19_MoveTypes	; $E
	dc.w Obj19_MoveRoutine8 - Obj19_MoveTypes	; $F

; ===========================================================================
; loc_2211C:
Obj19_MoveRoutine1:
	move.b	($FFFFFE68).w,d0
	move.w	#$40,d1
	bra.s	Obj19_MoveRoutine2_Part2

; ===========================================================================
; loc_22126:
Obj19_MoveRoutine2:
	move.b	($FFFFFE6C).w,d0
	move.w	#$60,d1
; loc_2212E:
Obj19_MoveRoutine2_Part2:
	btst	#0,status(a0)
	beq.s	+
	neg.w	d0
	add.w	d1,d0
+
	move.w	objoff_30(a0),d1
	sub.w	d0,d1
	move.w	d1,x_pos(a0)
	rts

; ===========================================================================
; loc_22146:
Obj19_MoveRoutine3:
	move.b	($FFFFFE7C).w,d0
	move.w	#$80,d1
	btst	#0,status(a0)
	beq.s	+
	neg.w	d0
	add.w	d1,d0
+
	move.w	objoff_32(a0),d1
	sub.w	d0,d1
	move.w	d1,y_pos(a0)
	rts

; ===========================================================================
; loc_22166:
Obj19_MoveRoutine4:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_22174
	addq.b	#1,subtype(a0)

return_22174:
	rts

; ===========================================================================
; loc_22176:
Obj19_MoveRoutine5:
	bsr.w	JmpTo5_ObjectMove
	moveq	#8,d1
	move.w	objoff_32(a0),d0
	subi.w	#$60,d0
	cmp.w	y_pos(a0),d0
	bcc.s	+
	neg.w	d1
+
	add.w	d1,y_vel(a0)
	bne.s	Obj19_MoveRoutineNull
	addq.b	#1,subtype(a0)

; return_22196:
Obj19_MoveRoutineNull:
	rts

; ===========================================================================
; loc_22198:
Obj19_MoveRoutine6:
	bsr.w	JmpTo5_ObjectMove
	moveq	#8,d1
	move.w	objoff_32(a0),d0
	subi.w	#$60,d0
	cmp.w	y_pos(a0),d0
	bcc.s	+
	neg.w	d1
+
	add.w	d1,y_vel(a0)
	rts

; ===========================================================================
; loc_221B4:
Obj19_MoveRoutine7:
	move.b	($FFFFFE98).w,d1
	subi.b	#$40,d1
	ext.w	d1
	move.b	($FFFFFE9C).w,d2
	subi.b	#$40,d2
	ext.w	d2
	btst	#2,d0
	beq.s	+
	neg.w	d1
	neg.w	d2
+
	btst	#1,d0
	beq.s	+
	neg.w	d1
	exg	d1,d2
+
	add.w	objoff_30(a0),d1
	move.w	d1,x_pos(a0)
	add.w	objoff_32(a0),d2
	move.w	d2,y_pos(a0)
	rts

; ===========================================================================
; loc_221EE:
Obj19_MoveRoutine8:
	move.b	($FFFFFE98).w,d1
	subi.b	#$40,d1
	ext.w	d1
	move.b	($FFFFFE9C).w,d2
	subi.b	#$40,d2
	ext.w	d2
	btst	#2,d0
	beq.s	+
	neg.w	d1
	neg.w	d2
+
	btst	#1,d0
	beq.s	+
	neg.w	d1
	exg	d1,d2
+
	neg.w	d1
	add.w	objoff_30(a0),d1
	move.w	d1,x_pos(a0)
	add.w	objoff_32(a0),d2
	move.w	d2,y_pos(a0)
	rts
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj19_MapUnc_2222A:	BINCLUDE "mappings/sprite/obj19.bin"
; ===========================================================================
	nop

JmpTo11_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo20_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo15_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo4_PlatformObject 
	jmp	PlatformObject
; ===========================================================================
; loc_222A4:
JmpTo5_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1B - Speed booster from from CPZ
; ----------------------------------------------------------------------------
; Sprite_222AC:
Obj1B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj1B_Index(pc,d0.w),d1
	jmp	Obj1B_Index(pc,d1.w)
; ===========================================================================
; off_222BA:
Obj1B_Index:
	dc.w Obj1B_Init-Obj1B_Index; 0
	dc.w Obj1B_Main-Obj1B_Index; 2
; ---------------------------------------------------------------------------
; word_222BE:
Obj1B_BoosterSpeeds:
	dc.w $1000
	dc.w  $A00
; ===========================================================================
; loc_222C2:
Obj1B_Init:
	addq.b	#2,routine(a0) ; => Obj1B_Main
	move.l	#Obj1B_MapUnc_223E2,mappings(a0)
	move.w	#$E39C,art_tile(a0)
	bsr.w	JmpTo16_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	subtype(a0),d0
	andi.w	#2,d0
	move.w	Obj1B_BoosterSpeeds(pc,d0.w),objoff_30(a0)

; loc_222F8:
Obj1B_Main:
	move.b	($FFFFFE05).w,d0
	andi.b	#2,d0
	move.b	d0,mapping_frame(a0)
	move.w	x_pos(a0),d0
	move.w	d0,d1
	subi.w	#$10,d0
	addi.w	#$10,d1
	move.w	y_pos(a0),d2
	move.w	d2,d3
	subi.w	#$10,d2
	addi.w	#$10,d3

	lea	(MainCharacter).w,a1 ; a1=character
	btst	#1,status(a1)
	bne.s	+
	move.w	x_pos(a1),d4
	cmp.w	d0,d4
	bcs.w	+
	cmp.w	d1,d4
	bcc.w	+
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.w	+
	cmp.w	d3,d4
	bcc.w	+
	move.w	d0,-(sp)
	bsr.w	Obj1B_GiveBoost
	move.w	(sp)+,d0
+
	lea	(Sidekick).w,a1 ; a1=character
	btst	#1,status(a1)
	bne.s	+
	move.w	x_pos(a1),d4
	cmp.w	d0,d4
	bcs.w	+
	cmp.w	d1,d4
	bcc.w	+
	move.w	y_pos(a1),d4
	cmp.w	d2,d4
	bcs.w	+
	cmp.w	d3,d4
	bcc.w	+
	bsr.w	Obj1B_GiveBoost
+
	bra.w	JmpTo6_MarkObjGone

; ===========================================================================
; sub_22388:
Obj1B_GiveBoost:
	move.w	x_vel(a1),d0
	btst	#0,status(a0)
	beq.s	+
	neg.w	d0 ; d0 = absolute value of character's x velocity
+
	cmpi.w	#$1000,d0		; is the character already going super fast?
	bge.s	Obj1B_GiveBoost_Done	; if yes, branch to not change the speed
	move.w	objoff_30(a0),x_vel(a1)	; make the character go super fast
	bclr	#0,status(a1)	; turn him right
	btst	#0,status(a0)	; was that the correct direction?
	beq.s	+		; if yes, branch
	bset	#0,status(a1)	; turn him left
	neg.w	x_vel(a1)	; make the boosting direction left
+
	move.w	#$F,move_lock(a1)	; don't let him turn around for a few frames
	move.w	x_vel(a1),inertia(a1)	; update his inertia value
	bclr	#5,status(a0)
	bclr	#6,status(a0)
	bclr	#5,status(a1)
; loc_223D8:
Obj1B_GiveBoost_Done:
	move.w	#$4C+$80,d0 ; spring boing sound
	jmp	(PlaySound).l
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1B_MapUnc_223E2:	BINCLUDE "mappings/sprite/obj1B.bin"
; ===========================================================================

JmpTo6_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo16_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1D - Blue balls in CPZ
; ----------------------------------------------------------------------------
; Sprite_22408:
Obj1D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj1D_States(pc,d0.w),d1
	jmp	Obj1D_States(pc,d1.w)
; ===========================================================================
; off_22416:
Obj1D_States:
	dc.w Obj1D_Init - Obj1D_States		; 0
	dc.w Obj1D_Wait - Obj1D_States		; 2
	dc.w Obj1D_MoveArc - Obj1D_States	; 4
	dc.w Obj1D_Wait - Obj1D_States		; 6
	dc.w Obj1D_MoveStraight - Obj1D_States	; 8
; ---------------------------------------------------------------------------
; unused table of speed values
;word_22420:
	dc.w -$480
	dc.w -$500
	dc.w -$600
	dc.w -$700
; ===========================================================================
; loc_22428:
Obj1D_Init:
	addq.b	#2,routine(a0) ; => Obj1D_Wait
	move.w	#-$480,y_vel(a0)
	moveq	#0,d1
	move.b	subtype(a0),d1
	move.b	d1,d0
	andi.b	#$F,d1
	moveq	#2,d5
	andi.b	#$F0,d0
	beq.s	+
	moveq	#6,d5
+
	move.b	status(a0),d4
	moveq	#0,d2
	movea.l	a0,a1
	bra.s	loc_22458
; ---------------------------------------------------------------------------

loc_22452:
	bsr.w	JmpTo5_SingleObjLoad2
	bne.s	loc_224D0

loc_22458:
	_move.b	0(a0),0(a1) ; load obj1D
	move.b	d5,routine(a1) ; => Obj1D_Wait (either one)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	#Obj1D_MapUnc_22576,mappings(a1)
	move.w	#$643C,art_tile(a1)
	bsr.w	JmpTo3_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#%10001011,collision_flags(a1)
	move.w	x_pos(a1),objoff_38(a1)
	move.w	y_pos(a1),objoff_30(a1)
	move.w	y_vel(a0),y_vel(a1)
	move.w	y_vel(a1),objoff_34(a1)
	move.b	#8,width_pixels(a1)
	move.w	#$60,objoff_3A(a1)
	move.w	#$B,objoff_36(a1)
	andi.b	#1,d4
	beq.s	+
	neg.w	objoff_36(a1)
	neg.w	objoff_3A(a1)
+
	move.w	d2,objoff_32(a1)
	addq.w	#3,d2

loc_224D0:
	dbf	d1,loc_22452
	rts
; ===========================================================================
; loc_224D6:
Obj1D_Wait:
	subq.w	#1,objoff_32(a0)
	bpl.s	BranchTo_JmpTo7_MarkObjGone
	addq.b	#2,routine(a0) ; => Obj1D_MoveArc or Obj1D_MoveStraight
	move.w	#$3B,objoff_32(a0)
	move.w	#$DA,d0
	jsr	(PlaySoundLocal).l

BranchTo_JmpTo7_MarkObjGone 
	bra.w	JmpTo7_MarkObjGone
; ===========================================================================
; loc_224F4:
Obj1D_MoveArc:
	bsr.w	JmpTo6_ObjectMove
	move.w	objoff_36(a0),d0
	add.w	d0,x_vel(a0)
	addi.w	#$18,y_vel(a0)
	bne.s	+
	neg.w	objoff_36(a0)
+
	move.w	objoff_30(a0),d0
	cmp.w	y_pos(a0),d0
	bhi.s	BranchTo2_JmpTo7_MarkObjGone
	move.w	objoff_34(a0),y_vel(a0)
	clr.w	x_vel(a0)
	subq.b	#2,routine(a0) ; => Obj1D_Wait

BranchTo2_JmpTo7_MarkObjGone 
	bra.w	JmpTo7_MarkObjGone
; ===========================================================================
; loc_22528:
Obj1D_MoveStraight:
	bsr.w	JmpTo6_ObjectMove
	addi.w	#$18,y_vel(a0)
	bne.s	+
	move.w	objoff_3A(a0),d0
	add.w	objoff_38(a0),d0
	move.w	d0,x_pos(a0)
+
	cmpi.w	#$180,y_vel(a0)
	bne.s	+
	move.w	#$DA,d0
	jsr	(PlaySoundLocal).l
+
	move.w	objoff_30(a0),d0
	cmp.w	y_pos(a0),d0
	bhi.s	BranchTo3_JmpTo7_MarkObjGone
	move.w	objoff_34(a0),y_vel(a0)
	move.w	objoff_38(a0),x_pos(a0)
	move.w	#$DA,d0
	jsr	(PlaySoundLocal).l

BranchTo3_JmpTo7_MarkObjGone 
	bra.w	JmpTo7_MarkObjGone
; ===========================================================================
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj1D_MapUnc_22576:	BINCLUDE "mappings/sprite/obj1D.bin"
; ===========================================================================
	nop

JmpTo7_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo5_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo3_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================
; loc_22596:
JmpTo6_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1E - Spin tube from CPZ
; ----------------------------------------------------------------------------
; Sprite_2259C:
Obj1E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj1E_States(pc,d0.w),d1
	jsr	Obj1E_States(pc,d1.w)
	move.b	objoff_2C(a0),d0
	add.b	objoff_36(a0),d0
	beq.w	JmpTo_MarkObjGone3
	rts
; ===========================================================================
; JmpTbl_225B8:
Obj1E_States:
	dc.w Obj1E_Init-Obj1E_States	; 0
	dc.w Obj1E_Main-Obj1E_States	; 2
word_225BC:
	dc.w   $A0	; 0
	dc.w  $100	; 2
	dc.w  $120	; 4
; ===========================================================================
; loc_225C2: LoadSubtype_1E:
Obj1E_Init:
	addq.b	#2,routine(a0)
	move.b	subtype(a0),d0
	add.w	d0,d0
	andi.w	#6,d0
	move.w	word_225BC(pc,d0.w),objoff_2A(a0)
; loc_225D6:
Obj1E_Main:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	objoff_2C(a0),a4
	bsr.s	+
	lea	(Sidekick).w,a1 ; a1=character
	lea	objoff_36(a0),a4
+
	moveq	#0,d0
	move.b	(a4),d0
	move.w	Obj1E_Modes(pc,d0.w),d0
	jmp	Obj1E_Modes(pc,d0.w)
; ===========================================================================
; off_225F4:
Obj1E_Modes:
	dc.w loc_225FC - Obj1E_Modes; 0
	dc.w loc_2271A - Obj1E_Modes; 2
	dc.w loc_227FE - Obj1E_Modes; 4
	dc.w loc_2286A - Obj1E_Modes; 6
; ===========================================================================

loc_225FC:
	tst.w	(Debug_placement_mode).w
	bne.w	return_22718
	move.w	objoff_2A(a0),d2
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	cmp.w	d2,d0
	bcc.w	return_22718
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	cmpi.w	#$80,d1
	bcc.w	return_22718
	cmpi.b	#$20,anim(a1)
	beq.w	return_22718

	moveq	#0,d3
	cmpi.w	#$A0,d2
	beq.s	+
	moveq	#8,d3
	cmpi.w	#$120,d2
	beq.s	+
	moveq	#4,d3
	neg.w	d0
	addi.w	#$100,d0
+
	cmpi.w	#$80,d0
	bcs.s	loc_2267E
	moveq	#0,d2
	move.b	subtype(a0),d0
	lsr.w	#2,d0
	andi.w	#$F,d0
	move.b	byte_2266E(pc,d0.w),d2
	cmpi.b	#2,d2
	bne.s	loc_22688
	move.b	(Timer_second).w,d2
	andi.b	#1,d2
	bra.s	loc_22688
; ===========================================================================
byte_2266E:
	dc.b   2
	dc.b   2	; 1
	dc.b   2	; 2
	dc.b   2	; 3
	dc.b   2	; 4
	dc.b   2	; 5
	dc.b   2	; 6
	dc.b   2	; 7
	dc.b   2	; 8
	dc.b   2	; 9
	dc.b   0	; 10
	dc.b   2	; 11
	dc.b   0	; 12
	dc.b   1	; 13
	dc.b   2	; 14
	dc.b   1	; 15
; ===========================================================================

loc_2267E:
	moveq	#2,d2
	cmpi.w	#$40,d1
	bcc.s	loc_22688
	moveq	#3,d2

loc_22688:
	move.b	d2,1(a4)
	add.w	d3,d2
	add.w	d2,d2
	andi.w	#$1E,d2
	lea	off_22980(pc),a2
	adda.w	(a2,d2.w),a2
	move.w	(a2)+,4(a4)
	subq.w	#4,4(a4)
	move.w	(a2)+,d4
	add.w	x_pos(a0),d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	add.w	y_pos(a0),d5
	move.w	d5,y_pos(a1)
	move.l	a2,6(a4)
	move.w	(a2)+,d4
	add.w	x_pos(a0),d4
	move.w	(a2)+,d5
	add.w	y_pos(a0),d5
	addq.b	#2,(a4)
	move.b	#$81,obj_control(a1)
	move.b	#2,anim(a1)
	move.w	#$800,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	bclr	#5,status(a0)
	bclr	#5,status(a1)
	bset	#1,status(a1)
	move.b	#0,jumping(a1)
	bclr	#7,art_tile(a1)
	move.w	#$800,d2
	bsr.w	loc_22902
	move.w	#$BE,d0
	jsr	(PlaySound).l

return_22718:
	rts
; ===========================================================================

loc_2271A:
	subq.b	#1,2(a4)
	bpl.s	Obj1E_MoveCharacter
	movea.l	6(a4),a2
	move.w	(a2)+,d4
	add.w	x_pos(a0),d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	add.w	y_pos(a0),d5
	move.w	d5,y_pos(a1)
	tst.b	1(a4)
	bpl.s	+
	subq.w	#8,a2
+
	move.l	a2,6(a4)
	subq.w	#4,4(a4)
	beq.s	loc_22784
	move.w	(a2)+,d4
	add.w	x_pos(a0),d4
	move.w	(a2)+,d5
	add.w	y_pos(a0),d5
	move.w	#$800,d2
	bra.w	loc_22902
; ===========================================================================
; update the position of Sonic/Tails in the CPZ tube
; loc_2275E:
Obj1E_MoveCharacter:
	move.l	x_pos(a1),d2
	move.l	y_pos(a1),d3
	move.w	x_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,x_pos(a1)
	move.l	d3,y_pos(a1)
	rts
; ===========================================================================

loc_22784:
	cmpi.b	#4,1(a4)
	bcc.s	loc_227A6
	move.b	subtype(a0),d0
	andi.w	#$FC,d0
	add.b	1(a4),d0
	move.b	#4,1(a4)
	move.b	byte_227BE(pc,d0.w),d0
	bne.w	loc_22892

loc_227A6:
	andi.w	#$7FF,y_pos(a1)
	move.b	#6,(a4)
	clr.b	obj_control(a1)
	move.w	#$BC,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_227BE:
	dc.b   2,  1,  0,  0,$FF,  3,  0,  0,  4,$FE,  0,  0,$FD,$FC,  0,  0
	dc.b $FB,$FB,  0,  0,  7,  6,  0,  0,$F9,$FA,  0,  0,  8,  9,  0,  0; 16
	dc.b $F8,$F7,  0,  0, $B, $A,  0,  0, $C,  0,  0,  0,$F5,$F6,  0,  0; 32
	dc.b $F4,  0,  0,  0,  0, $D,  0,  0,$F3, $E,  0,  0,  0,$F2,  0,  0; 48
; ===========================================================================

loc_227FE:
	subq.b	#1,2(a4)
	bpl.s	Obj1E_MoveCharacter_2
	movea.l	6(a4),a2
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)
	tst.b	1(a4)
	bpl.s	loc_2281C
	subq.w	#8,a2

loc_2281C:
	move.l	a2,6(a4)
	subq.w	#4,4(a4)
	beq.s	loc_22858
	move.w	(a2)+,d4
	move.w	(a2)+,d5
	move.w	#$800,d2
	bra.w	loc_22902
; ===========================================================================
; update the position of Sonic/Tails in the CPZ tube
; loc_22832:
Obj1E_MoveCharacter_2:
	move.l	x_pos(a1),d2
	move.l	y_pos(a1),d3
	move.w	x_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,x_pos(a1)
	move.l	d3,y_pos(a1)
	rts
; ===========================================================================

loc_22858:
	andi.w	#$7FF,y_pos(a1)
	clr.b	(a4)
	move.w	#$BC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_2286A:
	move.w	objoff_2A(a0),d2
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	cmp.w	d2,d0
	bcc.w	loc_2288E
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	cmpi.w	#$80,d1
	bcc.w	loc_2288E
	rts
; ===========================================================================

loc_2288E:
	clr.b	(a4)
	rts
; ===========================================================================

loc_22892:
	bpl.s	loc_228C4
	neg.b	d0
	move.b	#-4,1(a4)
	add.w	d0,d0
	lea	(off_22E88).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d0
	subq.w	#4,d0
	move.w	d0,4(a4)
	lea	(a2,d0.w),a2
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)
	subq.w	#8,a2
	bra.s	loc_228E4
; ===========================================================================

loc_228C4:
	add.w	d0,d0
	lea	(off_22E88).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,4(a4)
	subq.w	#4,4(a4)
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)

loc_228E4:
	move.l	a2,6(a4)
	move.w	(a2)+,d4
	move.w	(a2)+,d5
	move.w	#$800,d2
	bsr.w	loc_22902
	move.w	#$BE,d0
	jsr	(PlaySound).l
	addq.b	#2,(a4)
	rts
; ===========================================================================

loc_22902:
	moveq	#0,d0
	move.w	d2,d3
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	bge.s	+
	neg.w	d0
	neg.w	d2
+
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	bge.s	+
	neg.w	d1
	neg.w	d3
+
	cmp.w	d0,d1
	bcs.s	loc_22952
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	swap	d1
	divs.w	d3,d1
	moveq	#0,d0
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	beq.s	+
	swap	d0
	divs.w	d1,d0
+
	move.w	d0,x_vel(a1)
	move.w	d3,y_vel(a1)
	tst.w	d1
	bpl.s	+
	neg.w	d1
+
	move.w	d1,2(a4)
	rts
; ===========================================================================

loc_22952:
	moveq	#0,d0
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	swap	d0
	divs.w	d2,d0
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	beq.s	+
	swap	d1
	divs.w	d0,d1
+
	move.w	d1,y_vel(a1)
	move.w	d2,x_vel(a1)
	tst.w	d0
	bpl.s	+
	neg.w	d0
+
	move.w	d0,2(a4)
	rts
; ===========================================================================
; spin tube data (CPZ act 1? uncompressed, format unknown)
; -------------------------------------------------------------------------------
off_22980:	BINCLUDE "misc/obj1E_a.bin"
; -------------------------------------------------------------------------------
; spin tube data (CPZ act 2? uncompressed, format unknown)
; -------------------------------------------------------------------------------
off_22E88:	BINCLUDE "misc/obj1E_b.bin"
; ===========================================================================
	nop

JmpTo_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 20 - Lava bubble from Hill Top Zone (boss weapon)
; ----------------------------------------------------------------------------
; Sprite_22FF8:
Obj20:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_23006(pc,d0.w),d1
	jmp	off_23006(pc,d1.w)
; ===========================================================================
off_23006:
	dc.w loc_23014-off_23006
	dc.w loc_23076-off_23006; 1
	dc.w loc_23084-off_23006; 2
	dc.w loc_2311E-off_23006; 3
	dc.w loc_23144-off_23006; 4
	dc.w loc_231D2-off_23006; 5
	dc.w BranchTo_JmpTo21_DeleteObject-off_23006; 6
; ===========================================================================

loc_23014:
	addq.b	#2,routine(a0)
	move.b	#8,y_radius(a0)
	move.b	#8,x_radius(a0)
	move.l	#Obj20_MapUnc_23254,mappings(a0)
	move.w	#$8416,art_tile(a0)
	bsr.w	JmpTo17_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#8,width_pixels(a0)
	move.w	y_pos(a0),objoff_30(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#3,d0
	andi.w	#$780,d0
	neg.w	d0
	move.w	d0,x_vel(a0)
	move.w	d0,y_vel(a0)
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lsl.w	#4,d0
	move.w	d0,objoff_32(a0)
	move.w	d0,objoff_34(a0)

loc_23076:
	lea	(off_23236).l,a1
	bsr.w	JmpTo4_AnimateSprite
	bra.w	JmpTo8_MarkObjGone
; ===========================================================================

loc_23084:
	cmpi.b	#5,anim_frame_duration(a0)
	bne.s	loc_230B4
	bsr.w	JmpTo6_SingleObjLoad2
	bne.s	loc_230A6
	bsr.s	loc_230C2
	bsr.w	JmpTo6_SingleObjLoad2
	bne.s	loc_230A6
	bsr.s	loc_230C2
	neg.w	x_vel(a1)
	bset	#0,render_flags(a1)

loc_230A6:
	move.w	#$AE,d0
	jsr	(PlaySound).l
	addq.b	#2,routine(a0)

loc_230B4:
	lea	(off_23236).l,a1
	bsr.w	JmpTo4_AnimateSprite
	bra.w	JmpTo8_MarkObjGone
; ===========================================================================

loc_230C2:
	_move.b	#$20,0(a1) ; load obj20
	move.b	#8,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	x_vel(a0),x_vel(a1)
	move.w	y_vel(a0),y_vel(a1)
	move.b	#8,y_radius(a1)
	move.b	#8,x_radius(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#8,width_pixels(a1)
	move.b	#$8B,collision_flags(a1)
	move.w	y_pos(a1),objoff_30(a1)
	rts
; ===========================================================================

loc_2311E:
	subq.w	#1,objoff_32(a0)
	bpl.s	loc_23136
	move.w	objoff_34(a0),objoff_32(a0)
	move.b	#2,routine(a0)
	move.w	#1,anim(a0)

loc_23136:
	lea	(off_23236).l,a1
	bsr.w	JmpTo4_AnimateSprite
	bra.w	JmpTo8_MarkObjGone
; ===========================================================================

loc_23144:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_2315A
	move.b	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#1,mapping_frame(a0)

loc_2315A:
	bsr.w	JmpTo7_ObjectMove
	addi.w	#$18,y_vel(a0)
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcc.s	loc_23176
	bra.w	JmpTo21_DeleteObject
; ===========================================================================

loc_23176:
	bclr	#1,render_flags(a0)
	tst.w	y_vel(a0)
	bmi.s	BranchTo_JmpTo8_MarkObjGone
	bset	#1,render_flags(a0)
	bsr.w	ObjCheckFloorDist
	tst.w	d1
	bpl.s	BranchTo_JmpTo8_MarkObjGone
	add.w	d1,y_pos(a0)
	addq.b	#2,routine(a0)
	move.b	#2,anim(a0)
	move.b	#4,mapping_frame(a0)
	move.w	#0,y_vel(a0)
	move.l	#Obj20_MapUnc_23294,mappings(a0)
	move.w	#$839E,art_tile(a0)
	bsr.w	JmpTo17_Adjust2PArtPointer
	move.b	#0,mapping_frame(a0)
	move.w	#9,objoff_32(a0)
	move.b	#3,objoff_36(a0)

BranchTo_JmpTo8_MarkObjGone 
	bra.w	JmpTo8_MarkObjGone
; ===========================================================================

loc_231D2:
	subq.w	#1,objoff_32(a0)
	bpl.s	loc_23224
	move.w	#$7F,objoff_32(a0)
	subq.b	#1,objoff_36(a0)
	bmi.s	loc_23224
	bsr.w	JmpTo6_SingleObjLoad2
	bne.s	loc_23224
	moveq	#0,d0
	move.w	#$F,d1

loc_231F0:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_231F0
	move.w	#9,objoff_32(a1)
	move.w	#$200,anim(a1)
	move.w	#$E,d0
	tst.w	x_vel(a1)
	bpl.s	loc_23214
	neg.w	d0

loc_23214:
	add.w	d0,x_pos(a1)
	move.l	a1,-(sp)
	bsr.w	FireCheckFloorDist
	movea.l	(sp)+,a1 ; a1=object
	add.w	d1,y_pos(a1)

loc_23224:
	lea	(off_23236).l,a1
	bsr.w	JmpTo4_AnimateSprite
	bra.w	JmpTo8_MarkObjGone
; ===========================================================================

BranchTo_JmpTo21_DeleteObject 
	bra.w	JmpTo21_DeleteObject
; ===========================================================================
; animation script
off_23236:
	dc.w byte_2323C-off_23236
	dc.w byte_23243-off_23236; 1
	dc.w byte_23246-off_23236; 2
byte_2323C:	dc.b  $B,  2,  3,$FC,  4,$FD,  1
byte_23243:	dc.b $7F,  5,$FF
byte_23246:	dc.b   5,  4,  5,  2,  3,  0,  1,  0,  1,  2,  3,  4,  5,$FC
	even

; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj20_MapUnc_23254:	BINCLUDE "mappings/sprite/obj20_a.bin"
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj20_MapUnc_23294:	BINCLUDE "mappings/sprite/obj20_b.bin"
; ===========================================================================

JmpTo21_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo8_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo6_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo4_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo17_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; loc_232FA:
JmpTo7_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2F - Smashable ground in Hill Top Zone
; ----------------------------------------------------------------------------
; Sprite_23300:
Obj2F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2330E(pc,d0.w),d1
	jmp	off_2330E(pc,d1.w)
; ===========================================================================
off_2330E:
	dc.w loc_2331E-off_2330E
	dc.w loc_23368-off_2330E; 1
	dc.w loc_234DC-off_2330E; 2
byte_23314:
	dc.b $24
	dc.b   0	; 1
	dc.b $20	; 2
	dc.b   2	; 3
	dc.b $18	; 4
	dc.b   4	; 5
	dc.b $10	; 6
	dc.b   6	; 7
	dc.b   8	; 8
	dc.b   8	; 9
; ===========================================================================

loc_2331E:
	addq.b	#2,routine(a0)
	move.l	#Obj2F_MapUnc_236FA,mappings(a0)
	move.w	#$C000,art_tile(a0)
	bsr.w	JmpTo18_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$1E,d0
	lea	byte_23314(pc,d0.w),a2
	move.b	(a2)+,y_radius(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.b	#$20,y_radius(a0)
	bset	#4,render_flags(a0)

loc_23368:
	move.w	(Chain_Bonus_counter).w,objoff_38(a0)
	move.b	(MainCharacter+anim).w,objoff_32(a0)
	move.b	(Sidekick+anim).w,objoff_33(a0)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo3_SolidObject
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_233A4

BranchTo_JmpTo9_MarkObjGone 
	bra.w	JmpTo9_MarkObjGone
; ===========================================================================

loc_233A4:
	cmpi.b	#$18,d0
	bne.s	loc_23408
	cmpi.b	#2,objoff_32(a0)
	bne.s	loc_233C0
	tst.b	subtype(a0)
	bmi.s	loc_233F0
	cmpi.b	#$E,(MainCharacter+layer).w
	beq.s	loc_233F0

loc_233C0:
	move.b	#$C,(MainCharacter+layer).w
	move.b	#$D,(MainCharacter+layer_plus).w
	cmpi.b	#2,objoff_33(a0)
	bne.s	loc_233E2
	tst.b	subtype(a0)
	bmi.s	loc_233F0
	cmpi.b	#$E,(Sidekick+layer).w
	beq.s	loc_233F0

loc_233E2:
	move.b	#$C,(Sidekick+layer).w
	move.b	#$D,(Sidekick+layer_plus).w
	bra.s	BranchTo_JmpTo9_MarkObjGone
; ===========================================================================

loc_233F0:
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	objoff_32(a0),d0
	bsr.s	loc_2343E
	lea	(Sidekick).w,a1 ; a1=character
	move.b	objoff_33(a0),d0
	bsr.s	loc_2343E
	bra.w	loc_234A4
; ===========================================================================

loc_23408:
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_23470
	cmpi.b	#2,objoff_32(a0)
	bne.s	loc_23426
	tst.b	subtype(a0)
	bmi.s	loc_23436
	cmpi.b	#$E,(MainCharacter+layer).w
	beq.s	loc_23436

loc_23426:
	move.b	#$C,(MainCharacter+layer).w
	move.b	#$D,(MainCharacter+layer_plus).w
	bra.w	BranchTo_JmpTo9_MarkObjGone
; ===========================================================================

loc_23436:
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_23444
	bra.s	loc_234A4
; ===========================================================================

loc_2343E:
	cmpi.b	#2,d0
	bne.s	loc_2345C

loc_23444:
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)

loc_2345C:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	rts
; ===========================================================================

loc_23470:
	andi.b	#$10,d0
	beq.w	BranchTo_JmpTo9_MarkObjGone
	cmpi.b	#2,objoff_33(a0)
	bne.s	loc_2348E
	tst.b	subtype(a0)
	bmi.s	loc_2349E
	cmpi.b	#$E,(Sidekick+layer).w
	beq.s	loc_2349E

loc_2348E:
	move.b	#$C,(Sidekick+layer).w
	move.b	#$D,(Sidekick+layer_plus).w
	bra.w	BranchTo_JmpTo9_MarkObjGone
; ===========================================================================

loc_2349E:
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_23444

loc_234A4:
	move.w	objoff_38(a0),(Chain_Bonus_counter).w
	andi.b	#-$19,status(a0)
	lea	(byte_234F2).l,a4
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	addq.b	#1,mapping_frame(a0)
	move.l	d0,d1
	add.w	d0,d0
	add.w	d0,d0
	lea	(a4,d0.w),a4
	neg.w	d1
	addi.w	#9,d1
	move.w	#$18,d2
	bsr.w	JmpTo_sub_15E18
	bsr.w	loc_236A8

loc_234DC:
	bsr.w	JmpTo8_ObjectMove
	addi.w	#$18,y_vel(a0)
	tst.b	render_flags(a0)
	bpl.w	JmpTo22_DeleteObject
	bra.w	JmpTo12_DisplaySprite
; ===========================================================================
byte_234F2:
	dc.b $FF
	dc.b   0	; 1
	dc.b $F8	; 2
	dc.b   0	; 3
	dc.b   1	; 4
	dc.b   0	; 5
	dc.b $F8	; 6
	dc.b   0	; 7
	dc.b $FF	; 8
	dc.b $20	; 9
	dc.b $F9	; 10
	dc.b   0	; 11
	dc.b   0	; 12
	dc.b $E0	; 13
	dc.b $F9	; 14
	dc.b   0	; 15
	dc.b $FF	; 16
	dc.b $40	; 17
	dc.b $FA	; 18
	dc.b   0	; 19
	dc.b   0	; 20
	dc.b $C0	; 21
	dc.b $FA	; 22
	dc.b   0	; 23
	dc.b $FF	; 24
	dc.b $60	; 25
	dc.b $FB	; 26
	dc.b   0	; 27
	dc.b   0	; 28
	dc.b $A0	; 29
	dc.b $FB	; 30
	dc.b   0	; 31
	dc.b $FF	; 32
	dc.b $80	; 33
	dc.b $FC	; 34
	dc.b   0	; 35
	dc.b   0	; 36
	dc.b $80	; 37
	dc.b $FC	; 38
	dc.b   0	; 39
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 32 - Breakable block/rock from CPZ and HTZ
; ----------------------------------------------------------------------------
; Sprite_2351A:
Obj32:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_23528(pc,d0.w),d1
	jmp	off_23528(pc,d1.w)
; ===========================================================================
off_23528:
	dc.w loc_2352E-off_23528
	dc.w loc_23582-off_23528; 1
	dc.w loc_2366A-off_23528; 2
; ===========================================================================

loc_2352E:
	addq.b	#2,routine(a0)
	move.l	#Obj32_MapUnc_23852,mappings(a0)
	move.w	#$43B2,art_tile(a0)
	move.b	#$18,width_pixels(a0)
	move.l	#byte_23680,objoff_3C(a0)
	cmpi.b	#$D,(Current_Zone).w
	bne.s	loc_23572
	move.l	#Obj32_MapUnc_23886,mappings(a0)
	move.w	#$6430,art_tile(a0)
	move.b	#$10,width_pixels(a0)
	move.l	#byte_23698,objoff_3C(a0)

loc_23572:
	bsr.w	JmpTo18_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)

loc_23582:
	move.w	(Chain_Bonus_counter).w,objoff_38(a0)
	move.b	(MainCharacter+anim).w,objoff_32(a0)
	move.b	(Sidekick+anim).w,objoff_33(a0)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo3_SolidObject
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_235BC

BranchTo2_JmpTo9_MarkObjGone 
	bra.w	JmpTo9_MarkObjGone
; ===========================================================================

loc_235BC:
	cmpi.b	#$18,d0
	bne.s	loc_235EA
	cmpi.b	#2,objoff_32(a0)
	beq.s	loc_235D2
	cmpi.b	#2,objoff_33(a0)
	bne.s	BranchTo2_JmpTo9_MarkObjGone

loc_235D2:
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	objoff_32(a0),d0
	bsr.s	loc_23602
	lea	(Sidekick).w,a1 ; a1=character
	move.b	objoff_33(a0),d0
	bsr.s	loc_23602
	bra.w	loc_23652
; ===========================================================================

loc_235EA:
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_2363A
	cmpi.b	#2,objoff_32(a0)
	bne.s	BranchTo2_JmpTo9_MarkObjGone
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_23608
	bra.s	loc_23652
; ===========================================================================

loc_23602:
	cmpi.b	#2,d0
	bne.s	loc_23626

loc_23608:
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	move.w	#-$300,y_vel(a1)

loc_23626:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	rts
; ===========================================================================

loc_2363A:
	andi.b	#$10,d0
	beq.w	BranchTo2_JmpTo9_MarkObjGone
	cmpi.b	#2,objoff_33(a0)
	bne.w	BranchTo2_JmpTo9_MarkObjGone
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_23608

loc_23652:
	move.w	objoff_38(a0),(Chain_Bonus_counter).w
	andi.b	#-$19,status(a0)
	movea.l	objoff_3C(a0),a4
	bsr.w	JmpTo_sub_15E18
	bsr.w	loc_236A8

loc_2366A:
	bsr.w	JmpTo8_ObjectMove
	addi.w	#$18,y_vel(a0)
	tst.b	render_flags(a0)
	bpl.w	JmpTo22_DeleteObject
	bra.w	JmpTo12_DisplaySprite
; ===========================================================================
; some palettes
byte_23680:
	dc.b $FE,  0,$FE,  0,  0,  0,$FD,$80,  2,  0,$FE,  0,$FE,$40,$FE,$40
	dc.b   0,  0,$FE,  0,  1,$C0,$FE,$40; 16
byte_23698:
	dc.b $FF,  0,$FE,  0,  1,  0,$FE,  0,$FF,$40,$FE,$40,  0,$C0,$FE,$40

; ===========================================================================

loc_236A8:
	bsr.w	JmpTo3_SingleObjLoad
	bne.s	return_236F0
	_move.b	#$29,0(a1) ; load obj29
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	(Chain_Bonus_counter).w,d2
	addq.w	#2,(Chain_Bonus_counter).w
	cmpi.w	#6,d2
	bcs.s	loc_236D0
	moveq	#6,d2

loc_236D0:
	moveq	#0,d0
	move.w	word_236F2(pc,d2.w),d0
	cmpi.w	#$20,(Chain_Bonus_counter).w
	bcs.s	loc_236E4
	move.w	#1000,d0
	moveq	#$A,d2

loc_236E4:
	jsr	AddPoints
	lsr.w	#1,d2
	move.b	d2,mapping_frame(a1)

return_236F0:
	rts
; ===========================================================================
word_236F2:
	dc.w	$A
	dc.w   $14	; 1
	dc.w   $32	; 2
	dc.w   $64	; 3
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj2F_MapUnc_236FA:	BINCLUDE "mappings/sprite/obj2F.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj32_MapUnc_23852:	BINCLUDE "mappings/sprite/obj32_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj32_MapUnc_23886:	BINCLUDE "mappings/sprite/obj32_b.bin"
; ===========================================================================
	nop

JmpTo12_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo22_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo3_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo9_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo18_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_sub_15E18 
	jmp	sub_15E18
; ===========================================================================

JmpTo3_SolidObject 
	jmp	SolidObject
; ===========================================================================
; loc_238D6:
JmpTo8_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 30 - Large rising lava during earthquake in HTZ
; ----------------------------------------------------------------------------
; Sprite_238DC:
Obj30:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_238EA(pc,d0.w),d1
	jmp	off_238EA(pc,d1.w)
; ===========================================================================
off_238EA:
	dc.w loc_238F8-off_238EA
	dc.w loc_23944-off_238EA; 1
byte_238EE:
	dc.b $C0
	dc.b   0	; 1
	dc.b $C0	; 2
	dc.b   0	; 3
	dc.b $C0	; 4
	dc.b   0	; 5
	dc.b $E0	; 6
	dc.b   0	; 7
	dc.b $C0	; 8
	dc.b   0	; 9
; ===========================================================================

loc_238F8:
	addq.b	#2,routine(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.w	x_pos(a0),objoff_30(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.b	byte_238EE(pc,d0.w),width_pixels(a0)
	cmpi.b	#6,d0
	bcs.s	loc_23944
	bne.s	loc_23926
	cmpi.w	#$380,(Camera_Y_pos).w
	bcc.s	loc_23944
	bra.s	loc_2392E
; ===========================================================================

loc_23926:
	cmpi.w	#$380,(Camera_Y_pos).w
	bcs.s	loc_23944

loc_2392E:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	BranchTo_JmpTo23_DeleteObject
	bclr	#7,2(a2,d0.w)

BranchTo_JmpTo23_DeleteObject 
	bra.w	JmpTo23_DeleteObject
; ===========================================================================

loc_23944:
	move.w	objoff_32(a0),d0
	add.w	($FFFFEEE4).w,d0
	move.w	d0,y_pos(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.w	off_23968(pc,d0.w),d1
	jsr	off_23968(pc,d1.w)
	tst.b	($FFFFEEBC).w
	beq.w	JmpTo2_MarkObjGone3
	rts
; ===========================================================================
off_23968:
	dc.w loc_23972-off_23968
	dc.w loc_23972-off_23968; 1
	dc.w loc_2398A-off_23968; 2
	dc.w loc_239D0-off_23968; 3
	dc.w loc_239EA-off_23968; 4
; ===========================================================================

loc_23972:
	move.w	#$CB,d1
	move.w	#$80,d2
	move.w	#$81,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_SolidObject74_30
	bra.w	JmpTo_loc_19EF0
; ===========================================================================

loc_2398A:
	move.w	#$CB,d1
	move.w	#$78,d2
	move.w	#$79,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_SolidObject74_30
	bsr.w	JmpTo_loc_19EF0

loc_239A2:
	btst	#3,status(a0)
	beq.s	loc_239B8
	move.l	a0,-(sp)
	movea.l	a0,a1
	lea	(MainCharacter).w,a0 ; a0=character
	bsr.w	JmpTo_Touch_ChkHurt
	movea.l	(sp)+,a0 ; load 0bj address

loc_239B8:
	btst	#4,status(a0)
	beq.s	return_239CE
	move.l	a0,-(sp)
	movea.l	a0,a1
	lea	(Sidekick).w,a0 ; a0=character
	bsr.w	JmpTo_Touch_ChkHurt
	movea.l	(sp)+,a0 ; load 0bj address

return_239CE:
	rts
; ===========================================================================

loc_239D0:
	move.w	#$EB,d1
	move.w	#$78,d2
	move.w	#$79,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_SolidObject74_30
	bsr.w	JmpTo_loc_19EF0
	bra.s	loc_239A2
; ===========================================================================

loc_239EA:
	move.w	#$CB,d1
	move.w	#$2E,d2
	move.w	x_pos(a0),d4
	lea	(byte_23A04).l,a2
	bsr.w	JmpTo_SolidObject86_30
	bra.w	JmpTo_loc_19EF0
; ===========================================================================
byte_23A04:
	dc.b $30,$30,$30,$30,$30,$30,$30,$30,$2F,$2F,$2E,$2E,$2D,$2D,$2C,$2C
	dc.b $2B,$2B,$2A,$2A,$29,$29,$28,$28,$27,$27,$26,$26,$25,$25,$24,$24; 16
	dc.b $23,$23,$22,$22,$21,$21,$20,$20,$1F,$1F,$1E,$1E,$1D,$1D,$1C,$1C; 32
	dc.b $1B,$1B,$1A,$1A,$19,$19,$18,$18,$17,$17,$16,$16,$15,$15,$14,$14; 48
	dc.b $13,$13,$12,$12,$11,$11,$10,$10, $F, $F, $E, $E, $D, $D, $C, $C; 64
	dc.b  $B, $B, $A, $A,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4; 80
	dc.b   3,  3,  2,  2,  1,  1,  0,  0,$FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC; 96
	dc.b $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8,$F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4; 112
	dc.b $F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED,$ED,$EC,$EC; 128
	dc.b $EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5,$E5,$E4,$E4; 144
	dc.b $E3,$E3,$E2,$E2,$E1,$E1,$E0,$E0,$DF,$DF,$DE,$DE,$DD,$DD,$DC,$DC; 160
	dc.b $DB,$DB,$DA,$DA,$D9,$D9,$D8,$D8,$D7,$D7,$D6,$D6,$D5,$D5,$D4,$D4; 176
	dc.b $D3,$D3,$D2,$D2,$D1,$D1,$D0,$D0,$D0,$D0,$D0,$D0; 192
; ===========================================================================

JmpTo23_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo_Touch_ChkHurt 
	jmp	Touch_ChkHurt
; ===========================================================================

JmpTo2_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================

JmpTo_loc_19EF0 
	jmp	loc_19EF0
; ===========================================================================

JmpTo_SolidObject74_30 
	jmp	SolidObject74_30
; ===========================================================================

JmpTo_SolidObject86_30 
	jmp	SolidObject86_30




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 33 - Green platform from OOZ
; ----------------------------------------------------------------------------
; Sprite_23AF4:
Obj33:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_23B02(pc,d0.w),d1
	jmp	off_23B02(pc,d1.w)
; ===========================================================================
off_23B02:
	dc.w loc_23B08-off_23B02
	dc.w loc_23B90-off_23B02; 1
	dc.w loc_23D9A-off_23B02; 2
; ===========================================================================

loc_23B08:
	addq.b	#2,routine(a0)
	move.l	#Obj33_MapUnc_23DDC,mappings(a0)
	move.w	#$632C,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#$18,width_pixels(a0)
	move.w	y_pos(a0),objoff_30(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#$78,objoff_36(a0)
	tst.b	subtype(a0)
	beq.s	loc_23B48
	move.b	#4,routine_secondary(a0)

loc_23B48:
	bsr.w	JmpTo7_SingleObjLoad2
	bne.s	loc_23B90
	_move.b	0(a0),0(a1) ; load obj33
	move.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	subi.w	#$10,y_pos(a1)
	move.l	#Obj33_MapUnc_23DF0,mappings(a1)
	move.w	#$62E2,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.l	a0,objoff_3C(a1)

loc_23B90:

	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_23BBC(pc,d0.w),d1
	jsr	off_23BBC(pc,d1.w)
	move.w	(sp)+,d4
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#8,d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo4_SolidObject
	bra.w	JmpTo10_MarkObjGone
; ===========================================================================
off_23BBC:
	dc.w loc_23BC6-off_23BBC
	dc.w loc_23BEA-off_23BBC; 1
	dc.w loc_23C26-off_23BBC; 2
	dc.w loc_23D20-off_23BBC; 3
	dc.w return_23D98-off_23BBC; 4
; ===========================================================================

loc_23BC6:
	subq.w	#1,objoff_36(a0)
	bpl.s	return_23BE8
	move.w	#$78,objoff_36(a0)
	move.l	#-$96800,objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#$D4,d0
	jsr	(PlaySoundLocal).l

return_23BE8:
	rts
; ===========================================================================

loc_23BEA:
	move.l	y_pos(a0),d1
	add.l	objoff_32(a0),d1
	move.l	d1,y_pos(a0)
	addi.l	#$3800,objoff_32(a0)
	swap	d1
	cmp.w	objoff_30(a0),d1
	bcs.s	return_23C24
	move.l	objoff_32(a0),d0
	cmpi.l	#loc_10000,d0
	bcc.s	loc_23C16
	subq.b	#2,routine_secondary(a0)

loc_23C16:
	lsr.l	#2,d0
	neg.l	d0
	move.l	d0,objoff_32(a0)
	move.w	objoff_30(a0),y_pos(a0)

return_23C24:
	rts
; ===========================================================================

loc_23C26:
	move.w	x_pos(a0),d2
	move.w	d2,d3
	subi.w	#$10,d2
	addi.w	#$10,d3
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_23C9E
	cmpi.b	#$18,d0
	beq.s	loc_23CA0
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	bsr.s	loc_23C52
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6

loc_23C52:
	btst	d6,status(a0)
	beq.s	return_23C9E
	move.w	x_pos(a1),d0
	cmp.w	d2,d0
	bcs.s	return_23C9E
	cmp.w	d3,d0
	bcc.s	return_23C9E
	move.b	#1,obj_control(a1)
	move.w	#0,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	bclr	#5,status(a1)
	bclr	#7,art_tile(a1)
	move.l	#-$96800,objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#$D4,d0
	jsr	(PlaySoundLocal).l

return_23C9E:
	rts
; ===========================================================================

loc_23CA0:
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),d0
	cmp.w	d2,d0
	bcs.s	return_23D1E
	cmp.w	d3,d0
	bcc.s	return_23D1E
	lea	(Sidekick).w,a2 ; a2=character
	move.w	x_pos(a2),d0
	cmp.w	d2,d0
	bcs.s	return_23D1E
	cmp.w	d3,d0
	bcc.s	return_23D1E
	move.b	#1,obj_control(a1)
	move.w	#0,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	bclr	#5,status(a1)
	bclr	#7,art_tile(a1)
	move.b	#1,obj_control(a2)
	move.w	#0,inertia(a2)
	move.w	#0,x_vel(a2)
	move.w	#0,y_vel(a2)
	bclr	#5,status(a2)
	bclr	#7,art_tile(a2)
	move.l	#-$96800,objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#$D4,d0
	jsr	(PlaySoundLocal).l

return_23D1E:
	rts
; ===========================================================================

loc_23D20:
	move.l	y_pos(a0),d1
	add.l	objoff_32(a0),d1
	move.l	d1,y_pos(a0)
	addi.l	#$3800,objoff_32(a0)
	swap	d1
	move.w	objoff_30(a0),d0
	subi.w	#$7D,d0
	cmp.w	d0,d1
	bne.s	return_23D96
	addq.b	#2,routine_secondary(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	status(a0),d0
	andi.b	#8,d0
	bsr.s	loc_23D60
	lea	(Sidekick).w,a1 ; a1=character
	move.b	status(a0),d0
	andi.b	#$10,d0

loc_23D60:
	beq.s	return_23D96
	move.w	x_pos(a0),x_pos(a1)
	move.b	#2,anim(a1)
	move.w	#$800,inertia(a1)
	bset	#1,status(a1)
	move.w	#-$1000,y_vel(a1)
	bclr	#3,status(a1)
	move.b	#0,obj_control(a1)
	move.w	#$CC,d0
	jsr	(PlaySoundLocal).l

return_23D96:
	rts
; ===========================================================================

return_23D98:
	rts
; ===========================================================================

loc_23D9A:
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	y_pos(a0),d0
	sub.w	y_pos(a1),d0
	cmpi.w	#$14,d0
	blt.s	loc_23DC2
	move.b	#$9B,collision_flags(a0)
	lea	(off_23DD0).l,a1
	jsr	AnimateSprite
	bra.w	JmpTo10_MarkObjGone
; ===========================================================================

loc_23DC2:
	move.b	#0,collision_flags(a0)
	move.b	#0,anim_frame(a0)
	rts
; ===========================================================================
; animation script
off_23DD0:
	dc.w byte_23DD2-off_23DD0
byte_23DD2:
	dc.b   2,  2,  0,  2,  0,  2,  0,  1,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj33_MapUnc_23DDC:	BINCLUDE "mappings/sprite/obj33_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj33_MapUnc_23DF0:	BINCLUDE "mappings/sprite/obj33_b.bin"
; ===========================================================================

JmpTo10_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo7_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo4_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 43 - Sliding spike obstacle thing from OOZ
; ----------------------------------------------------------------------------
; Sprite_23E40:
Obj43:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_23E4E(pc,d0.w),d1
	jmp	off_23E4E(pc,d1.w)
; ===========================================================================
off_23E4E:
	dc.w loc_23E66 - off_23E4E
	dc.w loc_23F0A - off_23E4E; 1
	dc.w loc_23F5C - off_23E4E; 2
; ---------------------------------------------------------------------------
byte_23E54:
	dc.b   0
	dc.b $68	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   0	; 4
	dc.b   0	; 5
	dc.b   1	; 6
	dc.b $E8	; 7
	dc.b $FF	; 8
	dc.b $E8	; 9
	dc.b   0	; 10
	dc.b $18	; 11
	dc.b   1	; 12
	dc.b $A8	; 13
	dc.b $FF	; 14
	dc.b $A8	; 15
	dc.b $FF	; 16
	dc.b $D8	; 17
; ===========================================================================

loc_23E66:
	addq.b	#2,routine(a0)
	move.w	#$C30C,art_tile(a0)
	bsr.w	JmpTo19_Adjust2PArtPointer
	moveq	#0,d1
	move.b	subtype(a0),d1
	lea	byte_23E54(pc,d1.w),a2
	move.b	(a2)+,d1
	movea.l	a0,a1
	bra.s	loc_23EA8
; ===========================================================================

loc_23E84:
	bsr.w	JmpTo8_SingleObjLoad2
	bne.s	loc_23ED4
	_move.b	0(a0),0(a1) ; load obj43
	move.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#1,objoff_36(a1)

loc_23EA8:
	move.l	#Obj43_MapUnc_23FE0,mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#$18,width_pixels(a1)
	move.b	#$A5,collision_flags(a1)
	move.w	x_pos(a1),objoff_30(a1)

loc_23ED4:
	dbf	d1,loc_23E84
	move.l	a0,objoff_3C(a1)
	move.l	a1,objoff_3C(a0)
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	objoff_30(a0),d0
	sub.w	d1,d0
	move.w	d0,objoff_32(a0)
	move.w	d0,objoff_32(a1)
	add.w	d1,d0
	add.w	d1,d0
	move.w	d0,objoff_34(a0)
	move.w	d0,objoff_34(a1)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a0)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a1)

loc_23F0A:
	bsr.s	loc_23F66
	move.w	objoff_32(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bls.s	JmpTo13_DisplaySprite
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_23F36

JmpTo13_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

loc_23F36:
	movea.l	objoff_3C(a0),a1 ; a1=object
	cmpa.l	a0,a1
	beq.s	loc_23F44
	jsr	DeleteObject2

loc_23F44:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo24_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo24_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_23F5C:
	bsr.s	loc_23F66
	bsr.s	loc_23FB0
	jmp	DisplaySprite
; ===========================================================================

loc_23F66:
	tst.b	objoff_36(a0)
	bne.s	loc_23F8E
	move.w	x_pos(a0),d1
	subq.w	#1,d1
	cmp.w	objoff_32(a0),d1
	bne.s	loc_23F88
	move.b	#1,objoff_36(a0)
	move.w	#$D5,d0
	jsr	(PlaySoundLocal).l

loc_23F88:
	move.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_23F8E:
	move.w	x_pos(a0),d1
	addq.w	#1,d1
	cmp.w	objoff_34(a0),d1
	bne.s	loc_23FAA
	move.b	#0,objoff_36(a0)
	move.w	#$D5,d0
	jsr	(PlaySoundLocal).l

loc_23FAA:
	move.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_23FB0:
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	x_pos(a0),d0
	subi.w	#$18,d0
	move.w	x_pos(a1),d2
	addi.w	#$18,d2
	cmp.w	d0,d2
	bne.s	return_23FDE
	eori.b	#1,objoff_36(a0)
	eori.b	#1,objoff_36(a1)
	move.w	#$D5,d0
	jsr	(PlaySoundLocal).l

return_23FDE:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj43_MapUnc_23FE0:	BINCLUDE "mappings/sprite/obj43.bin"
; ===========================================================================

JmpTo8_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo19_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 07 - Oil Ocean in OOZ
; ----------------------------------------------------------------------------
; OST:
obj07_char1submersion	= objoff_38 ; $38(a0)
obj07_char2submersion	= objoff_3A ; $3A(a0)
; ----------------------------------------------------------------------------
; Sprite_24020:
Obj07:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj07_States(pc,d0.w),d1
	jmp	Obj07_States(pc,d1.w)
; ===========================================================================
; off_2402E:
Obj07_States:
	dc.w Obj07_Init - Obj07_States
	dc.w Obj07_Main - Obj07_States
; ===========================================================================
; loc_24032:
Obj07_Init:
	addq.b	#2,routine(a0) ; => Obj07_Main
	move.w	#$758,y_pos(a0)
	move.b	#$20,width_pixels(a0)
	move.w	y_pos(a0),objoff_30(a0)
	move.b	#$30,obj07_char1submersion(a0)
	bset	#7,status(a0)

; loc_24054:
Obj07_Main:
	; check player 1
	tst.w	(Debug_placement_mode).w
	bne.w	return_240E8
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#8,d1
	move.b	status(a0),d0
	and.b	d1,d0
	bne.s	Obj07_CheckKillChar1
	cmpi.b	#$30,obj07_char1submersion(a0)
	beq.s	Obj07_CheckSupportChar1
	addq.b	#1,obj07_char1submersion(a0)
	bra.s	Obj07_CheckSupportChar1
; ---------------------------------------------------------------------------
; loc_24078:
Obj07_CheckKillChar1:
	tst.b	obj07_char1submersion(a0)
	beq.s	Obj07_SuffocateCharacter
	subq.b	#1,obj07_char1submersion(a0)

; loc_24082:
Obj07_CheckSupportChar1:
	moveq	#$20,d1
	moveq	#0,d3
	move.b	obj07_char1submersion(a0),d3
	moveq	#3,d6
	move.w	x_pos(a1),d4
	move.w	d4,x_pos(a0)
	bsr.w	JmpTo_PlatformObject_SingleCharacter ; stop the character from falling past the oil

	; check player 2
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#$10,d1
	move.b	status(a0),d0
	and.b	d1,d0
	bne.s	Obj07_CheckKillChar2
	cmpi.b	#$30,obj07_char2submersion(a0)
	beq.s	Obj07_CheckSupportChar2
	addq.b	#1,obj07_char2submersion(a0)
	bra.s	Obj07_CheckSupportChar2
; ---------------------------------------------------------------------------
; loc_240B4:
Obj07_CheckKillChar2:
	tst.b	obj07_char2submersion(a0)
	beq.s	Obj07_SuffocateCharacter
	subq.b	#1,obj07_char2submersion(a0)

; loc_240BE:
Obj07_CheckSupportChar2:
	moveq	#$20,d1
	moveq	#0,d3
	move.b	obj07_char2submersion(a0),d3
	moveq	#4,d6
	move.w	x_pos(a1),d4
	move.w	d4,x_pos(a0)
	bsr.w	JmpTo_PlatformObject_SingleCharacter ; stop the character from falling past the oil

	rts
; ---------------------------------------------------------------------------
; loc_240D6:
Obj07_SuffocateCharacter:
	not.b	d1
	and.b	d1,status(a0)
	move.l	a0,-(sp)
	movea.l	a0,a2
	movea.l	a1,a0
	bsr.w	JmpTo3_KillCharacter
	movea.l	(sp)+,a0 ; load 0bj address

return_240E8:
	rts
; ===========================================================================
	nop

JmpTo3_KillCharacter 
	jmp	KillCharacter
; ===========================================================================

JmpTo_PlatformObject_SingleCharacter 
	jmp	PlatformObject_SingleCharacter
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 45 - Pressure spring from OOZ
; ----------------------------------------------------------------------------
; Sprite_240F8:
Obj45:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2410A(pc,d0.w),d1
	jsr	off_2410A(pc,d1.w)
	bra.w	JmpTo11_MarkObjGone
; ===========================================================================
off_2410A:
	dc.w loc_24110-off_2410A
	dc.w loc_24186-off_2410A; 1
	dc.w loc_2427A-off_2410A; 2
; ===========================================================================

loc_24110:
	addq.b	#2,routine(a0)
	move.l	#Obj45_MapUnc_2451A,mappings(a0)
	move.w	#$43C5,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$E,d0
	move.w	off_24146(pc,d0.w),d0
	jmp	off_24146(pc,d0.w)
; ===========================================================================
off_24146:
	dc.w loc_2416E-off_24146
	dc.w loc_2414A-off_24146; 1
; ===========================================================================

loc_2414A:
	move.b	#4,routine(a0)
	move.b	#1,anim(a0)
	move.b	#$A,mapping_frame(a0)
	move.w	#$43C5,art_tile(a0)
	move.b	#$14,width_pixels(a0)
	move.w	x_pos(a0),objoff_34(a0)

loc_2416E:
	move.b	subtype(a0),d0
	andi.w	#2,d0
	move.w	word_24182(pc,d0.w),objoff_30(a0)
	bsr.w	JmpTo20_Adjust2PArtPointer
	rts
; ===========================================================================
word_24182:
	dc.w $F000
	dc.w $F600	; 1
; ===========================================================================

loc_24186:
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_2419C
	tst.b	objoff_32(a0)
	beq.s	loc_241A8
	subq.b	#1,objoff_32(a0)
	bra.s	loc_241A8
; ===========================================================================

loc_2419C:
	cmpi.b	#9,objoff_32(a0)
	beq.s	loc_241C6
	addq.b	#1,objoff_32(a0)

loc_241A8:
	moveq	#0,d3
	move.b	objoff_32(a0),d3
	move.b	d3,mapping_frame(a0)
	add.w	d3,d3
	move.w	#$1B,d1
	move.w	#$14,d2
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_SolidObject45
	rts
; ===========================================================================

loc_241C6:
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	bsr.s	loc_241D4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6

loc_241D4:
	bclr	d6,status(a0)
	beq.w	return_24278
	move.w	objoff_30(a0),y_vel(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	subtype(a0),d0
	bpl.s	loc_24206
	move.w	#0,x_vel(a1)

loc_24206:
	btst	#0,d0
	beq.s	loc_24246
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_24236
	move.b	#1,flips_remaining(a1)

loc_24236:
	btst	#0,status(a1)
	beq.s	loc_24246
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_24246:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_2425C
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_2425C:
	cmpi.b	#8,d0
	bne.s	loc_2426E
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_2426E:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

return_24278:
	rts
; ===========================================================================

loc_2427A:
	move.b	#0,objoff_36(a0)
	move.w	#$1F,d1
	move.w	#$C,d2
	move.w	#$D,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo_loc_1978E
	cmpi.w	#1,d4
	bne.s	loc_242C0
	move.b	status(a0),d1
	move.w	x_pos(a0),d2
	sub.w	x_pos(a1),d2
	bcs.s	loc_242B6
	eori.b	#1,d1

loc_242B6:
	andi.b	#1,d1
	bne.s	loc_242C0
	bsr.w	loc_2433C

loc_242C0:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo_loc_1978E
	cmpi.w	#1,d4
	bne.s	loc_242EE
	move.b	status(a0),d1
	move.w	x_pos(a0),d2
	sub.w	x_pos(a1),d2
	bcs.s	loc_242E6
	eori.b	#1,d1

loc_242E6:
	andi.b	#1,d1
	bne.s	loc_242EE
	bsr.s	loc_2433C

loc_242EE:
	tst.b	objoff_36(a0)
	bne.s	return_2433A
	move.w	objoff_34(a0),d0
	cmp.w	x_pos(a0),d0
	beq.s	return_2433A
	bcc.s	loc_2431C
	subq.b	#4,mapping_frame(a0)
	subq.w	#4,x_pos(a0)
	cmp.w	x_pos(a0),d0
	bcs.s	loc_24336
	move.b	#$A,mapping_frame(a0)
	move.w	objoff_34(a0),x_pos(a0)
	bra.s	loc_24336
; ===========================================================================

loc_2431C:
	subq.b	#4,mapping_frame(a0)
	addq.w	#4,x_pos(a0)
	cmp.w	x_pos(a0),d0
	bcc.s	loc_24336
	move.b	#$A,mapping_frame(a0)
	move.w	objoff_34(a0),x_pos(a0)

loc_24336:
	bsr.w	loc_243D0

return_2433A:
	rts
; ===========================================================================

loc_2433C:
	btst	#0,status(a0)
	beq.s	loc_24378
	btst	#0,status(a1)
	bne.w	return_243CE
	tst.w	d0
	bne.w	loc_2435E
	tst.w	inertia(a1)
	beq.s	return_243CE
	bpl.s	loc_243C8
	bra.s	return_243CE
; ===========================================================================

loc_2435E:
	move.w	objoff_34(a0),d0
	addi.w	#$12,d0
	cmp.w	x_pos(a0),d0
	beq.s	loc_243C8
	addq.w	#1,x_pos(a0)
	moveq	#1,d0
	move.w	#$40,d1
	bra.s	loc_243A6
; ===========================================================================

loc_24378:
	btst	#0,status(a1)
	beq.s	return_243CE
	tst.w	d0
	bne.w	loc_2438E
	tst.w	inertia(a1)
	bmi.s	loc_243C8
	bra.s	return_243CE
; ===========================================================================

loc_2438E:
	move.w	objoff_34(a0),d0
	subi.w	#$12,d0
	cmp.w	x_pos(a0),d0
	beq.s	loc_243C8
	subq.w	#1,x_pos(a0)
	moveq	#-1,d0
	move.w	#-$40,d1

loc_243A6:
	add.w	d0,x_pos(a1)
	move.w	d1,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	objoff_34(a0),d0
	sub.w	x_pos(a0),d0
	bcc.s	loc_243C0
	neg.w	d0

loc_243C0:
	addi.w	#$A,d0
	move.b	d0,mapping_frame(a0)

loc_243C8:
	move.b	#1,objoff_36(a0)

return_243CE:
	rts
; ===========================================================================

loc_243D0:
	move.b	status(a0),d0
	andi.b	#$60,d0
	beq.w	return_244D0
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#5,d6
	bsr.s	loc_243EA
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#6,d6

loc_243EA:
	bclr	d6,status(a0)
	beq.w	return_244D0
	move.w	objoff_34(a0),d0
	sub.w	x_pos(a0),d0
	bcc.s	loc_243FE
	neg.w	d0

loc_243FE:
	addi.w	#$A,d0
	lsl.w	#7,d0
	neg.w	d0
	move.w	d0,x_vel(a1)
	subq.w	#4,x_pos(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_2442C
	bclr	#0,status(a1)
	addi.w	#8,x_pos(a1)
	neg.w	x_vel(a1)

loc_2442C:
	move.w	#$F,move_lock(a1)
	move.w	x_vel(a1),inertia(a1)
	btst	#2,status(a1)
	bne.s	loc_24446
	move.b	#0,anim(a1)

loc_24446:
	move.b	subtype(a0),d0
	bpl.s	loc_24452
	move.w	#0,y_vel(a1)

loc_24452:
	btst	#0,d0
	beq.s	loc_24492
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_24482
	move.b	#3,flips_remaining(a1)

loc_24482:
	btst	#0,status(a1)
	beq.s	loc_24492
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_24492:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_244A8
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_244A8:
	cmpi.b	#8,d0
	bne.s	loc_244BA
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_244BA:
	bclr	#5,status(a1)
	move.b	#1,next_anim(a1)
	move.w	#$4C+$80,d0 ; play spring bounce sound
	jmp	(PlaySound).l
; ===========================================================================

return_244D0:
	rts
; ===========================================================================
off_244D2:
	dc.w byte_244D6-off_244D2
	dc.w byte_244F8-off_244D2; 1
byte_244D6:
	dc.b   0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9,  9,  9
	dc.b   9,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  0,  0,  0,  0,  0; 16
	dc.b   0,$FF	; 32
byte_244F8:
	dc.b   0, $A, $B, $C, $D, $E, $F,$10,$11,$12,$13,$13,$13,$13,$13,$13
	dc.b $13,$13,$12,$11,$10, $F, $E, $D, $C, $B, $A, $A, $A, $A, $A, $A; 16
	dc.b  $A,$FF	; 32
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj45_MapUnc_2451A:	BINCLUDE "mappings/sprite/obj45.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 46 - Ball from OOZ (unused, beta leftover)
; ----------------------------------------------------------------------------
; Sprite_24A16:
Obj46:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_24A24(pc,d0.w),d1
	jmp	off_24A24(pc,d1.w)
; ===========================================================================
off_24A24:
	dc.w loc_24A2C-off_24A24
	dc.w loc_24AEA-off_24A24; 1
	dc.w loc_24B38-off_24A24; 2
	dc.w loc_24BDC-off_24A24; 3
; ===========================================================================

loc_24A2C:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	loc_24A48
	bclr	#7,2(a2,d0.w)
	bset	#0,2(a2,d0.w)
	bne.w	JmpTo25_DeleteObject

loc_24A48:
	addq.b	#2,routine(a0)
	move.b	#$F,y_radius(a0)
	move.b	#$F,x_radius(a0)
	move.l	#Obj46_MapUnc_24C52,mappings(a0)
	move.w	#$6354,art_tile(a0)
	bsr.w	JmpTo20_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_36(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#0,objoff_14(a0)
	move.b	#1,objoff_1F(a0)
	bsr.w	JmpTo4_SingleObjLoad
	bne.s	loc_24AE6
	_move.b	#$46,0(a1) ; load obj46
	addq.b	#6,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$12,y_pos(a1)
	move.l	#Obj45_MapUnc_2451A,mappings(a1)
	move.w	#$43C5,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#4,priority(a1)
	move.b	#9,mapping_frame(a1)
	move.l	a0,objoff_3C(a1)

loc_24AE6:
	move.l	a1,objoff_3C(a0)

loc_24AEA:
	btst	#6,(Ctrl_2_Press).w
	bne.s	loc_24B04
	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#4,d0
	tst.b	(a2,d0.w)
	beq.s	loc_24B30

loc_24B04:
	addq.b	#2,routine(a0)
	bset	#1,status(a0)
	move.w	#-$300,y_vel(a0)
	move.w	#$100,objoff_14(a0)
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.b	#1,objoff_30(a1)
	btst	#0,status(a0)
	beq.s	loc_24B30
	neg.w	objoff_14(a0)

loc_24B30:
	bsr.w	loc_24BF0
	bra.w	JmpTo11_MarkObjGone
; ===========================================================================

loc_24B38:
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo9_ObjectMove
	btst	#1,status(a0)
	beq.s	loc_24B8C
	addi.w	#$18,y_vel(a0)
	bmi.s	BranchTo_loc_24BA4
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcs.s	loc_24BC4
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.w	BranchTo_loc_24BA4
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	bclr	#1,status(a0)
	move.w	#$100,x_vel(a0)
	btst	#0,status(a0)
	beq.s	BranchTo_loc_24BA4
	neg.w	x_vel(a0)

BranchTo_loc_24BA4 
	bra.s	loc_24BA4
; ===========================================================================

loc_24B8C:
	jsr	(ObjCheckFloorDist).l
	cmpi.w	#8,d1
	blt.s	loc_24BA0
	bset	#1,status(a0)
	bra.s	loc_24BA4
; ===========================================================================

loc_24BA0:
	add.w	d1,y_pos(a0)

loc_24BA4:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo5_SolidObject
	bsr.w	loc_24BF0
	bra.w	JmpTo11_MarkObjGone
; ===========================================================================

loc_24BC4:
	move.w	(sp)+,d4
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	BranchTo_JmpTo25_DeleteObject
	bclr	#7,2(a2,d0.w)

BranchTo_JmpTo25_DeleteObject 
	bra.w	JmpTo25_DeleteObject
; ===========================================================================

loc_24BDC:
	tst.b	objoff_30(a0)
	beq.s	BranchTo_JmpTo11_MarkObjGone
	subq.b	#1,mapping_frame(a0)
	bne.s	BranchTo_JmpTo11_MarkObjGone
	clr.b	objoff_30(a0)

BranchTo_JmpTo11_MarkObjGone 
	bra.w	JmpTo11_MarkObjGone
; ===========================================================================

loc_24BF0:
	tst.b	mapping_frame(a0)
	beq.s	loc_24BFE
	move.b	#0,mapping_frame(a0)
	rts
; ===========================================================================

loc_24BFE:
	move.b	objoff_14(a0),d0
	beq.s	loc_24C2A
	bmi.s	loc_24C32
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_24C2A
	neg.b	d0
	addq.b	#8,d0
	bcs.s	loc_24C14
	moveq	#0,d0

loc_24C14:
	move.b	d0,anim_frame_duration(a0)
	move.b	objoff_1F(a0),d0
	addq.b	#1,d0
	cmpi.b	#4,d0
	bne.s	loc_24C26
	moveq	#1,d0

loc_24C26:
	move.b	d0,objoff_1F(a0)

loc_24C2A:
	move.b	objoff_1F(a0),mapping_frame(a0)
	rts
; ===========================================================================

loc_24C32:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_24C2A
	addq.b	#8,d0
	bcs.s	loc_24C3E
	moveq	#0,d0

loc_24C3E:
	move.b	d0,anim_frame_duration(a0)
	move.b	objoff_1F(a0),d0
	subq.b	#1,d0
	bne.s	loc_24C4C
	moveq	#3,d0

loc_24C4C:
	move.b	d0,objoff_1F(a0)
	bra.s	loc_24C2A
; ===========================================================================
; ----------------------------------------------------------------------------
; Unused sprite mappings
; ----------------------------------------------------------------------------
Obj46_MapUnc_24C52:	BINCLUDE "mappings/sprite/obj46.bin"
; ===========================================================================
	nop

JmpTo25_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo4_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================


; some of these are still used, for some reason:

JmpTo11_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo20_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo5_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo_loc_1978E 
	jmp	loc_1978E
; ===========================================================================

JmpTo_SolidObject45 
	jmp	SolidObject45
; ===========================================================================
; loc_24CEE:
JmpTo9_ObjectMove 
	jmp	ObjectMove

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 47 - Button
; ----------------------------------------------------------------------------
; Sprite_24CF4:
Obj47:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_24D02(pc,d0.w),d1
	jmp	off_24D02(pc,d1.w)
; ===========================================================================
off_24D02:
	dc.w loc_24D06-off_24D02
	dc.w loc_24D32-off_24D02; 1
; ===========================================================================

loc_24D06:
	addq.b	#2,routine(a0)
	move.l	#Obj47_MapUnc_24D96,mappings(a0)
	move.w	#$424,art_tile(a0)
	bsr.w	JmpTo21_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	addq.w	#4,y_pos(a0)

loc_24D32:
	tst.b	render_flags(a0)
	bpl.s	BranchTo_JmpTo12_MarkObjGone
	move.w	#$1B,d1
	move.w	#4,d2
	move.w	#5,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo6_SolidObject
	move.b	#0,mapping_frame(a0)
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lea	($FFFFF7E0).w,a3
	lea	(a3,d0.w),a3
	moveq	#0,d3
	btst	#6,subtype(a0)
	beq.s	loc_24D6E
	moveq	#7,d3

loc_24D6E:
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_24D7C
	bclr	d3,(a3)
	bra.s	BranchTo_JmpTo12_MarkObjGone
; ===========================================================================

loc_24D7C:
	tst.b	(a3)
	bne.s	loc_24D8A
	move.w	#$CD,d0
	jsr	(PlaySound).l

loc_24D8A:
	bset	d3,(a3)
	move.b	#1,mapping_frame(a0)

BranchTo_JmpTo12_MarkObjGone 
	bra.w	JmpTo12_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj47_MapUnc_24D96:	BINCLUDE "mappings/sprite/obj47.bin"
; ===========================================================================
	nop

JmpTo12_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo21_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo6_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3D - Block thingy in OOZ that launches you into the round ball things
; ----------------------------------------------------------------------------
; Sprite_24DD0:
Obj3D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_24DDE(pc,d0.w),d1
	jmp	off_24DDE(pc,d1.w)
; ===========================================================================
off_24DDE:
	dc.w loc_24DE6-off_24DDE
	dc.w loc_24E26-off_24DDE; 1
	dc.w loc_24F3C-off_24DDE; 2
	dc.w loc_24F52-off_24DDE; 3
; ===========================================================================

loc_24DE6:
	addq.b	#2,routine(a0)
	move.l	#Obj3D_MapUnc_250BA,mappings(a0)
	move.w	#$6332,art_tile(a0)
	tst.b	subtype(a0)
	beq.s	loc_24E0A
	move.w	#$63FF,art_tile(a0)
	move.b	#2,mapping_frame(a0)

loc_24E0A:
	bsr.w	JmpTo22_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	bset	#7,status(a0)
	move.b	#4,priority(a0)

loc_24E26:
	move.b	(MainCharacter+anim).w,objoff_32(a0)
	move.b	(Sidekick+anim).w,objoff_33(a0)
	move.w	(MainCharacter+y_vel).w,objoff_34(a0)
	move.w	(Sidekick+y_vel).w,objoff_36(a0)
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo7_SolidObject
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_24E60

BranchTo_JmpTo13_MarkObjGone 
	bra.w	JmpTo13_MarkObjGone
; ===========================================================================

loc_24E60:
	cmpi.b	#$18,d0
	bne.s	loc_24E96
	cmpi.b	#2,objoff_32(a0)
	beq.s	loc_24E76
	cmpi.b	#2,objoff_33(a0)
	bne.s	BranchTo_JmpTo13_MarkObjGone

loc_24E76:
	lea	(MainCharacter).w,a1 ; a1=character
	move.b	objoff_32(a0),d0
	move.w	objoff_34(a0),d1
	bsr.s	loc_24EB2
	lea	(Sidekick).w,a1 ; a1=character
	move.b	objoff_33(a0),d0
	move.w	objoff_36(a0),d1
	bsr.s	loc_24EB2
	bra.w	loc_24F04
; ===========================================================================

loc_24E96:
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_24EE8
	cmpi.b	#2,objoff_32(a0)
	bne.s	BranchTo_JmpTo13_MarkObjGone
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	objoff_34(a0),d1
	bsr.s	loc_24EB8
	bra.s	loc_24F04
; ===========================================================================

loc_24EB2:
	cmpi.b	#2,d0
	bne.s	loc_24ED4

loc_24EB8:
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	move.w	d1,y_vel(a1)

loc_24ED4:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	rts
; ===========================================================================

loc_24EE8:
	andi.b	#$10,d0
	beq.w	BranchTo_JmpTo13_MarkObjGone
	cmpi.b	#2,objoff_33(a0)
	bne.w	BranchTo_JmpTo13_MarkObjGone
	lea	(Sidekick).w,a1 ; a1=character
	move.w	objoff_36(a0),d1
	bsr.s	loc_24EB8

loc_24F04:
	andi.b	#-$19,status(a0)
	bsr.w	JmpTo9_SingleObjLoad2
	bne.s	loc_24F28
	moveq	#0,d0
	move.w	#$A,d1

loc_24F16:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_24F16
	move.b	#6,routine(a1)

loc_24F28:
	lea	(word_2507A).l,a4
	addq.b	#1,mapping_frame(a0)
	moveq	#$F,d1
	move.w	#$18,d2
	bsr.w	JmpTo2_sub_15E18

loc_24F3C:
	bsr.w	JmpTo10_ObjectMove
	addi.w	#$18,y_vel(a0)
	tst.b	render_flags(a0)
	bpl.w	JmpTo26_DeleteObject
	bra.w	JmpTo14_DisplaySprite
; ===========================================================================

loc_24F52:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	objoff_2C(a0),a4
	bsr.s	loc_24F74
	lea	(Sidekick).w,a1 ; a1=character
	lea	objoff_36(a0),a4
	bsr.s	loc_24F74
	move.b	objoff_2C(a0),d0
	add.b	objoff_36(a0),d0
	beq.w	JmpTo3_MarkObjGone3
	rts
; ===========================================================================

loc_24F74:
	moveq	#0,d0
	move.b	(a4),d0
	move.w	off_24F80(pc,d0.w),d0
	jmp	off_24F80(pc,d0.w)
; ===========================================================================
off_24F80:
	dc.w loc_24F84-off_24F80
	dc.w loc_25036-off_24F80; 1
; ===========================================================================

loc_24F84:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$10,d0
	cmpi.w	#$20,d0
	bcc.w	return_25034
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	tst.b	subtype(a0)
	beq.s	loc_24FAA
	addi.w	#$10,d1

loc_24FAA:
	cmpi.w	#$10,d1
	bcc.w	return_25034
	cmpa.w	#Sidekick,a1
	bne.s	loc_24FC2
	cmpi.w	#4,(Tails_CPU_routine).w	; TailsCPU_Flying
	beq.w	return_25034

loc_24FC2:
	addq.b	#2,(a4)
	move.b	#$81,obj_control(a1)
	move.b	#2,anim(a1)
	move.w	#$800,inertia(a1)
	tst.b	subtype(a0)
	beq.s	loc_24FF0
	move.w	x_pos(a0),x_pos(a1)
	move.w	#0,x_vel(a1)
	move.w	#-$800,y_vel(a1)
	bra.s	loc_25002
; ===========================================================================

loc_24FF0:
	move.w	y_pos(a0),y_pos(a1)
	move.w	#$800,x_vel(a1)
	move.w	#0,y_vel(a1)

loc_25002:
	bclr	#5,status(a0)
	bclr	#5,status(a1)
	bset	#1,status(a1)
	bset	#3,status(a1)
	move.w	a0,d0
	subi.w	#Object_RAM,d0
	lsr.w	#6,d0
	andi.w	#$7F,d0
	move.b	d0,interact(a1)
	move.w	#$BE,d0
	jsr	(PlaySound).l

return_25034:
	rts
; ===========================================================================

loc_25036:
	tst.b	render_flags(a1)
	bmi.s	Obj3D_MoveCharacter
	move.b	#0,obj_control(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#0,(a4)
	rts
; ===========================================================================
; update the position of Sonic/Tails from the block thing to the launcher
; loc_25054:
Obj3D_MoveCharacter:
	move.l	x_pos(a1),d2
	move.l	y_pos(a1),d3
	move.w	x_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,x_pos(a1)
	move.l	d3,y_pos(a1)
	rts
; ===========================================================================
word_2507A:
	dc.w $FC00
	dc.w $FC00	; 1
	dc.w $FE00	; 2
	dc.w $FC00	; 3
	dc.w  $200	; 4
	dc.w $FC00	; 5
	dc.w  $400	; 6
	dc.w $FC00	; 7
	dc.w $FC40	; 8
	dc.w $FE00	; 9
	dc.w $FE40	; 10
	dc.w $FE00	; 11
	dc.w  $1C0	; 12
	dc.w $FE00	; 13
	dc.w  $3C0	; 14
	dc.w $FE00	; 15
	dc.w $FC80	; 16
	dc.w  $200	; 17
	dc.w $FE80	; 18
	dc.w  $200	; 19
	dc.w  $180	; 20
	dc.w  $200	; 21
	dc.w  $380	; 22
	dc.w  $200	; 23
	dc.w $FCC0	; 24
	dc.w  $400	; 25
	dc.w $FEC0	; 26
	dc.w  $400	; 27
	dc.w  $140	; 28
	dc.w  $400	; 29
	dc.w  $340	; 30
	dc.w  $400	; 31
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj3D_MapUnc_250BA:	BINCLUDE "mappings/sprite/obj3D.bin"
; ===========================================================================
	nop

JmpTo14_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo26_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo13_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo9_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo3_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================

JmpTo22_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo2_sub_15E18 
	jmp	sub_15E18
; ===========================================================================

JmpTo7_SolidObject 
	jmp	SolidObject
; ===========================================================================
; loc_2523C:
JmpTo10_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 48 - Round ball thing from OOZ that fires you off in a different direction (sphere)
; ----------------------------------------------------------------------------
; Sprite_25244:
Obj48:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_25262(pc,d0.w),d1
	jsr	off_25262(pc,d1.w)
	move.b	objoff_2C(a0),d0
	add.b	objoff_36(a0),d0
	beq.w	JmpTo14_MarkObjGone
	bra.w	JmpTo15_DisplaySprite
; ===========================================================================
off_25262:
	dc.w loc_25276-off_25262
	dc.w loc_252C6-off_25262; 1
byte_25266:
	dc.b   4,  0
	dc.b   6,  7	; 2
	dc.b   7,  0	; 4
	dc.b   5,  7	; 6
	dc.b   5,  0	; 8
	dc.b   4,  7	; 10
	dc.b   6,  0	; 12
	dc.b   7,  7	; 14
; ===========================================================================

loc_25276:
	addq.b	#2,routine(a0)
	move.l	#Obj48_MapUnc_254FE,mappings(a0)
	move.w	#$6368,art_tile(a0)
	bsr.w	JmpTo23_Adjust2PArtPointer
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	btst	#0,status(a0)
	beq.s	loc_2529E
	addq.w	#4,d0

loc_2529E:
	add.w	d0,d0
	move.b	byte_25266(pc,d0.w),render_flags(a0)
	move.b	byte_25266+1(pc,d0.w),objoff_3F(a0)
	beq.s	loc_252B4
	move.b	#1,objoff_3E(a0)

loc_252B4:
	move.b	objoff_3F(a0),mapping_frame(a0)
	move.b	#$28,width_pixels(a0)
	move.b	#1,priority(a0)

loc_252C6:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	objoff_2C(a0),a4
	moveq	#$2C,d2
	bsr.s	loc_252DC
	lea	(Sidekick).w,a1 ; a1=character
	lea	objoff_36(a0),a4
	moveq	#$36,d2

loc_252DC:
	moveq	#0,d0
	move.b	(a4),d0
	move.w	off_252E8(pc,d0.w),d0
	jmp	off_252E8(pc,d0.w)
; ===========================================================================
off_252E8:
	dc.w loc_252F0-off_252E8
	dc.w loc_253C6-off_252E8; 1
	dc.w loc_25474-off_252E8; 2
	dc.w loc_254F2-off_252E8; 3
; ===========================================================================

loc_252F0:
	tst.w	(Debug_placement_mode).w
	bne.w	return_253C4
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$10,d0
	cmpi.w	#$20,d0
	bcc.w	return_253C4
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	addi.w	#$10,d1
	cmpi.w	#$20,d1
	bcc.w	return_253C4
	cmpa.w	#Sidekick,a1
	bne.s	loc_25330
	cmpi.w	#4,(Tails_CPU_routine).w	; TailsCPU_Flying
	beq.w	return_253C4

loc_25330:
	cmpi.b	#6,routine(a1)
	bcc.w	return_253C4
	tst.w	(Debug_placement_mode).w
	bne.w	return_253C4
	btst	#3,status(a1)
	beq.s	loc_25360
	moveq	#0,d0
	move.b	interact(a1),d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a3	; a3=object
	move.b	#0,(a3,d2.w)

loc_25360:
	move.w	a0,d0
	subi.w	#Object_RAM,d0
	lsr.w	#6,d0
	andi.w	#$7F,d0
	move.b	d0,interact(a1)
	addq.b	#2,(a4)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#$81,obj_control(a1)
	move.b	#2,anim(a1)
	move.w	#$1000,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	bclr	#5,status(a0)
	bclr	#5,status(a1)
	bset	#1,status(a1)
	bset	#3,status(a1)
	move.b	objoff_3F(a0),mapping_frame(a0)
	move.w	#$BE,d0
	jsr	(PlaySound).l

return_253C4:
	rts
; ===========================================================================

loc_253C6:
	tst.b	objoff_3E(a0)
	bne.s	loc_253EE
	cmpi.b	#7,mapping_frame(a0)
	beq.s	loc_25408
	subq.w	#1,anim_frame_duration(a0)
	bpl.s	return_253EC
	move.w	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#7,mapping_frame(a0)
	beq.s	loc_25408

return_253EC:
	rts
; ===========================================================================

loc_253EE:
	tst.b	mapping_frame(a0)
	beq.s	loc_25408
	subq.w	#1,anim_frame_duration(a0)
	bpl.s	return_253EC
	move.w	#7,anim_frame_duration(a0)
	subq.b	#1,mapping_frame(a0)
	beq.s	loc_25408
	rts
; ===========================================================================

loc_25408:
	addq.b	#2,(a4)
	move.b	subtype(a0),d0
	addq.b	#1,d0
	btst	#0,status(a0)
	beq.s	loc_2541A
	subq.b	#2,d0

loc_2541A:
	andi.w	#3,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	word_25464(pc,d0.w),x_vel(a1)
	move.w	word_25464+2(pc,d0.w),y_vel(a1)
	move.w	#3,anim_frame_duration(a0)
	tst.b	subtype(a0)
	bpl.s	return_25462
	move.b	#0,obj_control(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#0,jumping(a1)
	move.b	#2,routine(a1)
	move.b	#6,(a4)
	move.w	#7,objoff_3C(a0)

return_25462:
	rts
; ===========================================================================
word_25464:
	dc.w	 0,$F000
	dc.w $1000,    0	; 2
	dc.w	 0,$1000	; 4
	dc.w $F000,    0	; 6
; ===========================================================================

loc_25474:
	tst.b	render_flags(a1)
	bmi.s	loc_25492
	move.b	#0,obj_control(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#0,(a4)
	rts
; ===========================================================================

loc_25492:
	cmpi.b	#2,objoff_2C(a0)
	beq.s	Obj48_MoveCharacter
	cmpi.b	#2,objoff_36(a0)
	beq.s	Obj48_MoveCharacter
	subq.w	#1,anim_frame_duration(a0)
	bpl.s	Obj48_MoveCharacter
	move.w	#1,anim_frame_duration(a0)
	tst.b	objoff_3E(a0)
	beq.s	loc_254C2
	cmpi.b	#7,mapping_frame(a0)
	beq.s	Obj48_MoveCharacter
	addq.b	#1,mapping_frame(a0)
	bra.s	Obj48_MoveCharacter
; ===========================================================================

loc_254C2:
	tst.b	mapping_frame(a0)
	beq.s	Obj48_MoveCharacter
	subq.b	#1,mapping_frame(a0)

; update the position of Sonic/Tails between launchers
; loc_254CC:
Obj48_MoveCharacter:
	move.l	x_pos(a1),d2
	move.l	y_pos(a1),d3
	move.w	x_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,x_pos(a1)
	move.l	d3,y_pos(a1)
	rts
; ===========================================================================

loc_254F2:
	subq.w	#1,objoff_3C(a0)
	bpl.s	return_254FC
	move.b	#0,(a4)

return_254FC:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj48_MapUnc_254FE:	BINCLUDE "mappings/sprite/obj48.bin"
; ===========================================================================
	nop

JmpTo15_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo14_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo23_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 22 - Arrow shooter from ARZ
; ----------------------------------------------------------------------------
; Sprite_25694:
Obj22:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_256A2(pc,d0.w),d1
	jmp	off_256A2(pc,d1.w)
; ===========================================================================
off_256A2:
	dc.w loc_256AC-off_256A2
	dc.w loc_256E0-off_256A2; 1
	dc.w loc_2572A-off_256A2; 2
	dc.w loc_2577A-off_256A2; 3
	dc.w loc_257BE-off_256A2; 4
; ===========================================================================

loc_256AC:
	addq.b	#2,routine(a0)
	move.l	#Obj22_MapUnc_25804,mappings(a0)
	move.w	#$417,art_tile(a0)
	bsr.w	JmpTo24_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,mapping_frame(a0)
	andi.b	#$F,subtype(a0)

loc_256E0:
	cmpi.b	#2,anim(a0)
	beq.s	loc_25706
	moveq	#0,d2
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_25714
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_25714
	tst.b	d2
	bne.s	loc_25702
	tst.b	anim(a0)
	beq.s	loc_25702
	moveq	#2,d2

loc_25702:
	move.b	d2,anim(a0)

loc_25706:
	lea	(off_257EE).l,a1
	bsr.w	JmpTo5_AnimateSprite
	bra.w	JmpTo15_MarkObjGone
; ===========================================================================

loc_25714:
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	loc_25720
	neg.w	d0

loc_25720:
	cmpi.w	#$40,d0
	bcc.s	return_25728
	moveq	#1,d2

return_25728:
	rts
; ===========================================================================

loc_2572A:
	bsr.w	JmpTo5_SingleObjLoad
	bne.s	loc_25768
	_move.b	0(a0),0(a1) ; load obj22
	addq.b	#6,routine(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	status(a0),status(a1)
	move.w	#$DB,d0
	jsr	(PlaySound).l

loc_25768:
	subq.b	#2,routine(a0)
	lea	(off_257EE).l,a1
	bsr.w	JmpTo5_AnimateSprite
	bra.w	JmpTo15_MarkObjGone
; ===========================================================================

loc_2577A:
	addq.b	#2,routine(a0)
	move.b	#8,y_radius(a0)
	move.b	#$10,x_radius(a0)
	move.b	#4,priority(a0)
	move.b	#$9B,collision_flags(a0)
	move.b	#8,width_pixels(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#$400,x_vel(a0)
	btst	#0,status(a0)
	beq.s	loc_257B4
	neg.w	x_vel(a0)

loc_257B4:
	move.w	#$AE,d0
	jsr	(PlaySound).l

loc_257BE:
	bsr.w	JmpTo11_ObjectMove
	btst	#0,status(a0)
	bne.s	loc_257DE
	moveq	#-8,d3
	bsr.w	ObjCheckRightWallDist
	tst.w	d1
	bmi.w	BranchTo_JmpTo27_DeleteObject
	bra.w	JmpTo15_MarkObjGone
; ===========================================================================

BranchTo_JmpTo27_DeleteObject 
	bra.w	JmpTo27_DeleteObject
; ===========================================================================

loc_257DE:
	moveq	#8,d3
	bsr.w	ObjCheckLeftWallDist
	tst.w	d1
	bmi.w	BranchTo_JmpTo27_DeleteObject
	bra.w	JmpTo15_MarkObjGone
; ===========================================================================
; animation script
off_257EE:
	dc.w byte_257F4-off_257EE
	dc.w byte_257F7-off_257EE; 1
	dc.w byte_257FB-off_257EE; 2
byte_257F4:	dc.b $1F,  1,$FF
byte_257F7:	dc.b   3,  1,  2,$FF
byte_257FB:	dc.b   7,  3,  4,$FC,  4,  3,  1,$FD,  0
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj22_MapUnc_25804:	BINCLUDE "mappings/sprite/obj22.bin"
; ===========================================================================

JmpTo27_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo5_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo15_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo5_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo24_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; loc_25886:
JmpTo11_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 23 - Pillar that drops its lower part from ARZ
; ----------------------------------------------------------------------------
; Sprite_2588C:
Obj23:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2589A(pc,d0.w),d1
	jmp	off_2589A(pc,d1.w)
; ===========================================================================
off_2589A:
	dc.w loc_2589E-off_2589A
	dc.w loc_25922-off_2589A; 1
; ===========================================================================

loc_2589E:
	addq.b	#2,routine(a0)
	move.l	#Obj23_MapUnc_259E6,mappings(a0)
	move.w	#$2000,art_tile(a0)
	bsr.w	JmpTo25_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#$20,y_radius(a0)
	move.b	#4,priority(a0)
	bsr.w	JmpTo10_SingleObjLoad2
	bne.s	loc_25922
	_move.b	0(a0),0(a1) ; load obj23
	addq.b	#2,routine(a1)
	addq.b	#2,routine_secondary(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	x_pos(a0),objoff_30(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$30,y_pos(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#$10,y_radius(a1)
	move.b	#4,priority(a1)
	move.b	#1,mapping_frame(a1)

loc_25922:

	move.w	x_pos(a0),-(sp)
	bsr.w	loc_25948
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo8_SolidObject
	bra.w	JmpTo16_MarkObjGone
; ===========================================================================

loc_25948:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_25956(pc,d0.w),d1
	jmp	off_25956(pc,d1.w)
; ===========================================================================
off_25956:
	dc.w return_2598C-off_25956
	dc.w loc_2595E-off_25956; 1
	dc.w loc_2598E-off_25956; 2
	dc.w loc_259B8-off_25956; 3
; ===========================================================================

loc_2595E:
	tst.w	(Debug_placement_mode).w
	bne.s	return_2598C
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_2596E
	lea	(Sidekick).w,a1 ; a1=character

loc_2596E:
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	loc_2597A
	neg.w	d0

loc_2597A:
	cmpi.w	#$80,d0
	bcc.s	return_2598C
	move.b	#4,routine_secondary(a0)
	move.w	#8,objoff_34(a0)

return_2598C:

	rts
; ===========================================================================

loc_2598E:
	move.w	objoff_34(a0),d0
	subq.w	#1,d0
	bcc.s	loc_2599C
	addq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_2599C:
	move.w	d0,objoff_34(a0)
	move.b	byte_259B0(pc,d0.w),d0
	ext.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	rts
; ===========================================================================
byte_259B0:
	dc.b   0
	dc.b   1	; 1
	dc.b $FF	; 2
	dc.b   1	; 3
	dc.b   0	; 4
	dc.b $FF	; 5
	dc.b   0	; 6
	dc.b   1	; 7
; ===========================================================================

loc_259B8:
	bsr.w	JmpTo12_ObjectMove
	addi.w	#$38,y_vel(a0)
	bsr.w	ObjCheckFloorDist
	tst.w	d1
	bpl.w	return_259E4
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	#2,mapping_frame(a0)
	clr.b	routine_secondary(a0)

return_259E4:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj23_MapUnc_259E6:	BINCLUDE "mappings/sprite/obj23.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2B - Rising pillar from ARZ
; ----------------------------------------------------------------------------
; Sprite_25A5A:
Obj2B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_25A68(pc,d0.w),d1
	jmp	off_25A68(pc,d1.w)
; ===========================================================================
off_25A68:
	dc.w loc_25A6E-off_25A68
	dc.w loc_25A9C-off_25A68; 1
	dc.w loc_25B8E-off_25A68; 2
; ===========================================================================

loc_25A6E:
	addq.b	#2,routine(a0)
	move.l	#Obj2B_MapUnc_25C6E,mappings(a0)
	move.w	#$2000,art_tile(a0)
	bsr.w	JmpTo25_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#$18,y_radius(a0)
	move.b	#4,priority(a0)

loc_25A9C:
	move.w	x_pos(a0),-(sp)
	bsr.w	loc_25B28
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo8_SolidObject
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.w	loc_25ACE
	bra.w	JmpTo16_MarkObjGone
; ===========================================================================

loc_25ACE:
	lea	(word_25BBE).l,a4
	lea	(byte_25BB0).l,a2
	addq.b	#7,mapping_frame(a0)
	bsr.w	loc_25BF6
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	bsr.s	loc_25AF6
	lea	(Sidekick).w,a1 ; a1=character
	addq.b	#1,d6
	bsr.s	loc_25AF6
	bra.w	loc_25B8E
; ===========================================================================

loc_25AF6:
	bclr	d6,status(a0)
	beq.s	return_25B26
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)

return_25B26:
	rts
; ===========================================================================

loc_25B28:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_25B36(pc,d0.w),d1
	jmp	off_25B36(pc,d1.w)
; ===========================================================================
off_25B36:
	dc.w loc_25B3C-off_25B36
	dc.w loc_25B66-off_25B36; 1
	dc.w return_25B64-off_25B36; 2
; ===========================================================================

loc_25B3C:
	tst.w	(Debug_placement_mode).w
	bne.s	return_25B64
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_25B4C
	lea	(Sidekick).w,a1 ; a1=character

loc_25B4C:
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	loc_25B58
	neg.w	d0

loc_25B58:
	cmpi.w	#$40,d0
	bcc.s	return_25B64
	move.b	#2,routine_secondary(a0)

return_25B64:

	rts
; ===========================================================================

loc_25B66:
	subq.w	#1,objoff_34(a0)
	bcc.s	return_25B8C
	move.w	#3,objoff_34(a0)
	subq.w	#4,y_pos(a0)
	addq.b	#4,y_radius(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#6,mapping_frame(a0)
	bne.s	return_25B8C
	move.b	#4,routine_secondary(a0)

return_25B8C:
	rts
; ===========================================================================

loc_25B8E:

	tst.b	objoff_3F(a0)
	beq.s	loc_25B9A
	subq.b	#1,objoff_3F(a0)
	bra.s	loc_25BA4
; ===========================================================================

loc_25B9A:
	bsr.w	JmpTo12_ObjectMove
	addi.w	#$18,y_vel(a0)

loc_25BA4:
	tst.b	render_flags(a0)
	bpl.w	JmpTo28_DeleteObject
	bra.w	JmpTo16_DisplaySprite
; ===========================================================================
byte_25BB0:
	dc.b   0
	dc.b   0	; 1
	dc.b   0	; 2
	dc.b   0	; 3
	dc.b   4	; 4
	dc.b   4	; 5
	dc.b   8	; 6
	dc.b   8	; 7
	dc.b  $C	; 8
	dc.b  $C	; 9
	dc.b $10	; 10
	dc.b $10	; 11
	dc.b $14	; 12
	dc.b $14	; 13
word_25BBE:
	dc.w $FE00,$FE00,$200,$FE00
	dc.w $FE40,$FE40,$1C0,$FE40; 4
	dc.w $FE80,$FE80,$180,$FE80; 8
	dc.w $FEC0,$FEC0,$140,$FEC0; 12
	dc.w $FF00,$FF00,$100,$FF00; 16
	dc.w $FF40,$FF40,$C0,$FF40; 20
	dc.w $FF80,$FF80,$80,$FF80; 24
; ===========================================================================

loc_25BF6:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	add.w	d0,d0
	movea.l	mappings(a0),a3
	adda.w	(a3,d0.w),a3
	move.w	(a3)+,d1
	subq.w	#1,d1
	bset	#5,render_flags(a0)
	_move.b	0(a0),d4
	move.b	render_flags(a0),d5
	movea.l	a0,a1
	bra.s	loc_25C24
; ===========================================================================

loc_25C1C:
	bsr.w	JmpTo10_SingleObjLoad2
	bne.s	loc_25C64
	addq.w	#8,a3

loc_25C24:
	move.b	#4,routine(a1)
	_move.b	d4,0(a1) ; load obj2B?
	move.l	a3,mappings(a1)
	move.b	d5,render_flags(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	priority(a0),priority(a1)
	move.b	width_pixels(a0),width_pixels(a1)
	move.w	(a4)+,x_vel(a1)
	move.w	(a4)+,y_vel(a1)
	move.b	(a2)+,objoff_3F(a1)
	dbf	d1,loc_25C1C

loc_25C64:
	move.w	#$CB,d0
	jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj2B_MapUnc_25C6E:	BINCLUDE "mappings/sprite/obj2B.bin"
; ===========================================================================
	nop

JmpTo16_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo28_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo16_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo10_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo25_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo8_SolidObject 
	jmp	SolidObject
; ===========================================================================
; loc_260FC:
JmpTo12_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2C - Sprite that makes leaves fly off when you hit it from ARZ
; ----------------------------------------------------------------------------
; Sprite_26104:
Obj2C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_26112(pc,d0.w),d1
	jmp	off_26112(pc,d1.w)
; ===========================================================================
off_26112:
	dc.w loc_2611C-off_26112
	dc.w loc_26152-off_26112; 1
	dc.w loc_26296-off_26112; 2
byte_26118:
	dc.b $D6
	dc.b $D4	; 1
	dc.b $D5	; 2
	dc.b   0	; 3
; ===========================================================================

loc_2611C:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.b	byte_26118(pc,d0.w),collision_flags(a0)
	move.l	#Obj31_MapUnc_20E74,mappings(a0)
	move.w	#$8680,art_tile(a0)
	move.b	#$84,render_flags(a0)
	move.b	#$80,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	subtype(a0),mapping_frame(a0)

loc_26152:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo29_DeleteObject
	move.b	collision_property(a0),d0
	beq.s	loc_261C2
	move.w	objoff_2E(a0),d0
	beq.s	loc_2617C
	add.b	($FFFFFE05).w,d0
	andi.w	#$F,d0
	bne.s	loc_26198

loc_2617C:
	lea	(MainCharacter).w,a2 ; a2=character
	bclr	#0,collision_property(a0)
	beq.s	loc_261BC
	bsr.s	loc_261C8
	tst.w	objoff_2E(a0)
	bne.s	loc_261BC
	move.w	(Timer_frames).w,objoff_2E(a0)
	bra.s	loc_261BC
; ===========================================================================

loc_26198:
	addi.w	#8,d0
	andi.w	#$F,d0
	bne.s	loc_261BC
	lea	(Sidekick).w,a2 ; a2=character
	bclr	#1,collision_property(a0)
	beq.s	loc_261BC
	bsr.s	loc_261C8
	tst.w	objoff_2E(a0)
	bne.s	loc_261BC
	move.w	(Timer_frames).w,objoff_2E(a0)

loc_261BC:
	clr.b	collision_property(a0)
	rts
; ===========================================================================

loc_261C2:
	clr.w	objoff_2E(a0)
	rts
; ===========================================================================

loc_261C8:
	move.w	x_vel(a2),d0
	bpl.s	loc_261D0
	neg.w	d0

loc_261D0:
	cmpi.w	#$200,d0
	bcc.s	loc_261E4
	move.w	y_vel(a2),d0
	bpl.s	loc_261DE
	neg.w	d0

loc_261DE:
	cmpi.w	#$200,d0
	bcs.s	loc_261C2

loc_261E4:
	lea	(byte_26286).l,a3
	moveq	#3,d6

loc_261EC:
	bsr.w	JmpTo6_SingleObjLoad
	bne.w	loc_26278
	_move.b	#$2C,0(a1) ; load obj2C
	move.b	#4,routine(a1)
	move.w	x_pos(a2),x_pos(a1)
	move.w	y_pos(a2),y_pos(a1)
	bsr.w	JmpTo2_RandomNumber
	andi.w	#$F,d0
	subq.w	#8,d0
	add.w	d0,x_pos(a1)
	swap	d0
	andi.w	#$F,d0
	subq.w	#8,d0
	add.w	d0,y_pos(a1)
	move.w	(a3)+,x_vel(a1)
	move.w	(a3)+,y_vel(a1)
	btst	#0,status(a2)
	beq.s	loc_2623A
	neg.w	x_vel(a1)

loc_2623A:
	move.w	x_pos(a1),objoff_30(a1)
	move.w	y_pos(a1),objoff_34(a1)
	andi.b	#1,d0
	move.b	d0,mapping_frame(a1)
	move.l	#Obj2C_MapUnc_2631E,mappings(a1)
	move.w	#$E410,art_tile(a1)
	move.b	#$84,render_flags(a1)
	move.b	#8,width_pixels(a1)
	move.b	#1,priority(a1)
	move.b	#4,objoff_38(a1)
	move.b	d1,angle(a0)

loc_26278:
	dbf	d6,loc_261EC
	move.w	#$E5,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_26286:
	dc.b $FF
	dc.b $80	; 1
	dc.b $FF	; 2
	dc.b $80	; 3
	dc.b   0	; 4
	dc.b $C0	; 5
	dc.b $FF	; 6
	dc.b $C0	; 7
	dc.b $FF	; 8
	dc.b $40	; 9
	dc.b   0	; 10
	dc.b $40	; 11
	dc.b   0	; 12
	dc.b $80	; 13
	dc.b   0	; 14
	dc.b $80	; 15
; ===========================================================================

loc_26296:
	move.b	objoff_38(a0),d0
	add.b	d0,angle(a0)
	add.b	($FFFFFE0F).w,d0
	andi.w	#$1F,d0
	bne.s	loc_262B4
	add.b	d7,d0
	andi.b	#1,d0
	beq.s	loc_262B4
	neg.b	objoff_38(a0)

loc_262B4:
	move.l	objoff_30(a0),d2
	move.l	objoff_34(a0),d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,objoff_30(a0)
	move.l	d3,objoff_34(a0)
	swap	d2
	andi.w	#3,d3
	addq.w	#4,d3
	add.w	d3,y_vel(a0)
	move.b	angle(a0),d0
	bsr.w	JmpTo7_CalcSine
	asr.w	#6,d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	asr.w	#6,d1
	add.w	objoff_34(a0),d1
	move.w	d1,y_pos(a0)
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_26312
	move.b	#$B,anim_frame_duration(a0)
	bchg	#1,mapping_frame(a0)

loc_26312:
	tst.b	render_flags(a0)
	bpl.w	JmpTo29_DeleteObject
	bra.w	JmpTo17_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj2C_MapUnc_2631E:	BINCLUDE "mappings/sprite/obj2C.bin"
; ===========================================================================
	nop

JmpTo17_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo29_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo6_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo2_RandomNumber 
	jmp	(RandomNumber).l
; ===========================================================================

JmpTo7_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 40 - Pressure spring from CPZ, ARZ, and MCZ (the red "diving board" springboard)
; ----------------------------------------------------------------------------
; Sprite_26370:
Obj40:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_26382(pc,d0.w),d1
	jsr	off_26382(pc,d1.w)
	bra.w	JmpTo17_MarkObjGone
; ===========================================================================
off_26382:
	dc.w loc_2638C - off_26382; 0
	dc.w loc_263C8 - off_26382; 1
; ---------------------------------------------------------------------------
word_26386:
	dc.w $FC00	; 0
	dc.w $F600	; 1
	dc.w $F800	; 2
; ===========================================================================

loc_2638C:
	addq.b	#2,routine(a0)
	move.l	#Obj40_MapUnc_265F4,mappings(a0)
	move.w	#$440,art_tile(a0)
	bsr.w	JmpTo26_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$1C,width_pixels(a0)
	move.b	#4,priority(a0)
	bset	#7,status(a0)
	move.b	subtype(a0),d0
	andi.w	#2,d0
	move.w	word_26386(pc,d0.w),objoff_30(a0)

loc_263C8:
	lea	(off_265E8).l,a1
	bsr.w	JmpTo6_AnimateSprite
	move.w	#$27,d1
	move.w	#8,d2
	move.w	x_pos(a0),d4
	lea	byte_26598(pc),a2
	tst.b	mapping_frame(a0)
	beq.s	+
	lea	byte_265C0(pc),a2
+
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo_SolidObject_Simple
	btst	#3,status(a0)
	beq.s	+
	bsr.s	loc_2641E
+
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo_SolidObject_Simple
	btst	#4,status(a0)
	beq.s	return_2641C
	bsr.s	loc_2641E

return_2641C:
	rts
; ===========================================================================

loc_2641E:
	btst	#0,status(a0)
	bne.s	loc_26436
	move.w	x_pos(a0),d0
	subi.w	#$10,d0
	cmp.w	x_pos(a1),d0
	bcs.s	loc_26446
	rts
; ===========================================================================

loc_26436:
	move.w	x_pos(a0),d0
	addi.w	#$10,d0
	cmp.w	x_pos(a1),d0
	bcc.s	loc_26446
	rts
; ===========================================================================

loc_26446:
	cmpi.b	#1,anim(a0)
	beq.s	loc_26456
	move.w	#$100,anim(a0)
	rts
; ===========================================================================

loc_26456:
	tst.b	mapping_frame(a0)
	beq.s	loc_2645E
	rts
; ===========================================================================

loc_2645E:
	move.w	x_pos(a0),d0
	subi.w	#$1C,d0
	sub.w	x_pos(a1),d0
	neg.w	d0
	btst	#0,status(a0)
	beq.s	loc_2647A
	not.w	d0
	addi.w	#$27,d0

loc_2647A:
	tst.w	d0
	bpl.s	loc_26480
	moveq	#0,d0

loc_26480:
	lea	(byte_26550).l,a3
	move.b	(a3,d0.w),d0
	move.w	#-$400,y_vel(a1)
	sub.b	d0,y_vel(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_264AA
	bclr	#0,status(a1)
	neg.b	d0

loc_264AA:
	move.w	x_vel(a1),d1
	bpl.s	loc_264B2
	neg.w	d1

loc_264B2:
	cmpi.w	#$400,d1
	bcs.s	loc_264BC
	sub.b	d0,x_vel(a1)

loc_264BC:
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	#0,spindash_flag(a1)
	move.b	subtype(a0),d0
	btst	#0,d0
	beq.s	loc_2651E
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_2650E
	move.b	#3,flips_remaining(a1)

loc_2650E:
	btst	#0,status(a1)
	beq.s	loc_2651E
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_2651E:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_26534
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_26534:
	cmpi.b	#8,d0
	bne.s	loc_26546
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_26546:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_26550:
	dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	dc.b   0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1; 16
	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2; 32
	dc.b   3,  3,  3,  3,  3,  3,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0; 48
	dc.b   0,  0,  0,  0,  0,  0,  0,  0; 64
byte_26598:
	dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $D, $E, $F,$10,$10
	dc.b $11,$12,$13,$14,$14,$15,$15,$16,$17,$18,$18,$18,$18,$18,$18,$18; 16
	dc.b $18,$18,$18,$18,$18,$18,$18,$18; 32
byte_265C0:
	dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $C, $C, $C, $D, $D
	dc.b  $D, $D, $D, $D, $E, $E, $F, $F,$10,$10,$10,$10, $F, $F, $E, $E; 16
	dc.b  $D, $D, $D, $D, $D, $D, $D, $D; 32

; animation script
off_265E8:
	dc.w byte_265EC-off_265E8
	dc.w byte_265EF-off_265E8; 1
byte_265EC:	dc.b  $F,  0,$FF
byte_265EF:	dc.b   3,  1,  0,$FD,  0
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj40_MapUnc_265F4:	BINCLUDE "mappings/sprite/obj40.bin"
; ===========================================================================

JmpTo17_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo6_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo26_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_SolidObject_Simple 
	jmp	SolidObject_Simple




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 42 - Steam Spring from MTZ
; ----------------------------------------------------------------------------
; Sprite_26634:
Obj42:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_26642(pc,d0.w),d1
	jmp	off_26642(pc,d1.w)
; ===========================================================================
off_26642:
	dc.w loc_26648-off_26642
	dc.w loc_26688-off_26642; 1
	dc.w loc_2683A-off_26642; 2
; ===========================================================================

loc_26648:
	addq.b	#2,routine(a0)
	move.l	#Obj42_MapUnc_2686C,mappings(a0)
	move.w	#$6000,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	bsr.w	JmpTo27_Adjust2PArtPointer
	move.b	#7,mapping_frame(a0)
	move.w	y_pos(a0),objoff_34(a0)
	move.w	#$10,objoff_36(a0)
	addi.w	#$10,y_pos(a0)

loc_26688:
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo2_loc_1978E
	btst	#3,status(a0)
	beq.s	loc_266B2
	bsr.w	loc_2678E

loc_266B2:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo2_loc_1978E
	btst	#4,status(a0)
	beq.s	loc_266CC
	bsr.w	loc_2678E

loc_266CC:
	move.b	routine_secondary(a0),d0
	bne.s	loc_266E4
	subq.w	#1,objoff_32(a0)
	bpl.s	BranchTo_JmpTo18_MarkObjGone
	move.w	#$3B,objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	bra.s	BranchTo_JmpTo18_MarkObjGone
; ===========================================================================

loc_266E4:
	subq.b	#2,d0
	bne.s	loc_26716
	subq.w	#8,objoff_36(a0)
	bne.s	loc_26708
	addq.b	#2,routine_secondary(a0)
	bsr.s	loc_2674C
	addi.w	#$28,x_pos(a1)
	bsr.s	loc_2674C
	subi.w	#$28,x_pos(a1)
	bset	#0,render_flags(a1)

loc_26708:
	move.w	objoff_36(a0),d0
	add.w	objoff_34(a0),d0
	move.w	d0,y_pos(a0)
	bra.s	BranchTo_JmpTo18_MarkObjGone
; ===========================================================================

loc_26716:
	subq.b	#2,d0
	bne.s	loc_2672C
	subq.w	#1,objoff_32(a0)
	bpl.s	BranchTo_JmpTo18_MarkObjGone
	move.w	#$3B,objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	bra.s	BranchTo_JmpTo18_MarkObjGone
; ===========================================================================

loc_2672C:
	addq.w	#8,objoff_36(a0)
	cmpi.w	#$10,objoff_36(a0)
	bne.s	loc_2673C
	clr.b	routine_secondary(a0)

loc_2673C:
	move.w	objoff_36(a0),d0
	add.w	objoff_34(a0),d0
	move.w	d0,y_pos(a0)

BranchTo_JmpTo18_MarkObjGone 
	bra.w	JmpTo18_MarkObjGone
; ===========================================================================

loc_2674C:
	bsr.w	JmpTo7_SingleObjLoad
	bne.s	return_2678C
	_move.b	0(a0),0(a1) ; load obj42
	addq.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	objoff_34(a0),y_pos(a1)
	move.b	#7,anim_frame_duration(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	#$2405,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#$18,width_pixels(a1)
	move.b	#4,priority(a1)

return_2678C:
	rts
; ===========================================================================

loc_2678E:
	cmpi.b	#2,routine_secondary(a0)
	beq.s	loc_26798
	rts
; ===========================================================================

loc_26798:
	move.w	#-$A00,y_vel(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	#0,spindash_flag(a1)
	move.b	subtype(a0),d0
	bpl.s	loc_267C8
	move.w	#0,x_vel(a1)

loc_267C8:
	btst	#0,d0
	beq.s	loc_26808
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_267F8
	move.b	#1,flips_remaining(a1)

loc_267F8:
	btst	#0,status(a1)
	beq.s	loc_26808
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_26808:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_2681E
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_2681E:
	cmpi.b	#8,d0
	bne.s	loc_26830
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_26830:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_2683A:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo_JmpTo18_DisplaySprite
	move.b	#7,anim_frame_duration(a0)
	move.b	#0,collision_flags(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#3,mapping_frame(a0)
	bne.s	loc_2685E
	move.b	#$A6,collision_flags(a0)

loc_2685E:
	cmpi.b	#7,mapping_frame(a0)
	beq.w	JmpTo30_DeleteObject

BranchTo_JmpTo18_DisplaySprite 
	bra.w	JmpTo18_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj42_MapUnc_2686C:	BINCLUDE "mappings/sprite/obj42.bin"
; ===========================================================================

JmpTo18_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo30_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo7_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo18_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo27_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo2_loc_1978E 
	jmp	loc_1978E
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 64 - Twin stompers from MTZ
; ----------------------------------------------------------------------------
; Sprite_26920:
Obj64:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2692E(pc,d0.w),d1
	jmp	off_2692E(pc,d1.w)
; ===========================================================================
off_2692E:
	dc.w loc_2693A-off_2692E
	dc.w loc_269A2-off_2692E; 1
byte_26932:
	dc.b $40, $C
	dc.b $40,  1	; 2
	dc.b $10,$20	; 4
	dc.b $40,  1	; 6
; ===========================================================================

loc_2693A:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#2,d0
	andi.w	#$1C,d0
	lea	byte_26932(pc,d0.w),a3
	move.b	(a3)+,width_pixels(a0)
	move.b	(a3)+,objoff_2E(a0)
	lsr.w	#2,d0
	move.b	d0,mapping_frame(a0)
	bne.s	loc_2696A
	move.b	#$6C,y_radius(a0)
	bset	#4,render_flags(a0)

loc_2696A:
	move.l	#Obj64_MapUnc_26A5C,mappings(a0)
	move.w	#$2000,art_tile(a0)
	bsr.w	JmpTo28_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	moveq	#0,d0
	move.b	(a3)+,d0
	move.w	d0,objoff_3C(a0)
	andi.b	#$F,subtype(a0)

loc_269A2:
	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.w	off_269F4(pc,d0.w),d1
	jsr	off_269F4(pc,d1.w)
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_269D6
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	objoff_2E(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo9_SolidObject

loc_269D6:
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	JmpTo31_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo31_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
off_269F4:
	dc.w return_269F8-off_269F4
	dc.w loc_269FA-off_269F4; 1
; ===========================================================================

return_269F8:
	rts
; ===========================================================================

loc_269FA:
	tst.b	objoff_38(a0)
	bne.s	loc_26A1E
	tst.w	objoff_3A(a0)
	beq.s	loc_26A0C
	subq.w	#8,objoff_3A(a0)
	bra.s	loc_26A3E
; ===========================================================================

loc_26A0C:
	subq.w	#1,objoff_36(a0)
	bpl.s	loc_26A3E
	move.w	#$5A,objoff_36(a0)
	move.b	#1,objoff_38(a0)

loc_26A1E:
	move.w	objoff_3A(a0),d0
	cmp.w	objoff_3C(a0),d0
	beq.s	loc_26A2E
	addq.w	#8,objoff_3A(a0)
	bra.s	loc_26A3E
; ===========================================================================

loc_26A2E:
	subq.w	#1,objoff_36(a0)
	bpl.s	loc_26A3E
	move.w	#$5A,objoff_36(a0)
	clr.b	objoff_38(a0)

loc_26A3E:
	move.w	objoff_3A(a0),d0
	btst	#0,status(a0)
	beq.s	loc_26A50
	neg.w	d0
	addi.w	#$40,d0

loc_26A50:
	move.w	objoff_30(a0),d1
	add.w	d0,d1
	move.w	d1,y_pos(a0)
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj64_MapUnc_26A5C:	BINCLUDE "mappings/sprite/obj64.bin"
; ===========================================================================

JmpTo28_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo9_SolidObject 
	jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 65 - Long moving platform from MTZ
; ----------------------------------------------------------------------------
; Sprite_26AE0:
Obj65:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_26AEE(pc,d0.w),d1
	jmp	off_26AEE(pc,d1.w)
; ===========================================================================
off_26AEE:
	dc.w loc_26B06-off_26AEE
	dc.w loc_26C1C-off_26AEE; 1
	dc.w loc_26EA4-off_26AEE; 2
	dc.w loc_26EC2-off_26AEE; 3
; ---------------------------------------------------------------------------
byte_26AF6:
	dc.b $40, $C
	dc.b $80,  1	; 2
	dc.b $20, $C	; 4
	dc.b $40,  3	; 6
	dc.b $10,$10	; 8
	dc.b $20,  0	; 10
	dc.b $40, $C	; 12
	dc.b $80,  7	; 14
; ===========================================================================

loc_26B06:
	addq.b	#2,routine(a0)
	move.l	#Obj65_Obj6A_Obj6B_MapUnc_26EC8,mappings(a0)
	move.w	#$6000,art_tile(a0)
	bsr.w	JmpTo29_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#2,d0
	andi.w	#$1C,d0
	lea	byte_26AF6(pc,d0.w),a3
	move.b	(a3)+,width_pixels(a0)
	move.b	(a3)+,y_radius(a0)
	lsr.w	#2,d0
	move.b	d0,mapping_frame(a0)
	cmpi.b	#1,d0
	bne.s	loc_26B52
	bset	#7,status(a0)

loc_26B52:
	cmpi.b	#2,d0
	bne.s	loc_26B6E
	addq.b	#4,routine(a0)
	move.l	#Obj65_MapUnc_26F04,mappings(a0)
	move.w	#$655F,art_tile(a0)
	bra.w	loc_26EC2
; ===========================================================================

loc_26B6E:
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	moveq	#0,d0
	move.b	(a3)+,d0
	move.w	d0,objoff_3C(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	bpl.w	loc_26C16
	andi.b	#$F,d0
	move.b	d0,objoff_3E(a0)
	move.b	(a3),subtype(a0)
	cmpi.b	#7,(a3)
	bne.s	loc_26BA4
	move.w	objoff_3C(a0),objoff_3A(a0)

loc_26BA4:
	bsr.w	JmpTo11_SingleObjLoad2
	bne.s	loc_26C04
	_move.b	0(a0),0(a1) ; load obj65
	addq.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#-$4C,x_pos(a1)
	addi.w	#$14,y_pos(a1)
	btst	#0,status(a0)
	bne.s	loc_26BE0
	subi.w	#-$18,x_pos(a1)
	bset	#0,render_flags(a1)

loc_26BE0:
	move.l	#Obj65_MapUnc_26F04,mappings(a1)
	move.w	#$655F,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	a0,objoff_3C(a1)

loc_26C04:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	loc_26C16
	bclr	#7,2(a2,d0.w)

loc_26C16:
	andi.b	#$F,subtype(a0)

loc_26C1C:
	move.w	x_pos(a0),objoff_2E(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.w	off_26C7E(pc,d0.w),d1
	jsr	off_26C7E(pc,d1.w)
	move.w	objoff_2E(a0),d4
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#5,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo10_SolidObject
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_26C66
	jmp	DisplaySprite
; ===========================================================================

loc_26C66:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo32_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo32_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
off_26C7E:
	dc.w return_26C8E-off_26C7E
	dc.w loc_26CA4-off_26C7E; 1
	dc.w loc_26D34-off_26C7E; 2
	dc.w loc_26D94-off_26C7E; 3
	dc.w loc_26E3C-off_26C7E; 4
	dc.w loc_26E4A-off_26C7E; 5
	dc.w loc_26C90-off_26C7E; 6
	dc.w loc_26D14-off_26C7E; 7
; ===========================================================================

return_26C8E:
	rts
; ===========================================================================

loc_26C90:
	tst.b	objoff_38(a0)
	bne.s	BranchTo_loc_26CC2
	subq.w	#1,objoff_36(a0)
	bne.s	loc_26CD0
	move.b	#1,objoff_38(a0)

BranchTo_loc_26CC2 
	bra.s	loc_26CC2
; ===========================================================================

loc_26CA4:
	tst.b	objoff_38(a0)
	bne.s	loc_26CC2
	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	objoff_3E(a0),d0
	btst	#0,(a2,d0.w)
	beq.s	loc_26CD0
	move.b	#1,objoff_38(a0)

loc_26CC2:
	move.w	objoff_3C(a0),d0
	cmp.w	objoff_3A(a0),d0
	beq.s	loc_26CF2
	addq.w	#2,objoff_3A(a0)

loc_26CD0:
	move.w	objoff_3A(a0),d0
	btst	#0,status(a0)
	beq.s	loc_26CE2
	neg.w	d0
	addi.w	#$80,d0

loc_26CE2:
	move.w	objoff_34(a0),d1
	sub.w	d0,d1
	move.w	d1,x_pos(a0)
	move.w	d1,objoff_2E(a0)
	rts
; ===========================================================================

loc_26CF2:
	addq.b	#1,subtype(a0)
	move.w	#$B4,objoff_36(a0)
	clr.b	objoff_38(a0)
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	loc_26CD0
	bset	#0,2(a2,d0.w)
	bra.s	loc_26CD0
; ===========================================================================

loc_26D14:
	tst.b	objoff_38(a0)
	bne.s	BranchTo_loc_26D46
	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	objoff_3E(a0),d0
	btst	#0,(a2,d0.w)
	beq.s	loc_26D50
	move.b	#1,objoff_38(a0)

BranchTo_loc_26D46 
	bra.s	loc_26D46
; ===========================================================================

loc_26D34:
	tst.b	objoff_38(a0)
	bne.s	loc_26D46
	subq.w	#1,objoff_36(a0)
	bne.s	loc_26D50
	move.b	#1,objoff_38(a0)

loc_26D46:
	tst.w	objoff_3A(a0)
	beq.s	loc_26D72
	subq.w	#2,objoff_3A(a0)

loc_26D50:
	move.w	objoff_3A(a0),d0
	btst	#0,status(a0)
	beq.s	loc_26D62
	neg.w	d0
	addi.w	#$80,d0

loc_26D62:
	move.w	objoff_34(a0),d1
	sub.w	d0,d1
	move.w	d1,x_pos(a0)
	move.w	d1,objoff_2E(a0)
	rts
; ===========================================================================

loc_26D72:
	subq.b	#1,subtype(a0)
	move.w	#$B4,objoff_36(a0)
	clr.b	objoff_38(a0)
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	loc_26D50
	bclr	#0,2(a2,d0.w)
	bra.s	loc_26D50
; ===========================================================================

loc_26D94:
	move.w	objoff_34(a0),d4
	move.w	d4,d5
	btst	#0,status(a0)
	bne.s	loc_26DAC
	subi.w	#$20,d4
	addi.w	#$60,d5
	bra.s	loc_26DB4
; ===========================================================================

loc_26DAC:
	subi.w	#$A0,d4
	subi.w	#$20,d5

loc_26DB4:
	move.w	y_pos(a0),d2
	move.w	d2,d3
	subi.w	#$10,d2
	addi.w	#$40,d3
	moveq	#0,d1
	move.w	(MainCharacter+x_pos).w,d0
	cmp.w	d4,d0
	bcs.s	loc_26DDE
	cmp.w	d5,d0
	bcc.s	loc_26DDE
	move.w	(MainCharacter+y_pos).w,d0
	cmp.w	d2,d0
	bcs.s	loc_26DDE
	cmp.w	d3,d0
	bcc.s	loc_26DDE
	moveq	#1,d1

loc_26DDE:
	move.w	(Sidekick+x_pos).w,d0
	cmp.w	d4,d0
	bcs.s	loc_26DF8
	cmp.w	d5,d0
	bcc.s	loc_26DF8
	move.w	(Sidekick+y_pos).w,d0
	cmp.w	d2,d0
	bcs.s	loc_26DF8
	cmp.w	d3,d0
	bcc.s	loc_26DF8
	moveq	#1,d1

loc_26DF8:
	tst.b	d1
	beq.s	loc_26E0E
	move.w	objoff_3C(a0),d0
	cmp.w	objoff_3A(a0),d0
	beq.s	return_26E3A
	addi.w	#$10,objoff_3A(a0)
	bra.s	loc_26E1A
; ===========================================================================

loc_26E0E:
	tst.w	objoff_3A(a0)
	beq.s	loc_26E1A
	subi.w	#$10,objoff_3A(a0)

loc_26E1A:
	move.w	objoff_3A(a0),d0
	btst	#0,status(a0)
	beq.s	loc_26E2C
	neg.w	d0
	addi.w	#$40,d0

loc_26E2C:
	move.w	objoff_34(a0),d1
	sub.w	d0,d1
	move.w	d1,x_pos(a0)
	move.w	d1,objoff_2E(a0)

return_26E3A:
	rts
; ===========================================================================

loc_26E3C:
	btst	#3,status(a0)
	beq.s	return_26E48
	addq.b	#1,subtype(a0)

return_26E48:
	rts
; ===========================================================================

loc_26E4A:
	tst.b	objoff_38(a0)
	bne.s	loc_26E84
	addq.w	#2,x_pos(a0)
	cmpi.b	#5,(Current_Zone).w
	bne.s	loc_26E74
	cmpi.w	#$1CC0,x_pos(a0)
	beq.s	loc_26E6C
	cmpi.w	#$2940,x_pos(a0)
	bne.s	loc_26E96

loc_26E6C:
	move.b	#0,subtype(a0)
	bra.s	loc_26E96
; ===========================================================================

loc_26E74:
	cmpi.w	#$1BC0,x_pos(a0)
	bne.s	loc_26E96
	move.b	#1,objoff_38(a0)
	bra.s	loc_26E96
; ===========================================================================

loc_26E84:
	subq.w	#2,x_pos(a0)
	cmpi.w	#$1880,x_pos(a0)
	bne.s	loc_26E96
	move.b	#0,objoff_38(a0)

loc_26E96:
	move.w	x_pos(a0),objoff_34(a0)
	move.w	x_pos(a0),($FFFFF7B0).w
	rts
; ===========================================================================

loc_26EA4:
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	objoff_3A(a1),d0

loc_26EAC:
	andi.w	#7,d0
	move.b	byte_26EBA(pc,d0.w),mapping_frame(a0)
	bra.w	JmpTo19_MarkObjGone
; ===========================================================================
byte_26EBA:
	dc.b   0
	dc.b   0	; 1
	dc.b   2	; 2
	dc.b   2	; 3
	dc.b   2	; 4
	dc.b   1	; 5
	dc.b   1	; 6
	dc.b   1	; 7
; ===========================================================================

loc_26EC2:

	move.w	($FFFFF7B0).w,d0
	bra.s	loc_26EAC
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj65_Obj6A_Obj6B_MapUnc_26EC8:	BINCLUDE "mappings/sprite/obj65_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj65_MapUnc_26F04:	BINCLUDE "mappings/sprite/obj65_b.bin"
; ===========================================================================

JmpTo19_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo11_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo29_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo10_SolidObject 
	jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 66 - Yellow spring walls from MTZ
; ----------------------------------------------------------------------------
; Sprite_26F58:
Obj66:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_26F66(pc,d0.w),d1
	jmp	off_26F66(pc,d1.w)
; ===========================================================================
off_26F66:
	dc.w loc_26F6A-off_26F66
	dc.w loc_26FAE-off_26F66; 1
; ===========================================================================

loc_26F6A:
	addq.b	#2,routine(a0)
	move.l	#Obj66_MapUnc_27120,mappings(a0)
	move.w	#$8680,art_tile(a0)
	bsr.w	JmpTo30_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#8,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	#$40,y_radius(a0)
	move.b	subtype(a0),d0
	lsr.b	#4,d0
	andi.b	#7,d0
	move.b	d0,mapping_frame(a0)
	beq.s	loc_26FAE
	move.b	#$80,y_radius(a0)

loc_26FAE:

	move.w	#$13,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo3_loc_1978E
	cmpi.b	#1,d4
	bne.s	loc_26FF6
	btst	#1,status(a1)
	beq.s	loc_26FF6
	move.b	status(a0),d1
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcs.s	loc_26FEE
	eori.b	#1,d1

loc_26FEE:
	andi.b	#1,d1
	bne.s	loc_26FF6
	bsr.s	loc_27042

loc_26FF6:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo3_loc_1978E
	cmpi.b	#1,d4
	bne.s	loc_2702C
	btst	#1,status(a1)
	beq.s	loc_2702C
	move.b	status(a0),d1
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcs.s	loc_27024
	eori.b	#1,d1

loc_27024:
	andi.b	#1,d1
	bne.s	loc_2702C
	bsr.s	loc_27042

loc_2702C:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo33_DeleteObject
	rts
; ===========================================================================

loc_27042:
	cmpi.b	#4,routine(a1)
	bcs.s	loc_2704C
	rts
; ===========================================================================

loc_2704C:
	move.w	objoff_30(a0),x_vel(a1)
	move.w	#-$800,x_vel(a1)
	move.w	#-$800,y_vel(a1)
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_27076
	bclr	#0,status(a1)
	neg.w	x_vel(a1)

loc_27076:
	move.w	#$F,move_lock(a1)
	move.w	x_vel(a1),inertia(a1)
	btst	#2,status(a1)
	bne.s	loc_27090
	move.b	#0,anim(a1)

loc_27090:
	move.b	subtype(a0),d0
	bpl.s	loc_2709C
	move.w	#0,y_vel(a1)

loc_2709C:
	btst	#0,d0
	beq.s	loc_270DC
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#1,flips_remaining(a1)
	move.b	#8,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_270CC
	move.b	#3,flips_remaining(a1)

loc_270CC:
	btst	#0,status(a1)
	beq.s	loc_270DC
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_270DC:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_270F2
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_270F2:
	cmpi.b	#8,d0
	bne.s	loc_27104
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_27104:
	bclr	#5,status(a0)
	bclr	#6,status(a0)
	bclr	#5,status(a1)
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj66_MapUnc_27120:	BINCLUDE "mappings/sprite/obj66.bin"
; ===========================================================================

JmpTo33_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo30_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo3_loc_1978E 
	jmp	loc_1978E
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 67 - Spin tube from MTZ
; ----------------------------------------------------------------------------
; Sprite_2715C:
Obj67:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_27184(pc,d0.w),d1
	jsr	off_27184(pc,d1.w)
	move.b	objoff_2C(a0),d0
	add.b	objoff_36(a0),d0
	beq.w	JmpTo4_MarkObjGone3
	lea	(byte_2752E).l,a1
	bsr.w	JmpTo7_AnimateSprite
	bra.w	JmpTo19_DisplaySprite
; ===========================================================================
off_27184:
	dc.w loc_27188-off_27184
	dc.w loc_271AC-off_27184; 1
; ===========================================================================

loc_27188:
	addq.b	#2,routine(a0)
	move.l	#Obj67_MapUnc_27548,mappings(a0)
	move.w	#$656B,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#5,priority(a0)

loc_271AC:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	objoff_2C(a0),a4
	bsr.s	loc_271BE
	lea	(Sidekick).w,a1 ; a1=character
	lea	objoff_36(a0),a4

loc_271BE:
	moveq	#0,d0
	move.b	(a4),d0
	move.w	off_271CA(pc,d0.w),d0
	jmp	off_271CA(pc,d0.w)
; ===========================================================================
off_271CA:
	dc.w loc_271D0-off_271CA
	dc.w loc_27260-off_271CA; 1
	dc.w loc_27294-off_271CA; 2
; ===========================================================================

loc_271D0:
	tst.w	(Debug_placement_mode).w
	bne.w	return_2725E
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addq.w	#3,d0
	btst	#0,status(a0)
	beq.s	loc_271EE
	addi.w	#$A,d0

loc_271EE:
	cmpi.w	#$10,d0
	bcc.s	return_2725E
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	addi.w	#$20,d1
	cmpi.w	#$40,d1
	bcc.s	return_2725E
	tst.b	obj_control(a1)
	bne.s	return_2725E
	addq.b	#2,(a4)
	move.b	#$81,obj_control(a1)
	move.b	#2,anim(a1)
	move.w	#$800,inertia(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	bclr	#5,status(a0)
	bclr	#5,status(a1)
	bset	#1,status(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	clr.b	1(a4)
	move.w	#$BE,d0
	jsr	(PlaySound).l
	move.w	#$100,anim(a0)

return_2725E:
	rts
; ===========================================================================

loc_27260:
	move.b	1(a4),d0
	addq.b	#2,1(a4)
	jsr	(CalcSine).l
	asr.w	#5,d0
	move.w	y_pos(a0),d2
	sub.w	d0,d2
	move.w	d2,y_pos(a1)
	cmpi.b	#$80,1(a4)
	bne.s	return_27292
	bsr.w	loc_27310
	addq.b	#2,(a4)
	move.w	#$BC,d0
	jsr	(PlaySound).l

return_27292:
	rts
; ===========================================================================

loc_27294:
	subq.b	#1,2(a4)
	bpl.s	Obj67_MoveCharacter
	movea.l	6(a4),a2
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)
	tst.b	subtype(a0)
	bpl.s	loc_272B2
	subq.w	#8,a2

loc_272B2:
	move.l	a2,6(a4)
	subq.w	#4,4(a4)
	beq.s	loc_272EE
	move.w	(a2)+,d4
	move.w	(a2)+,d5
	move.w	#$1000,d2
	bra.w	loc_27374
; ===========================================================================
; update the position of Sonic/Tails in the MTZ tube
; loc_272C8:
Obj67_MoveCharacter:
	move.l	x_pos(a1),d2
	move.l	y_pos(a1),d3
	move.w	x_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a1),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,x_pos(a1)
	move.l	d3,y_pos(a1)
	rts
; ===========================================================================

loc_272EE:
	andi.w	#$7FF,y_pos(a1)
	clr.b	(a4)
	clr.b	obj_control(a1)
	btst	#4,subtype(a0)
	bne.s	return_2730E
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)

return_2730E:
	rts
; ===========================================================================

loc_27310:
	move.b	subtype(a0),d0
	bpl.s	loc_27344
	neg.b	d0
	andi.w	#$F,d0
	add.w	d0,d0
	lea	(off_273F2).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d0
	subq.w	#4,d0
	move.w	d0,4(a4)
	lea	(a2,d0.w),a2
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)
	subq.w	#8,a2
	bra.s	loc_27368
; ===========================================================================

loc_27344:
	andi.w	#$F,d0
	add.w	d0,d0
	lea	(off_273F2).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,4(a4)
	subq.w	#4,4(a4)
	move.w	(a2)+,d4
	move.w	d4,x_pos(a1)
	move.w	(a2)+,d5
	move.w	d5,y_pos(a1)

loc_27368:
	move.l	a2,6(a4)
	move.w	(a2)+,d4
	move.w	(a2)+,d5
	move.w	#$1000,d2

loc_27374:
	moveq	#0,d0
	move.w	d2,d3
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	bge.s	loc_27384
	neg.w	d0
	neg.w	d2

loc_27384:
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	bge.s	loc_27392
	neg.w	d1
	neg.w	d3

loc_27392:
	cmp.w	d0,d1
	bcs.s	loc_273C4
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	swap	d1
	divs.w	d3,d1
	moveq	#0,d0
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	beq.s	loc_273B0
	swap	d0
	divs.w	d1,d0

loc_273B0:
	move.w	d0,x_vel(a1)
	move.w	d3,y_vel(a1)
	tst.w	d1
	bpl.s	loc_273BE
	neg.w	d1

loc_273BE:
	move.w	d1,2(a4)
	rts
; ===========================================================================

loc_273C4:
	moveq	#0,d0
	move.w	d4,d0
	sub.w	x_pos(a1),d0
	swap	d0
	divs.w	d2,d0
	moveq	#0,d1
	move.w	d5,d1
	sub.w	y_pos(a1),d1
	beq.s	loc_273DE
	swap	d1
	divs.w	d0,d1

loc_273DE:
	move.w	d1,y_vel(a1)
	move.w	d2,x_vel(a1)
	tst.w	d0
	bpl.s	loc_273EC
	neg.w	d0

loc_273EC:
	move.w	d0,2(a4)
	rts
; ===========================================================================
; probably MTZ tube position data
off_273F2:
	dc.w byte_2740C-off_273F2
	dc.w byte_27426-off_273F2; 1
	dc.w byte_27430-off_273F2; 2
	dc.w byte_2744A-off_273F2; 3
	dc.w byte_27454-off_273F2; 4
	dc.w byte_2745E-off_273F2; 5
	dc.w byte_27478-off_273F2; 6
	dc.w byte_27492-off_273F2; 7
	dc.w byte_274AC-off_273F2; 8
	dc.w byte_274C6-off_273F2; 9
	dc.w byte_274E0-off_273F2; 10
	dc.w byte_274FA-off_273F2; 11
	dc.w byte_27514-off_273F2; 12
byte_2740C:
	dc.b   0,$18,  7,$A8,  2,$70,  7,$50,  2,$70,  7,$40,  2,$80,  7,$40
	dc.b   3,$E0,  7,$50,  3,$F0,  7,$A8,  3,$F0; 16
byte_27426:
	dc.b   0,  8, $C,$58,  5,$F0, $E,$28,  5,$F0
byte_27430:
	dc.b   0,$18,$18,$28,  6,$B0,$17,$D0,  6,$B0,$17,$C0,  6,$C0,$17,$C0
	dc.b   7,$E0,$17,$B0,  7,$F0,$17,$58,  7,$F0; 16
byte_2744A:
	dc.b   0,  8,  5,$D8,  3,$70,  7,$80,  3,$70
byte_27454:
	dc.b   0,  8,  5,$D8,  5,$F0,  7,  0,  5,$F0
byte_2745E:
	dc.b   0,$18, $B,$D8,  1,$F0, $C,$30,  1,$F0, $C,$40,  1,$E0, $C,$40
	dc.b   0,$C0, $C,$50,  0,$B0, $C,$A8,  0,$B0; 16
byte_27478:
	dc.b   0,$18,$17,$28,  3,$30,$15,$D0,  3,$30,$15,$C0,  3,$20,$15,$C0
	dc.b   2,$40,$15,$D0,  2,$30,$16,$28,  2,$30; 16
byte_27492:
	dc.b   0,$18,  6,$D8,  1,$F0,  7,$30,  1,$F0,  7,$40,  1,$E0,  7,$40
	dc.b   1,  0,  7,$50,  0,$F0,  7,$A8,  0,$F0; 16
byte_274AC:
	dc.b   0,$18,  7,$D8,  3,$30,  8,$28,  3,$30,  8,$40,  3,$40,  8,$40
	dc.b   4,$58,  8,$28,  4,$70,  7,$D8,  4,$70; 16
byte_274C6:
	dc.b   0,$18, $F,$D8,  3,$B0,$10,$28,  3,$B0,$10,$40,  3,$98,$10,$40
	dc.b   2,$C4,$10,$58,  2,$B0,$10,$A8,  2,$B0; 16
byte_274E0:
	dc.b   0,$18
	dc.b  $F,$D8,  4,$B0,$10,$28,  4,$B0
	dc.b $10,$40,  4,$C0,$10,$40,  5,$D8,$10,$58,  5,$F0,$10,$A8,  5,$F0
byte_274FA:
	dc.b   0,$18,$20,$58,  4,$30,$20,$A8,  4,$30,$20,$C0,  4,$18,$20,$C0
	dc.b   2,$C0,$20,$D0,  2,$B0,$21,$28,  2,$B0; 16
byte_27514:
	dc.b   0,$18,$23,$28,  5,$B0,$22,$D0,  5,$B0,$22,$C0,  5,$A0,$22,$C0
	dc.b   4,$C0,$22,$D0,  4,$B0,$23,$28,  4,$B0; 16
byte_2752E:
	dc.b   0,  4,  0,  7,$1F,  0,$FF,  1,  1,  0,  0,  0,  0,  0,  1,  0
	dc.b   0,  0,  1,  0,  0,  1,  0,$FE,  2,  0; 16
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj67_MapUnc_27548:	BINCLUDE "mappings/sprite/obj67.bin"
; ===========================================================================

JmpTo19_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo7_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo4_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 68 - Block with a spike that comes out of each side sequentially from MTZ
; ----------------------------------------------------------------------------
; Sprite_27594:
Obj68:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_275A2(pc,d0.w),d1
	jmp	off_275A2(pc,d1.w)
; ===========================================================================
off_275A2:
	dc.w loc_275A8-off_275A2
	dc.w loc_2764A-off_275A2; 1
	dc.w loc_27662-off_275A2; 2
; ===========================================================================

loc_275A8:
	addq.b	#2,routine(a0)
	move.l	#Obj68_Obj6D_MapUnc_27750,mappings(a0)
	move.w	#$6414,art_tile(a0)
	bsr.w	JmpTo31_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	bsr.w	JmpTo12_SingleObjLoad2
	bne.s	loc_27644
	_move.b	0(a0),0(a1) ; load obj68
	addq.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	x_pos(a1),objoff_30(a1)
	move.w	y_pos(a1),objoff_32(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	#$241C,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#4,priority(a1)
	move.w	(Timer_frames).w,d0
	lsr.w	#6,d0
	move.w	d0,d1
	andi.w	#1,d0
	move.w	d0,objoff_36(a1)
	lsr.w	#1,d1
	add.b	subtype(a0),d1
	andi.w	#3,d1
	move.b	d1,routine_secondary(a1)
	move.b	d1,mapping_frame(a1)
	lea	(byte_2774C).l,a2
	move.b	(a2,d1.w),collision_flags(a1)

loc_27644:
	move.b	#4,mapping_frame(a0)

loc_2764A:
	move.w	#$1B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo11_SolidObject
	bra.w	JmpTo20_MarkObjGone
; ===========================================================================

loc_27662:
	bsr.w	loc_276CA
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	add.w	d0,d0
	move.w	off_2767E(pc,d0.w),d1
	jsr	off_2767E(pc,d1.w)
	move.w	objoff_30(a0),d0
	bra.w	JmpTo2_MarkObjGone2
; ===========================================================================
off_2767E:
	dc.w loc_27686-off_2767E
	dc.w loc_27698-off_2767E; 1
	dc.w loc_276A8-off_2767E; 2
	dc.w loc_276B8-off_2767E; 3
; ===========================================================================

loc_27686:
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	neg.w	d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_27698:
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	rts
; ===========================================================================

loc_276A8:
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_276B8:
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	neg.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	rts
; ===========================================================================

loc_276CA:
	tst.w	objoff_38(a0)
	beq.s	loc_276EE
	move.b	($FFFFFE05).w,d0
	andi.b	#$3F,d0
	bne.s	return_2774A
	clr.w	objoff_38(a0)
	tst.b	render_flags(a0)
	bpl.s	loc_276EE
	move.w	#$B6,d0
	jsr	(PlaySound).l

loc_276EE:
	tst.w	objoff_36(a0)
	beq.s	loc_2772A
	subi.w	#$800,objoff_34(a0)
	bcc.s	return_2774A
	move.w	#0,objoff_34(a0)
	move.w	#0,objoff_36(a0)
	move.w	#1,objoff_38(a0)
	addq.b	#1,routine_secondary(a0)
	andi.b	#3,routine_secondary(a0)
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.b	d0,mapping_frame(a0)
	move.b	byte_2774C(pc,d0.w),collision_flags(a0)
	rts
; ===========================================================================

loc_2772A:
	addi.w	#$800,objoff_34(a0)
	cmpi.w	#$2000,objoff_34(a0)
	bcs.s	return_2774A
	move.w	#$2000,objoff_34(a0)
	move.w	#1,objoff_36(a0)
	move.w	#1,objoff_38(a0)

return_2774A:
	rts
; ===========================================================================
byte_2774C:
	dc.b $84
	dc.b $A6	; 1
	dc.b $84	; 2
	dc.b $A6	; 3
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj68_Obj6D_MapUnc_27750:	BINCLUDE "mappings/sprite/obj68.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6D - Floor spike from MTZ
; ----------------------------------------------------------------------------
; Sprite_27794:
Obj6D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_277A2(pc,d0.w),d1
	jmp	off_277A2(pc,d1.w)
; ===========================================================================
off_277A2:
	dc.w loc_277A6-off_277A2
	dc.w loc_277E0-off_277A2; 1
; ===========================================================================

loc_277A6:
	addq.b	#2,routine(a0)
	move.l	#Obj68_Obj6D_MapUnc_27750,mappings(a0)
	move.w	#$241C,art_tile(a0)
	bsr.w	JmpTo31_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	#$84,collision_flags(a0)

loc_277E0:
	bsr.w	loc_277FC
	moveq	#0,d0
	move.b	objoff_34(a0),d0
	neg.w	d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	move.w	objoff_30(a0),d0
	bra.w	JmpTo2_MarkObjGone2
; ===========================================================================

loc_277FC:
	tst.w	objoff_3A(a0)
	beq.s	loc_27808
	subq.w	#1,objoff_3A(a0)
	rts
; ===========================================================================

loc_27808:
	tst.w	objoff_38(a0)
	beq.s	loc_27820
	move.b	($FFFFFE05).w,d0
	sub.b	subtype(a0),d0
	andi.b	#$7F,d0
	bne.s	return_27862
	clr.w	objoff_38(a0)

loc_27820:
	tst.w	objoff_36(a0)
	beq.s	loc_27842
	subi.w	#$400,objoff_34(a0)
	bcc.s	return_27862
	move.w	#0,objoff_34(a0)
	move.w	#0,objoff_36(a0)
	move.w	#1,objoff_38(a0)
	rts
; ===========================================================================

loc_27842:
	addi.w	#$400,objoff_34(a0)
	cmpi.w	#$2000,objoff_34(a0)
	bcs.s	return_27862
	move.w	#$2000,objoff_34(a0)
	move.w	#1,objoff_36(a0)
	move.w	#3,objoff_3A(a0)

return_27862:
	rts
; ===========================================================================

JmpTo20_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo12_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo31_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo11_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo2_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 69 - Nut from MTZ
; ----------------------------------------------------------------------------
; Sprite_27884:
Obj69:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_27892(pc,d0.w),d1
	jmp	off_27892(pc,d1.w)
; ===========================================================================
off_27892:
	dc.w loc_2789A-off_27892
	dc.w loc_278DC-off_27892; 1
	dc.w loc_279FC-off_27892; 2
	dc.w loc_278F4-off_27892; 3
; ===========================================================================

loc_2789A:
	addq.b	#2,routine(a0)
	move.l	#Obj69_MapUnc_27A26,mappings(a0)
	move.w	#$2500,art_tile(a0)
	bsr.w	JmpTo32_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#$B,y_radius(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	subtype(a0),d0
	andi.w	#$7F,d0
	lsl.w	#3,d0
	move.w	d0,objoff_36(a0)

loc_278DC:
	lea	(MainCharacter).w,a1 ; a1=character
	lea	objoff_38(a0),a4
	moveq	#3,d6
	bsr.s	loc_27912
	lea	(Sidekick).w,a1 ; a1=character
	lea	objoff_3C(a0),a4
	moveq	#4,d6
	bsr.s	loc_27912

loc_278F4:

	andi.w	#$7FF,y_pos(a0)
	move.w	#$2B,d1
	move.w	#$C,d2
	move.w	#$D,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo12_SolidObject
	bra.w	JmpTo21_MarkObjGone
; ===========================================================================

loc_27912:
	btst	d6,status(a0)
	bne.s	loc_2791A
	clr.b	(a4)

loc_2791A:
	moveq	#0,d0
	move.b	(a4),d0
	move.w	off_27926(pc,d0.w),d0
	jmp	off_27926(pc,d0.w)
; ===========================================================================
off_27926:
	dc.w loc_2792C-off_27926
	dc.w loc_2794C-off_27926; 1
	dc.w loc_2796E-off_27926; 2
; ===========================================================================

loc_2792C:
	btst	d6,status(a0)
	bne.s	loc_27934
	rts
; ===========================================================================

loc_27934:
	addq.b	#2,(a4)
	move.b	#0,1(a4)
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	loc_2794C
	move.b	#1,1(a4)

loc_2794C:

	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	tst.b	1(a4)
	beq.s	loc_2795E
	addi.w	#$F,d0

loc_2795E:
	cmpi.w	#$10,d0
	bcc.s	return_2796C
	move.w	x_pos(a0),x_pos(a1)
	addq.b	#2,(a4)

return_2796C:
	rts
; ===========================================================================

loc_2796E:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	bcc.s	loc_279D4
	add.w	d0,objoff_34(a0)
	move.w	x_pos(a0),x_pos(a1)
	move.w	objoff_34(a0),d0
	asr.w	#3,d0
	move.w	d0,d1
	asr.w	#1,d0
	andi.w	#3,d0
	move.b	d0,mapping_frame(a0)
	neg.w	d1
	add.w	objoff_32(a0),d1
	move.w	d1,y_pos(a0)
	sub.w	objoff_32(a0),d1
	move.w	objoff_36(a0),d0
	cmp.w	d0,d1
	blt.s	return_279D2
	move.w	d0,d1
	add.w	objoff_32(a0),d1
	move.w	d1,y_pos(a0)
	lsl.w	#3,d0
	neg.w	d0
	move.w	d0,objoff_34(a0)
	move.b	#0,mapping_frame(a0)
	tst.b	subtype(a0)
	bmi.s	loc_279CC
	clr.b	(a4)
	rts
; ===========================================================================

loc_279CC:
	move.b	#4,routine(a0)

return_279D2:
	rts
; ===========================================================================

loc_279D4:
	add.w	d0,objoff_34(a0)
	move.w	x_pos(a0),x_pos(a1)
	move.w	objoff_34(a0),d0
	asr.w	#3,d0
	move.w	d0,d1
	asr.w	#1,d0
	andi.w	#3,d0
	move.b	d0,mapping_frame(a0)
	neg.w	d1
	add.w	objoff_32(a0),d1
	move.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_279FC:
	bsr.w	JmpTo13_ObjectMove
	addi.w	#$38,y_vel(a0)
	bsr.w	JmpTo_ObjCheckFloorDist
	tst.w	d1
	bpl.w	BranchTo_loc_278F4
	add.w	d1,y_pos(a0)
	andi.w	#$7FF,y_pos(a0)
	clr.w	y_vel(a0)
	addq.b	#2,routine(a0)

BranchTo_loc_278F4 
	bra.w	loc_278F4
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj69_MapUnc_27A26:	BINCLUDE "mappings/sprite/obj69.bin"
; ===========================================================================
	nop

JmpTo21_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo_ObjCheckFloorDist 
	jmp	ObjCheckFloorDist
; ===========================================================================

JmpTo32_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo12_SolidObject 
	jmp	SolidObject
; ===========================================================================
; loc_27AA8:
JmpTo13_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6A - Platform that moves when you walk off of it, from MTZ
; ----------------------------------------------------------------------------
; Sprite_27AB0:
Obj6A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_27ABE(pc,d0.w),d1
	jmp	off_27ABE(pc,d1.w)
; ===========================================================================
off_27ABE:
	dc.w loc_27AC4-off_27ABE
	dc.w loc_27BDE-off_27ABE; 1
	dc.w loc_27C66-off_27ABE; 2
; ===========================================================================

loc_27AC4:
	addq.b	#2,routine(a0)
	move.l	#Obj65_Obj6A_Obj6B_MapUnc_26EC8,mappings(a0)
	move.w	#$6000,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#$C,y_radius(a0)
	move.l	#byte_27CDC,objoff_2C(a0)
	move.b	#1,mapping_frame(a0)
	cmpi.b	#$B,(Current_Zone).w
	bne.w	loc_27BC4
	addq.b	#2,routine(a0)
	move.l	#Obj6A_MapUnc_27D30,mappings(a0)
	move.w	#$63D4,art_tile(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#$20,y_radius(a0)
	move.l	#byte_27CF4,objoff_2C(a0)
	btst	#0,status(a0)
	beq.s	loc_27B3C
	move.l	#byte_27D12,objoff_2C(a0)

loc_27B3C:
	move.b	#0,mapping_frame(a0)
	cmpi.b	#$18,subtype(a0)
	bne.w	loc_27BD0
	bsr.w	JmpTo13_SingleObjLoad2
	bne.s	BranchTo_loc_27BC4
	bsr.s	loc_27B9E
	addi.w	#$40,x_pos(a1)
	addi.w	#$40,y_pos(a1)
	move.b	#6,subtype(a1)
	btst	#0,status(a0)
	beq.s	loc_27B74
	move.b	#$C,subtype(a1)

loc_27B74:
	bsr.w	JmpTo13_SingleObjLoad2
	bne.s	BranchTo_loc_27BC4
	bsr.s	loc_27B9E
	subi.w	#$40,x_pos(a1)
	addi.w	#$40,y_pos(a1)
	move.b	#$C,subtype(a1)
	btst	#0,status(a0)
	beq.s	BranchTo_loc_27BC4
	move.b	#6,subtype(a1)

BranchTo_loc_27BC4 
	bra.s	loc_27BC4
; ===========================================================================

loc_27B9E:
	_move.b	0(a0),0(a1) ; load obj6A
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	x_pos(a0),objoff_32(a1)
	move.w	y_pos(a0),objoff_30(a1)
	move.b	status(a0),status(a1)
	rts
; ===========================================================================

loc_27BC4:
	move.w	x_pos(a0),objoff_32(a0)
	move.w	y_pos(a0),objoff_30(a0)

loc_27BD0:
	bsr.w	JmpTo33_Adjust2PArtPointer
	move.b	subtype(a0),objoff_38(a0)
	bra.w	loc_27CA2
; ===========================================================================

loc_27BDE:
	move.w	x_pos(a0),-(sp)
	tst.w	objoff_36(a0)
	bne.s	loc_27C2E
	move.b	objoff_3C(a0),d1
	move.b	status(a0),d0
	btst	#3,d0
	bne.s	loc_27C0A
	btst	#3,d1
	beq.s	loc_27C0E
	move.b	#1,objoff_36(a0)
	move.b	#0,objoff_3C(a0)
	bra.s	loc_27C3E
; ===========================================================================

loc_27C0A:
	move.b	d0,objoff_3C(a0)

loc_27C0E:
	btst	#4,d0
	bne.s	loc_27C28
	btst	#4,d1
	beq.s	loc_27C3E
	move.b	#1,objoff_36(a0)
	move.b	#0,objoff_3C(a0)
	bra.s	loc_27C3E
; ===========================================================================

loc_27C28:
	move.b	d0,objoff_3C(a0)
	bra.s	loc_27C3E
; ===========================================================================
loc_27C2E:
	jsr	ObjectMove
	subq.w	#1,objoff_34(a0)
	bne.s	loc_27C3E
	bsr.w	loc_27CA2

loc_27C3E:
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_27C5E
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo13_SolidObject

loc_27C5E:
	move.w	objoff_32(a0),d0
	bra.w	JmpTo3_MarkObjGone2
; ===========================================================================

loc_27C66:
	move.w	x_pos(a0),-(sp)
	jsr	ObjectMove
	subq.w	#1,objoff_34(a0)
	bne.s	loc_27C7A
	bsr.w	loc_27CA2

loc_27C7A:
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_27C9A
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo13_SolidObject

loc_27C9A:
	move.w	objoff_32(a0),d0
	bra.w	JmpTo3_MarkObjGone2
; ===========================================================================

loc_27CA2:
	moveq	#0,d0
	move.b	objoff_38(a0),d0
	movea.l	objoff_2C(a0),a1 ; a1=object
	lea	(a1,d0.w),a1
	move.w	(a1)+,x_vel(a0)
	move.w	(a1)+,y_vel(a0)
	move.w	(a1)+,objoff_34(a0)
	move.w	#7,objoff_3A(a0)
	move.b	#0,objoff_36(a0)
	addq.b	#6,objoff_38(a0)
	cmpi.b	#$18,objoff_38(a0)
	bcs.s	return_27CDA
	move.b	#0,objoff_38(a0)

return_27CDA:
	rts
; ===========================================================================
byte_27CDC:
	dc.b   0,  0,  4,  0,  0,$10,  4,  0,$FE,  0,  0,$20,  0,  0,  4,  0
	dc.b   0,$10,$FC,  0,$FE,  0,  0,$20; 16
byte_27CF4:
	dc.b   0,  0,  1,  0,  0,$40,$FF,  0,  0,  0,  0,$80,  0,  0,$FF,  0
	dc.b   0,$40,  1,  0,  0,  0,  0,$80,  1,  0,  0,  0,  0,$40; 16
byte_27D12:
	dc.b   0,  0,  1,  0,  0,$40,  1,  0,  0,  0,  0,$80,  0,  0,$FF,  0
	dc.b   0,$40,$FF,  0,  0,  0,  0,$80,$FF,  0,  0,  0,  0,$40; 16
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj6A_MapUnc_27D30:	BINCLUDE "mappings/sprite/obj6A.bin"
; ===========================================================================

JmpTo13_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo33_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo13_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo3_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6B - Immobile platform from MTZ
; ----------------------------------------------------------------------------
; Sprite_27D6C:
Obj6B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_27D7A(pc,d0.w),d1
	jmp	off_27D7A(pc,d1.w)
; ===========================================================================
off_27D7A:
	dc.w loc_27D86-off_27D7A
	dc.w loc_27E0E-off_27D7A; 1
byte_27D7E:
	dc.b $20
	dc.b  $C	; 1
	dc.b   1	; 2
	dc.b   0	; 3
	dc.b $10	; 4
	dc.b $10	; 5
	dc.b   0	; 6
	dc.b   0	; 7
; ===========================================================================

loc_27D86:
	addq.b	#2,routine(a0)
	move.l	#Obj65_Obj6A_Obj6B_MapUnc_26EC8,mappings(a0)
	move.w	#$6000,art_tile(a0)
	cmpi.b	#$D,(Current_Zone).w
	bne.s	loc_27DAE
	move.l	#Obj6B_MapUnc_2800E,mappings(a0)
	move.w	#$6418,art_tile(a0)

loc_27DAE:
	bsr.w	JmpTo34_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#2,d0
	andi.w	#$1C,d0
	lea	byte_27D7E(pc,d0.w),a2
	move.b	(a2)+,width_pixels(a0)
	move.b	(a2)+,y_radius(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	move.b	status(a0),objoff_2E(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	subq.w	#8,d0
	bcs.s	loc_27E0E
	lsl.w	#2,d0
	lea	($FFFFFE8A).w,a2
	lea	(a2,d0.w),a2
	tst.w	(a2)
	bpl.s	loc_27E0E
	bchg	#0,objoff_2E(a0)

loc_27E0E:

	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	add.w	d0,d0
	move.w	off_27E4E(pc,d0.w),d1
	jsr	off_27E4E(pc,d1.w)
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_27E46
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo14_SolidObject

loc_27E46:
	move.w	objoff_34(a0),d0
	bra.w	JmpTo4_MarkObjGone2
; ===========================================================================
off_27E4E:
	dc.w return_27E66-off_27E4E
	dc.w loc_27E68-off_27E4E; 1
	dc.w loc_27E74-off_27E4E; 2
	dc.w loc_27E96-off_27E4E; 3
	dc.w loc_27EA2-off_27E4E; 4
	dc.w loc_27EC4-off_27E4E; 5
	dc.w loc_27EE2-off_27E4E; 6
	dc.w loc_27F10-off_27E4E; 7
	dc.w loc_27F4E-off_27E4E; 8
	dc.w loc_27F60-off_27E4E; 9
	dc.w loc_27F70-off_27E4E; 10
	dc.w loc_27F80-off_27E4E; 11
; ===========================================================================

return_27E66:
	rts
; ===========================================================================

loc_27E68:
	move.w	#$40,d1
	moveq	#0,d0
	move.b	($FFFFFE68).w,d0
	bra.s	loc_27E7E
; ===========================================================================

loc_27E74:
	move.w	#$80,d1
	moveq	#0,d0
	move.b	($FFFFFE7C).w,d0

loc_27E7E:
	btst	#0,status(a0)
	beq.s	loc_27E8A
	neg.w	d0
	add.w	d1,d0

loc_27E8A:
	move.w	objoff_34(a0),d1
	sub.w	d0,d1
	move.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_27E96:
	move.w	#$40,d1
	moveq	#0,d0
	move.b	($FFFFFE68).w,d0
	bra.s	loc_27EAC
; ===========================================================================

loc_27EA2:
	move.w	#$80,d1
	moveq	#0,d0
	move.b	($FFFFFE7C).w,d0

loc_27EAC:
	btst	#0,status(a0)
	beq.s	loc_27EB8
	neg.w	d0
	add.w	d1,d0

loc_27EB8:
	move.w	objoff_30(a0),d1
	sub.w	d0,d1
	move.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_27EC4:
	move.b	($FFFFFE60).w,d0
	lsr.w	#1,d0
	add.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)
	move.b	status(a0),d1
	andi.b	#$18,d1
	beq.s	return_27EE0
	addq.b	#1,subtype(a0)

return_27EE0:
	rts
; ===========================================================================

loc_27EE2:
	move.l	y_pos(a0),d3
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d3,y_pos(a0)
	addi.w	#8,y_vel(a0)
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcc.s	return_27F0E
	move.b	#0,subtype(a0)

return_27F0E:
	rts
; ===========================================================================

loc_27F10:
	tst.b	objoff_38(a0)
	bne.s	loc_27F26
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_27F4C
	move.b	#8,objoff_38(a0)

loc_27F26:
	bsr.w	JmpTo14_ObjectMove
	andi.w	#$7FF,y_pos(a0)
	cmpi.w	#$2A8,y_vel(a0)
	bne.s	loc_27F3C
	neg.b	objoff_38(a0)

loc_27F3C:
	move.b	objoff_38(a0),d1
	ext.w	d1
	add.w	d1,y_vel(a0)
	bne.s	return_27F4C
	clr.b	subtype(a0)

return_27F4C:
	rts
; ===========================================================================

loc_27F4E:
	move.w	#$10,d1
	moveq	#0,d0
	move.b	($FFFFFE88).w,d0
	lsr.w	#1,d0
	move.w	($FFFFFE8A).w,d3
	bra.s	loc_27F8E
; ===========================================================================

loc_27F60:
	move.w	#$30,d1
	moveq	#0,d0
	move.b	($FFFFFE8C).w,d0
	move.w	($FFFFFE8E).w,d3
	bra.s	loc_27F8E
; ===========================================================================

loc_27F70:
	move.w	#$50,d1
	moveq	#0,d0
	move.b	($FFFFFE90).w,d0
	move.w	($FFFFFE92).w,d3
	bra.s	loc_27F8E
; ===========================================================================

loc_27F80:
	move.w	#$70,d1
	moveq	#0,d0
	move.b	($FFFFFE94).w,d0
	move.w	($FFFFFE96).w,d3

loc_27F8E:
	tst.w	d3
	bne.s	loc_27F9C
	addq.b	#1,objoff_2E(a0)
	andi.b	#3,objoff_2E(a0)

loc_27F9C:
	move.b	objoff_2E(a0),d2
	andi.b	#3,d2
	bne.s	loc_27FBC
	sub.w	d1,d0
	add.w	objoff_34(a0),d0
	move.w	d0,x_pos(a0)
	neg.w	d1
	add.w	objoff_30(a0),d1
	move.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_27FBC:
	subq.b	#1,d2
	bne.s	loc_27FDA
	subq.w	#1,d1
	sub.w	d1,d0
	neg.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)
	addq.w	#1,d1
	add.w	objoff_34(a0),d1
	move.w	d1,x_pos(a0)
	rts
; ===========================================================================

loc_27FDA:
	subq.b	#1,d2
	bne.s	loc_27FF8
	subq.w	#1,d1
	sub.w	d1,d0
	neg.w	d0
	add.w	objoff_34(a0),d0
	move.w	d0,x_pos(a0)
	addq.w	#1,d1
	add.w	objoff_30(a0),d1
	move.w	d1,y_pos(a0)
	rts
; ===========================================================================

loc_27FF8:
	sub.w	d1,d0
	add.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)
	neg.w	d1
	add.w	objoff_34(a0),d1
	move.w	d1,x_pos(a0)
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj6B_MapUnc_2800E:	BINCLUDE "mappings/sprite/obj6B.bin"
; ===========================================================================
	nop

JmpTo34_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo14_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo4_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; loc_2802E:
JmpTo14_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6C - Small platform, going up and right (unused)
; ----------------------------------------------------------------------------
; Sprite_28034:
Obj6C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2805C(pc,d0.w),d1
	jsr	off_2805C(pc,d1.w)
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	BranchTo_JmpTo34_DeleteObject
	bra.w	JmpTo20_DisplaySprite
; ===========================================================================

BranchTo_JmpTo34_DeleteObject 
	bra.w	JmpTo34_DeleteObject
; ===========================================================================
off_2805C:
	dc.w loc_28060-off_2805C
	dc.w loc_28168-off_2805C; 1
; ===========================================================================

loc_28060:
	move.b	subtype(a0),d0
	bmi.w	loc_28112
	addq.b	#2,routine(a0)
	move.l	#Obj6C_MapUnc_28372,mappings(a0)
	move.w	#$63F9,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	bsr.w	JmpTo35_Adjust2PArtPointer
	move.b	#0,mapping_frame(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.w	d0,d1
	lsr.w	#3,d0
	andi.w	#$1E,d0
	lea	off_28252(pc),a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,objoff_38(a0)
	move.l	a2,objoff_3C(a0)
	andi.w	#$F,d1
	lsl.w	#2,d1
	move.b	d1,objoff_38(a0)
	move.b	#4,objoff_3A(a0)
	btst	#0,status(a0)
	beq.s	loc_280F2
	neg.b	objoff_3A(a0)
	moveq	#0,d1
	move.b	objoff_38(a0),d1
	add.b	objoff_3A(a0),d1
	cmp.b	objoff_39(a0),d1
	bcs.s	loc_280EE
	move.b	d1,d0
	moveq	#0,d1
	tst.b	d0
	bpl.s	loc_280EE
	move.b	objoff_39(a0),d1
	subq.b	#4,d1

loc_280EE:
	move.b	d1,objoff_38(a0)

loc_280F2:
	move.w	(a2,d1.w),d0
	add.w	objoff_30(a0),d0
	move.w	d0,objoff_34(a0)
	move.w	2(a2,d1.w),d0
	add.w	objoff_32(a0),d0
	move.w	d0,objoff_36(a0)
	bsr.w	loc_281DA
	bra.w	loc_28168
; ===========================================================================

loc_28112:
	andi.w	#$7F,d0
	add.w	d0,d0
	lea	(off_282D6).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d1
	movea.l	a0,a1
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	bra.s	loc_28136
; ===========================================================================

loc_28130:
	bsr.w	JmpTo8_SingleObjLoad
	bne.s	loc_28160

loc_28136:
	_move.b	#$6C,0(a1) ; load obj6C
	move.w	(a2)+,d0
	add.w	d2,d0
	move.w	d0,x_pos(a1)
	move.w	(a2)+,d0
	add.w	d3,d0
	move.w	d0,y_pos(a1)
	move.w	d2,objoff_30(a1)
	move.w	d3,objoff_32(a1)
	move.w	(a2)+,d0
	move.b	d0,subtype(a1)
	move.b	status(a0),status(a1)

loc_28160:
	dbf	d1,loc_28130
	addq.l	#4,sp
	rts
; ===========================================================================

loc_28168:

	move.w	x_pos(a0),-(sp)
	bsr.w	loc_2817E
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	moveq	#8,d3
	move.w	(sp)+,d4
	bra.w	JmpTo5_PlatformObject
; ===========================================================================

loc_2817E:
	move.w	x_pos(a0),d0
	cmp.w	objoff_34(a0),d0
	bne.s	loc_281D4
	move.w	y_pos(a0),d0
	cmp.w	objoff_36(a0),d0
	bne.s	loc_281D4
	moveq	#0,d1
	move.b	objoff_38(a0),d1
	add.b	objoff_3A(a0),d1
	cmp.b	objoff_39(a0),d1
	bcs.s	loc_281B0
	move.b	d1,d0
	moveq	#0,d1
	tst.b	d0
	bpl.s	loc_281B0
	move.b	objoff_39(a0),d1
	subq.b	#4,d1

loc_281B0:
	move.b	d1,objoff_38(a0)
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	(a1,d1.w),d0
	add.w	objoff_30(a0),d0
	move.w	d0,objoff_34(a0)
	move.w	2(a1,d1.w),d0
	add.w	objoff_32(a0),d0
	move.w	d0,objoff_36(a0)
	bsr.w	loc_281DA

loc_281D4:
	bsr.w	JmpTo15_ObjectMove
	rts
; ===========================================================================

loc_281DA:
	moveq	#0,d0
	move.w	#-$100,d2
	move.w	x_pos(a0),d0
	sub.w	objoff_34(a0),d0
	bcc.s	loc_281EE
	neg.w	d0
	neg.w	d2

loc_281EE:
	moveq	#0,d1
	move.w	#-$100,d3
	move.w	y_pos(a0),d1
	sub.w	objoff_36(a0),d1
	bcc.s	loc_28202
	neg.w	d1
	neg.w	d3

loc_28202:
	cmp.w	d0,d1
	bcs.s	loc_2822C
	move.w	x_pos(a0),d0
	sub.w	objoff_34(a0),d0
	beq.s	loc_28218
	ext.l	d0
	asl.l	#8,d0
	divs.w	d1,d0
	neg.w	d0

loc_28218:
	move.w	d0,x_vel(a0)
	move.w	d3,y_vel(a0)
	swap	d0
	move.w	d0,objoff_A(a0)
	clr.w	objoff_E(a0)
	rts
; ===========================================================================

loc_2822C:
	move.w	y_pos(a0),d1
	sub.w	objoff_36(a0),d1
	beq.s	loc_2823E
	ext.l	d1
	asl.l	#8,d1
	divs.w	d0,d1
	neg.w	d1

loc_2823E:
	move.w	d1,y_vel(a0)
	move.w	d2,x_vel(a0)
	swap	d1
	move.w	d1,objoff_E(a0)
	clr.w	objoff_A(a0)
	rts
; ===========================================================================
off_28252:
	dc.w byte_28258-off_28252
	dc.w byte_28282-off_28252; 1
	dc.w byte_282AC-off_28252; 2
byte_28258:
	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0
	dc.b   0,$E0,$FF,$EA,  0,$F6,  0,  0,  1,  0,  0,$16,  0,$F6,  0,$20; 16
	dc.b   0,$E0,  0,$20,  0,$20,  0,$16,  0, $A; 32
byte_28282:
	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0
	dc.b   1,$60,$FF,$EA,  1,$76,  0,  0,  1,$80,  0,$16,  1,$76,  0,$20; 16
	dc.b   1,$60,  0,$20,  0,$20,  0,$16,  0, $A; 32
byte_282AC:
	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0
	dc.b   1,$E0,$FF,$EA,  1,$F6,  0,  0,  2,  0,  0,$16,  1,$F6,  0,$20; 16
	dc.b   1,$E0,  0,$20,  0,$20,  0,$16,  0, $A; 32
off_282D6:
	dc.w byte_282DC-off_282D6
	dc.w byte_2830E-off_282D6; 1
	dc.w byte_28340-off_282D6; 2
byte_282DC:
	dc.b   0,  7,  0,  0,  0,  0,  0,  1,$FF,$E0,  0,$3A,  0,  3,$FF,$E0
	dc.b   0,$80,  0,  3,$FF,$E0,  0,$C6,  0,  3,  0,  0,  1,  0,  0,  6; 16
	dc.b   0,$20,  0,$C6,  0,  8,  0,$20,  0,$80,  0,  8,  0,$20,  0,$3A; 32
	dc.b   0,  8	; 48
byte_2830E:
	dc.b   0,  7,  0,  0,  0,  0,  0,$11,$FF,$E0,  0,$5A,  0,$13,$FF,$E0
	dc.b   0,$C0,  0,$13,$FF,$E0,  1,$26,  0,$13,  0,  0,  1,$80,  0,$16; 16
	dc.b   0,$20,  1,$26,  0,$18,  0,$20,  0,$C0,  0,$18,  0,$20,  0,$5A; 32
	dc.b   0,$18	; 48
byte_28340:
	dc.b   0,  7,  0,  0,  0,  0,  0,$21,$FF,$E0,  0,$7A,  0,$23,$FF,$E0
	dc.b   1,  0,  0,$23,$FF,$E0,  1,$86,  0,$23,  0,  0,  2,  0,  0,$26; 16
	dc.b   0,$20,  1,$86,  0,$28,  0,$20,  1,  0,  0,$28,  0,$20,  0,$7A; 32
	dc.b   0,$28	; 48
; ----------------------------------------------------------------------------
; Unused sprite mappings
; ----------------------------------------------------------------------------
Obj6C_MapUnc_28372:	BINCLUDE "mappings/sprite/obj6C.bin"
; ===========================================================================
	nop

JmpTo20_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo34_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo8_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo35_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo5_PlatformObject 
	jmp	PlatformObject
; ===========================================================================
; loc_283A6:
JmpTo15_ObjectMove 
	jmp	ObjectMove

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6E - Small platform, moving in a circle (unused)
; ----------------------------------------------------------------------------
; Sprite_283AC:
Obj6E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_283BA(pc,d0.w),d1
	jmp	off_283BA(pc,d1.w)
; ===========================================================================
off_283BA:
	dc.w loc_283C8-off_283BA
	dc.w loc_28432-off_283BA; 1
	dc.w loc_284BC-off_283BA; 2
byte_283C0:
	dc.b $10, $C
	dc.b $28,  8	; 2
	dc.b $60,$18	; 4
	dc.b  $C, $C	; 6
; ===========================================================================

loc_283C8:
	addq.b	#2,routine(a0)
	move.l	#Obj6E_MapUnc_2852C,mappings(a0)
	move.w	#$6000,art_tile(a0)
	bsr.w	JmpTo36_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$E,d0
	lea	byte_283C0(pc,d0.w),a3
	move.b	(a3)+,width_pixels(a0)
	move.b	(a3)+,y_radius(a0)
	lsr.w	#1,d0
	move.b	d0,mapping_frame(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	cmpi.b	#3,d0
	bne.s	loc_28432
	addq.b	#2,routine(a0)
	move.w	#$63F0,art_tile(a0)
	bsr.w	JmpTo36_Adjust2PArtPointer
	move.b	#5,priority(a0)
	bra.w	loc_284BC
; ===========================================================================

loc_28432:

	move.w	x_pos(a0),-(sp)
	move.b	($FFFFFE80).w,d1
	subi.b	#$38,d1
	ext.w	d1
	move.b	($FFFFFE84).w,d2
	subi.b	#$38,d2
	ext.w	d2
	btst	#0,subtype(a0)
	beq.s	loc_28456
	neg.w	d1
	neg.w	d2

loc_28456:
	btst	#1,subtype(a0)
	beq.s	loc_28462
	neg.w	d1
	exg	d1,d2

loc_28462:
	add.w	objoff_34(a0),d1
	move.w	d1,x_pos(a0)
	add.w	objoff_30(a0),d2
	move.w	d2,y_pos(a0)
	move.w	(sp)+,d4
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo15_SolidObject
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_284A4
	jmp	DisplaySprite
; ===========================================================================

loc_284A4:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo35_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo35_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_284BC:

	move.b	($FFFFFE80).w,d1
	lsr.b	#1,d1
	subi.b	#$1C,d1
	ext.w	d1
	move.b	($FFFFFE84).w,d2
	lsr.b	#1,d2
	subi.b	#$1C,d2
	ext.w	d2
	btst	#0,subtype(a0)
	beq.s	loc_284E0
	neg.w	d1
	neg.w	d2

loc_284E0:
	btst	#1,subtype(a0)
	beq.s	loc_284EC
	neg.w	d1
	exg	d1,d2

loc_284EC:
	add.w	objoff_34(a0),d1
	move.w	d1,x_pos(a0)
	add.w	objoff_30(a0),d2
	move.w	d2,y_pos(a0)
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_28514
	jmp	DisplaySprite
; ===========================================================================

loc_28514:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo36_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo36_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unused sprite mappings
; ----------------------------------------------------------------------------
Obj6E_MapUnc_2852C:	BINCLUDE "mappings/sprite/obj6E.bin"
; ===========================================================================

JmpTo36_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo15_SolidObject 
	jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 70 - Giant rotating cog from MTZ
; ----------------------------------------------------------------------------
; Sprite_285C0:
Obj70:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_285CE(pc,d0.w),d1
	jmp	off_285CE(pc,d1.w)
; ===========================================================================
off_285CE:
	dc.w loc_285D2-off_285CE
	dc.w loc_28652-off_285CE; 1
; ===========================================================================

loc_285D2:
	moveq	#7,d1
	moveq	#0,d4
	lea	(byte_28726).l,a2
	movea.l	a0,a1
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	bset	#7,status(a0)
	bra.s	loc_285F4
; ===========================================================================

loc_285EE:
	bsr.w	JmpTo14_SingleObjLoad2
	bne.s	loc_2864E

loc_285F4:
	_move.b	0(a0),0(a1) ; load obj70
	addq.b	#2,routine(a1)
	move.l	#Obj70_MapUnc_28786,mappings(a1)
	move.w	#$6378,art_tile(a1)
	bsr.w	JmpTo4_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.w	d2,objoff_32(a1)
	move.w	d3,objoff_30(a1)
	move.b	(a2)+,d0
	ext.w	d0
	add.w	d2,d0
	move.w	d0,x_pos(a1)
	move.b	(a2)+,d0
	ext.w	d0
	add.w	d3,d0
	move.w	d0,y_pos(a1)
	move.b	(a2)+,mapping_frame(a1)
	move.w	d4,objoff_34(a1)
	addq.w	#3,d4
	move.b	status(a0),status(a1)

loc_2864E:
	dbf	d1,loc_285EE

loc_28652:
	move.w	x_pos(a0),-(sp)
	move.b	($FFFFFE05).w,d0
	move.b	d0,d1
	andi.w	#$F,d0
	bne.s	loc_286CA
	move.w	objoff_36(a0),d1
	btst	#0,status(a0)
	beq.s	loc_28684
	subi.w	#$18,d1
	bcc.s	loc_286A2
	moveq	#$48,d1
	subq.w	#3,objoff_34(a0)
	bcc.s	loc_286A2
	move.w	#$15,objoff_34(a0)
	bra.s	loc_286A2
; ===========================================================================

loc_28684:
	addi.w	#$18,d1
	cmpi.w	#$60,d1
	bcs.s	loc_286A2
	moveq	#0,d1
	addq.w	#3,objoff_34(a0)
	cmpi.w	#$18,objoff_34(a0)
	bcs.s	loc_286A2
	move.w	#0,objoff_34(a0)

loc_286A2:
	move.w	d1,objoff_36(a0)
	add.w	objoff_34(a0),d1
	lea	byte_28726(pc,d1.w),a1
	move.b	(a1)+,d0
	ext.w	d0
	add.w	objoff_32(a0),d0
	move.w	d0,x_pos(a0)
	move.b	(a1)+,d0
	ext.w	d0
	add.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)
	move.b	(a1)+,mapping_frame(a0)

loc_286CA:
	move.b	mapping_frame(a0),d0
	add.w	d0,d0
	andi.w	#$1E,d0
	moveq	#0,d1
	moveq	#0,d2
	move.b	byte_28706(pc,d0.w),d1
	move.b	byte_28706+1(pc,d0.w),d2
	move.w	d2,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo16_SolidObject
	move.w	objoff_32(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	JmpTo37_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo37_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
byte_28706:
	dc.b $10,$10	; 0
	dc.b $10,$10	; 2
	dc.b $10,$10	; 4
	dc.b $10,$10	; 6
	dc.b $10,$10	; 8
	dc.b $10,$10	; 10
	dc.b $10,$10	; 12
	dc.b $10, $C	; 14
	dc.b $10,  8	; 16
	dc.b $10, $C	; 18
	dc.b $10,$10	; 20
	dc.b $10,$10	; 22
	dc.b $10,$10	; 24
	dc.b $10,$10	; 26
	dc.b $10,$10	; 28
	dc.b $10,$10	; 30
byte_28726:
	dc.b   0,$B8,  0,$32,$CE,  4,$48,  0,  8,$32,$32, $C,  0,$48,$10,$CE; 16
	dc.b $32,$14,$B8,  0,$18,$CE,$CE,$1C, $D,$B8,  1,$3F,$DA,  5,$48, $C; 32
	dc.b   9,$27,$3C, $D,$F3,$48,$11,$C1,$26,$15,$B8,$F4,$19,$D9,$C4,$1D; 48
	dc.b $19,$BC,  2,$46,$E9,  6,$46,$17, $A,$19,$44, $E,$E7,$44,$12,$BA; 64
	dc.b $17,$16,$BA,$E9,$1A,$E7,$BC,$1E,$27,$C4,  3,$48,$F4,  7,$3F,$26; 80
	dc.b  $B, $D,$48, $F,$D9,$3C,$13,$B8, $C,$17,$C1,$DA,$1B,$F3,$B8,$1F; 96
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj70_MapUnc_28786:	BINCLUDE "mappings/sprite/obj70.bin"
; ===========================================================================
	nop

JmpTo14_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo4_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo16_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 72 - Conveyor belt from CNZ
; ----------------------------------------------------------------------------
; Sprite_2893C:
Obj72:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2894A(pc,d0.w),d1
	jmp	off_2894A(pc,d1.w)
; ===========================================================================
off_2894A:
	dc.w loc_2894E-off_2894A
	dc.w loc_28980-off_2894A; 1
; ===========================================================================

loc_2894E:
	addq.b	#2,routine(a0)
	move.w	#$30,objoff_3C(a0)
	move.b	subtype(a0),d0
	bpl.s	loc_28964
	move.w	#$70,objoff_3C(a0)

loc_28964:
	andi.b	#$7F,d0
	lsl.b	#4,d0
	move.b	d0,objoff_38(a0)
	move.w	#2,objoff_36(a0)
	btst	#0,status(a0)
	beq.s	loc_28980
	neg.w	objoff_36(a0)

loc_28980:

	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_28990
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_28990
	bra.w	JmpTo5_MarkObjGone3
; ===========================================================================

loc_28990:
	moveq	#0,d2
	move.b	objoff_38(a0),d2
	move.w	d2,d3
	add.w	d3,d3
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	add.w	d2,d0
	cmp.w	d3,d0
	bcc.s	return_289CA
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	move.w	objoff_3C(a0),d0
	add.w	d0,d1
	cmp.w	d0,d1
	bcc.s	return_289CA
	btst	#1,status(a1)
	bne.s	return_289CA
	move.w	objoff_36(a0),d0
	add.w	d0,x_pos(a1)

return_289CA:
	rts
; ===========================================================================

JmpTo5_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================
	align 4
	
	
	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 73 - Solid rotating ring thing from Mystic Cave Zone
; (unused, but can be seen in debug mode)
; ----------------------------------------------------------------------------
; Sprite_289D4:
Obj73:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_289E2(pc,d0.w),d1
	jmp	off_289E2(pc,d1.w)
; ===========================================================================
off_289E2:
	dc.w loc_289E8-off_289E2
	dc.w loc_28AD6-off_289E2; 1
	dc.w loc_28B7E-off_289E2; 2
; ===========================================================================

loc_289E8:
	addq.b	#2,routine(a0)
	move.l	#Obj73_MapUnc_28B9C,mappings(a0)
	move.w	#$26BC,art_tile(a0)
	bsr.w	JmpTo37_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#8,width_pixels(a0)
	move.w	x_pos(a0),objoff_3A(a0)
	move.w	y_pos(a0),objoff_38(a0)
	move.b	#0,collision_flags(a0)
	bset	#7,status(a0)
	move.b	subtype(a0),d1
	andi.b	#$F0,d1
	ext.w	d1
	asl.w	#3,d1
	move.w	d1,objoff_3E(a0)
	move.b	status(a0),d0
	ror.b	#2,d0
	andi.b	#$C0,d0
	move.b	d0,angle(a0)
	lea	objoff_29(a0),a2
	move.b	subtype(a0),d1
	andi.w	#7,d1
	move.b	#0,(a2)+
	move.w	d1,d3
	lsl.w	#4,d3
	move.b	d3,objoff_3C(a0)
	subq.w	#1,d1
	bcs.s	loc_28AC8
	btst	#3,subtype(a0)
	beq.s	loc_28A6E
	subq.w	#1,d1
	bcs.s	loc_28AC8

loc_28A6E:
	bsr.w	JmpTo9_SingleObjLoad
	bne.s	loc_28AC8
	addq.b	#1,objoff_29(a0)
	move.w	a1,d5
	subi.w	#Object_RAM,d5
	lsr.w	#6,d5
	andi.w	#$7F,d5
	move.b	d5,(a2)+
	move.b	#4,routine(a1)
	_move.b	0(a0),0(a1) ; load obj73
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	priority(a0),priority(a1)
	move.b	width_pixels(a0),width_pixels(a1)
	move.b	collision_flags(a0),collision_flags(a1)
	move.b	status(a0),status(a1)
	subi.b	#$10,d3
	move.b	d3,objoff_3C(a1)
	dbf	d1,loc_28A6E

loc_28AC8:
	move.w	a0,d5
	subi.w	#Object_RAM,d5
	lsr.w	#6,d5
	andi.w	#$7F,d5
	move.b	d5,(a2)+

loc_28AD6:
	move.w	x_pos(a0),-(sp)
	bsr.w	loc_28AF4
	move.w	#8,d1
	move.w	#8,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo17_SolidObject
	bra.w	loc_28B46
; ===========================================================================

loc_28AF4:
	move.w	objoff_3E(a0),d0
	add.w	d0,angle(a0)
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	move.w	objoff_38(a0),d2
	move.w	objoff_3A(a0),d3
	lea	objoff_29(a0),a2
	moveq	#0,d6
	move.b	(a2)+,d6

loc_28B16:
	moveq	#0,d4
	move.b	(a2)+,d4
	lsl.w	#6,d4
	addi.l	#Object_RAM,d4
	movea.l	d4,a1 ; a1=object
	moveq	#0,d4
	move.b	objoff_3C(a1),d4
	move.l	d4,d5
	muls.w	d0,d4
	asr.l	#8,d4
	muls.w	d1,d5
	asr.l	#8,d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d4,y_pos(a1)
	move.w	d5,x_pos(a1)
	dbf	d6,loc_28B16
	rts
; ===========================================================================

loc_28B46:
	move.w	objoff_3A(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	loc_28B5E
	bra.w	JmpTo21_DisplaySprite
; ===========================================================================

loc_28B5E:
	moveq	#0,d2
	lea	objoff_29(a0),a2
	move.b	(a2)+,d2

loc_28B66:
	moveq	#0,d0
	move.b	(a2)+,d0
	lsl.w	#6,d0
	addi.l	#Object_RAM,d0
	movea.l	d0,a1	; a1=object
	bsr.w	JmpTo_DeleteObject2
	dbf	d2,loc_28B66
	rts
; ===========================================================================

loc_28B7E:
	move.w	#8,d1
	move.w	#8,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	objoff_36(a0),d4
	bsr.w	JmpTo17_SolidObject
	move.w	x_pos(a0),objoff_36(a0)
	bra.w	JmpTo21_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj73_MapUnc_28B9C:	BINCLUDE "mappings/sprite/obj73.bin"
; ===========================================================================

JmpTo21_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo9_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo37_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo17_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 75 - Brick from MCZ
; ----------------------------------------------------------------------------
; Sprite_28BC8:
Obj75:
	btst	#6,render_flags(a0)
	bne.w	loc_28BE0
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_28BE8(pc,d0.w),d1
	jmp	off_28BE8(pc,d1.w)
; ===========================================================================

loc_28BE0:
	move.w	#$280,d0
	bra.w	JmpTo_DisplaySprite3
; ===========================================================================
off_28BE8:
	dc.w loc_28BEE-off_28BE8
	dc.w loc_28CCA-off_28BE8; 1
	dc.w loc_28D6C-off_28BE8; 2
; ===========================================================================

loc_28BEE:
	addq.b	#2,routine(a0)
	move.l	#Obj75_MapUnc_28D8A,mappings(a0)
	move.w	#$2000,art_tile(a0)
	bsr.w	JmpTo38_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#5,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	subtype(a0),d1
	move.b	d1,d0
	andi.w	#$F,d1
	andi.b	#$F0,d0
	ext.w	d0
	asl.w	#3,d0
	move.w	d0,objoff_34(a0)
	move.b	status(a0),d0
	ror.b	#2,d0
	andi.b	#$C0,d0
	move.b	d0,angle(a0)
	cmpi.b	#$F,d1
	bne.s	loc_28C5E
	addq.b	#2,routine(a0)
	move.b	#4,priority(a0)
	move.b	#2,mapping_frame(a0)
	rts
; ===========================================================================

loc_28C5E:
	move.b	#$9A,collision_flags(a0)
	bsr.w	JmpTo15_SingleObjLoad2
	bne.s	loc_28CCA
	_move.b	0(a0),0(a1) ; load obj75
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#$40,objoff_E(a1)
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	move.b	d1,objoff_F(a1)
	subq.w	#1,d1
	lea	$10(a1),a2

loc_28CA0:
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#1,(a2)+
	dbf	d1,loc_28CA0
	move.w	d2,x_pos(a1)
	move.w	d3,y_pos(a1)
	move.b	#0,objoff_B(a1)
	move.l	a1,objoff_3C(a0)
	move.b	#$40,objoff_14(a1)
	bset	#4,render_flags(a1)

loc_28CCA:

	moveq	#0,d0
	moveq	#0,d1
	move.w	objoff_34(a0),d0
	add.w	d0,angle(a0)
	move.b	angle(a0),d0
	bsr.w	JmpTo8_CalcSine
	move.w	objoff_32(a0),d2
	move.w	objoff_30(a0),d3
	moveq	#0,d6
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.b	objoff_F(a1),d6
	subq.w	#1,d6
	bcs.s	loc_28D3E
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	moveq	#0,d4
	moveq	#0,d5
	lea	$10(a1),a2

loc_28D04:
	movem.l	d4-d5,-(sp)
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,(a2)+
	move.w	d4,(a2)+
	movem.l	(sp)+,d4-d5
	add.l	d0,d4
	add.l	d1,d5
	addq.w	#2,a2
	dbf	d6,loc_28D04
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,x_pos(a0)
	move.w	d4,y_pos(a0)
	move.w	objoff_28(a1),x_pos(a1)
	move.w	objoff_2A(a1),y_pos(a1)

loc_28D3E:
	tst.w	(Two_player_mode).w
	beq.s	loc_28D48
	bra.w	JmpTo22_DisplaySprite
; ===========================================================================

loc_28D48:
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	loc_28D60
	bra.w	JmpTo22_DisplaySprite
; ===========================================================================

loc_28D60:
	movea.l	objoff_3C(a0),a1 ; a1=object
	bsr.w	JmpTo2_DeleteObject2
	bra.w	JmpTo38_DeleteObject
; ===========================================================================

loc_28D6C:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo18_SolidObject
	bra.w	JmpTo22_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj75_MapUnc_28D8A:	BINCLUDE "mappings/sprite/obj75.bin"
; ===========================================================================
	nop

JmpTo_DisplaySprite3 
	jmp	DisplaySprite3
; ===========================================================================

JmpTo22_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo38_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo22_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo2_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo15_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo38_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo8_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo18_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 76 - Spike block that slides out of the wall from MCZ
; ----------------------------------------------------------------------------
; Sprite_28DF8:
Obj76:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_28E06(pc,d0.w),d1
	jmp	off_28E06(pc,d1.w)
; ===========================================================================
off_28E06:
	dc.w loc_28E0E-off_28E06
	dc.w loc_28E5E-off_28E06; 1
byte_28E0A:
	dc.b $40
	dc.b $10	; 1
	dc.b   0	; 2
	dc.b   0	; 3
; ===========================================================================

loc_28E0E:
	addq.b	#2,routine(a0)
	move.l	#Obj76_MapUnc_28F3A,mappings(a0)
	move.w	#0,art_tile(a0)
	bsr.w	JmpTo39_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#2,d0
	andi.w	#$1C,d0
	lea	byte_28E0A(pc,d0.w),a2
	move.b	(a2)+,width_pixels(a0)
	move.b	(a2)+,y_radius(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	andi.w	#$F,subtype(a0)

loc_28E5E:
	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.w	off_28ECA(pc,d0.w),d1
	jsr	off_28ECA(pc,d1.w)
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_28EC2
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo19_SolidObject
	swap	d6
	andi.w	#3,d6
	beq.s	loc_28EC2
	move.b	d6,d0
	andi.b	#1,d0
	beq.s	loc_28EAE
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.w	JmpTo_Touch_ChkHurt2
	bclr	#5,status(a0)

loc_28EAE:
	andi.b	#2,d6
	beq.s	loc_28EC2
	lea	(Sidekick).w,a1 ; a1=character
	bsr.w	JmpTo_Touch_ChkHurt2
	bclr	#6,status(a0)

loc_28EC2:
	move.w	objoff_34(a0),d0
	bra.w	JmpTo5_MarkObjGone2
; ===========================================================================
off_28ECA:
	dc.w loc_28ECE-off_28ECA
	dc.w loc_28F1E-off_28ECA; 1
; ===========================================================================

loc_28ECE:
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_28ED8
	lea	(Sidekick).w,a1 ; a1=character

loc_28ED8:
	btst	#1,status(a1)
	bne.s	return_28F1C
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$C0,d0
	btst	#0,status(a0)
	beq.s	loc_28EF8
	subi.w	#$100,d0

loc_28EF8:
	cmpi.w	#$80,d0
	bcc.s	return_28F1C
	move.w	y_pos(a1),d0
	sub.w	y_pos(a0),d0
	addi.w	#$10,d0
	cmpi.w	#$20,d0
	bcc.s	return_28F1C
	move.b	#2,subtype(a0)
	move.w	#$80,objoff_36(a0)

return_28F1C:
	rts
; ===========================================================================

loc_28F1E:
	tst.w	objoff_36(a0)
	beq.s	return_28F38
	subq.w	#1,objoff_36(a0)
	moveq	#-1,d0
	btst	#0,status(a0)
	beq.s	loc_28F34
	neg.w	d0

loc_28F34:
	add.w	d0,x_pos(a0)

return_28F38:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj76_MapUnc_28F3A:	BINCLUDE "mappings/sprite/obj76.bin"
; ===========================================================================
	nop

JmpTo_Touch_ChkHurt2 
	jmp	Touch_ChkHurt2
; ===========================================================================

JmpTo39_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo19_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo5_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 77 - Bridge from MCZ
; ----------------------------------------------------------------------------
; Sprite_28F88:
Obj77:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_28F96(pc,d0.w),d1
	jmp	off_28F96(pc,d1.w)
; ===========================================================================
off_28F96:
	dc.w loc_28F9A-off_28F96
	dc.w loc_28FBC-off_28F96; 1
; ===========================================================================

loc_28F9A:
	addq.b	#2,routine(a0)
	move.l	#Obj77_MapUnc_29064,mappings(a0)
	move.w	#$643C,art_tile(a0)
	bsr.w	JmpTo40_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$80,width_pixels(a0)

loc_28FBC:
	tst.b	objoff_34(a0)
	bne.s	loc_28FF0
	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	subtype(a0),d0
	btst	#0,(a2,d0.w)
	beq.s	loc_28FF0
	move.b	#1,objoff_34(a0)
	bchg	#0,anim(a0)
	tst.b	render_flags(a0)
	bpl.s	loc_28FF0
	move.w	#$BB,d0
	jsr	(PlaySound).l

loc_28FF0:
	lea	(off_29050).l,a1
	jsr	AnimateSprite
	tst.b	mapping_frame(a0)
	bne.s	loc_2901A
	move.w	#$4B,d1
	move.w	#8,d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo20_SolidObject
	bra.w	JmpTo23_MarkObjGone
; ===========================================================================

loc_2901A:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	BranchTo_JmpTo23_MarkObjGone
	move.b	d0,d1
	andi.b	#8,d0
	beq.s	loc_29036
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#3,status(a1)

loc_29036:
	andi.b	#$10,d1
	beq.s	loc_29046
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#3,status(a1)

loc_29046:
	andi.b	#-$19,status(a0)

BranchTo_JmpTo23_MarkObjGone 
	bra.w	JmpTo23_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; animation script
; ----------------------------------------------------------------------------
off_29050:
	dc.w byte_29054-off_29050
	dc.w byte_2905C-off_29050
byte_29054:
	dc.b   3,  4,  3,  2,  1,  0,$FE,  1
byte_2905C:
	dc.b   3,  0,  1,  2,  3,  4,$FE,  1
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj77_MapUnc_29064:	BINCLUDE "mappings/sprite/obj77.bin"
; ===========================================================================

JmpTo23_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo40_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo20_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 78 - Stairs from CPZ that move down to open the way
; ----------------------------------------------------------------------------
; Sprite_291CC:
Obj78:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_291E2(pc,d0.w),d1
	jsr	off_291E2(pc,d1.w)
	move.w	objoff_30(a0),d0
	bra.w	JmpTo6_MarkObjGone2
; ===========================================================================
off_291E2:
	dc.w loc_291E8-off_291E2
	dc.w PortC_Ok6C-off_291E2; 1
	dc.w PortC_Ok80-off_291E2; 2
; ===========================================================================

loc_291E8:
	addq.b	#2,routine(a0)
	moveq	#$34,d3
	moveq	#2,d4
	btst	#0,status(a0)
	beq.s	loc_291FC
	moveq	#$3A,d3
	moveq	#-2,d4

loc_291FC:
	move.w	x_pos(a0),d2
	movea.l	a0,a1
	moveq	#3,d1
	bra.s	PortC_Ok14
; ===========================================================================

PortC_Ok06:
	bsr.w	JmpTo16_SingleObjLoad2
	bne.w	PortC_Ok6C
	move.b	#4,routine(a1)

PortC_Ok14:
	_move.b	0(a0),0(a1) ; load obj78
	move.l	#Obj6B_MapUnc_2800E,mappings(a1)
	move.w	#$6418,art_tile(a1)
	bsr.w	JmpTo5_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.b	subtype(a0),subtype(a1)
	move.w	d2,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	x_pos(a0),objoff_30(a1)
	move.w	y_pos(a1),objoff_32(a1)
	addi.w	#$20,d2
	move.b	d3,objoff_2F(a1)
	move.l	a0,objoff_3C(a1)
	add.b	d4,d3
	dbf	d1,PortC_Ok06

PortC_Ok6C:

	moveq	#0,d0
	move.b	subtype(a0),d0
	andi.w	#7,d0
	add.w	d0,d0
	move.w	off_292B8(pc,d0.w),d1
	jsr	off_292B8(pc,d1.w)

PortC_Ok80:
	movea.l	objoff_3C(a0),a2 ; a2=object
	moveq	#0,d0
	move.b	objoff_2F(a0),d0
	move.w	(a2,d0.w),d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo21_SolidObject
	swap	d6
	or.b	d6,objoff_2E(a2)
	rts
; ===========================================================================
off_292B8:
	dc.w PortC_OkC8-off_292B8
	dc.w loc_29334-off_292B8; 1
	dc.w PortC_OkEC-off_292B8; 2
	dc.w loc_29334-off_292B8; 3
	dc.w PortC_OkC8-off_292B8; 4
	dc.w loc_2935E-off_292B8; 5
	dc.w PortC_OkEC-off_292B8; 6
	dc.w loc_2935E-off_292B8; 7
; ===========================================================================

PortC_OkC8:
	tst.w	objoff_2C(a0)
	bne.s	PortC_OkE0
	move.b	objoff_2E(a0),d0
	andi.b	#$30,d0
	beq.s	return_292DE
	move.w	#$1E,objoff_2C(a0)

return_292DE:
	rts
; ===========================================================================

PortC_OkE0:
	subq.w	#1,objoff_2C(a0)
	bne.s	return_292DE
	addq.b	#1,subtype(a0)
	rts
; ===========================================================================

PortC_OkEC:
	tst.w	objoff_2C(a0)
	bne.s	loc_29304
	move.b	objoff_2E(a0),d0
	andi.b	#$C,d0
	beq.s	return_29302
	move.w	#$3C,objoff_2C(a0)

return_29302:
	rts
; ===========================================================================

loc_29304:
	subq.w	#1,objoff_2C(a0)
	bne.s	loc_29310
	addq.b	#1,subtype(a0)
	rts
; ===========================================================================

loc_29310:
	lea	objoff_34(a0),a1 ; a1=object
	move.w	objoff_2C(a0),d0
	lsr.b	#2,d0
	andi.b	#1,d0
	move.w	d0,(a1)+
	eori.b	#1,d0
	move.w	d0,(a1)+
	eori.b	#1,d0
	move.w	d0,(a1)+
	eori.b	#1,d0
	move.w	d0,(a1)+
	rts
; ===========================================================================

loc_29334:
	lea	objoff_34(a0),a1 ; a1=object
	cmpi.w	#$80,(a1)
	beq.s	return_2935C
	addq.w	#1,(a1)
	moveq	#0,d1
	move.w	(a1)+,d1
	swap	d1
	lsr.l	#1,d1
	move.l	d1,d2
	lsr.l	#1,d1
	move.l	d1,d3
	add.l	d2,d3
	swap	d1
	swap	d2
	swap	d3
	move.w	d3,(a1)+
	move.w	d2,(a1)+
	move.w	d1,(a1)+

return_2935C:
	rts
; ===========================================================================

loc_2935E:
	lea	objoff_34(a0),a1 ; a1=object
	cmpi.w	#-$80,(a1)
	beq.s	return_29386
	subq.w	#1,(a1)
	moveq	#0,d1
	move.w	(a1)+,d1
	swap	d1
	asr.l	#1,d1
	move.l	d1,d2
	asr.l	#1,d1
	move.l	d1,d3
	add.l	d2,d3
	swap	d1
	swap	d2
	swap	d3
	move.w	d3,(a1)+
	move.w	d2,(a1)+
	move.w	d1,(a1)+

return_29386:
	rts
; ===========================================================================

JmpTo16_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo5_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo21_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo6_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7A - Platform that moves back and fourth on top of water in CPZ
; ----------------------------------------------------------------------------
; Sprite_293A0:
Obj7A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_293AE(pc,d0.w),d1
	jmp	off_293AE(pc,d1.w)
; ===========================================================================
off_293AE:
	dc.w loc_293CC-off_293AE
	dc.w loc_2948E-off_293AE; 1
	dc.w loc_294EA-off_293AE; 2
byte_293B4:
	dc.b   0
	dc.b $68	; 1
	dc.b $FF	; 2
	dc.b $98	; 3
	dc.b   0	; 4
	dc.b   0	; 5
	dc.b   1	; 6
	dc.b $A8	; 7
	dc.b $FF	; 8
	dc.b $50	; 9
	dc.b   0	; 10
	dc.b $40	; 11
	dc.b   1	; 12
	dc.b $E8	; 13
	dc.b $FF	; 14
	dc.b $80	; 15
	dc.b   0	; 16
	dc.b $80	; 17
	dc.b   0	; 18
	dc.b $68	; 19
	dc.b   0	; 20
	dc.b $67	; 21
	dc.b   0	; 22
	dc.b   0	; 23
; ===========================================================================

loc_293CC:
	addq.b	#2,routine(a0)
	move.l	#Obj7A_MapUnc_29564,mappings(a0)
	move.w	#$E418,art_tile(a0)
	cmpi.b	#$B,(Current_Zone).w
	bne.s	loc_293F4
	move.l	#Obj15_Obj7A_MapUnc_10256,mappings(a0)
	move.w	#0,art_tile(a0)

loc_293F4:
	bsr.w	JmpTo41_Adjust2PArtPointer
	moveq	#0,d1
	move.b	subtype(a0),d1
	lea	byte_293B4(pc,d1.w),a2
	move.b	(a2)+,d1
	movea.l	a0,a1
	bra.s	loc_29426
; ===========================================================================

loc_29408:
	bsr.w	JmpTo17_SingleObjLoad2
	bne.s	loc_2944A
	_move.b	0(a0),0(a1) ; load obj7A
	move.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

loc_29426:
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#$18,width_pixels(a1)
	move.w	x_pos(a1),objoff_30(a1)

loc_2944A:
	dbf	d1,loc_29408
	move.l	a0,objoff_3C(a1)
	move.l	a1,objoff_3C(a0)
	cmpi.b	#$C,subtype(a0)
	bne.s	loc_29464
	move.b	#1,objoff_36(a0)

loc_29464:
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	objoff_30(a0),d0
	sub.w	d1,d0
	move.w	d0,objoff_32(a0)
	move.w	d0,objoff_32(a1)
	add.w	d1,d0
	add.w	d1,d0
	move.w	d0,objoff_34(a0)
	move.w	d0,objoff_34(a1)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a0)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a1)

loc_2948E:
	bsr.s	loc_294F4
	tst.w	(Two_player_mode).w
	beq.s	loc_2949A
	bra.w	JmpTo24_DisplaySprite
; ===========================================================================

loc_2949A:
	move.w	objoff_32(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bls.s	JmpTo23_DisplaySprite
	move.w	objoff_34(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_294C4

JmpTo23_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

loc_294C4:
	movea.l	objoff_3C(a0),a1 ; a1=object
	cmpa.l	a0,a1
	beq.s	loc_294D2
	jsr	DeleteObject2

loc_294D2:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo39_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo39_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_294EA:
	bsr.s	loc_294F4
	bsr.s	loc_2953E
	jmp	DisplaySprite
; ===========================================================================

loc_294F4:
	move.w	x_pos(a0),-(sp)
	tst.b	objoff_36(a0)
	beq.s	loc_29516
	move.w	x_pos(a0),d0
	subq.w	#1,d0
	cmp.w	objoff_32(a0),d0
	bne.s	loc_29510
	move.b	#0,objoff_36(a0)

loc_29510:
	move.w	d0,x_pos(a0)
	bra.s	loc_2952C
; ===========================================================================

loc_29516:
	move.w	x_pos(a0),d0
	addq.w	#1,d0
	cmp.w	objoff_34(a0),d0
	bne.s	loc_29528
	move.b	#1,objoff_36(a0)

loc_29528:
	move.w	d0,x_pos(a0)

loc_2952C:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	move.w	#8,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo6_PlatformObject
	rts
; ===========================================================================

loc_2953E:
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	x_pos(a0),d0
	subi.w	#$18,d0
	move.w	x_pos(a1),d2
	addi.w	#$18,d2
	cmp.w	d0,d2
	bne.s	return_29562
	eori.b	#1,objoff_36(a0)
	eori.b	#1,objoff_36(a1)

return_29562:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj7A_MapUnc_29564:	BINCLUDE "mappings/sprite/obj7A.bin"
; ===========================================================================

JmpTo24_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo17_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo41_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo6_PlatformObject 
	jmp	PlatformObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7B - Warp pipe exit spring from CPZ
; ----------------------------------------------------------------------------
; Sprite_29590:
Obj7B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_295C0(pc,d0.w),d1
	jsr	off_295C0(pc,d1.w)
	tst.w	(Two_player_mode).w
	beq.s	loc_295A8
	bra.w	JmpTo25_DisplaySprite
; ===========================================================================

loc_295A8:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo40_DeleteObject
	bra.w	JmpTo25_DisplaySprite
; ===========================================================================
off_295C0:
	dc.w loc_295C8-off_295C0
	dc.w loc_295FE-off_295C0; 1
byte_295C4:
	dc.b $F0
	dc.b   0	; 1
	dc.b $F5	; 2
	dc.b $80	; 3
; ===========================================================================

loc_295C8:
	addq.b	#2,routine(a0)
	move.l	#Obj7B_MapUnc_29780,mappings(a0)
	move.w	#$3E0,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	subtype(a0),d0
	andi.w	#2,d0
	move.w	byte_295C4(pc,d0.w),objoff_30(a0)
	bsr.w	JmpTo42_Adjust2PArtPointer

loc_295FE:
	cmpi.b	#1,mapping_frame(a0)
	beq.s	loc_29648
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#$10,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo4_loc_1978E
	btst	#3,status(a0)
	beq.s	loc_29630
	bsr.w	loc_296C2

loc_29630:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo4_loc_1978E
	btst	#4,status(a0)
	beq.s	loc_29648
	bsr.s	loc_296C2

loc_29648:
	move.w	x_pos(a0),d4
	move.w	d4,d5
	subi.w	#$10,d4
	addi.w	#$10,d5
	move.w	y_pos(a0),d2
	move.w	d2,d3
	addi.w	#$30,d3
	move.w	(MainCharacter+x_pos).w,d0
	cmp.w	d4,d0
	bcs.s	loc_29686
	cmp.w	d5,d0
	bcc.s	loc_29686
	move.w	(MainCharacter+y_pos).w,d0
	cmp.w	d2,d0
	bcs.s	loc_29686
	cmp.w	d3,d0
	bcc.s	loc_29686
	cmpi.b	#2,next_anim(a0)
	beq.s	loc_29686
	move.b	#2,anim(a0)

loc_29686:
	move.w	(Sidekick+x_pos).w,d0
	cmp.w	d4,d0
	bcs.s	loc_296B6
	cmp.w	d5,d0
	bcc.s	loc_296B6
	move.w	(Sidekick+y_pos).w,d0
	cmp.w	d2,d0
	bcs.s	loc_296B6
	cmp.w	d3,d0
	bcc.s	loc_296B6
	cmpi.w	#4,(Tails_CPU_routine).w	; TailsCPU_Flying
	beq.w	loc_296B6
	cmpi.b	#3,next_anim(a0)
	beq.s	loc_296B6
	move.b	#3,anim(a0)

loc_296B6:
	lea	(off_29768).l,a1
	bra.w	JmpTo8_AnimateSprite
; ===========================================================================
	rts
; ===========================================================================

loc_296C2:
	move.w	#$100,anim(a0)
	addq.w	#4,y_pos(a1)
	move.w	objoff_30(a0),y_vel(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#$10,anim(a1)
	move.b	#2,routine(a1)
	move.b	subtype(a0),d0
	bpl.s	loc_296F6
	move.w	#0,x_vel(a1)

loc_296F6:
	btst	#0,d0
	beq.s	loc_29736
	move.w	#1,inertia(a1)
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#0,flips_remaining(a1)
	move.b	#4,flip_speed(a1)
	btst	#1,d0
	bne.s	loc_29726
	move.b	#1,flips_remaining(a1)

loc_29726:
	btst	#0,status(a1)
	beq.s	loc_29736
	neg.b	flip_angle(a1)
	neg.w	inertia(a1)

loc_29736:
	andi.b	#$C,d0
	cmpi.b	#4,d0
	bne.s	loc_2974C
	move.b	#$C,layer(a1)
	move.b	#$D,layer_plus(a1)

loc_2974C:
	cmpi.b	#8,d0
	bne.s	loc_2975E
	move.b	#$E,layer(a1)
	move.b	#$F,layer_plus(a1)

loc_2975E:
	move.w	#$CC,d0
	jmp	(PlaySound).l
; ===========================================================================
off_29768:
	dc.w byte_29770-off_29768
	dc.w byte_29773-off_29768; 1
	dc.w byte_29777-off_29768; 2
	dc.w byte_29777-off_29768; 3
byte_29770:	dc.b  $F,  0,$FF
byte_29773:	dc.b   0,  3,$FD,  0
byte_29777:	dc.b   5,  1,  2,  2,  2,  4,$FD,  0,  0
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj7B_MapUnc_29780:	BINCLUDE "mappings/sprite/obj7B.bin"
; ===========================================================================
	nop

JmpTo25_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo40_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo8_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo42_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo4_loc_1978E 
	jmp	loc_1978E
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7F - Vine switch that you hang off in MCZ
; ----------------------------------------------------------------------------
; Sprite_297E4:
Obj7F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_297F2(pc,d0.w),d1
	jmp	off_297F2(pc,d1.w)
; ===========================================================================
off_297F2:
	dc.w loc_297F6-off_297F2
	dc.w loc_2981E-off_297F2; 1
; ===========================================================================

loc_297F6:
	addq.b	#2,routine(a0)
	move.l	#Obj7F_MapUnc_29938,mappings(a0)
	move.w	#$640E,art_tile(a0)
	bsr.w	JmpTo43_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#8,width_pixels(a0)
	move.b	#4,priority(a0)

loc_2981E:
	lea	objoff_30(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1).w,d0
	bsr.s	loc_2983C
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d0
	bsr.s	loc_2983C
	bra.w	JmpTo24_MarkObjGone
; ===========================================================================

loc_2983C:
	tst.b	(a2)
	beq.s	loc_29890
	andi.b	#$70,d0
	beq.w	return_29936
	clr.b	obj_control(a1)
	clr.b	(a2)
	move.b	#$12,2(a2)
	andi.w	#$F00,d0
	beq.s	loc_29860
	move.b	#$3C,2(a2)

loc_29860:
	move.w	#-$300,y_vel(a1)
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lea	($FFFFF7E0).w,a3
	lea	(a3,d0.w),a3
	bclr	#0,(a3)
	move.b	#0,mapping_frame(a0)
	tst.w	objoff_30(a0)
	beq.s	BranchTo_return_29936
	move.b	#1,mapping_frame(a0)

BranchTo_return_29936 
	bra.w	return_29936
; ===========================================================================

loc_29890:
	tst.b	2(a2)
	beq.s	loc_2989E
	subq.b	#1,2(a2)
	bne.w	return_29936

loc_2989E:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$C,d0
	cmpi.w	#$18,d0
	bcc.w	return_29936
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	subi.w	#$28,d1
	cmpi.w	#$10,d1
	bcc.w	return_29936
	tst.b	obj_control(a1)
	bmi.s	return_29936
	cmpi.b	#4,routine(a1)
	bcc.s	return_29936
	tst.w	(Debug_placement_mode).w
	bne.s	return_29936
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$30,y_pos(a1)
	move.b	#$14,anim(a1)
	move.b	#1,obj_control(a1)
	move.b	#1,(a2)
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lea	($FFFFF7E0).w,a3
	bset	#0,(a3,d0.w)
	move.w	#$CD,d0
	jsr	(PlaySound).l
	move.b	#0,mapping_frame(a0)
	tst.w	objoff_30(a0)
	beq.s	return_29936
	move.b	#1,mapping_frame(a0)

return_29936:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj7F_MapUnc_29938:	BINCLUDE "mappings/sprite/obj7F.bin"
; ===========================================================================

JmpTo24_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo43_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 80 - Vine that you hang off and it moves down from MCZ
; ----------------------------------------------------------------------------
; Sprite_2997C:
Obj80:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2998A(pc,d0.w),d1
	jmp	off_2998A(pc,d1.w)
; ===========================================================================
off_2998A:
	dc.w loc_29990-off_2998A
	dc.w loc_29A66-off_2998A; 1
	dc.w loc_29BFA-off_2998A; 2
; ===========================================================================

loc_29990:
	addq.b	#2,routine(a0)
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.b	#$80,y_radius(a0)
	bset	#4,render_flags(a0)
	move.w	y_pos(a0),objoff_3C(a0)
	cmpi.b	#6,(Current_Zone).w
	bne.s	loc_29A1C
	addq.b	#2,routine(a0)
	move.l	#Obj80_MapUnc_29DD0,mappings(a0)
	move.w	#$23FE,art_tile(a0)
	bsr.w	JmpTo44_Adjust2PArtPointer
	move.w	#$A0,objoff_2E(a0)
	move.b	subtype(a0),d0
	move.b	d0,d1
	andi.b	#$F,d0
	beq.s	loc_299EE
	move.w	#$60,objoff_2E(a0)

loc_299EE:
	move.b	subtype(a0),d0
	move.w	#2,objoff_3A(a0)
	andi.b	#$70,d1
	beq.s	BranchTo_loc_29BFA
	move.w	objoff_2E(a0),d0
	move.w	d0,objoff_38(a0)
	move.b	#1,objoff_36(a0)
	add.w	d0,y_pos(a0)
	lsr.w	#4,d0
	addq.w	#1,d0
	move.b	d0,mapping_frame(a0)

BranchTo_loc_29BFA 
	bra.w	loc_29BFA
; ===========================================================================

loc_29A1C:
	move.l	#Obj80_MapUnc_29C64,mappings(a0)
	move.w	#$641E,art_tile(a0)
	bsr.w	JmpTo44_Adjust2PArtPointer
	move.w	#$B0,objoff_2E(a0)
	move.b	subtype(a0),d0
	bpl.s	loc_29A40
	move.b	#1,objoff_34(a0)

loc_29A40:
	move.w	#2,objoff_3A(a0)
	andi.b	#$70,d0
	beq.s	loc_29A66
	move.w	objoff_2E(a0),d0
	move.w	d0,objoff_38(a0)
	move.b	#1,objoff_36(a0)
	add.w	d0,y_pos(a0)
	lsr.w	#5,d0
	addq.w	#1,d0
	move.b	d0,mapping_frame(a0)

loc_29A66:

	tst.b	objoff_36(a0)
	beq.s	loc_29A74
	tst.w	objoff_30(a0)
	bne.s	loc_29A8A
	bra.s	loc_29A7A
; ===========================================================================

loc_29A74:
	tst.w	objoff_30(a0)
	beq.s	loc_29A8A

loc_29A7A:
	move.w	objoff_38(a0),d2
	cmp.w	objoff_2E(a0),d2
	beq.s	loc_29AAE
	add.w	objoff_3A(a0),d2
	bra.s	loc_29A94
; ===========================================================================

loc_29A8A:
	move.w	objoff_38(a0),d2
	beq.s	loc_29AAE
	sub.w	objoff_3A(a0),d2

loc_29A94:
	move.w	d2,objoff_38(a0)
	move.w	objoff_3C(a0),d0
	add.w	d2,d0
	move.w	d0,y_pos(a0)
	move.w	d2,d0
	beq.s	loc_29AAA
	lsr.w	#5,d0
	addq.w	#1,d0

loc_29AAA:
	move.b	d0,mapping_frame(a0)

loc_29AAE:
	lea	objoff_30(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1).w,d0
	bsr.s	loc_29ACC
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d0
	bsr.s	loc_29ACC
	bra.w	JmpTo25_MarkObjGone
; ===========================================================================

loc_29ACC:
	tst.b	(a2)
	beq.w	loc_29B5E
	tst.b	render_flags(a1)
	bpl.s	loc_29B42
	cmpi.b	#4,routine(a1)
	bcc.s	loc_29B42
	andi.b	#$70,d0
	beq.w	loc_29B50
	clr.b	obj_control(a1)
	clr.b	(a2)
	move.b	#$12,2(a2)
	andi.w	#$F00,d0
	beq.w	loc_29B02
	move.b	#$3C,2(a2)

loc_29B02:
	btst	#$A,d0
	beq.s	loc_29B0E
	move.w	#-$200,x_vel(a1)

loc_29B0E:
	btst	#$B,d0
	beq.s	loc_29B1A
	move.w	#$200,x_vel(a1)

loc_29B1A:
	move.w	#-$380,y_vel(a1)
	bset	#1,status(a1)
	tst.b	objoff_34(a0)
	beq.s	return_29B40
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lea	($FFFFF7E0).w,a3
	lea	(a3,d0.w),a3
	bclr	#0,(a3)

return_29B40:
	rts
; ===========================================================================

loc_29B42:
	clr.b	obj_control(a1)
	clr.b	(a2)
	move.b	#$3C,2(a2)
	rts
; ===========================================================================

loc_29B50:
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$94,y_pos(a1)
	rts
; ===========================================================================

loc_29B5E:
	tst.b	2(a2)
	beq.s	loc_29B6C
	subq.b	#1,2(a2)
	bne.w	return_29BF8

loc_29B6C:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$10,d0
	cmpi.w	#$20,d0
	bcc.w	return_29BF8
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	subi.w	#$88,d1
	cmpi.w	#$18,d1
	bcc.w	return_29BF8
	tst.b	obj_control(a1)
	bmi.s	return_29BF8
	cmpi.b	#4,routine(a1)
	bcc.s	return_29BF8
	tst.w	(Debug_placement_mode).w
	bne.s	return_29BF8
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$94,y_pos(a1)
	move.b	#$14,anim(a1)
	move.b	#1,obj_control(a1)
	move.b	#1,(a2)
	tst.b	objoff_34(a0)
	beq.s	return_29BF8
	move.b	subtype(a0),d0
	andi.w	#$F,d0
	lea	($FFFFF7E0).w,a3
	bset	#0,(a3,d0.w)
	move.w	#$CD,d0
	jsr	(PlaySound).l

return_29BF8:
	rts
; ===========================================================================

loc_29BFA:

	tst.b	objoff_36(a0)
	beq.s	loc_29C08
	tst.w	objoff_30(a0)
	bne.s	loc_29C1E
	bra.s	loc_29C0E
; ===========================================================================

loc_29C08:
	tst.w	objoff_30(a0)
	beq.s	loc_29C1E

loc_29C0E:
	move.w	objoff_38(a0),d2
	cmp.w	objoff_2E(a0),d2
	beq.s	loc_29C42
	add.w	objoff_3A(a0),d2
	bra.s	loc_29C28
; ===========================================================================

loc_29C1E:
	move.w	objoff_38(a0),d2
	beq.s	loc_29C42
	sub.w	objoff_3A(a0),d2

loc_29C28:
	move.w	d2,objoff_38(a0)
	move.w	objoff_3C(a0),d0
	add.w	d2,d0
	move.w	d0,y_pos(a0)
	move.w	d2,d0
	beq.s	loc_29C3E
	lsr.w	#4,d0
	addq.w	#1,d0

loc_29C3E:
	move.b	d0,mapping_frame(a0)

loc_29C42:
	lea	objoff_30(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1).w,d0
	bsr.w	loc_29ACC
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d0
	bsr.w	loc_29ACC
	bra.w	JmpTo25_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj80_MapUnc_29C64:	BINCLUDE "mappings/sprite/obj80_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj80_MapUnc_29DD0:	BINCLUDE "mappings/sprite/obj80_b.bin"
; ===========================================================================

JmpTo25_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo44_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 81 - Long invisible vertical barrier
; ----------------------------------------------------------------------------
; Sprite_2A000:
Obj81:
	btst	#6,render_flags(a0)
	bne.w	loc_2A018
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2A020(pc,d0.w),d1
	jmp	off_2A020(pc,d1.w)
; ===========================================================================

loc_2A018:
	move.w	#$280,d0
	bra.w	JmpTo2_DisplaySprite3
; ===========================================================================
off_2A020:
	dc.w loc_2A026-off_2A020
	dc.w loc_2A0FE-off_2A020; 1
	dc.w loc_2A18A-off_2A020; 2
; ===========================================================================

loc_2A026:
	addq.b	#2,routine(a0)
	move.l	#Obj81_MapUnc_2A24E,mappings(a0)
	move.w	#$643C,art_tile(a0)
	bsr.w	JmpTo45_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#5,priority(a0)
	move.b	#8,width_pixels(a0)
	ori.b	#$80,status(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	subi.w	#$48,y_pos(a0)
	move.b	#-$40,angle(a0)
	moveq	#-$10,d4
	btst	#1,status(a0)
	beq.s	loc_2A084
	addi.w	#$90,y_pos(a0)
	move.b	#$40,angle(a0)
	neg.w	d4

loc_2A084:
	move.w	#$100,d1
	btst	#0,status(a0)
	beq.s	loc_2A092
	neg.w	d1

loc_2A092:
	move.w	d1,objoff_34(a0)
	bsr.w	JmpTo18_SingleObjLoad2
	bne.s	loc_2A0FE
	_move.b	0(a0),0(a1) ; load obj81
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#$40,objoff_E(a1)
	move.w	objoff_30(a0),d2
	move.w	objoff_32(a0),d3
	moveq	#8,d1
	move.b	d1,objoff_F(a1)
	subq.w	#1,d1
	lea	$10(a1),a2

loc_2A0D4:
	add.w	d4,d3
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#1,(a2)+
	dbf	d1,loc_2A0D4
	move.w	objoff_28(a1),x_pos(a1)
	move.w	objoff_2A(a1),y_pos(a1)
	move.l	a1,objoff_3C(a0)
	move.b	#$40,objoff_14(a1)
	bset	#4,render_flags(a1)

loc_2A0FE:

	lea	($FFFFF7E0).w,a2
	moveq	#0,d0
	move.b	subtype(a0),d0
	btst	#0,(a2,d0.w)
	beq.s	loc_2A13A
	tst.b	objoff_36(a0)
	bne.s	loc_2A13A
	move.b	#1,objoff_36(a0)
	move.w	#$E7,d0
	jsr	(PlaySoundStereo).l
	cmpi.b	#$81,status(a0)
	bne.s	loc_2A13A
	move.w	objoff_30(a0),x_pos(a0)
	subi.w	#$48,x_pos(a0)

loc_2A13A:
	tst.b	objoff_36(a0)
	beq.s	loc_2A188
	move.w	#$48,d1
	tst.b	angle(a0)
	beq.s	loc_2A154
	cmpi.b	#$80,angle(a0)
	bne.s	loc_2A180
	neg.w	d1

loc_2A154:
	move.w	objoff_32(a0),y_pos(a0)
	move.w	objoff_30(a0),x_pos(a0)
	add.w	d1,x_pos(a0)
	move.b	#$40,width_pixels(a0)
	move.b	#0,objoff_36(a0)
	move.w	#$E9,d0
	jsr	(PlaySound).l
	addq.b	#2,routine(a0)
	bra.s	loc_2A188
; ===========================================================================

loc_2A180:
	move.w	objoff_34(a0),d0
	add.w	d0,angle(a0)

loc_2A188:
	bsr.s	loc_2A1EA

loc_2A18A:
	move.w	#$13,d1
	move.w	#$40,d2
	move.w	#$41,d3
	move.b	angle(a0),d0
	beq.s	loc_2A1A8
	cmpi.b	#$40,d0
	beq.s	loc_2A1B4
	cmpi.b	#-$40,d0
	bcc.s	loc_2A1B4

loc_2A1A8:
	move.w	#$4B,d1
	move.w	#8,d2
	move.w	#9,d3

loc_2A1B4:
	move.w	x_pos(a0),d4
	bsr.w	JmpTo22_SolidObject
	tst.w	(Two_player_mode).w
	beq.s	loc_2A1C6
	bra.w	JmpTo26_DisplaySprite
; ===========================================================================

loc_2A1C6:
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	loc_2A1DE
	bra.w	JmpTo26_DisplaySprite
; ===========================================================================

loc_2A1DE:
	movea.l	objoff_3C(a0),a1 ; a1=object
	bsr.w	JmpTo3_DeleteObject2
	bra.w	JmpTo41_DeleteObject
; ===========================================================================

loc_2A1EA:
	tst.b	objoff_36(a0)
	beq.s	return_2A24C
	moveq	#0,d0
	moveq	#0,d1
	move.b	angle(a0),d0
	bsr.w	JmpTo9_CalcSine
	move.w	objoff_32(a0),d2
	move.w	objoff_30(a0),d3
	moveq	#0,d6
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.b	objoff_F(a1),d6
	subq.w	#1,d6
	bcs.s	return_2A24C
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	move.l	d0,d4
	move.l	d1,d5
	lea	$10(a1),a2

loc_2A222:
	movem.l	d4-d5,-(sp)
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,(a2)+
	move.w	d4,(a2)+
	movem.l	(sp)+,d4-d5
	add.l	d0,d4
	add.l	d1,d5
	addq.w	#2,a2
	dbf	d6,loc_2A222
	move.w	objoff_28(a1),x_pos(a1)
	move.w	objoff_2A(a1),y_pos(a1)

return_2A24C:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj81_MapUnc_2A24E:	BINCLUDE "mappings/sprite/obj81.bin"
; ===========================================================================
	nop

JmpTo2_DisplaySprite3 
	jmp	DisplaySprite3
; ===========================================================================

JmpTo26_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo41_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo3_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo18_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo45_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo9_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo22_SolidObject 
	jmp	SolidObject




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 82 - Platform that is usually swinging, from ARZ
; ----------------------------------------------------------------------------
; Sprite_2A290:
Obj82:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2A29E(pc,d0.w),d1
	jmp	off_2A29E(pc,d1.w)
; ===========================================================================
off_2A29E:
	dc.w loc_2A2AA-off_2A29E
	dc.w loc_2A312-off_2A29E; 1
byte_2A2A2:
	dc.b $20
	dc.b   8	; 1
	dc.b $1C	; 2
	dc.b $30	; 3
	dc.b $10	; 4
	dc.b $10	; 5
	dc.b $10	; 6
	dc.b $10	; 7
; ===========================================================================

loc_2A2AA:
	addq.b	#2,routine(a0)
	move.l	#Obj82_MapUnc_2A476,mappings(a0)
	move.w	#0,art_tile(a0)
	bsr.w	JmpTo46_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsr.w	#3,d0
	andi.w	#$E,d0
	lea	byte_2A2A2(pc,d0.w),a2
	move.b	(a2)+,width_pixels(a0)
	move.b	(a2),y_radius(a0)
	lsr.w	#1,d0
	move.b	d0,mapping_frame(a0)
	move.w	x_pos(a0),objoff_34(a0)
	move.w	y_pos(a0),objoff_30(a0)
	move.b	subtype(a0),d0
	andi.b	#$F,d0
	beq.s	loc_2A30C
	cmpi.b	#7,d0
	beq.s	loc_2A30C
	move.b	#1,objoff_38(a0)

loc_2A30C:
	andi.b	#$F,subtype(a0)

loc_2A312:
	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	subtype(a0),d0
	add.w	d0,d0
	move.w	off_2A358(pc,d0.w),d1
	jsr	off_2A358(pc,d1.w)
	move.w	(sp)+,d4
	tst.b	render_flags(a0)
	bpl.s	loc_2A350
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	moveq	#0,d2
	move.b	y_radius(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	bsr.w	JmpTo23_SolidObject
	swap	d6
	move.b	d6,objoff_3F(a0)
	bsr.w	loc_2A432

loc_2A350:
	move.w	objoff_34(a0),d0
	bra.w	JmpTo7_MarkObjGone2
; ===========================================================================
off_2A358:
	dc.w return_2A368-off_2A358
	dc.w loc_2A36A-off_2A358; 1
	dc.w loc_2A392-off_2A358; 2
	dc.w loc_2A36A-off_2A358; 3
	dc.w loc_2A3B6-off_2A358; 4
	dc.w loc_2A3D8-off_2A358; 5
	dc.w loc_2A392-off_2A358; 6
	dc.w loc_2A3EC-off_2A358; 7
; ===========================================================================

return_2A368:
	rts
; ===========================================================================

loc_2A36A:
	tst.w	objoff_36(a0)
	bne.s	loc_2A382
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_2A380
	move.w	#$1E,objoff_36(a0)

return_2A380:
	rts
; ===========================================================================

loc_2A382:
	subq.w	#1,objoff_36(a0)
	bne.s	return_2A380
	addq.b	#1,subtype(a0)
	clr.b	objoff_38(a0)
	rts
; ===========================================================================

loc_2A392:
	bsr.w	JmpTo16_ObjectMove
	addi.w	#8,y_vel(a0)
	bsr.w	JmpTo2_ObjCheckFloorDist
	tst.w	d1
	bpl.w	return_2A3B4
	addq.w	#1,d1
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	clr.b	subtype(a0)

return_2A3B4:
	rts
; ===========================================================================

loc_2A3B6:
	bsr.w	JmpTo16_ObjectMove
	subi.w	#8,y_vel(a0)
	bsr.w	JmpTo_ObjCheckCeilingDist
	tst.w	d1
	bpl.w	return_2A3D6
	sub.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	clr.b	subtype(a0)

return_2A3D6:
	rts
; ===========================================================================

loc_2A3D8:
	move.b	objoff_3F(a0),d0
	andi.b	#3,d0
	beq.s	return_2A3EA
	addq.b	#1,subtype(a0)
	clr.b	objoff_38(a0)

return_2A3EA:
	rts
; ===========================================================================

loc_2A3EC:
	move.w	(Water_Level_1).w,d0
	sub.w	y_pos(a0),d0
	beq.s	return_2A430
	bcc.s	loc_2A414
	cmpi.w	#-2,d0
	bge.s	loc_2A400
	moveq	#-2,d0

loc_2A400:
	add.w	d0,y_pos(a0)
	bsr.w	JmpTo_ObjCheckCeilingDist
	tst.w	d1
	bpl.w	return_2A412
	sub.w	d1,y_pos(a0)

return_2A412:
	rts
; ===========================================================================

loc_2A414:
	cmpi.w	#2,d0
	ble.s	loc_2A41C
	moveq	#2,d0

loc_2A41C:
	add.w	d0,y_pos(a0)
	bsr.w	JmpTo2_ObjCheckFloorDist
	tst.w	d1
	bpl.w	return_2A430
	addq.w	#1,d1
	add.w	d1,y_pos(a0)

return_2A430:
	rts
; ===========================================================================

loc_2A432:
	tst.b	objoff_38(a0)
	beq.s	return_2A474
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_2A44E
	tst.b	objoff_3E(a0)
	beq.s	return_2A474
	subq.b	#4,objoff_3E(a0)
	bra.s	loc_2A45A
; ===========================================================================

loc_2A44E:
	cmpi.b	#$40,objoff_3E(a0)
	beq.s	return_2A474
	addq.b	#4,objoff_3E(a0)

loc_2A45A:
	move.b	objoff_3E(a0),d0
	jsr	(CalcSine).l
	move.w	#$400,d1
	muls.w	d1,d0
	swap	d0
	add.w	objoff_30(a0),d0
	move.w	d0,y_pos(a0)

return_2A474:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj82_MapUnc_2A476:	BINCLUDE "mappings/sprite/obj82.bin"
; ===========================================================================
	nop

JmpTo2_ObjCheckFloorDist 
	jmp	ObjCheckFloorDist
; ===========================================================================

JmpTo46_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_ObjCheckCeilingDist 
	jmp	ObjCheckCeilingDist
; ===========================================================================

JmpTo23_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo7_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; loc_2A4F6:
JmpTo16_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 83 - 3 adjoined platforms from ARZ that rotate in a circle
; ----------------------------------------------------------------------------
; Sprite_2A4FC:
Obj83:
	btst	#6,render_flags(a0)
	bne.w	loc_2A514
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2A51C(pc,d0.w),d1
	jmp	off_2A51C(pc,d1.w)
; ===========================================================================

loc_2A514:
	move.w	#$280,d0
	bra.w	JmpTo3_DisplaySprite3
; ===========================================================================
off_2A51C:
	dc.w loc_2A522-off_2A51C
	dc.w loc_2A620-off_2A51C; 1
	dc.w loc_2A74E-off_2A51C; 2
; ===========================================================================

loc_2A522:
	addq.b	#2,routine(a0)
	move.l	#Obj15_Obj83_MapUnc_1021E,mappings(a0)
	move.w	#0,art_tile(a0)
	bsr.w	JmpTo47_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$20,width_pixels(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.b	subtype(a0),d1
	move.b	d1,d0
	andi.w	#$F,d1
	andi.b	#$F0,d0
	ext.w	d0
	asl.w	#3,d0
	move.w	d0,objoff_2E(a0)
	move.b	status(a0),d0
	ror.b	#2,d0
	andi.b	#$C0,d0
	move.b	d0,angle(a0)
	bsr.w	JmpTo19_SingleObjLoad2
	bne.s	BranchTo_loc_2A620
	_move.b	0(a0),0(a1) ; load obj83
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	bset	#6,render_flags(a1)
	move.b	#$40,objoff_E(a1)
	moveq	#8,d1
	move.b	d1,objoff_F(a1)
	subq.w	#1,d1
	lea	$10(a1),a2

loc_2A5B0:
	addq.w	#4,a2
	move.w	#1,(a2)+
	dbf	d1,loc_2A5B0
	move.b	#1,objoff_B(a1)
	move.b	#$40,objoff_14(a1)
	bset	#4,render_flags(a1)
	move.l	a1,objoff_34(a0)
	bsr.s	loc_2A5DE
	move.l	a1,objoff_38(a0)
	bsr.s	loc_2A5DE
	move.l	a1,objoff_3C(a0)

BranchTo_loc_2A620 
	bra.s	loc_2A620
; ===========================================================================

loc_2A5DE:
	bsr.w	JmpTo19_SingleObjLoad2
	bne.s	return_2A61E
	addq.b	#4,routine(a1)
	_move.b	0(a0),0(a1) ; load obj
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#$20,width_pixels(a1)
	move.w	x_pos(a0),objoff_30(a1)
	move.w	y_pos(a0),objoff_32(a1)
	move.w	x_pos(a0),objoff_2C(a1)

return_2A61E:
	rts
; ===========================================================================

loc_2A620:

	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	moveq	#0,d1
	move.w	objoff_2E(a0),d0
	add.w	d0,angle(a0)
	move.w	objoff_32(a0),d2
	move.w	objoff_30(a0),d3
	moveq	#0,d6
	movea.l	objoff_34(a0),a1 ; a1=object
	lea	$10(a1),a2
	move.b	angle(a0),d0
	bsr.w	JmpTo10_CalcSine
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	move.l	d0,d4
	move.l	d1,d5
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,x_pos(a1)
	move.w	d4,y_pos(a1)
	move.l	d0,d4
	move.l	d1,d5
	add.l	d0,d4
	add.l	d1,d5
	moveq	#1,d6
	bsr.w	loc_2A72E
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,x_pos(a0)
	move.w	d4,y_pos(a0)
	move.b	angle(a0),d0
	addi.b	#$55,d0
	bsr.w	JmpTo10_CalcSine
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	move.l	d0,d4
	move.l	d1,d5
	moveq	#2,d6
	bsr.w	loc_2A72E
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	movea.l	objoff_38(a0),a1 ; a1=object
	move.w	d5,x_pos(a1)
	move.w	d4,y_pos(a1)
	move.b	angle(a0),d0
	subi.b	#$55,d0
	bsr.w	JmpTo10_CalcSine
	swap	d0
	swap	d1
	asr.l	#4,d0
	asr.l	#4,d1
	move.l	d0,d4
	move.l	d1,d5
	moveq	#2,d6
	bsr.w	loc_2A72E
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	movea.l	objoff_3C(a0),a1 ; a1=object
	move.w	d5,x_pos(a1)
	move.w	d4,y_pos(a1)
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo7_PlatformObject
	tst.w	(Two_player_mode).w
	beq.s	loc_2A70A
	bra.w	JmpTo27_DisplaySprite
; ===========================================================================

loc_2A70A:
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	loc_2A722
	bra.w	JmpTo27_DisplaySprite
; ===========================================================================

loc_2A722:
	movea.l	objoff_34(a0),a1 ; a1=object
	bsr.w	JmpTo4_DeleteObject2
	bra.w	JmpTo42_DeleteObject
; ===========================================================================

loc_2A72E:
	movem.l	d4-d5,-(sp)
	swap	d4
	swap	d5
	add.w	d2,d4
	add.w	d3,d5
	move.w	d5,(a2)+
	move.w	d4,(a2)+
	movem.l	(sp)+,d4-d5
	add.l	d0,d4
	add.l	d1,d5
	addq.w	#2,a2
	dbf	d6,loc_2A72E
	rts
; ===========================================================================

loc_2A74E:
	moveq	#0,d1
	move.b	width_pixels(a0),d1
	addi.w	#$B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	objoff_2C(a0),d4
	bsr.w	JmpTo7_PlatformObject
	move.w	x_pos(a0),objoff_2C(a0)
	move.w	objoff_30(a0),d0
	bra.w	JmpTo8_MarkObjGone2
; ===========================================================================
	nop

JmpTo3_DisplaySprite3 
	jmp	DisplaySprite3
; ===========================================================================

JmpTo27_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo42_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo4_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo19_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo47_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo10_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo7_PlatformObject 
	jmp	PlatformObject
; ===========================================================================

JmpTo8_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3F - Fan from OOZ
; ----------------------------------------------------------------------------
; Sprite_2A7B0:
Obj3F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2A7BE(pc,d0.w),d1
	jmp	off_2A7BE(pc,d1.w)
; ===========================================================================
off_2A7BE:
	dc.w loc_2A7C4-off_2A7BE
	dc.w loc_2A802-off_2A7BE; 1
	dc.w loc_2A8FE-off_2A7BE; 2
; ===========================================================================

loc_2A7C4:
	addq.b	#2,routine(a0)
	move.l	#Obj3F_MapUnc_2AA12,mappings(a0)
	move.w	#$6403,art_tile(a0)
	bsr.w	JmpTo48_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	tst.b	subtype(a0)
	bpl.s	loc_2A802
	addq.b	#2,routine(a0)
	move.l	#Obj3F_MapUnc_2AAC4,mappings(a0)
	bra.w	loc_2A8FE
; ===========================================================================

loc_2A802:

	btst	#1,subtype(a0)
	bne.s	loc_2A82A
	subq.w	#1,objoff_30(a0)
	bpl.s	loc_2A82A
	move.w	#0,objoff_34(a0)
	move.w	#$78,objoff_30(a0)
	bchg	#0,objoff_32(a0)
	beq.s	loc_2A82A
	move.w	#$B4,objoff_30(a0)

loc_2A82A:
	tst.b	objoff_32(a0)
	beq.w	loc_2A84E
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo_JmpTo26_MarkObjGone
	cmpi.w	#$400,objoff_34(a0)
	bcc.s	BranchTo_JmpTo26_MarkObjGone
	addi.w	#$2A,objoff_34(a0)
	move.b	objoff_34(a0),anim_frame_duration(a0)
	bra.s	loc_2A86A
; ===========================================================================

loc_2A84E:
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.w	loc_2A894
	lea	(Sidekick).w,a1 ; a1=character
	bsr.w	loc_2A894
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo_JmpTo26_MarkObjGone
	move.b	#0,anim_frame_duration(a0)

loc_2A86A:
	addq.b	#1,anim_frame(a0)
	cmpi.b	#6,anim_frame(a0)
	bcs.s	loc_2A87C
	move.b	#0,anim_frame(a0)

loc_2A87C:
	moveq	#0,d0
	btst	#0,subtype(a0)
	beq.s	loc_2A888
	moveq	#5,d0

loc_2A888:
	add.b	anim_frame(a0),d0
	move.b	d0,mapping_frame(a0)

BranchTo_JmpTo26_MarkObjGone 
	bra.w	JmpTo26_MarkObjGone
; ===========================================================================

loc_2A894:
	cmpi.b	#4,routine(a1)
	bcc.s	return_2A8FC
	tst.b	obj_control(a1)
	bne.s	return_2A8FC
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	btst	#0,status(a0)
	bne.s	loc_2A8B4
	neg.w	d0

loc_2A8B4:
	addi.w	#$50,d0
	cmpi.w	#$F0,d0
	bcc.s	return_2A8FC
	move.w	y_pos(a1),d1
	addi.w	#$60,d1
	sub.w	y_pos(a0),d1
	bcs.s	return_2A8FC
	cmpi.w	#$70,d1
	bcc.s	return_2A8FC
	subi.w	#$50,d0
	bcc.s	loc_2A8DC
	not.w	d0
	add.w	d0,d0

loc_2A8DC:
	addi.w	#$60,d0
	btst	#0,status(a0)
	bne.s	loc_2A8EA
	neg.w	d0

loc_2A8EA:
	neg.b	d0
	asr.w	#4,d0
	btst	#0,subtype(a0)
	beq.s	loc_2A8F8
	neg.w	d0

loc_2A8F8:
	add.w	d0,x_pos(a1)

return_2A8FC:
	rts
; ===========================================================================

loc_2A8FE:

	btst	#1,subtype(a0)
	bne.s	loc_2A926
	subq.w	#1,objoff_30(a0)
	bpl.s	loc_2A926
	move.w	#0,objoff_34(a0)
	move.w	#$78,objoff_30(a0)
	bchg	#0,objoff_32(a0)
	beq.s	loc_2A926
	move.w	#$B4,objoff_30(a0)

loc_2A926:
	tst.b	objoff_32(a0)
	beq.w	loc_2A94A
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo2_JmpTo26_MarkObjGone
	cmpi.w	#$400,objoff_34(a0)
	bcc.s	BranchTo2_JmpTo26_MarkObjGone
	addi.w	#$2A,objoff_34(a0)
	move.b	objoff_34(a0),anim_frame_duration(a0)
	bra.s	loc_2A966
; ===========================================================================

loc_2A94A:
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.w	loc_2A990
	lea	(Sidekick).w,a1 ; a1=character
	bsr.w	loc_2A990
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo2_JmpTo26_MarkObjGone
	move.b	#0,anim_frame_duration(a0)

loc_2A966:
	addq.b	#1,anim_frame(a0)
	cmpi.b	#6,anim_frame(a0)
	bcs.s	loc_2A978
	move.b	#0,anim_frame(a0)

loc_2A978:
	moveq	#0,d0
	btst	#0,subtype(a0)
	beq.s	loc_2A984
	moveq	#5,d0

loc_2A984:
	add.b	anim_frame(a0),d0
	move.b	d0,mapping_frame(a0)

BranchTo2_JmpTo26_MarkObjGone 
	bra.w	JmpTo26_MarkObjGone
; ===========================================================================

loc_2A990:
	cmpi.b	#4,routine(a1)
	bcc.s	return_2AA10
	tst.b	obj_control(a1)
	bne.s	return_2AA10
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$40,d0
	cmpi.w	#$80,d0
	bcc.s	return_2AA10
	moveq	#0,d1
	move.b	($FFFFFE74).w,d1
	add.w	y_pos(a1),d1
	addi.w	#$60,d1
	sub.w	y_pos(a0),d1
	bcs.s	return_2AA10
	cmpi.w	#$90,d1
	bcc.s	return_2AA10
	subi.w	#$60,d1
	bcs.s	loc_2A9D4
	not.w	d1
	add.w	d1,d1

loc_2A9D4:
	addi.w	#$60,d1
	neg.w	d1
	asr.w	#4,d1
	add.w	d1,y_pos(a1)
	bset	#1,status(a1)
	move.w	#0,y_vel(a1)
	move.w	#1,inertia(a1)
	tst.b	flip_angle(a1)
	bne.s	return_2AA10
	move.b	#1,flip_angle(a1)
	move.b	#0,anim(a1)
	move.b	#$7F,flips_remaining(a1)
	move.b	#8,flip_speed(a1)

return_2AA10:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
; sidefacing fan
Obj3F_MapUnc_2AA12:	BINCLUDE "mappings/sprite/obj3F_a.bin"
; upfacing fan
Obj3F_MapUnc_2AAC4:	BINCLUDE "mappings/sprite/obj3F_b.bin"
; ===========================================================================
	nop

JmpTo26_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo48_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 85 - Spring from CNZ that you hold jump on to pull back further
; ----------------------------------------------------------------------------
; Sprite_2AB84:
Obj85:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2ABCE(pc,d0.w),d1
	jsr	off_2ABCE(pc,d1.w)
	move.w	#$200,d0
	tst.w	(Two_player_mode).w
	beq.s	loc_2ABA0
	bra.w	JmpTo4_DisplaySprite3
; ===========================================================================

loc_2ABA0:
	move.w	x_pos(a0),d1
	andi.w	#$FF80,d1
	sub.w	(Camera_X_pos_coarse).w,d1
	cmpi.w	#$280,d1
	bhi.w	loc_2ABB8
	bra.w	JmpTo4_DisplaySprite3
; ===========================================================================

loc_2ABB8:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	BranchTo_JmpTo43_DeleteObject
	bclr	#7,2(a2,d0.w)

BranchTo_JmpTo43_DeleteObject 
	bra.w	JmpTo43_DeleteObject
; ===========================================================================
off_2ABCE:
	dc.w loc_2ABD4-off_2ABCE
	dc.w loc_2AC84-off_2ABCE; 1
	dc.w loc_2AE56-off_2ABCE; 2
; ===========================================================================

loc_2ABD4:
	addq.b	#2,routine(a0)
	move.l	#Obj85_MapUnc_2B07E,mappings(a0)
	move.w	#$422,art_tile(a0)
	tst.b	subtype(a0)
	beq.s	loc_2ABFA
	move.l	#Obj85_MapUnc_2B0EC,mappings(a0)
	move.w	#$402,art_tile(a0)

loc_2ABFA:
	bsr.w	JmpTo49_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	bset	#6,render_flags(a0)
	move.b	#1,objoff_B(a0)
	tst.b	subtype(a0)
	beq.s	loc_2AC54
	addq.b	#2,routine(a0)
	move.b	#$20,objoff_E(a0)
	move.b	#$18,width_pixels(a0)
	move.w	x_pos(a0),objoff_2E(a0)
	move.w	y_pos(a0),objoff_34(a0)
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	addi.w	#0,d3
	move.b	#1,objoff_F(a0)
	lea	$10(a0),a2
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#2,(a2)+
	bra.w	loc_2AE56
; ===========================================================================

loc_2AC54:
	move.b	#$18,objoff_E(a0)
	move.b	#$18,width_pixels(a0)
	move.w	y_pos(a0),objoff_34(a0)
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	addi.w	#$20,d3
	move.b	#1,objoff_F(a0)
	lea	$10(a0),a2
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#2,(a2)+

loc_2AC84:
	move.b	#0,objoff_3A(a0)
	move.w	objoff_34(a0),d0
	add.w	objoff_38(a0),d0
	move.w	d0,y_pos(a0)
	move.b	#2,objoff_15(a0)
	cmpi.w	#$10,objoff_38(a0)
	bcs.s	loc_2ACAA
	move.b	#3,objoff_15(a0)

loc_2ACAA:
	move.w	#$23,d1
	move.w	#$20,d2
	move.w	#$1D,d3
	move.w	x_pos(a0),d4
	lea	objoff_36(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1_Logical).w,d5
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_2AD26
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d5
	moveq	#4,d6
	bsr.s	loc_2AD26
	tst.w	objoff_36(a0)
	beq.s	loc_2AD14
	tst.w	objoff_38(a0)
	beq.s	return_2AD24
	moveq	#0,d0
	cmpi.b	#1,objoff_36(a0)
	bne.s	loc_2ACFA
	or.w	(Ctrl_1_Logical).w,d0

loc_2ACFA:
	cmpi.b	#1,objoff_37(a0)
	bne.s	loc_2AD06
	or.w	(Ctrl_2).w,d0

loc_2AD06:
	andi.w	#$7000,d0
	bne.s	return_2AD24
	move.w	#$202,objoff_36(a0)
	rts
; ===========================================================================

loc_2AD14:
	move.b	#1,objoff_B(a0)
	subq.w	#4,objoff_38(a0)
	bcc.s	return_2AD24
	clr.w	objoff_38(a0)

return_2AD24:
	rts
; ===========================================================================

loc_2AD26:
	move.b	(a2),d0
	bne.s	loc_2AD7A

loc_2AD2A:
	tst.w	(Debug_placement_mode).w
	bne.s	return_2AD78
	tst.w	y_vel(a1)
	bmi.s	return_2AD78
	bsr.w	JmpTo5_loc_1978E
	btst	d6,status(a0)
	beq.s	return_2AD78
	move.b	#$81,obj_control(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.w	#0,inertia(a1)
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	addq.b	#1,(a2)

return_2AD78:
	rts
; ===========================================================================

loc_2AD7A:
	cmpi.b	#4,routine(a1)
	bcc.s	return_2AD78
	subq.b	#1,d0
	bne.w	loc_2AE0C
	tst.b	render_flags(a1)
	bmi.s	loc_2ADB0
	bclr	d6,status(a0)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.b	#0,obj_control(a1)
	move.b	#0,(a2)
	rts
; ===========================================================================

loc_2ADB0:
	andi.w	#$7000,d5
	beq.s	loc_2ADFE
	tst.b	objoff_3A(a0)
	bne.s	loc_2ADFE
	move.b	#1,objoff_3A(a0)
	subq.b	#1,objoff_32(a0)
	bpl.s	loc_2ADDA
	move.b	#3,objoff_32(a0)
	cmpi.w	#$20,objoff_38(a0)
	beq.s	loc_2ADDA
	addq.w	#1,objoff_38(a0)

loc_2ADDA:
	subq.b	#1,objoff_33(a0)
	bpl.s	loc_2ADF8
	move.w	objoff_38(a0),d0
	subi.w	#$20,d0
	neg.w	d0
	lsr.w	#1,d0
	move.b	d0,objoff_33(a0)
	bchg	#2,objoff_B(a0)
	bra.s	loc_2ADFE
; ===========================================================================

loc_2ADF8:
	move.b	#1,objoff_B(a0)

loc_2ADFE:
	move.w	y_pos(a0),d0
	subi.w	#$2E,d0
	move.w	d0,y_pos(a1)
	rts
; ===========================================================================

loc_2AE0C:
	move.b	#0,(a2)
	bclr	d6,status(a0)
	beq.w	loc_2AD2A
	move.w	objoff_38(a0),d0
	addi.w	#$10,d0
	lsl.w	#7,d0
	neg.w	d0
	move.w	d0,y_vel(a1)
	move.w	#0,x_vel(a1)
	move.w	#$800,inertia(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.b	#0,obj_control(a1)
	move.w	#$E2,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_2AE56:

	move.b	#0,objoff_3A(a0)
	move.w	objoff_38(a0),d1
	lsr.w	#1,d1
	move.w	objoff_2E(a0),d0
	sub.w	d1,d0
	move.w	d0,x_pos(a0)
	move.w	objoff_34(a0),d0
	add.w	d1,d0
	move.w	d0,y_pos(a0)
	move.b	#2,objoff_15(a0)
	cmpi.w	#$10,objoff_38(a0)
	bcs.s	loc_2AE8A
	move.b	#3,objoff_15(a0)

loc_2AE8A:
	move.w	#$23,d1
	move.w	#8,d2
	move.w	#5,d3
	move.w	x_pos(a0),d4
	lea	objoff_36(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1_Logical).w,d5
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.s	loc_2AF06
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d5
	moveq	#4,d6
	bsr.s	loc_2AF06
	tst.w	objoff_36(a0)
	beq.s	loc_2AEF4
	tst.w	objoff_38(a0)
	beq.s	return_2AF04
	moveq	#0,d0
	cmpi.b	#1,objoff_36(a0)
	bne.s	loc_2AEDA
	or.w	(Ctrl_1_Logical).w,d0

loc_2AEDA:
	cmpi.b	#1,objoff_37(a0)
	bne.s	loc_2AEE6
	or.w	(Ctrl_2).w,d0

loc_2AEE6:
	andi.w	#$7000,d0
	bne.s	return_2AF04
	move.w	#$202,objoff_36(a0)
	rts
; ===========================================================================

loc_2AEF4:
	move.b	#1,objoff_B(a0)
	subq.w	#4,objoff_38(a0)
	bcc.s	return_2AF04
	clr.w	objoff_38(a0)

return_2AF04:
	rts
; ===========================================================================

loc_2AF06:
	move.b	(a2),d0
	bne.s	loc_2AF7A
	tst.w	(Debug_placement_mode).w
	bne.s	return_2AF78
	tst.w	y_vel(a1)
	bmi.s	return_2AF78
	bsr.w	JmpTo5_loc_1978E
	btst	d6,status(a0)
	bne.s	loc_2AF2E
	move.b	d6,d0
	addq.b	#2,d0
	btst	d0,status(a0)
	beq.s	return_2AF78
	bset	d6,status(a0)

loc_2AF2E:
	move.b	#$81,obj_control(a1)
	move.w	x_pos(a0),x_pos(a1)
	addi.w	#$13,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	subi.w	#$13,y_pos(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.w	#0,inertia(a1)
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	addq.b	#1,(a2)

return_2AF78:
	rts
; ===========================================================================

loc_2AF7A:
	cmpi.b	#4,routine(a1)
	bcc.s	return_2AF78
	subq.b	#1,d0
	bne.w	loc_2B018
	tst.b	render_flags(a1)
	bmi.s	loc_2AFB0
	bclr	d6,status(a0)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.b	#0,obj_control(a1)
	move.b	#0,(a2)
	rts
; ===========================================================================

loc_2AFB0:
	andi.w	#$7000,d5
	beq.s	loc_2AFFE
	tst.b	objoff_3A(a0)
	bne.s	loc_2AFFE
	move.b	#1,objoff_3A(a0)
	subq.b	#1,objoff_32(a0)
	bpl.s	loc_2AFDA
	move.b	#3,objoff_32(a0)
	cmpi.w	#$1C,objoff_38(a0)
	beq.s	loc_2AFDA
	addq.w	#1,objoff_38(a0)

loc_2AFDA:
	subq.b	#1,objoff_33(a0)
	bpl.s	loc_2AFF8
	move.w	objoff_38(a0),d0
	subi.w	#$1C,d0
	neg.w	d0
	lsr.w	#1,d0
	move.b	d0,objoff_33(a0)
	bchg	#2,objoff_B(a0)
	bra.s	loc_2AFFE
; ===========================================================================

loc_2AFF8:
	move.b	#1,objoff_B(a0)

loc_2AFFE:
	move.w	x_pos(a0),d0
	addi.w	#$13,d0
	move.w	d0,x_pos(a1)
	move.w	y_pos(a0),d0
	subi.w	#$13,d0
	move.w	d0,y_pos(a1)
	rts
; ===========================================================================

loc_2B018:
	move.b	#0,(a2)
	bclr	d6,status(a0)
	beq.w	return_2AF78
	move.w	objoff_38(a0),d0
	addi.w	#4,d0
	lsl.w	#7,d0
	move.w	d0,x_vel(a1)
	neg.w	d0
	move.w	d0,y_vel(a1)
	move.w	#$800,inertia(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	tst.b	subtype(a0)
	bpl.s	loc_2B068
	neg.w	d0
	move.w	d0,inertia(a1)
	bclr	#0,status(a1)
	bclr	#1,status(a1)
	move.b	#-$20,angle(a1)

loc_2B068:
	move.b	#2,routine(a1)
	move.b	#0,obj_control(a1)
	move.w	#$E2,d0
	jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj85_MapUnc_2B07E:	BINCLUDE "mappings/sprite/obj85_a.bin"
Obj85_MapUnc_2B0EC:	BINCLUDE "mappings/sprite/obj85_b.bin"
; ===========================================================================

JmpTo4_DisplaySprite3 
	jmp	DisplaySprite3
; ===========================================================================

JmpTo43_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo49_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo5_loc_1978E 
	jmp	loc_1978E
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 86 - Flipper from CNZ
; ----------------------------------------------------------------------------
; Sprite_2B140:
Obj86:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2B152(pc,d0.w),d1
	jsr	off_2B152(pc,d1.w)
	bra.w	JmpTo27_MarkObjGone
; ===========================================================================
off_2B152:
	dc.w loc_2B158-off_2B152
	dc.w loc_2B194-off_2B152; 1
	dc.w loc_2B312-off_2B152; 2
; ===========================================================================

loc_2B158:
	addq.b	#2,routine(a0)
	move.l	#Obj86_MapUnc_2B45A,mappings(a0)
	move.w	#$43B2,art_tile(a0)
	bsr.w	JmpTo50_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#4,priority(a0)
	tst.b	subtype(a0)
	beq.s	loc_2B194
	addq.b	#2,routine(a0)
	move.b	#2,anim(a0)
	bra.w	loc_2B312
; ===========================================================================

loc_2B194:

	tst.w	(Debug_placement_mode).w
	bne.s	return_2B208
	lea	(byte_2B3C6).l,a2
	move.b	mapping_frame(a0),d0
	beq.s	loc_2B1B6
	lea	(byte_2B3EA).l,a2
	subq.b	#1,d0
	beq.s	loc_2B1B6
	lea	(byte_2B40E).l,a2

loc_2B1B6:
	move.w	#$23,d1
	move.w	#6,d2
	move.w	x_pos(a0),d4
	bsr.w	JmpTo2_SolidObject86_30
	lea	objoff_36(a0),a3
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1_Logical).w,d5
	moveq	#3,d6
	bsr.s	loc_2B20A
	addq.w	#1,a3
	lea	(Sidekick).w,a1 ; a1=character
	move.w	(Ctrl_2).w,d5
	moveq	#4,d6
	bsr.s	loc_2B20A
	tst.b	objoff_38(a0)
	beq.s	loc_2B1FE
	clr.b	objoff_38(a0)
	bsr.w	loc_2B290
	subq.w	#1,a3
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	bsr.w	loc_2B290

loc_2B1FE:
	lea	(off_2B432).l,a1
	bra.w	JmpTo9_AnimateSprite
; ===========================================================================

return_2B208:
	rts
; ===========================================================================

loc_2B20A:
	move.b	(a3),d0
	bne.s	loc_2B23C
	btst	d6,status(a0)
	beq.s	return_2B208
	move.b	#1,obj_control(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	bset	#2,status(a1)
	bne.s	loc_2B238
	addq.w	#5,y_pos(a1)

loc_2B238:
	addq.b	#1,(a3)
	rts
; ===========================================================================

loc_2B23C:
	andi.w	#$70,d5
	bne.s	loc_2B288
	btst	d6,status(a0)
	bne.s	loc_2B254
	move.b	#0,obj_control(a1)
	move.b	#0,(a3)
	rts
; ===========================================================================

loc_2B254:
	moveq	#0,d1
	move.b	mapping_frame(a0),d1
	subq.w	#1,d1
	bset	#0,status(a1)
	btst	#0,status(a0)
	bne.s	loc_2B272
	neg.w	d1
	bclr	#0,status(a1)

loc_2B272:
	add.w	d1,x_pos(a1)
	lsl.w	#8,d1
	move.w	d1,x_vel(a1)
	move.w	d1,inertia(a1)
	move.w	#0,y_vel(a1)
	rts
; ===========================================================================

loc_2B288:
	move.b	#1,objoff_38(a0)
	rts
; ===========================================================================

loc_2B290:
	bclr	d6,status(a0)
	beq.w	return_2B208
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	btst	#0,status(a0)
	beq.s	loc_2B2AA
	neg.w	d0

loc_2B2AA:
	addi.w	#$23,d0
	move.w	d0,d2
	cmpi.w	#$40,d2
	bcs.s	loc_2B2BA
	move.w	#$40,d2

loc_2B2BA:
	lsl.w	#5,d2
	addi.w	#$800,d2
	neg.w	d2
	asr.w	#2,d0
	addi.w	#$40,d0
	bsr.w	JmpTo11_CalcSine
	muls.w	d2,d0
	muls.w	d2,d1
	asr.l	#8,d0
	asr.l	#8,d1
	move.w	d0,y_vel(a1)
	btst	#0,status(a0)
	beq.s	loc_2B2E2
	neg.w	d1

loc_2B2E2:
	move.w	d1,x_vel(a1)
	bset	#1,status(a1)
	bclr	#3,status(a1)
	move.b	#2,routine(a1)
	move.b	#0,obj_control(a1)
	move.b	#1,anim(a0)
	move.b	#0,(a3)
	move.w	#$E3,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_2B312:

	move.w	#$13,d1
	move.w	#$18,d2
	move.w	#$19,d3
	move.w	x_pos(a0),d4
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	JmpTo6_loc_1978E
	btst	#5,status(a0)
	beq.s	loc_2B33A
	bsr.s	loc_2B35C

loc_2B33A:
	movem.l	(sp)+,d1-d4
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	JmpTo6_loc_1978E
	btst	#6,status(a0)
	beq.s	loc_2B352
	bsr.s	loc_2B35C

loc_2B352:
	lea	(off_2B432).l,a1
	bra.w	JmpTo9_AnimateSprite
; ===========================================================================

loc_2B35C:
	move.w	#$300,anim(a0)
	move.w	#-$1000,x_vel(a1)
	addq.w	#8,x_pos(a1)
	bset	#0,status(a1)
	move.w	x_pos(a0),d0
	sub.w	x_pos(a1),d0
	bcc.s	loc_2B392
	bclr	#0,status(a1)
	subi.w	#$10,x_pos(a1)
	neg.w	x_vel(a1)
	move.w	#$400,anim(a0)

loc_2B392:
	move.w	#$F,move_lock(a1)
	move.w	x_vel(a1),inertia(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	bset	#2,status(a1)
	bne.s	loc_2B3BC
	addq.w	#5,y_pos(a1)

loc_2B3BC:
	move.w	#$E3,d0
	jmp	(PlaySound).l
; ===========================================================================
byte_2B3C6:
	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6
	dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6; 16
	dc.b $F5,$F4,$F3,$F2	; 32
byte_2B3EA:
	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8
	dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4; 16
	dc.b   4,  4,  4,  4	; 32
byte_2B40E:
	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D
	dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10; 16
	dc.b $10,$10,$10,$10	; 32

; animation script
off_2B432:
	dc.w byte_2B43C-off_2B432
	dc.w byte_2B43F-off_2B432; 1
	dc.w byte_2B445-off_2B432; 2
	dc.w byte_2B448-off_2B432; 3
	dc.w byte_2B451-off_2B432; 4
byte_2B43C:	dc.b  $F,  0,$FF
byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0
byte_2B445:	dc.b  $F,  4,$FF
byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2
byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj86_MapUnc_2B45A:	BINCLUDE "mappings/sprite/obj86.bin"
; ===========================================================================
	nop

JmpTo27_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo9_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo50_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo11_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo6_loc_1978E 
	jmp	loc_1978E
; ===========================================================================

JmpTo2_SolidObject86_30 
	jmp	SolidObject86_30
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D2 - Flashing blocks that appear and disappear in a rectangular shape that you can walk across, from CNZ
; ----------------------------------------------------------------------------
; Sprite_2B528:
ObjD2:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2B536(pc,d0.w),d1
	jmp	off_2B536(pc,d1.w)
; ===========================================================================
off_2B536:
	dc.w loc_2B53A-off_2B536
	dc.w loc_2B57E-off_2B536; 1
; ===========================================================================

loc_2B53A:
	addq.b	#2,routine(a0)
	move.l	#ObjD2_MapUnc_2B694,mappings(a0)
	move.w	#$437C,art_tile(a0)
	bsr.w	JmpTo51_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#8,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#4,d0
	move.w	d0,objoff_38(a0)
	bsr.w	loc_2B60C

loc_2B57E:
	tst.w	objoff_38(a0)
	beq.s	loc_2B58C
	subq.w	#1,objoff_38(a0)
	bra.w	JmpTo6_MarkObjGone3
; ===========================================================================

loc_2B58C:
	subq.w	#1,objoff_3A(a0)
	bpl.s	loc_2B5EC
	move.w	#$F,objoff_3A(a0)
	addq.b	#1,mapping_frame(a0)
	andi.b	#$F,mapping_frame(a0)
	bne.s	loc_2B5EA
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#4,d0
	move.w	d0,objoff_38(a0)
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	loc_2B5E2
	bclr	#3,status(a0)
	beq.s	loc_2B5CE
	bclr	#3,(MainCharacter+status).w
	bset	#1,(MainCharacter+status).w

loc_2B5CE:
	bclr	#4,status(a0)
	beq.s	loc_2B5E2
	bclr	#3,(Sidekick+status).w
	bset	#1,(Sidekick+status).w

loc_2B5E2:
	move.w	objoff_30(a0),x_pos(a0)
	bra.s	loc_2B60C
; ===========================================================================

loc_2B5EA:
	bsr.s	loc_2B60C

loc_2B5EC:
	move.w	objoff_34(a0),d1
	addi.w	#$B,d1
	move.w	objoff_36(a0),d2
	move.w	d2,d3
	addq.w	#1,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo24_SolidObject
	move.w	objoff_30(a0),d0
	bra.w	JmpTo9_MarkObjGone2
; ===========================================================================

loc_2B60C:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	add.w	d0,d0
	add.w	d0,d0
	lea	byte_2B654(pc,d0.w),a1
	move.b	(a1)+,d0
	ext.w	d0
	btst	#0,status(a0)
	beq.s	loc_2B628
	neg.w	d0

loc_2B628:
	add.w	objoff_30(a0),d0
	move.w	d0,x_pos(a0)
	move.b	(a1)+,d0
	ext.w	d0
	add.w	objoff_32(a0),d0
	move.w	d0,y_pos(a0)
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	move.b	(a1)+,d1
	move.b	(a1)+,d2
	move.w	d1,objoff_34(a0)
	move.b	d1,width_pixels(a0)
	move.w	d2,objoff_36(a0)
	rts
; ===========================================================================
byte_2B654:
	dc.b $D8,$18,  8,  8,$D8,$10,  8,$10,$D8,  8,  8,$18,$D8,  0,  8,$20
	dc.b $E0,  0,$10,$20,$E8,$F8,$18,$18,$F0,$F0,$20,$10,$F8,$E8,$28,  8; 16
	dc.b   8,$E8,$28,  8,$10,$F0,$20,$10,$18,$F8,$18,$18,$20,  0,$10,$20; 32
	dc.b $28,  0,  8,$20,$28,  8,  8,$18,$28,$10,  8,$10,$28,$18,  8,  8; 48
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD2_MapUnc_2B694:	BINCLUDE "mappings/sprite/objD2.bin"
; ===========================================================================
	nop

JmpTo6_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================

JmpTo51_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo24_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo9_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D3 - Bomb prize from CNZ
; ----------------------------------------------------------------------------
; Sprite_2B84C:
ObjD3:
	moveq	#0,d1
	move.w	objoff_38(a0),d1
	swap	d1
	move.l	objoff_30(a0),d0
	sub.l	d1,d0
	asr.l	#4,d0
	sub.l	d0,objoff_30(a0)
	move.w	objoff_30(a0),x_pos(a0)
	moveq	#0,d1
	move.w	objoff_3A(a0),d1
	swap	d1
	move.l	objoff_34(a0),d0
	sub.l	d1,d0
	asr.l	#4,d0
	sub.l	d0,objoff_34(a0)
	move.w	objoff_34(a0),y_pos(a0)
	subq.w	#1,objoff_3C(a0)
	bne.w	JmpTo28_DisplaySprite
	movea.l	objoff_2A(a0),a1
	subq.w	#1,(a1)
	cmpi.w	#5,($FFFFFF92).w
	bcs.s	loc_2B8A4
	clr.w	($FFFFFF92).w
	move.w	#$A6,d0
	jsr	(PlaySoundStereo).l

loc_2B8A4:
	tst.b	objoff_3F(a0)
	beq.s	loc_2B8C0
	tst.w	(Ring_count_2P).w
	beq.s	loc_2B8BA
	subq.w	#1,(Ring_count_2P).w
	ori.b	#-$7F,(Update_HUD_rings_2P).w

loc_2B8BA:
	tst.w	(Two_player_mode).w
	bne.s	BranchTo_JmpTo44_DeleteObject

loc_2B8C0:
	tst.w	(Ring_count).w
	beq.s	BranchTo_JmpTo44_DeleteObject
	subq.w	#1,(Ring_count).w
	ori.b	#-$7F,(Update_HUD_rings).w

BranchTo_JmpTo44_DeleteObject 
	bra.w	JmpTo44_DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD3_MapUnc_2B8D4:	BINCLUDE "mappings/sprite/objD6_a.bin"
; ===========================================================================

JmpTo28_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo44_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D4 - Big block from CNZ that moves back and fourth
; ----------------------------------------------------------------------------
; Sprite_2B8EC:
ObjD4:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2B8FA(pc,d0.w),d1
	jmp	off_2B8FA(pc,d1.w)
; ===========================================================================
off_2B8FA:
	dc.w loc_2B8FE-off_2B8FA
	dc.w loc_2B96E-off_2B8FA; 1
; ===========================================================================

loc_2B8FE:
	addq.b	#2,routine(a0)
	move.l	#ObjD4_MapUnc_2B9CA,mappings(a0)
	move.w	#$436C,art_tile(a0)
	bsr.w	JmpTo52_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.w	#$8000,objoff_A(a0)
	move.w	#$8000,objoff_E(a0)
	tst.b	subtype(a0)
	bne.s	loc_2B95A
	subi.w	#$60,x_pos(a0)
	btst	#0,status(a0)
	beq.s	loc_2B96E
	addi.w	#$C0,x_pos(a0)
	bra.s	loc_2B96E
; ===========================================================================

loc_2B95A:
	subi.w	#$60,y_pos(a0)
	btst	#1,status(a0)
	beq.s	loc_2B96E
	addi.w	#$C0,y_pos(a0)

loc_2B96E:
	move.w	x_pos(a0),-(sp)
	moveq	#0,d0
	move.b	subtype(a0),d0
	move.w	off_2B99E(pc,d0.w),d1
	jsr	off_2B99E(pc,d1.w)
	bsr.w	JmpTo17_ObjectMove
	move.w	#$2B,d1
	move.w	#$20,d2
	move.w	#$21,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo25_SolidObject
	move.w	objoff_30(a0),d0
	bra.w	JmpTo10_MarkObjGone2
; ===========================================================================
off_2B99E:
	dc.w loc_2B9A2-off_2B99E
	dc.w loc_2B9B6-off_2B99E; 1
; ===========================================================================

loc_2B9A2:
	moveq	#4,d1
	move.w	objoff_30(a0),d0
	cmp.w	x_pos(a0),d0
	bhi.s	loc_2B9B0
	neg.w	d1

loc_2B9B0:
	add.w	d1,x_vel(a0)
	rts
; ===========================================================================

loc_2B9B6:
	moveq	#4,d1
	move.w	objoff_32(a0),d0
	cmp.w	y_pos(a0),d0
	bhi.s	loc_2B9C4
	neg.w	d1

loc_2B9C4:
	add.w	d1,y_vel(a0)
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD4_MapUnc_2B9CA:	BINCLUDE "mappings/sprite/objD4.bin"
; ===========================================================================
	nop

JmpTo52_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo25_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo10_MarkObjGone2 
	jmp	MarkObjGone2
; ===========================================================================
; loc_2BA02:
JmpTo17_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D5 - Elevator from CNZ
; ----------------------------------------------------------------------------
; Sprite_2BA08:
ObjD5:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2BA16(pc,d0.w),d1
	jmp	off_2BA16(pc,d1.w)
; ===========================================================================
off_2BA16:
	dc.w loc_2BA1A-off_2BA16
	dc.w loc_2BA68-off_2BA16; 1
; ===========================================================================

loc_2BA1A:
	addq.b	#2,routine(a0)
	move.l	#ObjD5_MapUnc_2BB40,mappings(a0)
	move.w	#$4384,art_tile(a0)
	bsr.w	JmpTo53_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#4,priority(a0)
	move.w	y_pos(a0),objoff_32(a0)
	move.w	#$8000,objoff_E(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#2,d0
	sub.w	d0,y_pos(a0)
	btst	#0,status(a0)
	beq.s	loc_2BA68
	add.w	d0,d0
	add.w	d0,y_pos(a0)

loc_2BA68:

	bsr.w	JmpTo18_ObjectMove
	move.w	objoff_34(a0),d0
	move.w	off_2BA94(pc,d0.w),d1
	jsr	off_2BA94(pc,d1.w)
	cmpi.w	#6,objoff_34(a0)
	bcc.s	BranchTo_JmpTo28_MarkObjGone
	move.w	#$10,d1
	move.w	#9,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo_loc_19D3A

BranchTo_JmpTo28_MarkObjGone 
	bra.w	JmpTo28_MarkObjGone
; ===========================================================================
off_2BA94:
	dc.w loc_2BA9C-off_2BA94
	dc.w loc_2BAB6-off_2BA94; 1
	dc.w loc_2BAEE-off_2BA94; 2
	dc.w loc_2BB08-off_2BA94; 3
; ===========================================================================

loc_2BA9C:
	move.b	status(a0),d0
	andi.w	#$18,d0
	beq.s	return_2BAB4
	move.w	#$D6,d0
	jsr	(PlaySound).l
	addq.w	#2,objoff_34(a0)

return_2BAB4:
	rts
; ===========================================================================

loc_2BAB6:
	moveq	#8,d1
	move.w	objoff_32(a0),d0
	cmp.w	y_pos(a0),d0
	bcc.s	loc_2BAC4
	neg.w	d1

loc_2BAC4:
	add.w	d1,y_vel(a0)
	bne.s	return_2BAEC
	addq.w	#2,objoff_34(a0)
	move.w	d0,y_pos(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#2,d0
	sub.w	d0,y_pos(a0)
	btst	#0,status(a0)
	bne.s	return_2BAEC
	add.w	d0,d0
	add.w	d0,y_pos(a0)

return_2BAEC:
	rts
; ===========================================================================

loc_2BAEE:
	move.b	status(a0),d0
	andi.w	#$18,d0
	bne.s	return_2BB06
	move.w	#$D6,d0
	jsr	(PlaySound).l
	addq.w	#2,objoff_34(a0)

return_2BB06:
	rts
; ===========================================================================

loc_2BB08:
	moveq	#8,d1
	move.w	objoff_32(a0),d0
	cmp.w	y_pos(a0),d0
	bcc.s	loc_2BB16
	neg.w	d1

loc_2BB16:
	add.w	d1,y_vel(a0)
	bne.s	return_2BB3E
	clr.w	objoff_34(a0)
	move.w	d0,y_pos(a0)
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#2,d0
	sub.w	d0,y_pos(a0)
	btst	#0,status(a0)
	beq.s	return_2BB3E
	add.w	d0,d0
	add.w	d0,y_pos(a0)

return_2BB3E:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD5_MapUnc_2BB40:	BINCLUDE "mappings/sprite/objD5.bin"
; ===========================================================================

JmpTo28_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo53_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_loc_19D3A 
	jmp	loc_19D3A
; ===========================================================================
; loc_2BB66:
JmpTo18_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D6 - Pokey that gives out points from CNZ
; ----------------------------------------------------------------------------
; Sprite_2BB6C:
ObjD6:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2BB7A(pc,d0.w),d1
	jmp	off_2BB7A(pc,d1.w)
; ===========================================================================
off_2BB7A:
	dc.w loc_2BB7E-off_2BB7A
	dc.w loc_2BBA6-off_2BB7A; 1
; ===========================================================================

loc_2BB7E:
	addq.b	#2,routine(a0)
	move.l	#ObjD6_MapUnc_2BEBC,mappings(a0)
	move.w	#$388,art_tile(a0)
	bsr.w	JmpTo54_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#1,priority(a0)

loc_2BBA6:
	move.w	#$23,d1
	move.w	#$10,d2
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	lea	objoff_30(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#3,d6
	movem.l	d1-d4,-(sp)
	bsr.w	loc_2BBE8
	movem.l	(sp)+,d1-d4
	lea	objoff_34(a0),a2 ; a2=object
	lea	(Sidekick).w,a1 ; a1=character
	moveq	#4,d6
	bsr.w	loc_2BBE8
	lea	(off_2BEB0).l,a1
	bsr.w	JmpTo10_AnimateSprite
	bra.w	JmpTo29_MarkObjGone
; ===========================================================================

loc_2BBE8:
	move.w	(a2),d0
	move.w	off_2BBF2(pc,d0.w),d0
	jmp	off_2BBF2(pc,d0.w)
; ===========================================================================
off_2BBF2:
	dc.w loc_2BBF8-off_2BBF2
	dc.w loc_2BDF8-off_2BBF2; 1
	dc.w loc_2BE9C-off_2BBF2; 2
; ===========================================================================

loc_2BBF8:
	tst.b	obj_control(a1)
	bne.w	return_2BC84
	tst.b	subtype(a0)
	beq.s	loc_2BC0C
	tst.w	($FFFFFF4C).w
	bne.s	return_2BC84

loc_2BC0C:
	bsr.w	JmpTo7_loc_1978E
	tst.w	d4
	bpl.s	return_2BC84
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#0,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.w	#0,inertia(a1)
	move.b	#$81,obj_control(a1)
	bset	#2,status(a1)
	move.b	#$E,y_radius(a1)
	move.b	#7,x_radius(a1)
	move.b	#2,anim(a1)
	move.b	#1,anim(a0)
	addq.w	#2,(a2)+
	move.w	#$78,(a2)
	move.w	a1,parent(a0)
	tst.b	subtype(a0)
	beq.s	return_2BC84
	cmpi.b	#$18,($FFFFFF4E).w
	bne.s	return_2BC84
	move.b	#8,($FFFFFF4E).w
	clr.w	objoff_2E(a0)
	move.w	#-1,($FFFFFF4C).w
	move.w	#-1,objoff_2A(a0)

return_2BC84:
	rts
; ===========================================================================

loc_2BC86:
	move.w	($FFFFFF52).w,d0
	bpl.w	loc_2BD4E
	tst.w	objoff_2A(a0)
	bpl.s	loc_2BC9A
	move.w	#$64,objoff_2A(a0)

loc_2BC9A:
	tst.w	objoff_2A(a0)
	beq.w	loc_2BD40
	btst	#0,($FFFFFE05).w
	beq.w	loc_2BD48
	cmpi.w	#$10,objoff_2C(a0)
	bcc.w	loc_2BD48
	bsr.w	JmpTo10_SingleObjLoad
	bne.w	loc_2BD48
	_move.b	#$D3,0(a1) ; load objD3
	move.l	#ObjD3_MapUnc_2B8D4,mappings(a1)
	move.w	#$380,art_tile(a1)
	bsr.w	JmpTo6_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#4,priority(a1)
	move.w	#$1E,objoff_3C(a1)
	move.w	objoff_2E(a0),objoff_2E(a1)
	addi.w	#$90,objoff_2E(a0)
	move.w	x_pos(a0),objoff_38(a1)
	move.w	y_pos(a0),objoff_3A(a1)
	move.w	objoff_2E(a1),d0
	bsr.w	JmpTo12_CalcSine
	asr.w	#1,d1
	add.w	objoff_38(a1),d1
	move.w	d1,objoff_30(a1)
	move.w	d1,x_pos(a1)
	asr.w	#1,d0
	add.w	objoff_3A(a1),d0
	move.w	d0,objoff_34(a1)
	move.w	d0,y_pos(a1)
	lea	objoff_2C(a0),a2
	move.l	a2,objoff_2A(a1)
	move.w	parent(a0),parent(a1)
	addq.w	#1,objoff_2C(a0)
	subq.w	#1,objoff_2A(a0)

loc_2BD40:
	tst.w	objoff_2C(a0)
	beq.w	loc_2BE2E

loc_2BD48:
	addq.w	#1,($FFFFFF92).w
	rts
; ===========================================================================

loc_2BD4E:
	beq.w	loc_2BDF0
	btst	#0,($FFFFFE05).w
	beq.w	return_2BDF6
	cmpi.w	#$10,objoff_2C(a0)
	bcc.w	return_2BDF6
	bsr.w	JmpTo10_SingleObjLoad
	bne.w	return_2BDF6
	_move.b	#$DC,0(a1) ; load objDC
	move.l	#Obj25_MapUnc_12382,mappings(a1)
	move.w	#$26BC,art_tile(a1)
	bsr.w	JmpTo6_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#8,width_pixels(a1)
	move.w	#$1A,objoff_3C(a1)
	move.w	objoff_2E(a0),objoff_2E(a1)
	addi.w	#$89,objoff_2E(a0)
	move.w	x_pos(a0),objoff_38(a1)
	move.w	y_pos(a0),objoff_3A(a1)
	move.w	objoff_2E(a1),d0
	bsr.w	JmpTo12_CalcSine
	asr.w	#1,d1
	add.w	objoff_38(a1),d1
	move.w	d1,objoff_30(a1)
	move.w	d1,x_pos(a1)
	asr.w	#1,d0
	add.w	objoff_3A(a1),d0
	move.w	d0,objoff_34(a1)
	move.w	d0,y_pos(a1)
	lea	objoff_2C(a0),a2
	move.l	a2,objoff_2A(a1)
	move.w	parent(a0),parent(a1)
	addq.w	#1,objoff_2C(a0)
	subq.w	#1,($FFFFFF52).w

loc_2BDF0:
	tst.w	objoff_2C(a0)
	beq.s	loc_2BE2E

return_2BDF6:
	rts
; ===========================================================================

loc_2BDF8:
	tst.b	render_flags(a0)
	bpl.s	loc_2BE2E
	tst.b	subtype(a0)
	beq.s	loc_2BE28
	move.w	a1,objoff_3E(a0)
	cmpi.b	#$18,($FFFFFF4E).w
	beq.w	loc_2BC86
	move.b	($FFFFFE0F).w,d0
	andi.w	#$F,d0
	bne.s	return_2BE26
	move.w	#$C0,d0
	jsr	(PlaySound).l

return_2BE26:
	rts
; ===========================================================================

loc_2BE28:
	subq.w	#1,art_tile(a2)
	bpl.s	loc_2BE5E

loc_2BE2E:
	move.w	#0,objoff_2C(a0)
	move.b	#0,anim(a0)
	move.b	#0,objoff_2A(a1)
	bclr	d6,status(a0)
	bclr	#3,status(a1)
	bset	#1,status(a1)
	move.w	#$400,y_vel(a1)
	addq.w	#2,(a2)+
	move.w	#$1E,(a2)
	rts
; ===========================================================================

loc_2BE5E:
	move.w	art_tile(a2),d0
	andi.w	#$F,d0
	bne.s	return_2BE9A
	move.w	#$C0,d0
	jsr	(PlaySound).l
	moveq	#$A,d0
	movea.w	a1,a3
	jsr	AddPoints2
	bsr.w	JmpTo10_SingleObjLoad
	bne.s	return_2BE9A
	_move.b	#$29,0(a1) ; load obj29
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#0,mapping_frame(a1)

return_2BE9A:
	rts
; ===========================================================================

loc_2BE9C:
	subq.w	#1,art_tile(a2)
	bpl.s	return_2BEAE
	clr.w	(a2)
	tst.b	subtype(a0)
	beq.s	return_2BEAE
	clr.w	($FFFFFF4C).w

return_2BEAE:
	rts
; ===========================================================================
off_2BEB0:	dc.w byte_2BEB4-off_2BEB0
		dc.w byte_2BEB7-off_2BEB0; 1
byte_2BEB4:	dc.b  $F,  0,$FF
byte_2BEB7:	dc.b   1,  1,  0,$FF,  0
; ------------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------------
ObjD6_MapUnc_2BEBC:	BINCLUDE "mappings/sprite/objD6_b.bin"
; ===========================================================================


; ------------------------------------------------------------------------------
; runs the slot machines in CNZ
; ------------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_2BF24:
SlotMachine:
	lea	($FFFFFF4E).w,a4
	moveq	#0,d0
	_move.b	0(a4),d0
	jmp	SlotMachine_JmpTable(pc,d0.w)
; ===========================================================================
; loc_2BF32:
SlotMachine_JmpTable: ;;
	bra.w	SlotMachine_Routine1
	bra.w	SlotMachine_Routine2
	bra.w	SlotMachine_Routine3
	bra.w	SlotMachine_Routine4
	bra.w	SlotMachine_Routine5
	bra.w	SlotMachine_Routine6
	rts
; ===========================================================================
; loc_2BF4C:
SlotMachine_Routine1:
	movea.l	a4,a1
	moveq	#8,d0

-	clr.w	(a1)+
	dbf	d0,-

	move.b	($FFFFFE0F).w,d0
	move.b	d0,6(a4)
	ror.b	#3,d0
	move.b	d0,$A(a4)
	ror.b	#3,d0
	move.b	d0,$E(a4)
	move.b	#8,7(a4)
	move.b	#8,$B(a4)
	move.b	#8,$F(a4)
	move.b	#8,8(a4)
	move.b	#8,$C(a4)
	move.b	#8,$10(a4)
	move.b	#1,1(a4)
	_addq.b	#4,0(a4)
	rts
; ===========================================================================
; loc_2BF9A:
SlotMachine_Routine2:
	bsr.w	loc_2C20A
	tst.b	1(a4)
	beq.s	loc_2BFA6
	rts
; ===========================================================================

loc_2BFA6:
	_move.b	#$18,0(a4)
	clr.w	8(a4)
	clr.w	$C(a4)
	clr.w	$10(a4)
	rts
; ===========================================================================
; loc_2BFBA:
SlotMachine_Routine3:
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	subq.b	#4,d0
	addi.b	#$30,d0
	move.b	d0,8(a4)
	move.b	($FFFFFE0F).w,d0
	rol.b	#4,d0
	andi.b	#7,d0
	subq.b	#4,d0
	addi.b	#$30,d0
	move.b	d0,$C(a4)
	move.b	($FFFFFE0E).w,d0
	andi.b	#7,d0
	subq.b	#4,d0
	addi.b	#$30,d0
	move.b	d0,$10(a4)
	move.b	#2,1(a4)
	clr.b	3(a4)
	clr.b	9(a4)
	clr.b	$D(a4)
	clr.b	$11(a4)
	_addq.b	#4,0(a4)
	move.b	($FFFFFE0F).w,d0
	ror.b	#3,d0
	lea	(byte_2C3EC).l,a2

loc_2C018:
	sub.b	(a2),d0
	bcs.s	loc_2C020
	addq.w	#3,a2
	bra.s	loc_2C018
; ===========================================================================

loc_2C020:
	cmpi.b	#-1,(a2)
	beq.s	loc_2C034
	move.b	1(a2),4(a4)
	move.b	2(a2),5(a4)
	rts
; ===========================================================================

loc_2C034:
	move.b	d0,d1
	andi.w	#7,d1
	lea	(byte_2C401).l,a1
	move.b	(a1,d0.w),4(a4)
	ror.b	#3,d0
	move.b	d0,d1
	andi.w	#7,d1
	lea	(byte_2C409).l,a1
	move.b	(a1,d1.w),d2
	lsl.b	#4,d2
	ror.b	#3,d0
	andi.w	#7,d0
	lea	(byte_2C411).l,a1
	or.b	(a1,d0.w),d2
	move.b	d2,5(a4)
	rts
; ===========================================================================
; loc_2C070:
SlotMachine_Routine4:
	bsr.w	loc_2C20A
	tst.b	1(a4)
	beq.s	loc_2C07C
	rts
; ===========================================================================

loc_2C07C:
	addi.b	#$30,8(a4)
	addi.b	#$30,$C(a4)
	addi.b	#$30,$10(a4)
	move.b	($FFFFFE0F).w,d0
	andi.b	#$F,d0
	addi.b	#$C,d0
	move.b	d0,1(a4)
	clr.b	2(a4)
	_addq.b	#4,0(a4)
	rts
; ===========================================================================
; loc_2C0A8:
SlotMachine_Routine5:
	bsr.w	loc_2C20A
	cmpi.b	#$C,9(a4)
	bne.s	loc_2C0C6
	cmpi.b	#$C,$D(a4)
	bne.s	loc_2C0C6
	cmpi.b	#$C,$11(a4)
	beq.w	SlotMachine_Routine6

loc_2C0C6:
	moveq	#0,d0
	move.b	3(a4),d0
	lea	6(a4),a1
	adda.w	d0,a1
	lea	(byte_2C401).l,a3
	add.w	d0,d0
	adda.w	d0,a3
	moveq	#0,d0
	move.b	3(a1),d0
	jmp	SlotMachine_Routine5_JmpTable(pc,d0.w)
; ===========================================================================

; loc_2C0E6
SlotMachine_Routine5_JmpTable: ;;
	bra.w	SlotMachine_Routine5_1
	bra.w	SlotMachine_Routine5_2
	bra.w	SlotMachine_Routine5_3
	bra.w	SlotMachine_Routine5_4
; ===========================================================================

loc_2C0F6:
	move.w	4(a4),d1
	move.b	3(a4),d0
	beq.s	loc_2C102
	lsr.w	d0,d1

loc_2C102:
	andi.w	#7,d1
	cmpi.b	#5,d1
	bgt.s	loc_2C10E
	rts
; ===========================================================================

loc_2C10E:
	subq.b	#2,d1
	rts
; ===========================================================================

loc_2C112:
	move.w	#-$10,d2
	andi.w	#$F,d1
	move.b	3(a4),d0
	beq.s	loc_2C124
	lsl.w	d0,d1
	rol.w	d0,d2

loc_2C124:
	and.w	d2,4(a4)
	or.w	d1,4(a4)
	andi.w	#$777,4(a4)
	rts
; ===========================================================================
; loc_2C134:
SlotMachine_Routine5_1:
	tst.b	3(a4)
	bne.s	loc_2C142
	tst.b	1(a4)
	bmi.s	loc_2C14C
	rts
; ===========================================================================

loc_2C142:
	cmpi.b	#8,-1(a1)
	bge.s	loc_2C14C
	rts
; ===========================================================================

loc_2C14C:
	bsr.s	loc_2C0F6
	move.w	(a1),d0
	subi.w	#$A0,d0
	lsr.w	#8,d0
	andi.w	#7,d0
	move.b	(a3,d0.w),d0
	cmp.b	d1,d0
	beq.s	loc_2C164
	rts
; ===========================================================================

loc_2C164:
	addq.b	#4,3(a1)
	move.b	#$60,2(a1)
	rts
; ===========================================================================
; loc_2C170:
SlotMachine_Routine5_2:
	bsr.s	loc_2C0F6
	move.w	(a1),d0
	addi.w	#$F0,d0
	andi.w	#$700,d0
	lsr.w	#8,d0
	move.b	(a3,d0.w),d0
	cmp.b	d0,d1
	beq.s	loc_2C1AE
	cmpi.b	#$20,2(a1)
	bls.s	loc_2C194
	subi.b	#$C,2(a1)

loc_2C194:
	cmpi.b	#$18,2(a1)
	bgt.s	loc_2C19E
	rts
; ===========================================================================

loc_2C19E:
	cmpi.b	#$80,1(a1)
	bls.s	loc_2C1A8
	rts
; ===========================================================================

loc_2C1A8:
	subq.b	#2,2(a1)
	rts
; ===========================================================================

loc_2C1AE:
	move.w	(a1),d0
	addi.w	#$80,d0
	move.w	d0,d1
	andi.w	#$700,d1
	subi.w	#$10,d1
	move.w	d1,(a1)
	lsr.w	#8,d0
	andi.w	#7,d0
	move.b	(a3,d0.w),d1
	bsr.w	loc_2C112
	move.b	#-8,2(a1)
	addq.b	#4,3(a1)
	rts
; ===========================================================================
; loc_2C1DA:
SlotMachine_Routine5_3:
	tst.b	1(a1)
	beq.s	loc_2C1E2
	rts
; ===========================================================================

loc_2C1E2:
	clr.b	2(a1)
	addq.b	#4,3(a1)
	rts
; ===========================================================================
; return_2C1EC:
SlotMachine_Routine5_4:
	rts
; ===========================================================================
; loc_2C1EE:
SlotMachine_Routine6:
	clr.w	8(a4)
	clr.w	$C(a4)
	clr.w	$10(a4)
	clr.b	1(a4)
	bsr.w	SlotMachine_ChooseReward
	_move.b	#$18,0(a4)
	rts
; ===========================================================================

loc_2C20A:
	moveq	#0,d0
	move.b	3(a4),d0
	lea	6(a4),a1
	adda.w	d0,a1
	lea	(byte_2C401).l,a3
	adda.w	d0,a3
	adda.w	d0,a3
	jmp	BranchTo_SlotMachine_Routine6_1(pc,d0.w)
; ===========================================================================

BranchTo_SlotMachine_Routine6_1 
	bra.w	SlotMachine_Routine6_1
	bra.w	SlotMachine_Routine6_2

	clr.b	3(a4)
	subq.b	#1,1(a4)
	move.w	#$AE00,d2
	bra.s	loc_2C24E
; ===========================================================================
; loc_2C23A:
SlotMachine_Routine6_1:
	addq.b	#4,3(a4)
	move.w	#$AA00,d2
	bra.w	loc_2C24E
; ===========================================================================
; loc_2C246:
SlotMachine_Routine6_2:
	addq.b	#4,3(a4)
	move.w	#$AC00,d2

loc_2C24E:
	move.w	(a1),d0
	move.b	2(a1),d1
	ext.w	d1
	sub.w	d1,(a1)
	move.w	(a1),d3
	andi.w	#$7F8,d0
	andi.w	#$7F8,d3
	cmp.w	d0,d3
	bne.s	loc_2C268
	rts
; ---------------------------------------------------------------------------
loc_2C268:
	bsr.w	loc_2C2B8
	lea	($FFFFA000).w,a1
	move.w	#$1F,d1

-	move.l	$80(a2),$80(a1)
	move.l	$100(a2),$100(a1)
	move.l	$180(a2),$180(a1)
	move.l	(a2)+,(a1)+
	addq.b	#8,d3
	bne.s	+
	addi.w	#$100,d3
	andi.w	#$700,d3
	bsr.w	loc_2C2B8
+	dbf	d1,-

	move.l	#$FFA000,d1
	tst.w	(Two_player_mode).w
	beq.s	loc_2C2AC
	addi.w	#$4000,d2

loc_2C2AC:
	move.w	#$100,d3
	jsr	(QueueDMATransfer).l
	rts
; ===========================================================================

loc_2C2B8:
	move.w	d3,d0
	lsr.w	#8,d0
	andi.w	#7,d0
	move.b	(a3,d0.w),d0
	andi.w	#7,d0
	ror.w	#7,d0
	lea	(ArtUnc_CNZSlotPics).l,a2
	adda.w	d0,a2
	move.w	d3,d0
	andi.w	#$F8,d0
	lsr.w	#1,d0
	adda.w	d0,a2
	rts
; ===========================================================================

; loc_2C2DE:
SlotMachine_ChooseReward:
	move.b	5(a4),d2
	move.b	d2,d3
	andi.w	#$F0,d2
	lsr.w	#4,d2
	andi.w	#$F,d3
	moveq	#0,d0
	cmp.b	4(a4),d2
	bne.s	+
	addq.w	#4,d0
+
	cmp.b	4(a4),d3
	bne.s	+
	addq.w	#8,d0
+
	jmp	SlotMachine_ChooseReward_JmpTable(pc,d0.w)
; ===========================================================================

; loc_2C304:
SlotMachine_ChooseReward_JmpTable: ;;
	bra.w	loc_2C374
	bra.w	loc_2C34A
	bra.w	loc_2C31C

	move.w	d2,d0
	bsr.w	loc_2C3CA
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C31C:
	cmpi.b	#3,d3
	bne.s	loc_2C332
	move.w	d2,d0
	bsr.w	loc_2C3CA
	bsr.w	loc_2C3D8
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C332:
	cmpi.b	#3,d2
	bne.w	loc_2C374
	move.w	d3,d0
	bsr.w	loc_2C3CA
	bsr.w	loc_2C3DC
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C34A:
	cmpi.b	#3,d2
	bne.s	loc_2C35E
	move.w	d3,d0
	bsr.s	loc_2C3CA
	bsr.w	loc_2C3D8
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C35E:
	cmpi.b	#3,d3
	bne.w	loc_2C374
	move.w	d2,d0
	bsr.s	loc_2C3CA
	bsr.w	loc_2C3DC
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C374:
	cmp.b	d2,d3
	bne.s	loc_2C3A8
	cmpi.b	#3,4(a4)
	bne.s	loc_2C38E
	move.w	d2,d0
	bsr.s	loc_2C3CA
	bsr.w	loc_2C3DC
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C38E:
	cmpi.b	#3,d2
	bne.s	loc_2C3A8
	move.b	4(a4),d0
	andi.w	#$F,d0
	bsr.s	loc_2C3CA
	bsr.w	loc_2C3D8
	move.w	d0,4(a4)
	rts
; ===========================================================================

loc_2C3A8:
	moveq	#2,d1
	moveq	#0,d0
	cmpi.b	#5,4(a4)
	bne.s	+
	add.w	d1,d0
+
	cmpi.b	#5,d2
	bne.s	+
	add.w	d1,d0
+
	cmpi.b	#5,d3
	bne.s	+
	add.w	d1,d0
+
	move.w	d0,4(a4)

loc_2C3CA:
	add.w	d0,d0
	lea	(byte_2C3E0).l,a2
	move.w	(a2,d0.w),d0
	rts
; ===========================================================================

loc_2C3D8:
	asl.w	#2,d0
	rts
; ===========================================================================

loc_2C3DC:
	add.w	d0,d0
	rts

; ===========================================================================
; data for the slot machines
byte_2C3E0:	dc.b   0,$1E,  0,$19,$FF,$FF,  0,$96,  0, $A,  0,$14
byte_2C3EC:	dc.b 8,3,$33,$12,0,0,$12,1,$11,$24,2,$22,$1E,4,$44,$1E
		dc.b 5,$55,$FF,$F,$FF	; 16
byte_2C401:	dc.b   3,  0,  1,  4,  2,  5,  4,  1
byte_2C409:	dc.b   3,  0,  1,  4,  2,  5,  0,  2
byte_2C411:	dc.b   3,  0,  1,  4,  2,  5,  4,  1,  0
; ===========================================================================
	nop

JmpTo10_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo29_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo10_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo6_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo54_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo12_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo7_loc_1978E 
	jmp	loc_1978E
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D7 - Bumper from Casino Night Zone
; ----------------------------------------------------------------------------
; Sprite_2C448:
ObjD7:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2C456(pc,d0.w),d1
	jmp	off_2C456(pc,d1.w)
; ===========================================================================
off_2C456:
	dc.w loc_2C45A-off_2C456
	dc.w loc_2C4AC-off_2C456; 1
; ===========================================================================

loc_2C45A:
	addq.b	#2,routine(a0)
	move.l	#ObjD7_MapUnc_2C626,mappings(a0)
	move.w	#$4394,art_tile(a0)
	bsr.w	JmpTo55_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	#$CA,collision_flags(a0)
	btst	#0,status(a0)
	beq.s	loc_2C496
	move.b	#1,objoff_34(a0)

loc_2C496:
	move.w	x_pos(a0),d0
	move.w	d0,d1
	subi.w	#$60,d0
	move.w	d0,objoff_30(a0)
	addi.w	#$60,d1
	move.w	d1,objoff_32(a0)

loc_2C4AC:
	move.b	collision_property(a0),d0
	beq.w	loc_2C57E
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#0,collision_property(a0)
	beq.s	loc_2C4C2
	bsr.s	loc_2C4D8

loc_2C4C2:
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#1,collision_property(a0)
	beq.s	loc_2C4D0
	bsr.s	loc_2C4D8

loc_2C4D0:
	clr.b	collision_property(a0)
	bra.w	loc_2C57E
; ===========================================================================

loc_2C4D8:
	move.w	x_pos(a0),d1
	move.w	y_pos(a0),d2
	sub.w	x_pos(a1),d1
	sub.w	y_pos(a1),d2
	jsr	(CalcAngle).l
	addi.b	#$20,d0
	andi.w	#$C0,d0
	cmpi.w	#$40,d0
	beq.s	loc_2C516
	cmpi.w	#$80,d0
	beq.s	loc_2C534
	cmpi.w	#$C0,d0
	beq.s	loc_2C542
	move.w	#-$800,x_vel(a1)
	move.b	#2,anim(a0)
	bra.s	loc_2C55E
; ===========================================================================

loc_2C516:
	subi.w	#$200,x_vel(a1)
	tst.w	d1
	bpl.s	loc_2C526
	addi.w	#$400,x_vel(a1)

loc_2C526:
	move.w	#-$800,y_vel(a1)
	move.b	#1,anim(a0)
	bra.s	loc_2C55E
; ===========================================================================

loc_2C534:
	move.w	#$800,x_vel(a1)
	move.b	#2,anim(a0)
	bra.s	loc_2C55E
; ===========================================================================

loc_2C542:
	subi.w	#$200,x_vel(a1)
	tst.w	d1
	bpl.s	loc_2C552
	addi.w	#$400,x_vel(a1)

loc_2C552:
	move.w	#$800,y_vel(a1)
	move.b	#1,anim(a0)

loc_2C55E:
	bset	#1,status(a1)
	bclr	#4,status(a1)
	bclr	#5,status(a1)
	clr.b	jumping(a1)
	move.w	#$B4,d0
	jmp	(PlaySound).l
; ===========================================================================

loc_2C57E:
	lea	(off_2C610).l,a1
	bsr.w	JmpTo11_AnimateSprite
	tst.b	subtype(a0)
	beq.w	JmpTo30_MarkObjGone
	tst.b	objoff_34(a0)
	beq.s	loc_2C5AE
	move.w	x_pos(a0),d0
	subq.w	#1,d0
	cmp.w	objoff_30(a0),d0
	bne.s	loc_2C5A8
	move.b	#0,objoff_34(a0)

loc_2C5A8:
	move.w	d0,x_pos(a0)
	bra.s	loc_2C5C4
; ===========================================================================

loc_2C5AE:
	move.w	x_pos(a0),d0
	addq.w	#1,d0
	cmp.w	objoff_32(a0),d0
	bne.s	loc_2C5C0
	move.b	#1,objoff_34(a0)

loc_2C5C0:
	move.w	d0,x_pos(a0)

loc_2C5C4:
	tst.w	(Two_player_mode).w
	beq.s	loc_2C5CE
	bra.w	JmpTo30_DisplaySprite
; ===========================================================================

loc_2C5CE:
	move.w	objoff_30(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bls.s	JmpTo29_DisplaySprite
	move.w	objoff_32(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.s	loc_2C5F8

JmpTo29_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

loc_2C5F8:
	lea	(Object_Respawn_Table).w,a2
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	JmpTo45_DeleteObject
	bclr	#7,2(a2,d0.w)

JmpTo45_DeleteObject 
	jmp	DeleteObject
; ===========================================================================
; animation script
off_2C610:
	dc.w byte_2C616-off_2C610
	dc.w byte_2C619-off_2C610; 1
	dc.w byte_2C61F-off_2C610; 2
byte_2C616:	dc.b  $F,  0,$FF
byte_2C619:	dc.b   3,  1,  0,  1,$FD,  0
byte_2C61F:	dc.b   3,  2,  0,  2,$FD,  0
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD7_MapUnc_2C626:	BINCLUDE "mappings/sprite/objD7.bin"
; ===========================================================================
	nop

JmpTo30_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo30_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo11_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo55_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D8 - Block thingy from CNZ that disappears after 3 hits (UFO saucer-shaped)
; ----------------------------------------------------------------------------
; Sprite_2C6AC:
ObjD8:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2C6BA(pc,d0.w),d1
	jmp	off_2C6BA(pc,d1.w)
; ===========================================================================
off_2C6BA:
	dc.w loc_2C6C0-off_2C6BA
	dc.w loc_2C6FC-off_2C6BA; 1
	dc.w loc_2C884-off_2C6BA; 2
; ===========================================================================

loc_2C6C0:
	addq.b	#2,routine(a0)
	move.l	#ObjD8_MapUnc_2C8C4,mappings(a0)
	move.w	#$43E6,art_tile(a0)
	bsr.w	JmpTo56_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#1,priority(a0)
	move.b	#$D7,collision_flags(a0)
	move.b	subtype(a0),d0
	rol.b	#2,d0
	andi.b	#3,d0
	move.b	d0,anim(a0)

loc_2C6FC:
	move.b	collision_property(a0),d0
	bne.w	loc_2C70A
	tst.w	objoff_30(a0)
	beq.s	loc_2C740

loc_2C70A:
	lea	objoff_30(a0),a4
	tst.b	(a4)
	beq.s	loc_2C716
	subq.b	#1,(a4)
	bra.s	loc_2C724
; ===========================================================================

loc_2C716:
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#0,collision_property(a0)
	beq.s	loc_2C724
	bsr.s	loc_2C74E

loc_2C724:
	addq.w	#1,a4
	tst.b	(a4)
	beq.s	loc_2C72E
	subq.b	#1,(a4)
	bra.s	loc_2C73C
; ===========================================================================

loc_2C72E:
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#1,collision_property(a0)
	beq.s	loc_2C73C
	bsr.s	loc_2C74E

loc_2C73C:
	clr.b	collision_property(a0)

loc_2C740:
	lea	(off_2C89C).l,a1
	bsr.w	JmpTo12_AnimateSprite
	bra.w	JmpTo31_MarkObjGone
; ===========================================================================

loc_2C74E:
	move.b	mapping_frame(a0),d0
	subq.b	#3,d0
	beq.s	loc_2C75C
	bcc.s	loc_2C77A
	addq.b	#3,d0
	bne.s	loc_2C77A

loc_2C75C:
	move.b	#3,anim(a0)
	move.w	#-$700,y_vel(a1)
	move.w	y_pos(a0),d2
	sub.w	y_pos(a1),d2
	bpl.s	BranchTo_loc_2C806
	neg.w	y_vel(a1)

BranchTo_loc_2C806 
	bra.w	loc_2C806
; ===========================================================================

loc_2C77A:
	subq.b	#1,d0
	bne.s	loc_2C7EC
	move.b	#4,anim(a0)
	move.w	#$20,d3
	btst	#0,status(a0)
	bne.s	loc_2C794
	move.w	#$60,d3

loc_2C794:
	move.w	x_vel(a1),d1
	move.w	y_vel(a1),d2
	jsr	(CalcAngle).l
	sub.w	d3,d0
	move.w	d0,d1
	bpl.s	loc_2C7AA
	neg.w	d1

loc_2C7AA:
	neg.w	d0
	add.w	d3,d0
	cmpi.b	#$40,d1
	bcc.s	loc_2C7BE
	cmpi.b	#$38,d1
	bcs.s	loc_2C7D0
	move.w	d3,d0
	bra.s	loc_2C7D0
; ===========================================================================

loc_2C7BE:
	subi.w	#$80,d1
	neg.w	d1
	cmpi.b	#$38,d1
	bcs.s	loc_2C7D0
	move.w	d3,d0
	addi.w	#$80,d0

loc_2C7D0:
	jsr	(CalcSine).l
	muls.w	#-$700,d1
	asr.l	#8,d1
	move.w	d1,x_vel(a1)
	muls.w	#-$700,d0
	asr.l	#8,d0
	move.w	d0,y_vel(a1)
	bra.s	loc_2C806
; ===========================================================================

loc_2C7EC:
	move.b	#5,anim(a0)
	move.w	#-$700,x_vel(a1)
	move.w	x_pos(a0),d2
	sub.w	x_pos(a1),d2
	bpl.s	loc_2C806
	neg.w	x_vel(a1)

loc_2C806:
	bset	#1,status(a1)
	bclr	#4,status(a1)
	bclr	#5,status(a1)
	clr.b	jumping(a1)
	move.w	#$D8,d0
	jsr	(PlaySound).l
	movea.w	a1,a3
	moveq	#4,d3
	moveq	#1,d0
	subi.w	#$2000,art_tile(a0)
	bcc.s	loc_2C85C
	addi.w	#$2000,art_tile(a0)
	move.b	#4,routine(a0)
	lea	($FFFFE700).w,a1
	move.b	subtype(a0),d1
	andi.w	#$3F,d1
	lea	(a1,d1.w),a1
	addq.b	#1,(a1)
	cmpi.b	#3,(a1)
	bcs.s	loc_2C85C
	moveq	#2,d3
	moveq	#$32,d0

loc_2C85C:
	jsr	AddPoints2
	bsr.w	JmpTo11_SingleObjLoad
	bne.s	loc_2C87E
	_move.b	#$29,0(a1) ; load obj29
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	d3,mapping_frame(a1)

loc_2C87E:
	move.b	#4,(a4)
	rts
; ===========================================================================

loc_2C884:
	lea	(off_2C89C).l,a1
	bsr.w	JmpTo12_AnimateSprite
	cmpi.b	#3,anim(a0)
	bcs.w	JmpTo46_DeleteObject
	bra.w	JmpTo31_MarkObjGone
; ===========================================================================
; animation script
off_2C89C:
	dc.w byte_2C8A8-off_2C89C
	dc.w byte_2C8AB-off_2C89C; 1
	dc.w byte_2C8AE-off_2C89C; 2
	dc.w byte_2C8B1-off_2C89C; 3
	dc.w byte_2C8B7-off_2C89C; 4
	dc.w byte_2C8BD-off_2C89C; 5
byte_2C8A8:	dc.b  $F,  0,$FF
byte_2C8AB:	dc.b  $F,  1,$FF
byte_2C8AE:	dc.b  $F,  2,$FF
byte_2C8B1:	dc.b   3,  3,  0,  3,$FD,  0
byte_2C8B7:	dc.b   3,  4,  1,  4,$FD,  1
byte_2C8BD:	dc.b   3,  5,  2,  5,$FD,  2
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjD8_MapUnc_2C8C4:	BINCLUDE "mappings/sprite/objD8.bin"
; ===========================================================================

JmpTo46_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo11_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo31_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo12_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo56_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object D9 - Invisible sprite that you can hang on to, like the blocks in WFZ
; ----------------------------------------------------------------------------
; Sprite_2C92C:
ObjD9:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2C93A(pc,d0.w),d1
	jmp	off_2C93A(pc,d1.w)
; ===========================================================================
off_2C93A:
	dc.w loc_2C93E-off_2C93A
	dc.w loc_2C954-off_2C93A; 1
; ===========================================================================

loc_2C93E:
	addq.b	#2,routine(a0)
	move.b	#4,render_flags(a0)
	move.b	#$18,width_pixels(a0)
	move.b	#4,priority(a0)

loc_2C954:
	lea	objoff_30(a0),a2
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	(Ctrl_1).w,d0
	bsr.s	loc_2C972
	lea	(Sidekick).w,a1 ; a1=character
	addq.w	#1,a2
	move.w	(Ctrl_2).w,d0
	bsr.s	loc_2C972
	bra.w	JmpTo7_MarkObjGone3
; ===========================================================================

loc_2C972:
	tst.b	(a2)
	beq.s	loc_2C9A0
	andi.b	#$70,d0
	beq.w	return_2CA08
	clr.b	obj_control(a1)
	clr.b	(a2)
	move.b	#$12,2(a2)
	andi.w	#$F00,d0
	beq.s	loc_2C996
	move.b	#$3C,2(a2)

loc_2C996:
	move.w	#-$300,y_vel(a1)
	bra.w	return_2CA08
; ===========================================================================

loc_2C9A0:
	tst.b	2(a2)
	beq.s	loc_2C9AE
	subq.b	#1,2(a2)
	bne.w	return_2CA08

loc_2C9AE:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$18,d0
	cmpi.w	#$30,d0
	bcc.w	return_2CA08
	move.w	y_pos(a1),d1
	sub.w	y_pos(a0),d1
	cmpi.w	#$10,d1
	bcc.w	return_2CA08
	tst.b	obj_control(a1)
	bmi.s	return_2CA08
	cmpi.b	#6,routine(a1)
	bcc.s	return_2CA08
	tst.w	(Debug_placement_mode).w
	bne.s	return_2CA08
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#$14,anim(a1)
	move.b	#1,obj_control(a1)
	move.b	#1,(a2)

return_2CA08:
	rts
; ===========================================================================
	nop

JmpTo7_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4A - Octus (octopus badnik) from OOZ
; ----------------------------------------------------------------------------
; Sprite_2CA14:
Obj4A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2CA22(pc,d0.w),d1
	jmp	off_2CA22(pc,d1.w)
; ===========================================================================
off_2CA22:
	dc.w loc_2CA52-off_2CA22
	dc.w loc_2CAB8-off_2CA22; 1
	dc.w loc_2CA46-off_2CA22; 2
	dc.w loc_2CA2A-off_2CA22; 3
; ===========================================================================

loc_2CA2A:
	subi.w	#1,objoff_2C(a0)
	bmi.s	loc_2CA34
	rts
; ===========================================================================

loc_2CA34:
	bsr.w	JmpTo19_ObjectMove
	lea	(off_2CBDC).l,a1
	bsr.w	JmpTo13_AnimateSprite
	bra.w	JmpTo32_MarkObjGone
; ===========================================================================

loc_2CA46:
	subq.w	#1,objoff_2C(a0)
	beq.w	JmpTo47_DeleteObject
	bra.w	JmpTo31_DisplaySprite
; ===========================================================================

loc_2CA52:
	move.l	#Obj4A_MapUnc_2CBFE,mappings(a0)
	move.w	#$2538,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$A,collision_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#$B,y_radius(a0)
	move.b	#8,x_radius(a0)
	bsr.w	JmpTo2_ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_2CAB0
	add.w	d1,y_pos(a0)
	move.w	#0,y_vel(a0)
	addq.b	#2,routine(a0)
	move.w	x_pos(a0),d0
	sub.w	(MainCharacter+x_pos).w,d0
	bpl.s	loc_2CAB0
	bchg	#0,status(a0)

loc_2CAB0:
	move.w	y_pos(a0),objoff_2A(a0)
	rts
; ===========================================================================

loc_2CAB8:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2CAD4(pc,d0.w),d1
	jsr	off_2CAD4(pc,d1.w)
	lea	(off_2CBDC).l,a1
	bsr.w	JmpTo13_AnimateSprite
	bra.w	JmpTo32_MarkObjGone
; ===========================================================================
off_2CAD4:
	dc.w loc_2CADE-off_2CAD4
	dc.w loc_2CB04-off_2CAD4; 1
	dc.w loc_2CB20-off_2CAD4; 2
	dc.w loc_2CB3A-off_2CAD4; 3
	dc.w loc_2CB48-off_2CAD4; 4
; ===========================================================================

loc_2CADE:
	move.w	x_pos(a0),d0
	sub.w	(MainCharacter+x_pos).w,d0
	cmpi.w	#$80,d0
	bgt.s	return_2CB02
	cmpi.w	#-$80,d0
	blt.s	return_2CB02
	addq.b	#2,routine_secondary(a0)
	move.b	#3,anim(a0)
	move.w	#$20,objoff_2C(a0)

return_2CB02:
	rts
; ===========================================================================

loc_2CB04:
	subq.w	#1,objoff_2C(a0)
	bmi.s	loc_2CB0C
	rts
; ===========================================================================

loc_2CB0C:
	addq.b	#2,routine_secondary(a0)
	move.b	#4,anim(a0)
	move.w	#-$200,y_vel(a0)
	bra.w	JmpTo19_ObjectMove
; ===========================================================================

loc_2CB20:
	addi.w	#$10,y_vel(a0)
	bpl.s	loc_2CB2C
	bra.w	JmpTo19_ObjectMove
; ===========================================================================

loc_2CB2C:
	addq.b	#2,routine_secondary(a0)
	move.w	#$3C,objoff_2C(a0)
	bra.w	loc_2CB70
; ===========================================================================

loc_2CB3A:
	subq.w	#1,objoff_2C(a0)
	bmi.s	loc_2CB42
	rts
; ===========================================================================

loc_2CB42:
	addq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_2CB48:
	addi.w	#$10,y_vel(a0)
	move.w	y_pos(a0),d0
	cmp.w	objoff_2A(a0),d0
	bcc.s	loc_2CB5C
	bra.w	JmpTo19_ObjectMove
; ===========================================================================

loc_2CB5C:
	clr.b	routine_secondary(a0)
	clr.b	anim(a0)
	clr.w	y_vel(a0)
	move.b	#1,mapping_frame(a0)
	rts
; ===========================================================================

loc_2CB70:
	jsr	(SingleObjLoad).l
	bne.s	return_2CBDA
	_move.b	#$4A,0(a1) ; load obj4A
	move.b	#6,routine(a1)
	move.l	#Obj4A_MapUnc_2CBFE,mappings(a1)
	move.w	#$2538,art_tile(a1)
	move.b	#4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#$F,objoff_2C(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	status(a0),status(a1)
	move.b	#2,anim(a1)
	move.b	#$98,collision_flags(a1)
	move.w	#-$200,x_vel(a1)
	btst	#0,render_flags(a1)
	beq.s	return_2CBDA
	neg.w	x_vel(a1)

return_2CBDA:
	rts
; ===========================================================================
; animation script
off_2CBDC:
	dc.w byte_2CBE6-off_2CBDC
	dc.w byte_2CBEA-off_2CBDC; 1
	dc.w byte_2CBEF-off_2CBDC; 2
	dc.w byte_2CBF4-off_2CBDC; 3
	dc.w byte_2CBF8-off_2CBDC; 4
byte_2CBE6:	dc.b  $F,  1,  0,$FF
byte_2CBEA:	dc.b   3,  1,  2,  3,$FF
byte_2CBEF:	dc.b   2,  5,  6,$FF,  0
byte_2CBF4:	dc.b  $F,  4,$FF,  0
byte_2CBF8:	dc.b   7,  0,  1,$FD,  1
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj4A_MapUnc_2CBFE:	BINCLUDE "mappings/sprite/obj4A.bin"
; ===========================================================================

JmpTo31_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo47_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo32_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo13_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo2_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
; loc_2CCC2:
JmpTo19_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 50 - Aquis (seahorse badnik) from OOZ
; ----------------------------------------------------------------------------
; Sprite_2CCC8:
Obj50:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2CCD6(pc,d0.w),d1
	jmp	off_2CCD6(pc,d1.w)
; ===========================================================================
off_2CCD6:
	dc.w loc_2CCDE-off_2CCD6
	dc.w loc_2CDA2-off_2CCD6; 1
	dc.w loc_2CDCA-off_2CCD6; 2
	dc.w loc_2CDF4-off_2CCD6; 3
; ===========================================================================

loc_2CCDE:
	addq.b	#2,routine(a0)
	move.l	#Obj50_MapUnc_2CF94,mappings(a0)
	move.w	#$2500,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$A,collision_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.w	#-$100,x_vel(a0)
	move.b	subtype(a0),d0
	move.b	d0,d1
	andi.w	#$F0,d1
	lsl.w	#4,d1
	move.w	d1,objoff_2E(a0)
	move.w	d1,objoff_30(a0)
	andi.w	#$F,d0
	lsl.w	#4,d0
	subq.w	#1,d0
	move.w	d0,objoff_32(a0)
	move.w	d0,objoff_34(a0)
	move.w	y_pos(a0),objoff_2A(a0)
	move.w	(Water_Level_1).w,objoff_3A(a0)
	move.b	#3,objoff_2E(a0)
	bsr.w	JmpTo12_SingleObjLoad
	bne.s	loc_2CDA2
	_move.b	#$50,0(a1) ; load obj50
	move.b	#4,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$A,x_pos(a1)
	addi.w	#-6,y_pos(a1)
	move.l	#Obj50_MapUnc_2CF94,mappings(a1)
	move.w	#$2500,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	status(a0),status(a1)
	move.b	#3,anim(a1)
	move.l	a1,objoff_36(a0)
	move.l	a0,objoff_36(a1)
	bset	#6,status(a0)

loc_2CDA2:

	lea	(off_2CF6C).l,a1
	bsr.w	JmpTo14_AnimateSprite
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2CDC2(pc,d0.w),d1
	jsr	off_2CDC2(pc,d1.w)
	bsr.w	loc_2CF32
	bra.w	JmpTo33_MarkObjGone
; ===========================================================================
off_2CDC2:
	dc.w loc_2CE06-off_2CDC2; 0
	dc.w loc_2CE14-off_2CDC2; 1
	dc.w loc_2CE1A-off_2CDC2; 2
	dc.w BranchTo_JmpTo20_ObjectMove-off_2CDC2; 3
; ===========================================================================

loc_2CDCA:
	movea.l	objoff_36(a0),a1 ; a1=object
	tst.b	(a1)
	beq.w	JmpTo48_DeleteObject
	cmpi.b	#$50,(a1)
	bne.w	JmpTo48_DeleteObject
	btst	#7,status(a1)
	bne.w	JmpTo48_DeleteObject
	lea	(off_2CF6C).l,a1
	bsr.w	JmpTo14_AnimateSprite
	bra.w	JmpTo32_DisplaySprite
; ===========================================================================

loc_2CDF4:
	bsr.w	JmpTo20_ObjectMove
	lea	(off_2CF6C).l,a1
	bsr.w	JmpTo14_AnimateSprite
	bra.w	JmpTo33_MarkObjGone
; ===========================================================================

loc_2CE06:
	tst.b	render_flags(a0)
	bmi.s	loc_2CE0E
	rts
; ===========================================================================

loc_2CE0E:
	addq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_2CE14:
	bsr.w	loc_2CEAE
	rts
; ===========================================================================

loc_2CE1A:
	bsr.w	loc_2CEF8
	bsr.w	loc_2CE24
	rts
; ===========================================================================

loc_2CE24:
	tst.b	objoff_2D(a0)
	bne.w	return_2CEAC
	st	objoff_2D(a0)
	bsr.w	JmpTo_loc_366D6
	tst.w	d1
	beq.s	return_2CEAC
	cmpi.w	#-$10,d1
	bcc.s	return_2CEAC
	bsr.w	JmpTo12_SingleObjLoad
	bne.s	return_2CEAC
	_move.b	#$50,0(a1) ; load obj50
	move.b	#6,routine(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	#Obj50_MapUnc_2CF94,mappings(a1)
	move.w	#$2500,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#$98,collision_flags(a1)
	move.b	#2,anim(a1)
	move.w	#$A,d0
	move.w	#$10,d1
	move.w	#-$300,d2
	btst	#0,status(a0)
	beq.s	loc_2CE9A
	neg.w	d1
	neg.w	d2

loc_2CE9A:
	sub.w	d0,y_pos(a1)
	sub.w	d1,x_pos(a1)
	move.w	d2,x_vel(a1)
	move.w	#$200,y_vel(a1)

return_2CEAC:
	rts
; ===========================================================================

loc_2CEAE:
	subq.b	#1,objoff_3C(a0)
	bmi.s	loc_2CEEA
	bsr.w	JmpTo_loc_366D6
	bclr	#0,status(a0)
	tst.w	d0
	beq.s	loc_2CEC8
	bset	#0,status(a0)

loc_2CEC8:
	move.w	word_2CEE6(pc,d0.w),d2
	add.w	d2,x_vel(a0)
	move.w	word_2CEE6(pc,d1.w),d2
	add.w	d2,y_vel(a0)
	move.w	#$100,d0
	move.w	d0,d1
	bsr.w	JmpTo_loc_3671A
	bra.w	JmpTo20_ObjectMove
; ===========================================================================
word_2CEE6:
	dc.w $FFF0
	dc.w   $10	; 1
; ===========================================================================

loc_2CEEA:
	addq.b	#2,routine_secondary(a0)
	move.b	#$20,objoff_3C(a0)
	bra.w	JmpTo_loc_36754
; ===========================================================================

loc_2CEF8:
	subq.b	#1,objoff_3C(a0)
	bmi.s	loc_2CF00
	rts
; ===========================================================================

loc_2CF00:
	subq.b	#1,objoff_2E(a0)
	bmi.s	loc_2CF1C
	subq.b	#2,routine_secondary(a0)
	move.w	#-$100,y_vel(a0)
	move.b	#$80,objoff_3C(a0)
	clr.b	objoff_2D(a0)
	rts
; ===========================================================================

loc_2CF1C:
	move.b	#6,routine_secondary(a0)
	move.w	#-$200,x_vel(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

BranchTo_JmpTo20_ObjectMove 
	bra.w	JmpTo20_ObjectMove
; ===========================================================================

loc_2CF32:
	moveq	#$A,d0
	moveq	#-6,d1
	movea.l	objoff_36(a0),a1 ; a1=object
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	status(a0),status(a1)
	move.b	respawn_index(a0),respawn_index(a1)
	move.b	render_flags(a0),render_flags(a1)
	btst	#0,status(a1)
	beq.s	loc_2CF62
	neg.w	d0

loc_2CF62:
	add.w	d0,x_pos(a1)
	add.w	d1,y_pos(a1)
	rts
; ===========================================================================
; animation script
off_2CF6C:
	dc.w byte_2CF78-off_2CF6C
	dc.w byte_2CF7B-off_2CF6C; 1
	dc.w byte_2CF83-off_2CF6C; 2
	dc.w byte_2CF89-off_2CF6C; 3
	dc.w byte_2CF8D-off_2CF6C; 4
	dc.w byte_2CF90-off_2CF6C; 5
byte_2CF78:	dc.b  $E,  0,$FF
byte_2CF7B:	dc.b   5,  3,  4,  3,  4,  3,  4,$FF
byte_2CF83:	dc.b   3,  5,  6,  7,  6,$FF
byte_2CF89:	dc.b   3,  1,  2,$FF
byte_2CF8D:	dc.b   1,  5,$FF
byte_2CF90:	dc.b  $E,  8,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj50_MapUnc_2CF94:	BINCLUDE "mappings/sprite/obj50.bin"
; ===========================================================================

JmpTo32_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo48_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo12_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo33_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo14_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo_loc_366D6 
	jmp	loc_366D6
; ===========================================================================

JmpTo_loc_3671A 
	jmp	loc_3671A
; ===========================================================================

JmpTo_loc_36754 
	jmp	loc_36754
; ===========================================================================
; loc_2D060:
JmpTo20_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4B - Buzzer (Buzz bomber) from EHZ
; ----------------------------------------------------------------------------
; Sprite_2D068: ; Obj_Buzzer:
Obj4B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2D076(pc,d0.w),d1
	jmp	off_2D076(pc,d1.w)
; ============== JUMP TABLE =================================================
off_2D076:
	dc.w	loc_2D0C8-off_2D076
	dc.w	loc_2D174-off_2D076; 2
	dc.w	loc_2D090-off_2D076; 4
	dc.w	loc_2D07E-off_2D076; 6
; ============== END JUMP TABLE =============================================

loc_2D07E:
	bsr.w	JmpTo21_ObjectMove
	lea	(off_2D2CE).l,a1
	bsr.w	JmpTo15_AnimateSprite
	bra.w	JmpTo_MarkObjGone_P1
; ===========================================================================

loc_2D090:
	movea.l	objoff_2A(a0),a1 ; a1=object
	tst.b	(a1)
	beq.w	JmpTo49_DeleteObject
	tst.w	objoff_30(a1)
	bmi.s	loc_2D0A2
	rts
; ---------------------------------------------------------------------------

loc_2D0A2:
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	lea	(off_2D2CE).l,a1
	bsr.w	JmpTo15_AnimateSprite
	bra.w	JmpTo_MarkObjGone_P1
; ===========================================================================

loc_2D0C8:
	move.l	#Obj4B_MapUnc_2D2EA,mappings(a0)
	move.w	#$3D2,art_tile(a0)
	bsr.w	JmpTo57_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#$A,collision_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$10,width_pixels(a0)
	move.b	#$10,y_radius(a0)
	move.b	#$18,x_radius(a0)
	move.b	#3,priority(a0)
	addq.b	#2,routine(a0)
	bsr.w	JmpTo20_SingleObjLoad2
	bne.s	return_2D172
	_move.b	#$4B,0(a1) ; load obj4B
	move.b	#4,routine(a1)
	move.l	#Obj4B_MapUnc_2D2EA,mappings(a1)
	move.w	#$3D2,art_tile(a1)
	bsr.w	JmpTo7_Adjust2PArtPointer2
	move.b	#4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.b	status(a0),status(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#1,anim(a1)
	move.l	a0,objoff_2A(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#$100,objoff_2E(a0)
	move.w	#-$100,x_vel(a0)
	btst	#0,render_flags(a0)
	beq.s	return_2D172
	neg.w	x_vel(a0)

return_2D172:
	rts
; ===========================================================================

loc_2D174:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2D190(pc,d0.w),d1
	jsr	off_2D190(pc,d1.w)
	lea	(off_2D2CE).l,a1
	bsr.w	JmpTo15_AnimateSprite
	bra.w	JmpTo_MarkObjGone_P1
; ============== JUMP TABLE =================================================
off_2D190:
	dc.w	loc_2D194-off_2D190
	dc.w	loc_2D234-off_2D190; 2
; ============== END JUMP TABLE =============================================

loc_2D194:
	bsr.w	sub_2D1D6
	subq.w	#1,objoff_30(a0)
	move.w	objoff_30(a0),d0
	cmpi.w	#$F,d0
	beq.s	loc_2D1BA
	tst.w	d0
	bpl.s	return_2D1B8
	subq.w	#1,objoff_2E(a0)
	bgt.w	JmpTo21_ObjectMove
	move.w	#$1E,objoff_30(a0)

return_2D1B8:
	rts
; ---------------------------------------------------------------------------

loc_2D1BA:
	sf	objoff_32(a0)
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)
	bchg	#0,status(a0)
	move.w	#$100,objoff_2E(a0)
	rts
; ===========================================================================
; Start of subroutine sub_2D1D6
sub_2D1D6:
	tst.b	objoff_32(a0)
	bne.w	return_2D232
	move.w	x_pos(a0),d0
	lea	(MainCharacter).w,a1 ; a1=character
	btst	#0,($FFFFFE0F).w
	beq.s	loc_2D1F2
	lea	(Sidekick).w,a1 ; a1=character

loc_2D1F2:
	sub.w	x_pos(a1),d0
	move.w	d0,d1
	bpl.s	loc_2D1FC
	neg.w	d0

loc_2D1FC:
	cmpi.w	#$28,d0
	blt.s	return_2D232
	cmpi.w	#$30,d0
	bgt.s	return_2D232
	tst.w	d1
	bpl.s	loc_2D216
	btst	#0,render_flags(a0)
	beq.s	return_2D232
	bra.s	loc_2D21E
; ---------------------------------------------------------------------------

loc_2D216:
	btst	#0,render_flags(a0)
	bne.s	return_2D232

loc_2D21E:
	st	objoff_32(a0)
	addq.b	#2,routine_secondary(a0)
	move.b	#3,anim(a0)
	move.w	#$32,objoff_34(a0)

return_2D232:
	rts
; End of subroutine sub_2D1D6
; ===========================================================================

loc_2D234:
	move.w	objoff_34(a0),d0
	subq.w	#1,d0
	blt.s	loc_2D248
	move.w	d0,objoff_34(a0)
	cmpi.w	#$14,d0
	beq.s	loc_2D24E
	rts
; ---------------------------------------------------------------------------

loc_2D248:
	subq.b	#2,routine_secondary(a0)
	rts
; ---------------------------------------------------------------------------

loc_2D24E:
	jsr	(SingleObjLoad2).l	; Find next open object space
	bne.s	loc_2D2C8
	_move.b	#$4B,0(a1) ; load obj4B
	move.b	#6,routine(a1)
	move.l	#Obj4B_MapUnc_2D2EA,mappings(a1)
	move.w	#$3D2,art_tile(a1)
	bsr.w	JmpTo7_Adjust2PArtPointer2
	move.b	#4,priority(a1)
	move.b	#$98,collision_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	status(a0),status(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#2,anim(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$18,y_pos(a1)
	move.w	#$D,d0
	move.w	#$180,y_vel(a1)
	move.w	#-$180,x_vel(a1)
	btst	#0,render_flags(a1)
	beq.s	loc_2D2C8
	neg.w	x_vel(a1)
	neg.w	d0

loc_2D2C8:
	add.w	d0,x_pos(a1)
	rts
; ===========================================================================
; animation script
off_2D2CE:
	dc.w	byte_2D2D6-off_2D2CE
	dc.w	byte_2D2D9-off_2D2CE
	dc.w	byte_2D2DD-off_2D2CE
	dc.w	byte_2D2E1-off_2D2CE
byte_2D2D6:	dc.b	$0F, $00, $FF
byte_2D2D9:	dc.b	$02, $03, $04, $FF
byte_2D2DD:	dc.b	$03, $05, $06, $FF
byte_2D2E1:	dc.b	$09, $01, $01, $01, $01, $01, $FD, $00
	even
; ----------------------------------------------------------------------------
; sprite mappings -- Buzz Bomber Sprite Table
; ----------------------------------------------------------------------------
; MapUnc_2D2EA: SprTbl_Buzzer:
Obj4B_MapUnc_2D2EA:	BINCLUDE "mappings/sprite/obj4B.bin"
; ===========================================================================
; loc_2D368:
JmpTo49_DeleteObject 
	jmp	DeleteObject
JmpTo20_SingleObjLoad2 
	jmp	SingleObjLoad2
JmpTo15_AnimateSprite 
	jmp	AnimateSprite
JmpTo7_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
JmpTo_MarkObjGone_P1 
	jmp	MarkObjGone_P1
JmpTo57_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; loc_2D38C:
JmpTo21_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5C - Masher (jumping piranha fish badnik) from EHZ
; ----------------------------------------------------------------------------
; Sprite_2D394:
Obj5C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2D3A6(pc,d0.w),d1
	jsr	off_2D3A6(pc,d1.w)
	bra.w	JmpTo34_MarkObjGone
; ===========================================================================
off_2D3A6:
	dc.w loc_2D3AA-off_2D3A6
	dc.w loc_2D3E4-off_2D3A6; 1
; ===========================================================================

loc_2D3AA:
	addq.b	#2,routine(a0)
	move.l	#Obj5C_MapUnc_2D442,mappings(a0)
	move.w	#$414,art_tile(a0)
	bsr.w	JmpTo58_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#9,collision_flags(a0)
	move.b	#$10,width_pixels(a0)
	move.w	#-$400,y_vel(a0)
	move.w	y_pos(a0),objoff_30(a0)

loc_2D3E4:
	lea	(off_2D430).l,a1
	bsr.w	JmpTo16_AnimateSprite
	bsr.w	JmpTo22_ObjectMove
	addi.w	#$18,y_vel(a0)
	move.w	objoff_30(a0),d0
	cmp.w	y_pos(a0),d0
	bcc.s	loc_2D40C
	move.w	d0,y_pos(a0)
	move.w	#-$500,y_vel(a0)

loc_2D40C:
	move.b	#1,anim(a0)
	subi.w	#$C0,d0
	cmp.w	y_pos(a0),d0
	bcc.s	return_2D42E
	move.b	#0,anim(a0)
	tst.w	y_vel(a0)
	bmi.s	return_2D42E
	move.b	#2,anim(a0)

return_2D42E:
	rts
; ===========================================================================
; animation script
off_2D430:
	dc.w byte_2D436-off_2D430
	dc.w byte_2D43A-off_2D430; 1
	dc.w byte_2D43E-off_2D430; 2
byte_2D436:	dc.b   7,  0,  1,$FF
byte_2D43A:	dc.b   3,  0,  1,$FF
byte_2D43E:	dc.b   7,  0,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj5C_MapUnc_2D442:	BINCLUDE "mappings/sprite/obj5C.bin"
; ===========================================================================

JmpTo34_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo16_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo58_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
; loc_2D48E:
JmpTo22_ObjectMove 
	jmp	ObjectMove




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 58 - Boss explosion
; ----------------------------------------------------------------------------
; Sprite_2D494:
Obj58:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2D4A2(pc,d0.w),d1
	jmp	off_2D4A2(pc,d1.w)
; ===========================================================================
off_2D4A2:
	dc.w loc_2D4A6-off_2D4A2
	dc.w loc_2D4EC-off_2D4A2; 1
; ===========================================================================

loc_2D4A6:
	addq.b	#2,routine(a0)
	move.l	#Obj58_MapUnc_2D50A,mappings(a0)
	;move.w	#$8580,art_tile(a0)
	move.w	#$8000+($73C0/$20),art_tile(a0)
	bsr.w	JmpTo59_Adjust2PArtPointer
	move.b	#4,render_flags(a0)
	move.b	#0,priority(a0)
	move.b	#0,collision_flags(a0)
	move.b	#$C,width_pixels(a0)
	move.b	#7,anim_frame_duration(a0)
	move.b	#0,mapping_frame(a0)
	;move.w	#$C4,d0
	tst.b	$30(a0)	; sound disabled?
	bne.s	+	; if yes, skip
	move.w	#$4B+$80,d0
	jmp	(PlaySound).l

+	rts
; ===========================================================================

loc_2D4EC:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo_JmpTo33_DisplaySprite
	move.b	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#7,mapping_frame(a0)
	beq.w	JmpTo50_DeleteObject

BranchTo_JmpTo33_DisplaySprite 
	bra.w	JmpTo33_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj58_MapUnc_2D50A:	BINCLUDE "mappings/sprite/obj58.bin"
; ===========================================================================

	; Unused - a little dead code here (until the next label)
	move.b	mapping_frame(a0),d0 ; a0=object
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	addq.b	#2,mapping_frame(a0)

loc_2D57C:
	cmpi.b	#8,angle(a0)
	bcc.s	return_2D5C2
	tst.b	objoff_32(a0)
	beq.s	loc_2D5C4
	tst.b	collision_flags(a0)
	bne.s	return_2D5C2
	tst.b	objoff_14(a0)
	bne.s	loc_2D5A6
	move.b	#$20,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_2D5A6:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_2D5B4
	move.w	#$EEE,d0

loc_2D5B4:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_2D5C2
	move.b	#$F,collision_flags(a0)

return_2D5C2:
	rts
; ===========================================================================

loc_2D5C4:
	moveq	#$64,d0
	bsr.w	JmpTo_AddPoints
	move.w	#$B3,($FFFFF75C).w
	move.b	#8,angle(a0)
	moveq	#$40,d0
	bsr.w	JmpTo4_LoadPLC
	rts
; ===========================================================================

loc_2D5DE:
	move.l	($FFFFF750).w,d2
	move.l	($FFFFF754).w,d3
	move.w	($FFFFF758).w,d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	($FFFFF75A).w,d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,($FFFFF750).w
	move.l	d3,($FFFFF754).w
	rts
; ===========================================================================

loc_2D604:
	moveq	#0,d6
	movea.l	a1,a4
	lea	($FFFFF740).w,a2
	lea	objoff_B(a0),a3
	tst.b	(a3)
	bne.s	loc_2D618
	addq.w	#2,a2
	bra.s	loc_2D61C
; ===========================================================================

loc_2D618:
	bsr.w	loc_2D62A

loc_2D61C:
	moveq	#0,d6
	move.b	objoff_F(a0),d6
	subq.w	#1,d6
	bmi.s	return_2D690
	lea	objoff_15(a0),a3

loc_2D62A:
	movea.l	a4,a1
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d4
	move.b	(a2)+,d0
	move.b	d0,d1
	lsr.b	#4,d1
	andi.b	#$F,d0
	move.b	d0,d2
	cmp.b	d0,d1
	beq.s	loc_2D646
	st	d4

loc_2D646:
	move.b	d0,d5
	lsl.b	#4,d5
	or.b	d0,d5
	move.b	(a2)+,d0
	move.b	d0,d1
	lsr.b	#4,d1
	tst.b	d4
	beq.s	loc_2D65A
	moveq	#0,d0
	moveq	#0,d1

loc_2D65A:
	andi.b	#$F,d0
	subi.b	#1,d0
	bpl.s	loc_2D67C
	add.w	d2,d2
	adda.w	(a1,d2.w),a1
	move.b	(a1),d0
	move.b	1(a1,d1.w),d2
	bmi.s	loc_2D692

loc_2D672:
	andi.b	#$7F,d2
	move.b	d2,(a3)
	addi.b	#1,d1

loc_2D67C:
	lsl.b	#4,d1
	or.b	d1,d0
	move.b	d0,-1(a2)
	move.b	d5,-2(a2)
	adda.w	#6,a3
	dbf	d6,loc_2D62A

return_2D690:
	rts
; ===========================================================================

loc_2D692:
	addq.b	#1,d2
	bne.s	loc_2D6A0
	move.b	#0,d1
	move.b	1(a1),d2
	bra.s	loc_2D672
; ===========================================================================

loc_2D6A0:
	addq.b	#1,d2
	bne.s	loc_2D6AC
	addi.b	#2,angle(a0)
	rts
; ===========================================================================

loc_2D6AC:
	addq.b	#1,d2
	bne.s	loc_2D6BA
	andi.b	#$F0,d5
	or.b	2(a1,d1.w),d5
	bra.s	loc_2D67C
; ===========================================================================

loc_2D6BA:
	addq.b	#1,d2
	bne.s	return_2D6CA
	moveq	#0,d3
	move.b	2(a1,d1.w),d1
	move.b	1(a1,d1.w),d2
	bra.s	loc_2D672
; ===========================================================================

return_2D6CA:
	rts
; ===========================================================================

loc_2D6CC:
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	bne.s	return_2D712
	jsr	(SingleObjLoad).l
	bne.s	return_2D712
	_move.b	#$58,0(a1) ; load obj58
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	jsr	(RandomNumber).l
	move.w	d0,d1
	moveq	#0,d1
	move.b	d0,d1
	lsr.b	#2,d1
	subi.w	#$20,d1
	add.w	d1,x_pos(a1)
	lsr.w	#8,d0
	lsr.b	#2,d0
	subi.w	#$20,d0
	add.w	d0,y_pos(a1)

return_2D712:
	rts
; ===========================================================================

JmpTo33_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo50_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo4_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo59_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5D - CPZ boss
; ----------------------------------------------------------------------------
; Sprite_2D734:
Obj5D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2D742(pc,d0.w),d1
	jmp	off_2D742(pc,d1.w)
; ===========================================================================
off_2D742:
	dc.w loc_2D75E - off_2D742; 0
	dc.w loc_2D94E - off_2D742; 2
	dc.w loc_2DDA2 - off_2D742; 4
	dc.w loc_2DE66 - off_2D742; 6
	dc.w loc_2DFB2 - off_2D742; 8
	dc.w loc_2E07A - off_2D742; A
	dc.w loc_2E67A - off_2D742; C
	dc.w loc_2DFFE - off_2D742; E
	dc.w loc_2E192 - off_2D742; 10
	dc.w loc_2DCB6 - off_2D742; 12
	dc.w loc_2DC5E - off_2D742; 14
	dc.w loc_2E8F6 - off_2D742; 16
	dc.w loc_2E94E - off_2D742; 18
	dc.w loc_2E9F6 - off_2D742; 1A
; ===========================================================================
loc_2D75E:
	move.l	#Obj5D_MapUnc_2ED8C,mappings(a0)
	move.w	#$2420,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.w	#$2B80,x_pos(a0)
	move.w	#$4B0,y_pos(a0)
	move.b	#3,priority(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,collision_property(a0)
	addq.b	#2,routine(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_38(a0)
	bclr	#3,objoff_2D(a0)
	bsr.w	JmpTo60_Adjust2PArtPointer
	jsr	(SingleObjLoad2).l
	bne.w	loc_2D8AC
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.l	a1,objoff_34(a0)

	move.l	#Obj5D_MapUnc_2ED8C,mappings(a1)
	move.w	#$420,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#3,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$16,routine(a1)
	move.b	#1,anim(a1)
	move.b	render_flags(a0),render_flags(a1)
	bsr.w	JmpTo8_Adjust2PArtPointer2
	tst.b	subtype(a0)
	bmi.w	loc_2D8AC
	jsr	(SingleObjLoad2).l
	bne.w	loc_2D8AC
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)

	move.l	#Obj5D_MapUnc_2EE88,mappings(a1)
	move.w	#$418,art_tile(a1)
	bsr.w	JmpTo8_Adjust2PArtPointer2
	move.b	#1,anim_frame_duration(a0)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#3,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$18,routine(a1)
	move.b	render_flags(a0),render_flags(a1)
	jsr	(SingleObjLoad2).l
	bne.s	loc_2D8AC
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)

	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#2,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$12,routine(a1)
loc_2D8AC:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2D908
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)

	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	subi.w	#$38,y_pos(a1)
	subi.w	#$10,x_pos(a1)
	move.w	#-$10,objoff_2E(a1)
	addi.b	#$10,routine(a1)
	move.b	#6,anim(a1)

loc_2D908:
	jsr	(SingleObjLoad2).l
	bne.s	return_2D94C
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#4,routine(a1)

return_2D94C:
	rts
; ===========================================================================

loc_2D94E:
	bsr.w	loc_2D992
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2D984(pc,d0.w),d1
	jsr	off_2D984(pc,d1.w)
	lea	(off_2ED5C).l,a1
	jsr	AnimateSprite
	move.b	status(a0),d0
	andi.b	#3,d0
	andi.b	#$FC,render_flags(a0)
	or.b	d0,render_flags(a0)
	jmp	DisplaySprite
; ===========================================================================
off_2D984:
	dc.w loc_2DA62-off_2D984
	dc.w loc_2DB98-off_2D984; 1
	dc.w loc_2DC00-off_2D984; 2
	dc.w loc_2DC14-off_2D984; 3
	dc.w loc_2D9B4-off_2D984; 4
	dc.w loc_2D9D8-off_2D984; 5
	dc.w loc_2DA22-off_2D984; 6
; ===========================================================================

loc_2D992:
	cmpi.b	#8,routine_secondary(a0)
	bge.s	return_2D9AA
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	bgt.s	loc_2D9AC
	bclr	#0,status(a0)

return_2D9AA:
	rts
; ===========================================================================

loc_2D9AC:
	bset	#0,status(a0)
	rts
; ===========================================================================

loc_2D9B4:
	subq.w	#1,objoff_3C(a0)
	bpl.w	loc_2DB34
	bset	#0,status(a0)
	bclr	#7,status(a0)
	clr.w	x_vel(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#-$26,objoff_3C(a0)
	rts
; ===========================================================================

loc_2D9D8:
	addq.w	#1,objoff_3C(a0)
	beq.s	loc_2D9E8
	bpl.s	loc_2D9EE
	addi.w	#$18,y_vel(a0)
	bra.s	loc_2DA1A
; ===========================================================================

loc_2D9E8:
	clr.w	y_vel(a0)
	bra.s	loc_2DA1A
; ===========================================================================

loc_2D9EE:
	cmpi.w	#$30,objoff_3C(a0)
	bcs.s	loc_2DA06
	beq.s	loc_2DA0E
	cmpi.w	#$38,objoff_3C(a0)
	bcs.s	loc_2DA1A
	addq.b	#2,routine_secondary(a0)
	bra.s	loc_2DA1A
; ===========================================================================

loc_2DA06:
	subi.w	#8,y_vel(a0)
	bra.s	loc_2DA1A
; ===========================================================================

loc_2DA0E:
	clr.w	y_vel(a0)
	bsr.w	JmpTo_loc_F626
	bsr.w	JmpTo_loc_F62E

loc_2DA1A:
	bsr.w	loc_2DB0E
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DA22:
	bset	#6,objoff_2E(a0)
	move.w	#$400,x_vel(a0)
	move.w	#-$40,y_vel(a0)
	cmpi.w	#$2C30,(Camera_Max_X_pos).w
	bcc.s	loc_2DA42
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_2DA48
; ===========================================================================

loc_2DA42:
	tst.b	render_flags(a0)
	bpl.s	loc_2DA50

loc_2DA48:
	bsr.w	loc_2DB0E
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DA50:
	addq.l	#4,sp
	movea.l	objoff_34(a0),a1 ; a1=object
	jsr	DeleteObject2
	jmp	DeleteObject
; ===========================================================================

loc_2DA62:
	move.w	#$100,y_vel(a0)
	bsr.w	loc_2DB0E
	cmpi.w	#$4C0,objoff_38(a0)
	bne.s	loc_2DA7E
	move.w	#0,y_vel(a0)
	addq.b	#2,routine_secondary(a0)

loc_2DA7E:
	move.b	objoff_3F(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	objoff_38(a0),d0
	move.w	d0,y_pos(a0)
	move.w	objoff_30(a0),x_pos(a0)
	addq.b	#2,objoff_3F(a0)
	cmpi.b	#8,routine_secondary(a0)
	bcc.s	return_2DAE8
	tst.b	status(a0)
	bmi.s	loc_2DAEA
	tst.b	collision_flags(a0)
	bne.s	return_2DAE8
	tst.b	objoff_3E(a0)
	bne.s	loc_2DAC6
	move.b	#$20,objoff_3E(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_2DAC6:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_2DAD4
	move.w	#$EEE,d0

loc_2DAD4:
	move.w	d0,(a1)
	subq.b	#1,objoff_3E(a0)
	bne.s	return_2DAE8
	move.b	#$F,collision_flags(a0)
	bclr	#1,objoff_2D(a0)

return_2DAE8:
	rts
; ===========================================================================

loc_2DAEA:
	moveq	#$64,d0
	bsr.w	JmpTo2_AddPoints
	move.b	#8,routine_secondary(a0)
	move.w	#$B3,objoff_3C(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	#4,anim(a1)
	moveq	#$40,d0
	bra.w	JmpTo5_LoadPLC
; ===========================================================================
	rts
; ===========================================================================

loc_2DB0E:
	move.l	objoff_30(a0),d2
	move.l	objoff_38(a0),d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,objoff_30(a0)
	move.l	d3,objoff_38(a0)
	rts
; ===========================================================================

loc_2DB34:
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	bne.s	return_2DB7A
	jsr	(SingleObjLoad).l
	bne.s	return_2DB7A
	_move.b	#$58,0(a1) ; load obj58
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	jsr	(RandomNumber).l
	move.w	d0,d1
	moveq	#0,d1
	move.b	d0,d1
	lsr.b	#2,d1
	subi.w	#$20,d1
	add.w	d1,x_pos(a1)
	lsr.w	#8,d0
	lsr.b	#2,d0
	subi.w	#$20,d0
	add.w	d0,y_pos(a1)

return_2DB7A:
	rts
; ===========================================================================

loc_2DB7C:
	jsr	(SingleObjLoad).l
	bne.s	return_2DB96
	_move.b	#$58,0(a1) ; load obj58
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

return_2DB96:
	rts
; ===========================================================================

loc_2DB98:
	btst	#3,objoff_2D(a0)
	bne.s	loc_2DBA6
	move.w	#$2B30,d0
	bra.s	loc_2DBAA
; ===========================================================================

loc_2DBA6:
	move.w	#$2A50,d0

loc_2DBAA:
	move.w	d0,d1
	sub.w	objoff_30(a0),d0
	bpl.s	loc_2DBB4
	neg.w	d0

loc_2DBB4:
	cmpi.w	#3,d0
	ble.s	loc_2DBD6
	cmp.w	objoff_30(a0),d1
	bgt.s	loc_2DBC8
	move.w	#-$300,x_vel(a0)
	bra.s	loc_2DBCE
; ===========================================================================

loc_2DBC8:
	move.w	#$300,x_vel(a0)

loc_2DBCE:
	bsr.w	loc_2DB0E
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DBD6:
	cmpi.w	#$4C0,objoff_38(a0)
	bne.w	loc_2DA7E
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	addq.b	#2,routine_secondary(a0)
	bchg	#3,objoff_2D(a0)
	bset	#0,objoff_2E(a0)
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DC00:
	btst	#0,objoff_2E(a0)
	beq.s	loc_2DC0C
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DC0C:
	addq.b	#2,routine_secondary(a0)
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DC14:
	move.w	(MainCharacter+x_pos).w,d0
	addi.w	#$4C,d0
	cmp.w	objoff_30(a0),d0
	bgt.s	loc_2DC42
	beq.w	loc_2DA7E
	subi.l	#loc_10000,objoff_30(a0)
	cmpi.w	#$2A28,objoff_30(a0)
	bgt.w	loc_2DA7E
	move.w	#$2A28,objoff_30(a0)
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DC42:
	addi.l	#loc_10000,objoff_30(a0)
	cmpi.w	#$2B70,objoff_30(a0)
	blt.w	loc_2DA7E
	move.w	#$2B70,objoff_30(a0)
	bra.w	loc_2DA7E
; ===========================================================================

loc_2DC5E:
	cmpi.b	#-7,objoff_30(a0)
	beq.s	loc_2DC80
	subi.b	#1,objoff_30(a0)
	bgt.w	JmpTo34_DisplaySprite
	bsr.w	loc_2DB7C
	move.b	#-7,objoff_30(a0)
	move.w	#$1E,objoff_2A(a0)

loc_2DC80:
	subq.w	#1,objoff_2A(a0)
	bpl.w	JmpTo34_DisplaySprite
	move.w	x_vel(a0),d0
	add.w	d0,x_pos(a0)
	move.l	y_pos(a0),d3
	move.w	y_vel(a0),d0
	addi.w	#$38,y_vel(a0)
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d3,y_pos(a0)
	cmpi.l	#$5800000,d3
	bcc.w	JmpTo51_DeleteObject
	bra.w	JmpTo35_MarkObjGone
; ===========================================================================

loc_2DCB6:
	btst	#7,status(a0)
	bne.s	loc_2DCEC
	movea.l	objoff_34(a0),a1 ; a1=object
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.b	status(a1),status(a0)
	movea.l	#off_2EA3C,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2DCEC:
	moveq	#$22,d3
	move.b	#$78,objoff_30(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	d3,mapping_frame(a0)
	move.b	#$14,routine(a0)
	jsr	(RandomNumber).l
	asr.w	#8,d0
	asr.w	#6,d0
	move.w	d0,x_vel(a0)
	move.w	#-$380,y_vel(a0)
	moveq	#1,d2
	addq.w	#1,d3

loc_2DD26:
	jsr	(SingleObjLoad).L
	bne.w	JmpTo51_DeleteObject
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.b	d3,mapping_frame(a1)
	move.b	#$14,routine(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#2,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	status(a0),status(a1)
	move.b	render_flags(a0),render_flags(a1)
	jsr	(RandomNumber).l
	asr.w	#8,d0
	asr.w	#6,d0
	move.w	d0,x_vel(a1)
	move.w	#-$380,y_vel(a1)
	swap	d0
	addi.b	#$1E,d0
	andi.w	#$7F,d0
	move.b	d0,objoff_30(a1)
	addq.w	#1,d3
	dbf	d2,loc_2DD26
	rts
; ===========================================================================

loc_2DDA2:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2DDB0(pc,d0.w),d1
	jmp	off_2DDB0(pc,d1.w)
; ===========================================================================
off_2DDB0:
	dc.w loc_2DDB4-off_2DDB0
	dc.w loc_2DDE2-off_2DDB0; 1
; ===========================================================================

loc_2DDB4:
	movea.l	objoff_34(a0),a1 ; a1=object
	btst	#0,objoff_2E(a1)
	bne.s	loc_2DDC2
	rts
; ===========================================================================

loc_2DDC2:
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#$18,y_pos(a0)
	move.w	#$C,objoff_2C(a0)
	addq.b	#2,routine_secondary(a0)
	movea.l	a0,a1
	bra.s	loc_2DDF0
; ===========================================================================

loc_2DDE2:
	jsr	(SingleObjLoad2).l
	beq.s	loc_2DDEC
	rts
; ===========================================================================

loc_2DDEC:
	move.l	a0,objoff_34(a1)

loc_2DDF0:
	subq.w	#1,objoff_2C(a0)
	blt.s	loc_2DE56
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#5,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	objoff_2C(a0),d0
	subi.w	#$B,d0
	neg.w	d0
	lsl.w	#3,d0
	move.w	d0,objoff_38(a1)
	add.w	d0,y_pos(a1)
	move.b	#1,anim(a1)
	cmpi.b	#2,routine_secondary(a1)
	beq.w	loc_2DFFE
	move.b	#$E,routine(a1)
	bra.w	loc_2DFFE
; ===========================================================================

loc_2DE56:
	move.b	#0,routine_secondary(a0)
	move.b	#6,routine(a0)
	bra.w	loc_2DFFE
; ===========================================================================

loc_2DE66:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2DE74(pc,d0.w),d1
	jmp	off_2DE74(pc,d1.w)
; ===========================================================================
off_2DE74:
	dc.w loc_2DE7A-off_2DE74
	dc.w loc_2DF08-off_2DE74; 1
	dc.w loc_2DF76-off_2DE74; 2
; ===========================================================================

loc_2DE7A:
	jsr	(SingleObjLoad2).l
	bne.w	loc_2DFFE
	move.b	#$E,routine(a0)
	move.b	#6,routine(a1)
	move.b	#2,routine_secondary(a1)
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.b	#2,objoff_32(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#$58,d0
	move.b	d0,objoff_31(a1)
	add.w	d0,y_pos(a1)
	move.b	#2,anim(a1)
	move.l	a0,objoff_34(a1)
	move.b	#$12,objoff_30(a1)
	jsr	(SingleObjLoad2).l
	bne.s	BranchTo_loc_2DFFE
	_move.b	#$5D,0(a1) ; load obj5D
	move.b	#$A,routine(a1)
	move.l	objoff_34(a0),objoff_34(a1)

BranchTo_loc_2DFFE 
	bra.w	loc_2DFFE
; ===========================================================================

loc_2DF08:
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	objoff_34(a1),a2 ; a2=object
	btst	#7,status(a2)
	bne.w	JmpTo51_DeleteObject
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	subi.b	#1,objoff_30(a0)
	bne.s	loc_2DF5A
	move.b	#$12,objoff_30(a0)
	subi.b	#8,objoff_31(a0)
	bgt.s	loc_2DF5A
	bmi.s	loc_2DF4C
	move.b	#3,anim(a0)
	move.b	#$C,objoff_30(a0)
	bra.s	loc_2DF5A
; ===========================================================================

loc_2DF4C:
	move.b	#6,objoff_30(a0)
	move.b	#4,routine_secondary(a0)
	rts
; ===========================================================================

loc_2DF5A:
	moveq	#0,d0
	move.b	objoff_31(a0),d0
	add.w	d0,y_pos(a0)
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2DF76:
	subi.b	#1,objoff_30(a0)
	beq.s	loc_2DF80
	rts
; ===========================================================================

loc_2DF80:
	subq.b	#1,objoff_32(a0)
	beq.s	loc_2DF9E
	move.b	#2,anim(a0)
	move.b	#$12,objoff_30(a0)
	move.b	#2,routine_secondary(a0)
	move.b	#$58,objoff_31(a0)

loc_2DF9E:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	#8,routine(a1)
	move.b	#$58,objoff_31(a1)
	bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2DFB2:
	tst.b	objoff_3C(a0)
	bne.s	loc_2DFEE
	moveq	#0,d0
	move.b	objoff_31(a0),d0
	add.w	y_pos(a0),d0
	lea	(MainCharacter).w,a1 ; a1=character
	moveq	#$7F,d1

loc_2DFC8:
	cmp.w	y_pos(a1),d0
	beq.s	loc_2DFDE
	lea	next_object(a1),a1 ; a1=object
	dbf	d1,loc_2DFC8
	bra.s	loc_2DFFE
; ===========================================================================

loc_2DFD8:
	st	objoff_3C(a0)
	bra.s	loc_2DFFE
; ===========================================================================

loc_2DFDE:
	moveq	#0,d7
	move.b	#$5D,d7
	cmp.b	(a1),d7
	beq.s	loc_2DFF0
	dbf	d1,loc_2DFC8
	bra.s	loc_2DFFE
; ===========================================================================

loc_2DFEE:
	movea.l	a0,a1

loc_2DFF0:
	bset	#7,status(a1)
	subi.b	#8,objoff_31(a0)
	beq.s	loc_2DFD8

loc_2DFFE:
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	objoff_34(a1),a2 ; a2=object
	btst	#7,status(a2)
	bne.s	loc_2E04E
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	cmpi.b	#4,routine_secondary(a0)
	bne.s	loc_2E028
	addi.w	#$18,y_pos(a0)

loc_2E028:
	btst	#7,status(a0)
	bne.s	BranchTo_JmpTo51_DeleteObject
	move.w	objoff_38(a0),d0
	add.w	d0,y_pos(a0)
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

BranchTo_JmpTo51_DeleteObject 
	bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2E04E:
	move.b	#$14,routine(a0)
	jsr	(RandomNumber).l
	asr.w	#8,d0
	asr.w	#6,d0
	move.w	d0,x_vel(a0)
	move.w	#-$380,y_vel(a0)
	swap	d0
	addi.b	#$1E,d0
	andi.w	#$7F,d0
	move.b	d0,objoff_30(a0)
	bra.w	JmpTo34_DisplaySprite
; ===========================================================================

loc_2E07A:
	btst	#7,status(a0)
	bne.w	JmpTo51_DeleteObject
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2E092(pc,d0.w),d1
	jmp	off_2E092(pc,d1.w)
; ===========================================================================
off_2E092:
	dc.w loc_2E098-off_2E092
	dc.w loc_2E0DE-off_2E092; 1
	dc.w loc_2E130-off_2E092; 2
; ===========================================================================

loc_2E098:
	addq.b	#2,routine_secondary(a0)
	_move.b	#$5D,0(a0) ; load 0bj5D
	move.l	#Obj5D_MapUnc_2EADC,mappings(a0)
	move.w	#$6500,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#4,priority(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	#$F,objoff_30(a0)
	move.b	#4,anim(a0)

loc_2E0DE:
	subq.b	#1,objoff_30(a0)
	bne.s	loc_2E102
	move.b	#5,anim(a0)
	move.b	#4,objoff_30(a0)
	addq.b	#2,routine_secondary(a0)
	subi.w	#$24,y_pos(a0)
	subi.w	#2,x_pos(a0)
	rts
; ===========================================================================

loc_2E102:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E130:
	subq.b	#1,objoff_30(a0)
	bne.s	loc_2E156
	move.b	#0,routine_secondary(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	bset	#1,objoff_2E(a1)
	addq.b	#1,objoff_3C(a0)
	cmpi.b	#$C,objoff_3C(a0)
	bge.w	JmpTo51_DeleteObject
	rts
; ===========================================================================

loc_2E156:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	subi.w	#$24,y_pos(a0)
	subi.w	#2,x_pos(a0)
	btst	#0,render_flags(a0)
	beq.s	loc_2E180
	addi.w	#4,x_pos(a0)

loc_2E180:
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E192:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2E1A0(pc,d0.w),d1
	jmp	off_2E1A0(pc,d1.w)
; ===========================================================================
off_2E1A0:
	dc.w loc_2E1AC-off_2E1A0
	dc.w loc_2E25C-off_2E1A0; 1
	dc.w loc_2E610-off_2E1A0; 2
	dc.w loc_2E5A4-off_2E1A0; 3
	dc.w loc_2E666-off_2E1A0; 4
	dc.w loc_2E2E8-off_2E1A0; 5
; ===========================================================================

loc_2E1AC:
	movea.l	objoff_34(a0),a1 ; a1=object
	btst	#7,objoff_2E(a1)
	bne.s	loc_2E20E
	bset	#7,objoff_2E(a1)
	jsr	(SingleObjLoad2).l
	bne.s	loc_2E20E
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$10,routine(a1)
	move.b	#4,routine_secondary(a1)
	move.b	#9,anim(a1)

loc_2E20E:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2E258
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$6500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.b	#$10,routine(a1)
	move.b	#6,routine_secondary(a1)

loc_2E258:
	addq.b	#2,routine_secondary(a0)

loc_2E25C:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	subi.w	#$38,y_pos(a0)
	btst	#7,status(a0)
	bne.s	loc_2E2E0
	btst	#2,objoff_2E(a1)
	beq.s	loc_2E28C
	bsr.w	loc_2E4CE
	bsr.w	loc_2E3F2
	bra.s	loc_2E2AC
; ===========================================================================

loc_2E28C:
	btst	#5,objoff_2E(a1)
	beq.s	loc_2E2AC
	subq.w	#1,objoff_2A(a0)
	bne.s	loc_2E2AC
	bclr	#5,objoff_2E(a1)
	bset	#3,objoff_2E(a1)
	bset	#4,objoff_2E(a1)

loc_2E2AC:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.w	objoff_2E(a0),d0
	btst	#0,render_flags(a0)
	beq.s	loc_2E2CA
	neg.w	d0

loc_2E2CA:
	add.w	d0,x_pos(a0)
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E2E0:
	move.b	#$A,routine_secondary(a0)
	bra.s	loc_2E2AC
; ===========================================================================

loc_2E2E8:
	move.l	d7,-(sp)
	move.b	#$1E,objoff_30(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	subi.w	#$38,y_pos(a0)
	move.w	objoff_2E(a0),d0
	btst	#0,render_flags(a0)
	beq.s	loc_2E314
	neg.w	d0

loc_2E314:
	add.w	d0,x_pos(a0)
	move.b	#$20,mapping_frame(a0)
	move.b	#$14,routine(a0)
	jsr	(RandomNumber).l
	asr.w	#8,d0
	asr.w	#6,d0
	move.w	d0,x_vel(a0)
	move.w	#-$380,y_vel(a0)
	moveq	#0,d7
	move.w	objoff_2E(a0),d0
	addi.w	#$18,d0
	bge.s	loc_2E356
	addi.w	#$18,d0
	bge.s	loc_2E354
	addi.w	#$18,d0
	bge.s	loc_2E352
	addq.w	#1,d7

loc_2E352:
	addq.w	#1,d7

loc_2E354:
	addq.w	#1,d7

loc_2E356:
	subq.w	#1,d7
	bmi.w	loc_2E3E6

loc_2E35C:
	jsr	(SingleObjLoad).l
	bne.w	JmpTo51_DeleteObject
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.b	#$21,mapping_frame(a1)
	move.b	#$14,routine(a1)
	move.w	#$2500,art_tile(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#2,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#8,y_pos(a1)
	move.w	d7,d2
	add.w	d2,d2
	move.w	word_2E3EC(pc,d2.w),d3
	btst	#0,render_flags(a0)
	beq.s	loc_2E3BC
	neg.w	d3

loc_2E3BC:
	add.w	d3,x_pos(a1)
	jsr	(RandomNumber).l
	asr.w	#8,d0
	asr.w	#6,d0
	move.w	d0,x_vel(a1)
	move.w	#-$380,y_vel(a1)
	swap	d0
	addi.b	#$1E,d0
	andi.w	#$7F,d0
	move.b	d0,objoff_30(a1)
	dbf	d7,loc_2E35C

loc_2E3E6:
	move.l	(sp)+,d7
	bra.w	JmpTo34_DisplaySprite
; ===========================================================================
word_2E3EC:
	dc.w   $18
	dc.w   $30	; 1
	dc.w   $48	; 2
; ===========================================================================

loc_2E3F2:
	btst	#3,objoff_2E(a1)
	bne.w	return_2E4CC
	btst	#4,objoff_2E(a1)
	bne.w	return_2E4CC
	cmpi.w	#-$14,objoff_2E(a0)
	blt.s	loc_2E426
	btst	#1,objoff_2D(a1)
	beq.w	return_2E4CC
	bclr	#1,objoff_2D(a1)
	bset	#2,objoff_2D(a1)
	bra.s	loc_2E464
; ===========================================================================

loc_2E426:
	cmpi.w	#-$40,objoff_2E(a0)
	bge.w	return_2E4CC
	move.w	(MainCharacter+x_pos).w,d1
	subi.w	#8,d1
	btst	#0,render_flags(a0)
	beq.s	loc_2E454
	add.w	objoff_2E(a0),d1
	sub.w	x_pos(a0),d1
	bgt.w	return_2E4CC
	cmpi.w	#-$18,d1
	bge.s	loc_2E464
	rts
; ===========================================================================

loc_2E454:
	sub.w	objoff_2E(a0),d1
	sub.w	x_pos(a0),d1
	blt.s	return_2E4CC
	cmpi.w	#$18,d1
	bgt.s	return_2E4CC

loc_2E464:
	bset	#5,objoff_2E(a1)
	bclr	#2,objoff_2E(a1)
	move.w	#$12,objoff_2A(a0)
	jsr	(SingleObjLoad2).l
	bne.s	return_2E4CC
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.b	#$10,routine(a1)
	move.b	#8,routine_secondary(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#5,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$B,anim(a1)
	move.w	#$24,objoff_2A(a1)

return_2E4CC:
	rts
; ===========================================================================

loc_2E4CE:
	moveq	#1,d0
	btst	#4,objoff_2E(a1)
	bne.s	loc_2E4DA
	moveq	#-1,d0

loc_2E4DA:
	cmpi.w	#-$10,objoff_2E(a0)
	bne.s	loc_2E552
	bclr	#4,objoff_2E(a1)
	beq.s	loc_2E552
	bclr	#2,objoff_2E(a1)
	clr.b	routine_secondary(a0)
	movea.l	a1,a2
	jsr	(SingleObjLoad2).l
	bne.s	return_2E550
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	objoff_34(a0),objoff_34(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$2500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#4,routine(a1)
	move.b	#0,routine_secondary(a0)
	bra.s	return_2E550
; ===========================================================================
	move.b	#$A,$24(a1)
	move.l	$34(a0),$34(a1)

return_2E550:
	rts
; ===========================================================================

loc_2E552:
	move.w	objoff_2E(a0),d1
	cmpi.w	#-$28,d1
	bge.s	loc_2E59C
	cmpi.w	#-$40,d1
	bge.s	loc_2E594
	move.b	#8,anim(a0)
	cmpi.w	#-$58,d1
	blt.s	loc_2E57E
	bgt.s	loc_2E578
	btst	#4,objoff_2E(a1)
	beq.s	return_2E57C

loc_2E578:
	add.w	d0,objoff_2E(a0)

return_2E57C:
	rts
; ===========================================================================

loc_2E57E:
	move.w	#-$58,objoff_2E(a0)
	btst	#0,render_flags(a0)
	beq.s	loc_2E578
	move.w	#$58,objoff_2E(a0)
	bra.s	loc_2E578
; ===========================================================================

loc_2E594:
	move.b	#7,anim(a0)
	bra.s	loc_2E578
; ===========================================================================

loc_2E59C:
	move.b	#6,anim(a0)
	bra.s	loc_2E578
; ===========================================================================

loc_2E5A4:
	btst	#7,status(a0)
	bne.w	JmpTo51_DeleteObject
	movea.l	objoff_34(a0),a1 ; a1=object
	move.l	objoff_34(a1),d0
	beq.w	JmpTo51_DeleteObject
	movea.l	d0,a1 ; a1=object
	bclr	#3,objoff_2E(a1)
	beq.s	loc_2E5D8
	move.b	#$C,routine(a0)
	move.b	#0,routine_secondary(a0)
	move.b	#$87,collision_flags(a0)
	bra.s	loc_2E638
; ===========================================================================

loc_2E5D8:
	bclr	#1,objoff_2E(a1)
	bne.s	loc_2E5E8
	tst.b	anim(a0)
	bne.s	loc_2E638
	rts
; ===========================================================================

loc_2E5E8:
	tst.b	anim(a0)
	bne.s	loc_2E5F4
	move.b	#$B,anim(a0)

loc_2E5F4:
	addi.b	#1,anim(a0)
	cmpi.b	#$17,anim(a0)
	blt.s	loc_2E638
	bclr	#0,objoff_2E(a1)
	bset	#2,objoff_2E(a1)
	bra.s	loc_2E638
; ===========================================================================

loc_2E610:
	btst	#7,status(a0)
	bne.w	JmpTo51_DeleteObject
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	$34(a1),a1
	btst	#5,$2E(a1)
	beq.s	loc_2E638
	cmpi.b	#9,anim(a0)
	bne.s	loc_2E638
	move.b	#$A,anim(a0)

loc_2E638:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.b	status(a1),status(a0)
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E666:
	btst	#7,status(a0)
	bne.w	JmpTo51_DeleteObject
	subq.w	#1,objoff_2A(a0)
	beq.w	JmpTo51_DeleteObject
	bra.s	loc_2E638
; ===========================================================================

loc_2E67A:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2E688(pc,d0.w),d1
	jmp	off_2E688(pc,d1.w)
; ===========================================================================
off_2E688:
	dc.w loc_2E692-off_2E688
	dc.w loc_2E6CA-off_2E688; 1
	dc.w loc_2E7D0-off_2E688; 2
	dc.w loc_2E746-off_2E688; 3
	dc.w loc_2E790-off_2E688; 4
; ===========================================================================

loc_2E692:
	addq.b	#2,routine_secondary(a0)
	move.b	#$20,y_radius(a0)
	move.b	#$19,anim(a0)
	move.w	#0,y_vel(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	$34(a1),a1
	btst	#2,$2D(a1)
	beq.s	loc_2E6CA
	bclr	#2,$2D(a1)
	move.b	#6,routine_secondary(a0)
	move.w	#9,objoff_2A(a0)

loc_2E6CA:

	bsr.w	JmpTo3_ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bmi.s	loc_2E6F2
	cmpi.w	#$518,y_pos(a0)
	bge.s	loc_2E728
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E6F2:
	add.w	d1,y_pos(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	$34(a1),a1
	bset	#2,$2E(a1)
	bset	#4,$2E(a1)
	move.b	#2,$25(a1)
	addq.b	#2,routine_secondary(a0)
	move.b	#0,subtype(a0)
	move.w	#$E6,d0
	bsr.w	JmpTo5_PlaySound
	jmp	DisplaySprite
; ===========================================================================

loc_2E728:
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	$34(a1),a1
	bset	#2,$2E(a1)
	bset	#4,$2E(a1)
	move.b	#2,$25(a1)
	bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2E746:
	subi.w	#1,objoff_2A(a0)
	bpl.s	loc_2E77A
	move.b	#2,priority(a0)
	move.b	#$25,mapping_frame(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	objoff_34(a1),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addq.b	#2,routine_secondary(a0)
	move.b	#8,anim_frame_duration(a0)
	bra.s	loc_2E790
; ===========================================================================

loc_2E77A:
	bsr.w	JmpTo23_ObjectMove
	lea	(off_2EA3C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================

loc_2E790:

	subi.b	#1,anim_frame_duration(a0)
	bpl.s	loc_2E7B6
	addi.b	#1,mapping_frame(a0)
	move.b	#8,anim_frame_duration(a0)
	cmpi.b	#$27,mapping_frame(a0)
	bgt.w	loc_2E728
	blt.s	loc_2E7B6
	addi.b	#$C,anim_frame_duration(a0)

loc_2E7B6:
	movea.l	objoff_34(a0),a1 ; a1=object
	movea.l	objoff_34(a1),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	jmp	DisplaySprite
; ===========================================================================

loc_2E7D0:
	moveq	#0,d0
	move.b	subtype(a0),d0
	bne.w	loc_2E8CC
	addi.w	#$18,y_pos(a0)
	addi.w	#$C,x_pos(a0)
	btst	#0,render_flags(a0)
	beq.s	loc_2E7F4
	subi.w	#$18,x_pos(a0)

loc_2E7F4:
	move.b	#4,y_radius(a0)
	move.b	#4,x_radius(a0)
	addq.b	#1,subtype(a0)
	move.b	#9,mapping_frame(a0)
	move.w	y_vel(a0),d0
	lsr.w	#1,d0
	neg.w	d0
	move.w	d0,y_vel(a0)
	jsr	(RandomNumber).l
	asr.w	#6,d0
	bmi.s	loc_2E824
	addi.w	#$200,d0

loc_2E824:
	addi.w	#-$100,d0
	move.w	d0,x_vel(a0)
	move.b	#0,collision_flags(a0)
	moveq	#3,d3

loc_2E834:
	jsr	(SingleObjLoad2).l
	bne.w	BranchTo_JmpTo34_DisplaySprite
	_move.b	#$5D,0(a1) ; load obj5D
	move.l	a0,objoff_34(a1)
	move.l	#Obj5D_MapUnc_2EADC,mappings(a1)
	move.w	#$6500,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#2,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#4,y_radius(a1)
	move.b	#4,x_radius(a1)
	move.b	#9,mapping_frame(a1)
	move.b	#$C,routine(a1)
	move.b	#4,routine_secondary(a1)
	move.b	#1,subtype(a1) 
	move.w	y_vel(a0),y_vel(a1)
	move.b	collision_flags(a0),collision_flags(a1)
	jsr	(RandomNumber).l
	asr.w	#6,d0
	bmi.s	loc_2E8B2
	addi.w	#$80,d0

loc_2E8B2:
	addi.w	#-$80,d0
	move.w	d0,x_vel(a1)
	swap	d0
	andi.w	#$3FF,d0
	sub.w	d0,y_vel(a1)
	dbf	d3,loc_2E834

BranchTo_JmpTo34_DisplaySprite 
	bra.w	JmpTo34_DisplaySprite
; ===========================================================================

loc_2E8CC:
	bsr.w	JmpTo3_ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bmi.s	BranchTo2_JmpTo51_DeleteObject
	bra.w	JmpTo35_MarkObjGone
; ===========================================================================

BranchTo2_JmpTo51_DeleteObject 
	bra.w	JmpTo51_DeleteObject
; ===========================================================================

	; a bit of unused/dead code here
	add.w	d1,y_pos(a0) ; a0=object
	move.w	y_vel(a0),d0
	lsr.w	#1,d0
	neg.w	d0
	move.w	d0,y_vel(a0)
	bra.w	JmpTo34_DisplaySprite

; ===========================================================================

loc_2E8F6:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.b	objoff_3E(a1),d0
	cmpi.b	#$1F,d0
	bne.s	loc_2E922
	move.b	#2,anim(a0)

loc_2E922:
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_2E932
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	loc_2E938

loc_2E932:
	move.b	#3,anim(a0)

loc_2E938:
	lea	(off_2ED5C).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================
byte_2E94A:
	dc.b   0
	dc.b $FF	; 1
	dc.b   1	; 2
	dc.b   0	; 3
; ===========================================================================

loc_2E94E:
	btst	#7,status(a0)
	bne.s	loc_2E9A8
	movea.l	objoff_34(a0),a1 ; a1=object
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_2E996
	move.b	#1,anim_frame_duration(a0)
	move.b	objoff_2A(a0),d0
	addq.b	#1,d0
	cmpi.b	#2,d0
	ble.s	loc_2E98C
	moveq	#0,d0

loc_2E98C:
	move.b	byte_2E94A(pc,d0.w),mapping_frame(a0)
	move.b	d0,objoff_2A(a0)

loc_2E996:
	cmpi.b	#-1,mapping_frame(a0)
	bne.w	JmpTo34_DisplaySprite
	move.b	#0,mapping_frame(a0)
	rts
; ===========================================================================

loc_2E9A8:
	movea.l	objoff_34(a0),a1 ; a1=object
	btst	#6,objoff_2E(a1)
	bne.s	loc_2E9B6
	rts
; ===========================================================================

loc_2E9B6:
	addq.b	#2,routine_secondary(a0)
	move.l	#Obj5D_MapUnc_2EEA0,mappings(a0)
	move.w	#$418,art_tile(a0)
	bsr.w	JmpTo60_Adjust2PArtPointer
	move.b	#0,mapping_frame(a0)
	move.b	#5,anim_frame_duration(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#4,y_pos(a0)
	subi.w	#$28,x_pos(a0)
	rts
; ===========================================================================

loc_2E9F6:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo2_JmpTo34_DisplaySprite
	move.b	#5,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#4,mapping_frame(a0)
	bne.w	BranchTo2_JmpTo34_DisplaySprite
	move.b	#0,mapping_frame(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	(a1),d0
	beq.w	JmpTo51_DeleteObject
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#4,y_pos(a0)
	subi.w	#$28,x_pos(a0)

BranchTo2_JmpTo34_DisplaySprite 
	bra.w	JmpTo34_DisplaySprite
; ===========================================================================
; animation script
off_2EA3C:
	dc.w byte_2EA72-off_2EA3C
	dc.w byte_2EA75-off_2EA3C; 1
	dc.w byte_2EA78-off_2EA3C; 2
	dc.w byte_2EA7D-off_2EA3C; 3
	dc.w byte_2EA81-off_2EA3C; 4
	dc.w byte_2EA88-off_2EA3C; 5
	dc.w byte_2EA8B-off_2EA3C; 6
	dc.w byte_2EA8E-off_2EA3C; 7
	dc.w byte_2EA91-off_2EA3C; 8
	dc.w byte_2EA94-off_2EA3C; 9
	dc.w byte_2EA97-off_2EA3C; 10
	dc.w byte_2EAA3-off_2EA3C; 11
	dc.w byte_2EAAE-off_2EA3C; 12
	dc.w byte_2EAB1-off_2EA3C; 13
	dc.w byte_2EAB4-off_2EA3C; 14
	dc.w byte_2EAB7-off_2EA3C; 15
	dc.w byte_2EABA-off_2EA3C; 16
	dc.w byte_2EABD-off_2EA3C; 17
	dc.w byte_2EAC0-off_2EA3C; 18
	dc.w byte_2EAC3-off_2EA3C; 19
	dc.w byte_2EAC6-off_2EA3C; 20
	dc.w byte_2EAC9-off_2EA3C; 21
	dc.w byte_2EACC-off_2EA3C; 22
	dc.w byte_2EACF-off_2EA3C; 23
	dc.w byte_2EAD2-off_2EA3C; 24
	dc.w byte_2EAD5-off_2EA3C; 25
	dc.w byte_2EAD9-off_2EA3C; 26
byte_2EA72:	dc.b  $F,  0,$FF
byte_2EA75:	dc.b  $F,  1,$FF
byte_2EA78:	dc.b   5,  2,  3,  2,$FF
byte_2EA7D:	dc.b   5,  2,  3,$FF
byte_2EA81:	dc.b   2,  4,  5,  6,  7,  8,$FF
byte_2EA88:	dc.b   3,  9,$FF
byte_2EA8B:	dc.b  $F, $A,$FF
byte_2EA8E:	dc.b  $F,$1C,$FF
byte_2EA91:	dc.b  $F,$1E,$FF
byte_2EA94:	dc.b  $F, $B,$FF
byte_2EA97:	dc.b   3, $C, $C, $D, $D, $D, $D, $D, $C, $C,$FD,  9
byte_2EAA3:	dc.b   3, $E, $E, $F, $F, $F, $F, $F, $E, $E,$FF
byte_2EAAE:	dc.b  $F,$10,$FF
byte_2EAB1:	dc.b  $F,$11,$FF
byte_2EAB4:	dc.b  $F,$12,$FF
byte_2EAB7:	dc.b  $F,$13,$FF
byte_2EABA:	dc.b  $F,$14,$FF
byte_2EABD:	dc.b  $F,$15,$FF
byte_2EAC0:	dc.b  $F,$16,$FF
byte_2EAC3:	dc.b  $F,$17,$FF
byte_2EAC6:	dc.b  $F,$18,$FF
byte_2EAC9:	dc.b  $F,$19,$FF
byte_2EACC:	dc.b  $F,$1A,$FF
byte_2EACF:	dc.b  $F,$1B,$FF
byte_2EAD2:	dc.b  $F,$1C,$FF
byte_2EAD5:	dc.b   1,$1D,$1F,$FF
byte_2EAD9:	dc.b  $F,$1E,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_CPZBoss
; ----------------------------------------------------------------------------
Obj5D_MapUnc_2EADC:	BINCLUDE "mappings/sprite/obj5D_a.bin"

; animation script
off_2ED5C:
	dc.w byte_2ED66-off_2ED5C
	dc.w byte_2ED69-off_2ED5C; 1
	dc.w byte_2ED6D-off_2ED5C; 2
	dc.w byte_2ED76-off_2ED5C; 3
	dc.w byte_2ED7F-off_2ED5C; 4
byte_2ED66:	dc.b  $F,  0,$FF
byte_2ED69:	dc.b   7,  1,  2,$FF
byte_2ED6D:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1
byte_2ED76:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1
byte_2ED7F:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1
	even

; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_Eggpod
; ----------------------------------------------------------------------------
Obj5D_MapUnc_2ED8C:	BINCLUDE "mappings/sprite/obj5D_b.bin"
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_EggpodJets
; ----------------------------------------------------------------------------
Obj5D_MapUnc_2EE88:	BINCLUDE "mappings/sprite/obj5D_c.bin"
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_BossSmoke
; ----------------------------------------------------------------------------
Obj5D_MapUnc_2EEA0:	BINCLUDE "mappings/sprite/obj5D_d.bin"
; ===========================================================================

JmpTo34_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo51_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo35_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo5_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo8_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo5_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo2_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo60_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo_loc_F62E 
	jmp	loc_F62E
; ===========================================================================

JmpTo3_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
; loc_2EF12:
JmpTo23_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 56 - EHZ boss
; ----------------------------------------------------------------------------
; Sprite_2EF18:
Obj56:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_2EF26(pc,d0.w),d1
	jmp	off_2EF26(pc,d1.w)
; ===========================================================================
off_2EF26:
	dc.w loc_2EF36-off_2EF26
	dc.w loc_2F262-off_2EF26; 1
	dc.w loc_2F54E-off_2EF26; 2
	dc.w loc_2F5F6-off_2EF26; 3
	dc.w loc_2F664-off_2EF26; 4
	dc.w loc_2F7F4-off_2EF26; 5
	dc.w loc_2F52A-off_2EF26; 6
	dc.w loc_2F8DA-off_2EF26; 7
; ===========================================================================

loc_2EF36:
	move.l	#Obj56_MapUnc_2FAF8,mappings(a0)
	move.w	#$23A0,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$81,subtype(a0) 
	move.w	#$29D0,x_pos(a0)
	move.w	#$426,y_pos(a0)
	move.b	#$20,width_pixels(a0)
	move.b	#$14,y_radius(a0)
	move.b	#4,priority(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,collision_property(a0)
	addq.b	#2,routine(a0)
	move.w	x_pos(a0),objoff_30(a0)
	move.w	y_pos(a0),objoff_38(a0)
	bsr.w	JmpTo61_Adjust2PArtPointer
	jsr	(SingleObjLoad2).l
	bne.w	loc_2EFE4
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	a1,objoff_34(a0)
	move.l	#Obj56_MapUnc_2FAF8,mappings(a1)
	move.w	#$3A0,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#4,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#$E,routine(a1)
	move.b	#1,anim(a1)
	move.b	render_flags(a0),render_flags(a1)

loc_2EFE4:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2F032
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2FA58,mappings(a1)
	move.w	#$400,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$30,width_pixels(a1)
	move.b	#$10,y_radius(a1)
	move.b	#3,priority(a1)
	move.w	#$2AF0,x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.b	#6,routine(a1)

loc_2F032:
	bsr.w	loc_2F098
	subi.w	#8,objoff_38(a0)
	move.w	#$2AF0,x_pos(a0)
	move.w	#$2F8,y_pos(a0)
	jsr	(SingleObjLoad2).l
	bne.s	return_2F096
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2F970,mappings(a1)
	move.w	#$256C,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$40,width_pixels(a1)
	move.b	#3,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	move.w	#$1E,objoff_2A(a1)
	move.b	#4,routine(a1)

return_2F096:
	rts
; ===========================================================================

loc_2F098:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2F110
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2FA58,mappings(a1)
	move.w	#$2400,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#2,priority(a1)
	move.b	#$10,y_radius(a1)
	move.b	#$10,x_radius(a1)
	move.w	#$2AF0,x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.w	#$1C,x_pos(a1)
	addi.w	#$C,y_pos(a1)
	move.b	#8,routine(a1)
	move.b	#4,mapping_frame(a1)
	move.b	#1,anim(a1)
	move.w	#$A,objoff_2A(a1)
	move.b	#0,subtype(a1) 

loc_2F110:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2F188
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2FA58,mappings(a1)
	move.w	#$2400,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#2,priority(a1)
	move.b	#$10,y_radius(a1)
	move.b	#$10,x_radius(a1)
	move.w	#$2AF0,x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.w	#-$C,x_pos(a1)
	addi.w	#$C,y_pos(a1)
	move.b	#8,routine(a1)
	move.b	#4,mapping_frame(a1)
	move.b	#1,anim(a1)
	move.w	#$A,objoff_2A(a1)
	move.b	#1,subtype(a1) 

loc_2F188:
	jsr	(SingleObjLoad2).l
	bne.s	loc_2F200
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2FA58,mappings(a1)
	move.w	#$2400,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#3,priority(a1)
	move.b	#$10,y_radius(a1)
	move.b	#$10,x_radius(a1)
	move.w	#$2AF0,x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.w	#-$2C,x_pos(a1)
	addi.w	#$C,y_pos(a1)
	move.b	#8,routine(a1)
	move.b	#6,mapping_frame(a1)
	move.b	#2,anim(a1)
	move.w	#$A,objoff_2A(a1)
	move.b	#2,subtype(a1) 

loc_2F200:
	jsr	(SingleObjLoad2).l
	bne.s	return_2F260
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2FA58,mappings(a1)
	move.w	#$2400,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#2,priority(a1)
	move.w	#$2AF0,x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.w	#-$36,x_pos(a1)
	addi.w	#8,y_pos(a1)
	move.b	#$A,routine(a1)
	move.b	#1,mapping_frame(a1)
	move.b	#0,anim(a1)

return_2F260:
	rts
; ===========================================================================

loc_2F262:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2F270(pc,d0.w),d1
	jmp	off_2F270(pc,d1.w)
; ===========================================================================
off_2F270:
	dc.w loc_2F27C-off_2F270
	dc.w loc_2F2A8-off_2F270; 1
	dc.w loc_2F304-off_2F270; 2
	dc.w loc_2F336-off_2F270; 3
	dc.w loc_2F374-off_2F270; 4
	dc.w loc_2F38A-off_2F270; 5
; ===========================================================================

loc_2F27C:
	move.b	#0,collision_flags(a0)
	cmpi.w	#$29D0,x_pos(a0)
	ble.s	loc_2F29A
	subi.w	#1,x_pos(a0)
	addi.w	#1,y_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F29A:
	move.w	#$29D0,x_pos(a0)
	addq.b	#2,routine_secondary(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2A8:
	moveq	#0,d0
	move.b	objoff_2C(a0),d0
	move.w	off_2F2B6(pc,d0.w),d1
	jmp	off_2F2B6(pc,d1.w)
; ===========================================================================
off_2F2B6:
	dc.w loc_2F2BA-off_2F2B6
	dc.w loc_2F2E0-off_2F2B6; 1
; ===========================================================================

loc_2F2BA:
	cmpi.w	#$41E,y_pos(a0)
	bge.s	loc_2F2CC
	addi.w	#1,y_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2CC:
	addq.b	#2,objoff_2C(a0)
	bset	#0,objoff_2D(a0)
	move.w	#$3C,objoff_2A(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2E0:
	subi.w	#1,objoff_2A(a0)
	bpl.w	JmpTo35_DisplaySprite
	move.w	#-$200,x_vel(a0)
	addq.b	#2,routine_secondary(a0)
	move.b	#$F,collision_flags(a0)
	bset	#1,objoff_2D(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F304:
	bsr.w	loc_2F4A6
	bsr.w	loc_2F484
	move.w	objoff_2E(a0),d0
	lsr.w	#1,d0
	subi.w	#$14,d0
	move.w	d0,y_pos(a0)
	move.w	#0,objoff_2E(a0)
	move.l	x_pos(a0),d2
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.l	d2,x_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F336:
	subq.w	#1,objoff_3C(a0)
	bmi.s	loc_2F35C
	bsr.w	loc_2D6CC
	bsr.w	JmpTo4_ObjectMoveAndFall
	bsr.w	JmpTo3_ObjCheckFloorDist
	tst.w	d1
	bpl.w	JmpTo35_DisplaySprite
	add.w	d1,y_pos(a0)
	move.w	#0,y_vel(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F35C:
	clr.w	x_vel(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#-$26,objoff_3C(a0)
	move.w	#$C,objoff_2A(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F374:
	subq.w	#1,objoff_2A(a0)
	bpl.w	JmpTo35_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	move.b	#0,objoff_2C(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F38A:
	moveq	#0,d0
	move.b	objoff_2C(a0),d0
	move.w	off_2F39C(pc,d0.w),d1
	jsr	off_2F39C(pc,d1.w)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================
off_2F39C:
	dc.w loc_2F3A2-off_2F39C
	dc.w loc_2F424-off_2F39C; 1
	dc.w loc_2F442-off_2F39C; 2
; ===========================================================================

loc_2F3A2:
	bclr	#0,objoff_2D(a0)
	bsr.w	JmpTo21_SingleObjLoad2
	bne.w	return_2F422
	_move.b	#$56,0(a1) ; load obj56
	move.l	a0,objoff_34(a1)
	move.l	#Obj56_MapUnc_2F970,mappings(a1)
	move.w	#$256C,art_tile(a1)
	bsr.w	JmpTo9_Adjust2PArtPointer2
	move.b	#4,render_flags(a1)
	move.b	#$20,width_pixels(a1)
	move.b	#3,priority(a1)
	move.l	x_pos(a0),x_pos(a1)
	move.l	y_pos(a0),y_pos(a1)
	addi.w	#$C,y_pos(a1)
	move.b	status(a0),status(a1)
	move.b	render_flags(a0),render_flags(a1)
	move.b	#$C,routine(a1)
	move.b	#2,anim(a1)
	move.w	#$10,objoff_2A(a1)
	move.w	#$32,objoff_2A(a0)
	addq.b	#2,objoff_2C(a0)
	bsr.w	JmpTo2_loc_F626
	move.b	#1,($FFFFF7A7).w

return_2F422:
	rts
; ===========================================================================

loc_2F424:
	subi.w	#1,objoff_2A(a0)
	bpl.s	return_2F440
	bset	#2,objoff_2D(a0)
	move.w	#$60,objoff_2A(a0)
	addq.b	#2,objoff_2C(a0)
	bsr.w	JmpTo2_loc_F62E

return_2F440:
	rts
; ===========================================================================

loc_2F442:
	subi.w	#1,objoff_2A(a0)
	bpl.s	loc_2F45C
	bset	#0,status(a0)
	bset	#0,render_flags(a0)
	addq.w	#6,x_pos(a0)
	bra.s	loc_2F460
; ===========================================================================

loc_2F45C:
	subq.w	#1,y_pos(a0)

loc_2F460:
	cmpi.w	#$2AB0,(Camera_Max_X_pos).w
	bcc.s	loc_2F46E
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	return_2F482
; ===========================================================================

loc_2F46E:
	tst.b	render_flags(a0)
	bmi.s	return_2F482
	addq.w	#4,sp
	movea.l	objoff_34(a0),a1 ; a1=object
	bsr.w	JmpTo5_DeleteObject2
	bra.w	JmpTo52_DeleteObject
; ===========================================================================

return_2F482:
	rts
; ===========================================================================

loc_2F484:
	move.w	x_pos(a0),d0
	cmpi.w	#$28A0,d0
	ble.s	loc_2F494
	cmpi.w	#$2B08,d0
	blt.s	return_2F4A4

loc_2F494:
	bchg	#0,status(a0)
	bchg	#0,render_flags(a0)
	neg.w	x_vel(a0)

return_2F4A4:
	rts
; ===========================================================================

loc_2F4A6:
	cmpi.b	#6,routine_secondary(a0)
	bcc.s	return_2F4EC
	tst.b	status(a0)
	bmi.s	loc_2F4EE
	tst.b	collision_flags(a0)
	bne.s	return_2F4EC
	tst.b	objoff_3E(a0)
	bne.s	loc_2F4D0
	move.b	#$20,objoff_3E(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_2F4D0:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_2F4DE
	move.w	#$EEE,d0

loc_2F4DE:
	move.w	d0,(a1)
	subq.b	#1,objoff_3E(a0)
	bne.s	return_2F4EC
	move.b	#$F,collision_flags(a0)

return_2F4EC:
	rts
; ===========================================================================

loc_2F4EE:
	moveq	#$64,d0
	bsr.w	JmpTo3_AddPoints
	move.b	#6,routine_secondary(a0)
	move.w	#0,x_vel(a0)
	move.w	#-$180,y_vel(a0)
	move.w	#$B3,objoff_3C(a0)
	bset	#3,objoff_2D(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	#4,anim(a1)
	move.b	#6,mapping_frame(a1)
	moveq	#$40,d0
	bra.w	JmpTo6_LoadPLC
; ===========================================================================
	rts
; ===========================================================================

loc_2F52A:
	subi.w	#1,y_pos(a0)
	subi.w	#1,objoff_2A(a0)
	bpl.w	JmpTo35_DisplaySprite
	move.b	#4,routine(a0)
	lea	(off_2F936).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F54E:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2F55C(pc,d0.w),d1
	jmp	off_2F55C(pc,d1.w)
; ===========================================================================
off_2F55C:
	dc.w loc_2F560-off_2F55C
	dc.w loc_2F5C6-off_2F55C; 1
; ===========================================================================

loc_2F560:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#$56,(a1)
	bne.w	JmpTo52_DeleteObject
	btst	#0,objoff_2D(a1)
	beq.s	loc_2F58E
	move.b	#1,anim(a0)
	move.w	#$18,objoff_2A(a0)
	addq.b	#2,routine_secondary(a0)
	move.b	#-8,d0
	bsr.w	JmpTo6_PlaySound
	bra.s	loc_2F5A0
; ===========================================================================

loc_2F58E:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_2F5A0
	move.b	#-$22,d0
	bsr.w	JmpTo6_PlaySound

loc_2F5A0:
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	lea	(off_2F936).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5C6:
	subi.w	#1,objoff_2A(a0)
	bpl.s	loc_2F5E8
	cmpi.w	#-$10,objoff_2A(a0)
	ble.w	JmpTo52_DeleteObject
	move.b	#4,priority(a0)
	addi.w	#1,y_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5E8:
	lea	(off_2F936).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5F6:
	tst.b	routine_secondary(a0)
	bne.s	loc_2F626
	cmpi.w	#$28F0,(Camera_Min_X_pos).w
	bcs.w	JmpTo35_DisplaySprite
	cmpi.w	#$29D0,x_pos(a0)
	ble.s	loc_2F618
	subi.w	#1,x_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F618:
	move.w	#$29D0,x_pos(a0)
	addq.b	#2,routine_secondary(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F626:
	movea.l	objoff_34(a0),a1 ; a1=object
	btst	#1,objoff_2D(a1)
	beq.w	JmpTo35_DisplaySprite
	btst	#2,objoff_2D(a1)
	bne.w	JmpTo35_DisplaySprite
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#8,y_pos(a0)
	move.b	status(a1),status(a0)
	bmi.w	JmpTo35_DisplaySprite
	move.b	render_flags(a1),render_flags(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F664:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2F672(pc,d0.w),d1
	jmp	off_2F672(pc,d1.w)
; ===========================================================================
off_2F672:
	dc.w loc_2F67C-off_2F672
	dc.w loc_2F714-off_2F672; 1
	dc.w loc_2F746-off_2F672; 2
	dc.w loc_2F7A6-off_2F672; 3
	dc.w loc_2F7D2-off_2F672; 4
; ===========================================================================

loc_2F67C:
	cmpi.w	#$28F0,(Camera_Min_X_pos).w
	bcs.w	JmpTo35_DisplaySprite
	move.w	#$100,y_vel(a0)
	cmpi.b	#1,subtype(a0)
	bgt.s	loc_2F6B6
	beq.s	loc_2F6A6
	cmpi.w	#$29EC,x_pos(a0)
	ble.s	loc_2F6C6
	subi.w	#1,x_pos(a0)
	bra.s	loc_2F6E8
; ===========================================================================

loc_2F6A6:
	cmpi.w	#$29C4,x_pos(a0)
	ble.s	loc_2F6D2
	subi.w	#1,x_pos(a0)
	bra.s	loc_2F6E8
; ===========================================================================

loc_2F6B6:
	cmpi.w	#$29A4,x_pos(a0)
	ble.s	loc_2F6DE
	subi.w	#1,x_pos(a0)
	bra.s	loc_2F6E8
; ===========================================================================

loc_2F6C6:
	move.w	#$29EC,x_pos(a0)
	addq.b	#2,routine_secondary(a0)
	bra.s	loc_2F6E8
; ===========================================================================

loc_2F6D2:
	move.w	#$29C4,x_pos(a0)
	addq.b	#2,routine_secondary(a0)
	bra.s	loc_2F6E8
; ===========================================================================

loc_2F6DE:
	move.w	#$29A4,x_pos(a0)
	addq.b	#2,routine_secondary(a0)

loc_2F6E8:
	bsr.w	JmpTo4_ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_2F6FA
	add.w	d1,y_pos(a0)

loc_2F6FA:
	tst.b	routine_secondary(a0)
	beq.s	loc_2F706
	move.w	#-$200,x_vel(a0)

loc_2F706:
	lea	(off_2FA44).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F714:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#$56,(a1)
	bne.w	JmpTo52_DeleteObject
	btst	#1,objoff_2D(a1)
	beq.w	JmpTo35_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	cmpi.b	#2,priority(a0)
	bne.s	BranchTo_JmpTo35_DisplaySprite
	move.w	y_pos(a0),d0
	movea.l	objoff_34(a0),a1 ; a1=object
	add.w	d0,objoff_2E(a1)

BranchTo_JmpTo35_DisplaySprite 
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F746:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#$56,(a1)
	bne.w	JmpTo52_DeleteObject
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	tst.b	status(a0)
	bpl.s	loc_2F768
	addq.b	#2,routine_secondary(a0)

loc_2F768:
	bsr.w	loc_2F484
	bsr.w	JmpTo4_ObjectMoveAndFall
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_2F77E
	add.w	d1,y_pos(a0)

loc_2F77E:
	move.w	#$100,y_vel(a0)
	cmpi.b	#2,priority(a0)
	bne.s	loc_2F798
	move.w	y_pos(a0),d0
	movea.l	objoff_34(a0),a1 ; a1=object
	add.w	d0,objoff_2E(a1)

loc_2F798:
	lea	(off_2FA44).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7A6:
	subi.w	#1,objoff_2A(a0)
	bpl.w	JmpTo35_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	move.w	#$A,objoff_2A(a0)
	move.w	#-$300,y_vel(a0)
	cmpi.b	#2,priority(a0)
	beq.w	JmpTo35_DisplaySprite
	neg.w	x_vel(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7D2:
	subq.w	#1,objoff_2A(a0)
	bpl.w	JmpTo35_DisplaySprite
	bsr.w	JmpTo4_ObjectMoveAndFall
	bsr.w	JmpTo3_ObjCheckFloorDist
	tst.w	d1
	bpl.s	BranchTo_JmpTo36_MarkObjGone
	move.w	#-$200,y_vel(a0)
	add.w	d1,y_pos(a0)

BranchTo_JmpTo36_MarkObjGone 
	bra.w	JmpTo36_MarkObjGone
; ===========================================================================

loc_2F7F4:
	tst.b	routine_secondary(a0)
	bne.s	loc_2F824
	cmpi.w	#$28F0,(Camera_Min_X_pos).w
	bcs.w	JmpTo35_DisplaySprite
	cmpi.w	#$299A,x_pos(a0)
	ble.s	loc_2F816
	subi.w	#1,x_pos(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F816:
	move.w	#$299A,x_pos(a0)
	addq.b	#2,routine_secondary(a0)
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F824:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#$56,(a1)
	bne.w	JmpTo52_DeleteObject
	btst	#3,objoff_2D(a1)
	bne.s	loc_2F88A
	bsr.w	loc_2F8AA
	btst	#1,objoff_2D(a1)
	beq.w	JmpTo35_DisplaySprite
	move.b	#$8B,collision_flags(a0)
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	addi.w	#$10,y_pos(a0)
	move.w	#-$36,d0
	btst	#0,status(a0)
	beq.s	loc_2F878
	neg.w	d0

loc_2F878:
	add.w	d0,x_pos(a0)
	lea	(off_2FA44).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F88A:
	move.w	#-3,d0
	btst	#0,status(a0)
	beq.s	loc_2F898
	neg.w	d0

loc_2F898:
	add.w	d0,x_pos(a0)
	lea	(off_2FA44).l,a1
	bsr.w	JmpTo17_AnimateSprite
	bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F8AA:
	cmpi.b	#1,collision_property(a1)
	beq.s	loc_2F8B4
	rts
; ===========================================================================

loc_2F8B4:
	move.w	x_pos(a0),d0
	sub.w	(MainCharacter+x_pos).w,d0
	bpl.s	loc_2F8C8
	btst	#0,status(a1)
	bne.s	loc_2F8D2
	rts
; ===========================================================================

loc_2F8C8:
	btst	#0,status(a1)
	beq.s	loc_2F8D2
	rts
; ===========================================================================

loc_2F8D2:
	bset	#3,objoff_2D(a1)
	rts
; ===========================================================================

loc_2F8DA:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	move.b	status(a1),status(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.b	objoff_3E(a1),d0
	cmpi.b	#$1F,d0
	bne.s	loc_2F906
	move.b	#2,anim(a0)

loc_2F906:
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_2F916
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	loc_2F924

loc_2F916:
	cmpi.b	#2,anim(a0)
	beq.s	loc_2F924
	move.b	#3,anim(a0)

loc_2F924:
	lea	(off_2FAC8).l,a1
	jsr	AnimateSprite
	jmp	DisplaySprite
; ===========================================================================
; animation script
off_2F936:
	dc.w byte_2F93C-off_2F936
	dc.w byte_2F940-off_2F936; 1
	dc.w byte_2F956-off_2F936; 2
byte_2F93C:
	dc.b   1,  5,  6,$FF
byte_2F940:
	dc.b   1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  0,  0,  0
	dc.b   0,  0,  0,  0,  0,$FF; 16
byte_2F956:
	dc.b   1,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  4,  3,  3,  3,  2
	dc.b   2,  2,  1,  1,  1,  5,  6,$FE,  2
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj56_MapUnc_2F970:	BINCLUDE "mappings/sprite/obj56_a.bin"

; animation script
off_2FA44:
	dc.w byte_2FA4A-off_2FA44
	dc.w byte_2FA4F-off_2FA44; 1
	dc.w byte_2FA53-off_2FA44; 2
byte_2FA4A:
	dc.b   5,  1,  2,  3,$FF
byte_2FA4F:
	dc.b   1,  4,  5,$FF
byte_2FA53:
	dc.b   1,  6,  7,$FF
	even

; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj56_MapUnc_2FA58:	BINCLUDE "mappings/sprite/obj56_b.bin"

; animation script
off_2FAC8:
	dc.w byte_2FAD2-off_2FAC8
	dc.w byte_2FAD5-off_2FAC8; 1
	dc.w byte_2FAD9-off_2FAC8; 2
	dc.w byte_2FAE2-off_2FAC8; 3
	dc.w byte_2FAEB-off_2FAC8; 4
byte_2FAD2:	dc.b  $F,  0,$FF
byte_2FAD5:	dc.b   7,  1,  2,$FF
byte_2FAD9:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1
byte_2FAE2:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1
byte_2FAEB:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1
	even

; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj56_MapUnc_2FAF8:	BINCLUDE "mappings/sprite/obj56_c.bin"
; ===========================================================================

JmpTo35_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo52_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo36_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo5_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo6_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo21_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo17_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo9_Adjust2PArtPointer2 
	jmp	Adjust2PArtPointer2
; ===========================================================================

JmpTo3_ObjCheckFloorDist 
	jmp	ObjCheckFloorDist
; ===========================================================================

JmpTo6_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo3_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo61_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo2_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo2_loc_F62E 
	jmp	loc_F62E
; ===========================================================================

JmpTo4_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 52 - HTZ boss
; ----------------------------------------------------------------------------
; Sprite_2FC50:
Obj52:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_2FC5E(pc,d0.w),d1
	jmp	off_2FC5E(pc,d1.w)
; ===========================================================================
off_2FC5E:
	dc.w loc_2FC68-off_2FC5E
	dc.w loc_2FD00-off_2FC5E; 1
	dc.w loc_2FEF0-off_2FC5E; 2
	dc.w loc_2FF66-off_2FC5E; 3
	dc.w loc_30210-off_2FC5E; 4
; ===========================================================================

loc_2FC68:
	move.l	#Obj52_MapUnc_302BC,mappings(a0)
	move.w	#$3C1,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#-$70,objoff_E(a0)
	move.b	#-$70,objoff_14(a0)
	move.b	#4,priority(a0)
	move.w	#$3040,x_pos(a0)
	move.w	#$580,y_pos(a0)
	move.b	#1,objoff_2C(a0)
	move.b	#1,objoff_B(a0)
	addq.b	#2,objoff_A(a0)
	bset	#6,render_flags(a0)
	move.b	#$32,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.w	#-$E0,($FFFFF75A).w
	move.w	x_pos(a0),($FFFFF750).w
	move.w	y_pos(a0),($FFFFF754).w
	clr.b	objoff_14(a0)
	move.w	x_pos(a0),x_vel(a0)
	move.w	y_pos(a0),y_vel(a0)
	move.b	#2,objoff_15(a0)
	bsr.w	loc_2FCEA
	rts
; ===========================================================================

loc_2FCEA:
	lea	($FFFFF740).w,a2
	move.b	#6,(a2)+
	move.b	#0,(a2)+
	move.b	#$10,(a2)+
	move.b	#0,(a2)+
	rts
; ===========================================================================

loc_2FD00:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_2FD0E(pc,d0.w),d1
	jmp	off_2FD0E(pc,d1.w)
; ===========================================================================
off_2FD0E:
	dc.w loc_2FD18-off_2FD0E
	dc.w loc_2FD5E-off_2FD0E; 1
	dc.w loc_2FDDA-off_2FD0E; 2
	dc.w loc_2FE0E-off_2FD0E; 3
	dc.w loc_30106-off_2FD0E; 4
; ===========================================================================

loc_2FD18:
	move.b	#0,($FFFFF73F).w
	bsr.w	loc_2D5DE
	tst.b	objoff_2C(a0)
	bne.s	loc_2FD32
	cmpi.w	#$518,($FFFFF754).w
	bgt.s	loc_2FD50
	bra.s	loc_2FD3A
; ===========================================================================

loc_2FD32:
	cmpi.w	#$4FC,($FFFFF754).w
	bgt.s	loc_2FD50

loc_2FD3A:
	move.w	#0,($FFFFF75A).w
	move.b	#4,mapping_frame(a0)
	addq.b	#2,angle(a0)
	move.b	#$3C,objoff_3E(a0)

loc_2FD50:
	move.w	($FFFFF754).w,y_pos(a0)
	bsr.w	loc_300A4
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_2FD5E:
	subi.b	#1,objoff_3E(a0)
	bpl.s	loc_2FDC0
	move.b	#1,($FFFFF73F).w
	move.b	#1,objoff_F(a0)
	cmpi.b	#-$18,objoff_3E(a0)
	bne.s	loc_2FDC0
	bsr.w	JmpTo13_SingleObjLoad
	bne.s	loc_2FDAA
	_move.b	#$52,0(a1) ; load obj52
	move.b	#4,objoff_A(a1)
	move.b	render_flags(a0),render_flags(a1)
	andi.b	#1,render_flags(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#$2F,objoff_3E(a0)

loc_2FDAA:
	bsr.w	loc_300A4
	bsr.w	loc_2FEDE
	lea	(off_30288).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_2FDC0:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#7,d1
	add.w	($FFFFF754).w,d1
	move.w	d1,y_pos(a0)
	addq.b	#4,mapping_frame(a0)
	bra.s	loc_2FDAA
; ===========================================================================

loc_2FDDA:
	move.b	#0,($FFFFF73F).w
	move.b	#0,objoff_F(a0)
	move.b	#$10,($FFFFF742).w
	move.b	#0,($FFFFF743).w
	subi.b	#1,objoff_3E(a0)
	bne.w	loc_2FDC0
	move.w	#$E0,($FFFFF75A).w
	addq.b	#2,angle(a0)
	bsr.w	loc_2FEDE
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_2FE0E:
	bsr.w	loc_2D5DE
	tst.b	objoff_2C(a0)
	bne.s	loc_2FE22
	cmpi.w	#$538,($FFFFF754).w
	blt.s	loc_2FE58
	bra.s	loc_2FE2A
; ===========================================================================

loc_2FE22:
	cmpi.w	#$548,($FFFFF754).w
	blt.s	loc_2FE58

loc_2FE2A:
	tst.b	objoff_38(a0)
	bne.s	loc_2FE58
	st	objoff_38(a0)
	bsr.w	JmpTo13_SingleObjLoad
	bne.s	loc_2FE58
	move.b	#$52,(a1) ; load obj52
	move.b	#6,objoff_A(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#-$52,d0
	bsr.w	JmpTo7_PlaySound

loc_2FE58:
	tst.b	objoff_2C(a0)
	bne.s	loc_2FE6E
	cmpi.w	#$5A0,($FFFFF754).w
	blt.s	loc_2FED0
	move.w	#$5A0,($FFFFF754).w
	bra.s	loc_2FE7C
; ===========================================================================

loc_2FE6E:
	cmpi.w	#$580,($FFFFF754).w
	blt.s	loc_2FED0
	move.w	#$580,($FFFFF754).w

loc_2FE7C:
	move.w	#-$E0,($FFFFF75A).w
	move.b	#0,angle(a0)
	sf	objoff_38(a0)
	move.w	(MainCharacter+x_pos).w,d0
	subi.w	#$2FC0,d0
	bmi.s	loc_2FEA8
	move.w	#$580,($FFFFF754).w
	move.w	#$3040,x_pos(a0)
	st	objoff_2C(a0)
	bra.s	loc_2FEB8
; ===========================================================================

loc_2FEA8:
	move.w	#$2F40,x_pos(a0)
	move.w	#$5A0,($FFFFF754).w
	sf	objoff_2C(a0)

loc_2FEB8:
	move.w	x_pos(a0),d0
	cmp.w	(MainCharacter+x_pos).w,d0
	bgt.s	loc_2FECA
	bset	#0,render_flags(a0)
	bra.s	loc_2FED0
; ===========================================================================

loc_2FECA:
	bclr	#0,render_flags(a0)

loc_2FED0:
	move.w	($FFFFF754).w,y_pos(a0)
	bsr.w	loc_300A4
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_2FEDE:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	rts
; ===========================================================================

loc_2FEF0:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2FEFE(pc,d0.w),d1
	jmp	off_2FEFE(pc,d1.w)
; ===========================================================================
off_2FEFE:
	dc.w loc_2FF02-off_2FEFE
	dc.w loc_2FF50-off_2FEFE; 1
; ===========================================================================

loc_2FF02:
	move.l	#Obj52_MapUnc_302BC,mappings(a0)
	move.w	#$421,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	addq.b	#2,routine_secondary(a0)
	move.b	#5,anim(a0)
	move.b	#$98,collision_flags(a0)
	subi.w	#$1C,y_pos(a0)
	move.w	#-$70,d0
	move.w	#-4,d1
	btst	#0,render_flags(a0)
	beq.s	loc_2FF46
	neg.w	d0
	neg.w	d1

loc_2FF46:
	add.w	d0,x_pos(a0)
	move.w	d1,x_vel(a0)
	rts
; ===========================================================================

loc_2FF50:
	move.w	x_vel(a0),d1
	add.w	d1,x_pos(a0)
	lea	(off_30288).l,a1
	bsr.w	JmpTo18_AnimateSprite
	bra.w	JmpTo37_MarkObjGone
; ===========================================================================

loc_2FF66:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_2FF74(pc,d0.w),d1
	jmp	off_2FF74(pc,d1.w)
; ===========================================================================
off_2FF74:
	dc.w loc_2FF78-off_2FF74
	dc.w loc_30008-off_2FF74; 1
; ===========================================================================

loc_2FF78:
	movea.l	a0,a1
	moveq	#0,d2
	moveq	#1,d1
	bra.s	loc_2FF94
; ===========================================================================

loc_2FF80:
	bsr.w	JmpTo13_SingleObjLoad
	bne.w	return_30006
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

loc_2FF94:
	move.b	#$52,(a1) ; load obj52
	move.b	#6,objoff_A(a1)
	move.l	#Obj52_MapUnc_302BC,mappings(a1)
	move.w	#$421,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	addq.b	#2,routine_secondary(a1)
	move.b	#7,anim(a1)
	move.b	#-$75,collision_flags(a1)
	move.b	d2,objoff_2E(a1)
	move.b	#8,y_radius(a1)
	move.b	#8,x_radius(a1)
	move.w	x_pos(a1),objoff_2A(a1)
	move.w	#$1C00,d0
	tst.w	d2
	bne.s	loc_2FFE8
	neg.w	d0

loc_2FFE8:
	move.w	d0,x_vel(a1)
	move.w	#-$5400,y_vel(a1)
	cmpi.w	#$2F40,x_pos(a1)
	beq.s	loc_30000
	move.w	#-$6400,y_vel(a1)

loc_30000:
	addq.w	#1,d2
	dbf	d1,loc_2FF80

return_30006:
	rts
; ===========================================================================

loc_30008:
	bsr.w	loc_30072
	bsr.w	JmpTo4_ObjCheckFloorDist
	tst.w	d1
	bpl.s	loc_30064
	add.w	d1,y_pos(a0)
	move.b	#$20,(a0) ; load 0bj20
	move.b	#$A,routine(a0)
	move.b	#2,anim(a0)
	move.b	#4,mapping_frame(a0)
	move.w	#0,y_vel(a0)
	move.l	#Obj20_MapUnc_23294,mappings(a0)
	move.w	#$839E,art_tile(a0)
	bsr.w	JmpTo62_Adjust2PArtPointer
	move.b	#0,mapping_frame(a0)
	move.w	#9,objoff_32(a0)
	move.b	#3,objoff_36(a0)
	move.b	#-$4D,d0
	bsr.w	JmpTo7_PlaySound
	bra.w	JmpTo_Obj20
; ===========================================================================

loc_30064:
	lea	(off_30288).l,a1
	bsr.w	JmpTo18_AnimateSprite
	bra.w	JmpTo37_MarkObjGone
; ===========================================================================

loc_30072:
	move.l	objoff_2A(a0),d2
	move.l	y_pos(a0),d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#4,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	addi.w	#$380,y_vel(a0)
	ext.l	d0
	asl.l	#4,d0
	add.l	d0,d3
	move.l	d2,objoff_2A(a0)
	move.l	d3,y_pos(a0)
	move.w	objoff_2A(a0),x_pos(a0)
	rts
; ===========================================================================

loc_300A4:
	cmpi.b	#8,angle(a0)
	bcc.s	return_300EA
	tst.b	objoff_32(a0)
	beq.s	loc_300EC
	tst.b	collision_flags(a0)
	bne.s	return_300EA
	tst.b	objoff_14(a0)
	bne.s	loc_300CE
	move.b	#$20,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_300CE:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_300DC
	move.w	#$EEE,d0

loc_300DC:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_300EA
	move.b	#$32,collision_flags(a0)

return_300EA:
	rts
; ===========================================================================

loc_300EC:
	moveq	#$64,d0
	bsr.w	JmpTo4_AddPoints
	move.w	#$B3,($FFFFF75C).w
	move.b	#8,angle(a0)
	moveq	#$40,d0
	bsr.w	JmpTo7_LoadPLC
	rts
; ===========================================================================

loc_30106:
	move.b	#0,objoff_F(a0)
	subi.w	#1,($FFFFF75C).w
	bmi.s	loc_30142
	cmpi.w	#$1E,($FFFFF75C).w
	bgt.s	loc_3013A
	move.b	#$10,objoff_B(a0)
	bsr.w	loc_2D6CC
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.w	JmpTo36_DisplaySprite
	bsr.w	loc_301B4
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_3013A:
	bsr.w	loc_2D6CC
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_30142:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.w	loc_30152
	bsr.w	loc_301B4

loc_30152:
	cmpi.w	#-$3C,($FFFFF75C).w
	bgt.w	JmpTo36_DisplaySprite
	tst.b	($FFFFF7A7).w
	bne.s	loc_30170
	bsr.w	JmpTo3_loc_F626
	bsr.w	JmpTo3_loc_F62E
	move.b	#1,($FFFFF7A7).w

loc_30170:
	addq.w	#2,y_pos(a0)
	cmpi.w	#$3160,(Camera_Max_X_pos).w
	bcc.s	loc_30182
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	BranchTo_JmpTo36_DisplaySprite
; ===========================================================================

loc_30182:
	tst.b	render_flags(a0)
	bpl.s	loc_301AA
	tst.b	objoff_2C(a0)
	bne.s	loc_3019C
	cmpi.w	#$578,y_pos(a0)
	bgt.w	loc_301AA
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_3019C:
	cmpi.w	#$588,y_pos(a0)
	bgt.w	loc_301AA

BranchTo_JmpTo36_DisplaySprite 
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================

loc_301AA:
	move.w	#$3160,(Camera_Max_X_pos).w
	bra.w	JmpTo53_DeleteObject
; ===========================================================================

loc_301B4:
	bsr.w	JmpTo13_SingleObjLoad
	bne.s	return_3020E
	move.b	#$52,(a1) ; load obj52
	move.b	#8,objoff_A(a1)
	move.l	#Obj52_MapUnc_30258,mappings(a1)
	move.w	#$5E4,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	x_pos(a0),objoff_2A(a1)
	subi.w	#$28,y_pos(a1)
	move.w	#-$60,x_vel(a1)
	move.w	#-$C0,y_vel(a1)
	move.b	#0,mapping_frame(a1)
	move.b	#$11,anim_frame_duration(a1)

return_3020E:
	rts
; ===========================================================================

loc_30210:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_3022A
	move.b	#$11,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#4,mapping_frame(a0)
	beq.w	JmpTo53_DeleteObject

loc_3022A:
	move.l	objoff_2A(a0),d2
	move.l	y_pos(a0),d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,objoff_2A(a0)
	move.w	objoff_2A(a0),x_pos(a0)
	move.l	d3,y_pos(a0)
	bra.w	JmpTo36_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_BossSmoke
; ----------------------------------------------------------------------------
Obj52_MapUnc_30258:	BINCLUDE "mappings/sprite/obj52_a.bin"

; animation script
off_30288:
	dc.w byte_30298-off_30288
	dc.w byte_3029D-off_30288; 1
	dc.w byte_302A2-off_30288; 2
	dc.w byte_302A7-off_30288; 3
	dc.w byte_302AC-off_30288; 4
	dc.w byte_302B0-off_30288; 5
	dc.w byte_302B4-off_30288; 6
	dc.w byte_302B7-off_30288; 7
byte_30298:	dc.b   1,  2,  3,$FD,  1
byte_3029D:	dc.b   2,  4,  5,$FD,  2
byte_302A2:	dc.b   3,  6,  7,$FD,  3
byte_302A7:	dc.b   4,  8,  9,$FD,  4
byte_302AC:	dc.b   5, $A, $B,$FE
byte_302B0:	dc.b   3, $C, $D,$FF
byte_302B4:	dc.b  $F,  1,$FF
byte_302B7:	dc.b   3, $E, $F,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_Eggpod + ?
; ----------------------------------------------------------------------------
Obj52_MapUnc_302BC:	BINCLUDE "mappings/sprite/obj52_b.bin"
; ===========================================================================

JmpTo36_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo53_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo13_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo37_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo7_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo18_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo4_ObjCheckFloorDist 
	jmp	ObjCheckFloorDist
; ===========================================================================

JmpTo7_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo_Obj20 
	jmp	Obj20
; ===========================================================================

JmpTo4_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo62_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo3_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo3_loc_F62E 
	jmp	loc_F62E
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 89 - ARZ boss
; ----------------------------------------------------------------------------
; Sprite_30480:
Obj89:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_3048E(pc,d0.w),d1
	jmp	off_3048E(pc,d1.w)
; ===========================================================================
off_3048E:
	dc.w loc_30494-off_3048E
	dc.w loc_30620-off_3048E; 1
	dc.w loc_309A8-off_3048E; 2
; ===========================================================================

loc_30494:
	tst.l	(Plc_Buffer).w
	beq.s	loc_3049C
	rts
; ===========================================================================

loc_3049C:
	tst.w	(Player_mode).w
	bne.s	loc_304D4
	move.w	(MainCharacter+x_pos).w,d0
	cmpi.w	#$2A60,d0
	blt.w	loc_305F4
	cmpi.w	#$2B60,d0
	bgt.w	loc_305F4
	cmpi.b	#-$7F,(Sidekick+obj_control).w
	beq.w	loc_304D4
	move.w	(Sidekick+x_pos).w,d0
	cmpi.w	#$2A60,d0
	blt.w	loc_305F4
	cmpi.w	#$2B60,d0
	bgt.w	loc_305F4

loc_304D4:
	move.b	#1,($FFFFEEBD).w
	move.w	#$3E0,art_tile(a0)
	move.l	#Obj89_MapUnc_30E04,mappings(a0)
	ori.b	#4,render_flags(a0)
	move.b	#$20,objoff_E(a0)
	move.b	#2,priority(a0)
	move.b	#2,objoff_A(a0)
	move.w	#$2AE0,x_pos(a0)
	move.w	#$388,y_pos(a0)
	move.w	#$2AE0,($FFFFF750).w
	move.w	#$388,($FFFFF754).w
	bset	#6,render_flags(a0)
	move.b	#3,objoff_F(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.b	#8,objoff_B(a0)
	move.w	#-$380,objoff_2E(a0)
	clr.b	($FFFFF73F).w
	move.w	#$2AE0,x_vel(a0)
	move.w	#$488,y_vel(a0)
	move.b	#0,objoff_15(a0)
	move.w	#$2AE0,y_radius(a0)
	move.w	#$488,priority(a0)
	move.b	#9,anim_frame(a0)
	move.w	#$2AE0,anim(a0)
	move.w	#$488,anim_frame_duration(a0)
	move.b	#6,collision_property(a0)
	move.w	#$100,($FFFFF75A).w
	bsr.w	JmpTo14_SingleObjLoad
	bne.w	loc_305F4
	move.b	#$89,(a1) ; load obj89
	move.l	#Obj89_MapUnc_30D68,mappings(a1)
	ori.b	#4,render_flags(a1)
	move.w	#$3E0,art_tile(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#4,priority(a1)
	move.w	#$2A50,x_pos(a1)
	move.w	#$510,y_pos(a1)
	addq.b	#4,objoff_A(a1)
	move.l	a0,objoff_2A(a1)
	move.b	#0,mapping_frame(a1)
	move.b	#2,priority(a1)
	move.b	#$20,y_radius(a1)
	movea.l	a1,a2
	bsr.w	JmpTo22_SingleObjLoad2
	bne.s	loc_305F4
	moveq	#0,d0
	move.w	#$F,d1

loc_305DC:
	move.l	(a2,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_305DC
	bset	#0,render_flags(a1)
	move.w	#$2B70,x_pos(a1)

loc_305F4:
	bsr.w	loc_305FA
	rts
; ===========================================================================

loc_305FA:
	lea	($FFFFF740).w,a2
	move.b	#4,(a2)+
	move.b	#0,(a2)+
	move.b	#0,(a2)+
	move.b	#0,(a2)+
	move.b	#2,(a2)+
	move.b	#0,(a2)+
	move.b	#1,(a2)+
	move.b	#0,(a2)+
	rts
; ===========================================================================

loc_30620:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_3062E(pc,d0.w),d1
	jmp	off_3062E(pc,d1.w)
; ===========================================================================
off_3062E:
	dc.w loc_3063C-off_3062E
	dc.w loc_3067A-off_3062E; 1
	dc.w loc_306B8-off_3062E; 2
	dc.w loc_30706-off_3062E; 3
	dc.w loc_3088C-off_3062E; 4
	dc.w loc_308F4-off_3062E; 5
	dc.w loc_3095C-off_3062E; 6
; ===========================================================================

loc_3063C:
	bsr.w	loc_2D5DE
	bsr.w	loc_3075C
	bsr.w	loc_30824
	cmpi.w	#$430,($FFFFF754).w
	blt.s	loc_3066C
	move.w	#$430,($FFFFF754).w
	addi.b	#2,angle(a0)
	move.w	#0,($FFFFF75A).w
	move.w	#-$C8,($FFFFF758).w
	st	objoff_38(a0)

loc_3066C:
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_3067A:
	bsr.w	loc_2D5DE
	bsr.w	loc_3075C
	bsr.w	loc_30824
	tst.b	objoff_38(a0)
	bne.s	loc_30696
	cmpi.w	#$2B10,($FFFFF750).w
	blt.s	loc_306AA
	bra.s	loc_3069E
; ===========================================================================

loc_30696:
	cmpi.w	#$2AB0,($FFFFF750).w
	bgt.s	loc_306AA

loc_3069E:
	addi.b	#2,angle(a0)
	move.w	#0,($FFFFF758).w

loc_306AA:
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_306B8:
	bsr.w	loc_2D5DE
	bsr.w	loc_3075C
	bsr.w	loc_30824
	cmpi.b	#-$40,mapping_frame(a0)
	bne.s	loc_306F8
	lea	($FFFFF740).w,a1
	andi.b	#$F0,4(a1)
	ori.b	#3,4(a1)
	addq.b	#2,angle(a0)
	btst	#0,render_flags(a0)
	sne	objoff_38(a0)
	move.w	#$1E,($FFFFF75C).w
	move.b	#-$43,d0
	bsr.w	JmpTo8_PlaySound

loc_306F8:
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30706:
	cmpi.w	#$14,($FFFFF75C).w
	bne.s	loc_3071A
	bset	#0,objoff_3E(a0)
	move.b	#1,($FFFFF73F).w

loc_3071A:
	subi.w	#1,($FFFFF75C).w
	bpl.s	loc_30742
	clr.b	($FFFFF73F).w
	move.b	#2,angle(a0)
	bchg	#0,render_flags(a0)
	beq.s	loc_3073C
	move.w	#-$C8,($FFFFF758).w
	bra.s	loc_30742
; ===========================================================================

loc_3073C:
	move.w	#$C8,($FFFFF758).w

loc_30742:
	bsr.w	loc_2D5DE
	bsr.w	loc_3075C
	bsr.w	loc_30824
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_3075C:
	bsr.w	loc_3078E
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_30770
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	loc_3077A

loc_30770:
	lea	($FFFFF740).w,a1
	move.b	#$31,3(a1)

loc_3077A:
	cmpi.b	#$3F,objoff_14(a0)
	bne.s	return_3078C
	lea	($FFFFF740).w,a1
	move.b	#-$40,3(a1)

return_3078C:
	rts
; ===========================================================================

loc_3078E:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	addq.b	#2,mapping_frame(a0)
	cmpi.b	#8,angle(a0)
	bcc.s	return_307F2
	tst.b	objoff_32(a0)
	beq.s	loc_307F4
	tst.b	collision_flags(a0)
	bne.s	return_307F2
	tst.b	objoff_14(a0)
	bne.s	loc_307D6
	move.b	#$40,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_307D6:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_307E4
	move.w	#$EEE,d0

loc_307E4:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_307F2
	move.b	#$F,collision_flags(a0)

return_307F2:
	rts
; ===========================================================================

loc_307F4:
	moveq	#$64,d0
	bsr.w	JmpTo5_AddPoints
	move.w	#$B3,($FFFFF75C).w
	move.b	#8,angle(a0)
	lea	($FFFFF740).w,a1
	move.b	#5,2(a1)
	move.b	#0,3(a1)
	moveq	#$40,d0
	bsr.w	JmpTo8_LoadPLC
	move.b	#5,objoff_15(a0)
	rts
; ===========================================================================

loc_30824:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	move.w	d0,anim(a0)
	move.w	d1,anim_frame_duration(a0)
	tst.b	objoff_2C(a0)
	bne.s	loc_30850
	move.w	d0,y_radius(a0)
	move.w	d1,priority(a0)
	move.w	d1,objoff_3A(a0)
	rts
; ===========================================================================

loc_30850:
	cmpi.w	#$78,($FFFFF75C).w
	bgt.s	return_3088A
	subi.w	#1,y_radius(a0)
	move.l	objoff_3A(a0),d0
	move.w	objoff_2E(a0),d1
	addi.w	#$38,objoff_2E(a0)
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d0
	move.l	d0,objoff_3A(a0)
	move.w	objoff_3A(a0),priority(a0)
	cmpi.w	#$540,priority(a0)
	blt.s	return_3088A
	move.w	#0,objoff_2E(a0)

return_3088A:
	rts
; ===========================================================================

loc_3088C:
	st	objoff_2C(a0)
	subq.w	#1,($FFFFF75C).w
	bmi.s	loc_3089C
	bsr.w	loc_2D6CC
	bra.s	loc_308D6
; ===========================================================================

loc_3089C:
	move.b	#3,objoff_F(a0)
	lea	($FFFFF740).w,a2
	move.b	#1,4(a2)
	move.b	#0,5(a2)
	move.b	#0,2(a2)
	move.b	#0,3(a2)
	bset	#0,render_flags(a0)
	clr.w	($FFFFF758).w
	clr.w	($FFFFF75A).w
	addq.b	#2,angle(a0)
	move.w	#-$12,($FFFFF75C).w

loc_308D6:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_30824
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_308F4:
	addq.w	#1,($FFFFF75C).w
	beq.s	loc_30904
	bpl.s	loc_3090A
	addi.w	#$18,($FFFFF75A).w
	bra.s	loc_30936
; ===========================================================================

loc_30904:
	clr.w	($FFFFF75A).w
	bra.s	loc_30936
; ===========================================================================

loc_3090A:
	cmpi.w	#$18,($FFFFF75C).w
	bcs.s	loc_30922
	beq.s	loc_3092A
	cmpi.w	#$20,($FFFFF75C).w
	bcs.s	loc_30936
	addq.b	#2,angle(a0)
	bra.s	loc_30936
; ===========================================================================

loc_30922:
	subi.w	#8,($FFFFF75A).w
	bra.s	loc_30936
; ===========================================================================

loc_3092A:
	clr.w	($FFFFF75A).w
	bsr.w	JmpTo4_loc_F626
	bsr.w	JmpTo4_loc_F62E

loc_30936:
	bsr.w	loc_2D5DE
	bsr.w	loc_3078E
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_30824
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_3095C:
	move.w	#$400,($FFFFF758).w
	move.w	#-$40,($FFFFF75A).w
	cmpi.w	#$2C00,(Camera_Max_X_pos).w
	bcc.s	loc_30976
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_3097C
; ===========================================================================

loc_30976:
	tst.b	render_flags(a0)
	bpl.s	JmpTo54_DeleteObject

loc_3097C:
	bsr.w	loc_2D5DE
	bsr.w	loc_3078E
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_30DC8).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_30824
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

JmpTo54_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_309A8:
	moveq	#0,d0
	movea.l	objoff_2A(a0),a1 ; a1=object
	cmpi.b	#8,angle(a1)
	blt.s	loc_309BC
	move.b	#4,routine_secondary(a0)

loc_309BC:
	move.b	routine_secondary(a0),d0
	move.w	off_309C8(pc,d0.w),d1
	jmp	off_309C8(pc,d1.w)
; ===========================================================================
off_309C8:
	dc.w loc_309D2-off_309C8
	dc.w loc_30A04-off_309C8; 1
	dc.w loc_30B4A-off_309C8; 2
	dc.w loc_30B9E-off_309C8; 3
	dc.w loc_30B6C-off_309C8; 4
; ===========================================================================

loc_309D2:
	bsr.w	loc_30B7A
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_309E8
	move.w	#$E1,d0
	bsr.w	JmpTo8_PlaySound

loc_309E8:
	subi.w	#1,y_pos(a0)
	cmpi.w	#$488,y_pos(a0)
	bgt.s	BranchTo_JmpTo37_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	move.b	#0,($FFFFEEBD).w

BranchTo_JmpTo37_DisplaySprite 
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30A04:
	bsr.w	loc_30B7A
	movea.l	objoff_2A(a0),a3
	btst	#0,$3E(a3)
	beq.s	loc_30A3A
	tst.b	$38(a3)
	beq.s	loc_30A24
	btst	#0,render_flags(a0)
	beq.s	loc_30A3A
	bra.s	loc_30A2C
; ===========================================================================

loc_30A24:
	btst	#0,render_flags(a0)
	bne.s	loc_30A3A

loc_30A2C:
	bclr	#0,$3E(a3)
	bsr.w	loc_30AB4
	st	objoff_38(a0)

loc_30A3A:
	bsr.w	loc_30A42
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30A42:
	tst.b	objoff_38(a0)
	beq.s	return_30AAE
	tst.w	objoff_30(a0)
	bgt.s	loc_30A54
	move.w	#$1F,objoff_30(a0)

loc_30A54:
	subi.w	#1,objoff_30(a0)
	bgt.s	loc_30A82
	sf	objoff_38(a0)
	move.w	#0,objoff_30(a0)
	tst.b	$38(a3)
	bne.s	loc_30A74
	move.w	#$2A50,x_pos(a0)
	bra.s	loc_30A7A
; ===========================================================================

loc_30A74:
	move.w	#$2B70,x_pos(a0)

loc_30A7A:
	move.w	#$488,y_pos(a0)
	bra.s	return_30AAE
; ===========================================================================

loc_30A82:
	move.w	#$2A50,d1
	tst.b	$38(a3)
	beq.s	loc_30A90
	move.w	#$2B70,d1

loc_30A90:
	move.b	($FFFFFE0F).w,d0
	andi.w	#1,d0
	add.w	d0,d0
	add.w	word_30AB0(pc,d0.w),d1
	move.w	d1,x_pos(a0)
	move.w	#$488,d1
	add.w	word_30AB0(pc,d0.w),d1
	move.w	d1,y_pos(a0)

return_30AAE:
	rts
; ===========================================================================
word_30AB0:
	dc.w	 1
	dc.w $FFFF	; 1
; ===========================================================================

loc_30AB4:
	bsr.w	JmpTo14_SingleObjLoad
	bne.w	return_30B40
	_move.b	#$89,0(a1) ; load obj89
	move.b	#4,objoff_A(a1)
	move.b	#8,routine_secondary(a1)
	move.l	#Obj89_MapUnc_30D68,mappings(a1)
	move.w	#$3E0,art_tile(a1)
	ori.b	#4,render_flags(a1)
	moveq	#0,d6
	move.b	#2,mapping_frame(a1)
	move.w	#$2A6A,x_pos(a1)
	tst.b	$38(a3)
	beq.s	loc_30B04
	st	d6
	move.w	#$2B56,x_pos(a1)
	bset	#0,render_flags(a1)

loc_30B04:
	move.w	#$28,objoff_30(a1)
	bsr.w	JmpTo3_RandomNumber
	andi.w	#3,d0
	add.w	d0,d0
	move.w	word_30B42(pc,d0.w),y_pos(a1)
	movea.l	a1,a2
	bsr.w	JmpTo14_SingleObjLoad
	bne.s	return_30B40
	_move.b	#$89,0(a1) ; load obj89
	move.b	#4,objoff_A(a1)
	move.b	#6,routine_secondary(a1)
	move.l	a2,objoff_34(a1)
	move.b	d6,subtype(a1)
	move.l	a3,objoff_38(a1)

return_30B40:
	rts
; ===========================================================================
word_30B42:
	dc.w  $458
	dc.w  $478	; 1
	dc.w  $498	; 2
	dc.w  $4B8	; 3
; ===========================================================================

loc_30B4A:
	move.b	#1,($FFFFEEBD).w
	addi.w	#1,y_pos(a0)
	cmpi.w	#$510,y_pos(a0)
	blt.s	BranchTo2_JmpTo37_DisplaySprite
	move.b	#0,($FFFFEEBD).w
	bra.w	JmpTo55_DeleteObject
; ===========================================================================

BranchTo2_JmpTo37_DisplaySprite 
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30B6C:
	subi.w	#1,objoff_30(a0)
	beq.w	JmpTo55_DeleteObject
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30B7A:
	move.w	#$23,d1
	move.w	#$44,d2
	move.w	#$45,d3
	move.w	x_pos(a0),d4
	move.w	y_pos(a0),-(sp)
	addi.w	#4,y_pos(a0)
	bsr.w	JmpTo26_SolidObject
	move.w	(sp)+,y_pos(a0)
	rts
; ===========================================================================

loc_30B9E:
	moveq	#0,d0
	movea.l	objoff_38(a0),a1 ; a1=object
	cmpi.b	#8,angle(a1)
	blt.s	loc_30BB2
	move.b	#6,objoff_2A(a0)

loc_30BB2:
	move.b	objoff_2A(a0),d0
	move.w	off_30BBE(pc,d0.w),d1
	jmp	off_30BBE(pc,d1.w)
; ===========================================================================
off_30BBE:
	dc.w loc_30BC8-off_30BBE
	dc.w loc_30C36-off_30BBE; 1
	dc.w loc_30C86-off_30BBE; 2
	dc.w loc_30CAC-off_30BBE; 3
	dc.w BranchTo_JmpTo55_DeleteObject-off_30BBE; 4
; ===========================================================================

loc_30BC8:
	move.l	#Obj89_MapUnc_30D68,mappings(a0)
	move.w	#$3E0,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#-$70,objoff_E(a0)
	move.b	#4,priority(a0)
	addq.b	#2,objoff_2A(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.w	#4,y_vel(a0)
	move.b	#4,mapping_frame(a0)
	addi.w	#9,y_pos(a0)
	tst.b	subtype(a0)
	beq.s	loc_30C28
	bset	#0,status(a0)
	bset	#0,render_flags(a0)
	move.w	#-3,x_vel(a0)
	bra.s	loc_30C2E
; ===========================================================================

loc_30C28:
	move.w	#3,x_vel(a0)

loc_30C2E:
	move.b	#$B0,collision_flags(a0)
	rts
; ===========================================================================

loc_30C36:
	btst	#7,status(a0)
	beq.s	loc_30C44
	move.b	#8,objoff_2A(a0)

loc_30C44:
	move.w	x_pos(a0),d0
	add.w	x_vel(a0),d0
	tst.w	x_vel(a0)
	bpl.s	loc_30C5E
	cmpi.w	#$2A77,d0
	bgt.s	loc_30C7E
	move.w	#$2A77,d0
	bra.s	loc_30C68
; ===========================================================================

loc_30C5E:
	cmpi.w	#$2B49,d0
	blt.s	loc_30C7E
	move.w	#$2B49,d0

loc_30C68:
	addi.b	#2,objoff_2A(a0)
	move.w	d0,x_pos(a0)
	move.b	#-$23,d0
	bsr.w	JmpTo8_PlaySound
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30C7E:
	move.w	d0,x_pos(a0)
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30C86:
	move.b	#0,collision_flags(a0)
	btst	#7,status(a0)
	beq.s	loc_30C9A
	addi.b	#2,objoff_2A(a0)

loc_30C9A:
	bsr.w	loc_30CCC
	lea	(off_30D2C).l,a1
	bsr.w	JmpTo19_AnimateSprite
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

loc_30CAC:
	bsr.w	loc_30D04
	move.w	y_pos(a0),d0
	add.w	y_vel(a0),d0
	cmpi.w	#$4F0,d0
	bgt.w	JmpTo55_DeleteObject
	move.w	d0,y_pos(a0)
	bra.w	JmpTo37_DisplaySprite
; ===========================================================================

BranchTo_JmpTo55_DeleteObject 
	bra.w	JmpTo55_DeleteObject
; ===========================================================================

loc_30CCC:
	tst.w	objoff_30(a0)
	bne.s	loc_30CF4
	move.w	#$1B,d1
	move.w	#1,d2
	move.w	#2,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo8_PlatformObject
	btst	#3,status(a0)
	beq.s	return_30D02
	move.w	#$1F,objoff_30(a0)

loc_30CF4:
	subi.w	#1,objoff_30(a0)
	bne.s	return_30D02
	move.b	#6,objoff_2A(a0)

return_30D02:
	rts
; ===========================================================================

loc_30D04:
	bclr	#3,status(a0)
	beq.s	loc_30D12
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_30D1E

loc_30D12:
	bclr	#4,status(a0)
	beq.s	return_30D2A
	lea	(Sidekick).w,a1 ; a1=character

loc_30D1E:
	bset	#1,status(a1)
	bclr	#3,status(a1)

return_30D2A:
	rts
; ===========================================================================
off_30D2C:	dc.w byte_30D30-off_30D2C
		dc.w byte_30D47-off_30D2C; 1
byte_30D30:	dc.b   1,  4,  6,  5,  4,  6,  4,  5,  4,  6,  4,  4,  6,  5,  4,  6
		dc.b   4,  5,  4,  6,  4,$FD,  1; 16
byte_30D47:	dc.b  $F,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4
		dc.b   4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,$F9; 16
		dc.b   0	; 32
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj89_MapUnc_30D68:	BINCLUDE "mappings/sprite/obj89_a.bin"

; animation script
off_30DC8:
	dc.w byte_30DD4-off_30DC8
	dc.w byte_30DEA-off_30DC8; 1
	dc.w byte_30DEE-off_30DC8; 2
	dc.w byte_30DF1-off_30DC8; 3
	dc.w byte_30DFD-off_30DC8; 4
	dc.w byte_30E00-off_30DC8; 5
byte_30DD4:	dc.b   7,  0,  1,$FF,  2,  3,  2,  3,  2,  3,  2,  3,$FF,  4,  4,  4
		dc.b   4,  4,  4,  4,  4,$FF; 16
byte_30DEA:	dc.b   1,  6,  7,$FF
byte_30DEE:	dc.b  $F,  9,$FF
byte_30DF1:	dc.b   2, $A, $A, $B, $B, $B, $B, $B, $A, $A,$FD,  2
byte_30DFD:	dc.b  $F,  8,$FF
byte_30E00:	dc.b   7,  5,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj89_MapUnc_30E04:	BINCLUDE "mappings/sprite/obj89_b.bin"
; ===========================================================================

JmpTo37_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo55_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo14_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo8_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo22_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo19_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo3_RandomNumber 
	jmp	(RandomNumber).l
; ===========================================================================

JmpTo8_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo5_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo4_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo4_loc_F62E 
	jmp	loc_F62E
; ===========================================================================

JmpTo8_PlatformObject 
	jmp	PlatformObject
; ===========================================================================

JmpTo26_SolidObject 
	jmp	SolidObject
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 57 - MCZ boss
; ----------------------------------------------------------------------------
; Sprite_30FA4:
Obj57:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_30FB2(pc,d0.w),d1
	jmp	off_30FB2(pc,d1.w)
; ===========================================================================
off_30FB2:
	dc.w loc_30FB8-off_30FB2
	dc.w loc_310BE-off_30FB2; 1
	dc.w loc_315F2-off_30FB2; 2
; ===========================================================================

loc_30FB8:
	move.l	#Obj57_MapUnc_316EC,mappings(a0)
	move.w	#$3C0,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.w	#$21A0,x_pos(a0)
	move.w	#$560,y_pos(a0)
	move.b	#5,objoff_B(a0)
	addq.b	#2,objoff_A(a0)
	move.b	#2,angle(a0)
	bset	#6,render_flags(a0)
	move.b	#4,objoff_F(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.w	x_pos(a0),($FFFFF750).w
	move.w	y_pos(a0),($FFFFF754).w
	move.w	#$C0,($FFFFF75A).w
	move.b	#0,($FFFFF73F).w
	move.b	#1,($FFFFEEBD).w
	move.b	#$40,objoff_E(a0)
	move.w	x_pos(a0),x_vel(a0)
	move.w	y_pos(a0),y_vel(a0)
	move.b	#2,objoff_15(a0)
	move.w	x_pos(a0),y_radius(a0)
	move.w	y_pos(a0),priority(a0)
	move.b	#1,anim_frame(a0)
	move.w	x_pos(a0),anim(a0)
	move.w	y_pos(a0),anim_frame_duration(a0)
	move.b	#$E,collision_property(a0)
	move.w	x_pos(a0),status(a0)
	move.w	y_pos(a0),routine(a0)
	move.b	#2,objoff_27(a0)
	subi.w	#$28,status(a0)
	move.w	#$28,($FFFFF75C).w
	move.w	#-$380,objoff_2E(a0)
	move.w	#-$380,objoff_30(a0)
	bsr.w	loc_31090
	rts
; ===========================================================================

loc_31090:
	lea	($FFFFF740).w,a2
	move.b	#2,(a2)+
	move.b	#0,(a2)+
	move.b	#3,(a2)+
	move.b	#0,(a2)+
	move.b	#$10,(a2)+
	move.b	#0,(a2)+
	move.b	#$D,(a2)+
	move.b	#0,(a2)+
	move.b	#3,(a2)+
	move.b	#0,(a2)+
	rts
; ===========================================================================

loc_310BE:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_310CC(pc,d0.w),d1
	jmp	off_310CC(pc,d1.w)
; ===========================================================================
off_310CC:
	dc.w loc_310DA-off_310CC
	dc.w loc_3116E-off_310CC; 1
	dc.w loc_311AA-off_310CC; 2
	dc.w loc_3124A-off_310CC; 3
	dc.w loc_314D2-off_310CC; 4
	dc.w loc_31526-off_310CC; 5
	dc.w loc_315A6-off_310CC; 6
; ===========================================================================

loc_310DA:
	subi.w	#1,($FFFFF75C).w
	bpl.s	loc_3112C
	move.b	#0,($FFFFF745).w
	bsr.w	loc_2D5DE
	cmpi.w	#$560,($FFFFF754).w
	bgt.s	loc_3112C
	move.w	#$100,($FFFFF75A).w
	move.w	(MainCharacter+x_pos).w,d3
	cmpi.w	#$2190,d3
	bcc.s	loc_3110A
	move.w	#$2200,d3
	bra.s	loc_3110E
; ===========================================================================

loc_3110A:
	move.w	#$2120,d3

loc_3110E:
	move.w	d3,($FFFFF750).w
	addq.b	#2,angle(a0)
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	($FFFFF750).w,d0
	bmi.s	loc_3112C
	bset	#0,render_flags(a0)

loc_3112C:
	cmpi.w	#$28,($FFFFF75C).w
	bne.s	loc_3113A
	move.b	#0,($FFFFF73F).w

loc_3113A:
	cmpi.w	#$620,($FFFFF754).w
	bge.s	loc_3114C
	move.b	#1,($FFFFEEBD).w
	bsr.w	loc_313C6

loc_3114C:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3143A
	lea	(off_3160A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_3116E:
	bsr.w	loc_2D5DE
	bsr.w	loc_313C6
	cmpi.w	#$620,($FFFFF754).w
	blt.s	loc_31188
	addq.b	#2,angle(a0)
	move.b	#0,($FFFFEEBD).w

loc_31188:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3143A
	lea	(off_3160A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_311AA:
	bsr.w	loc_2D5DE
	cmpi.w	#$660,($FFFFF754).w
	blt.s	loc_31228
	move.w	#$660,($FFFFF754).w
	addq.b	#2,angle(a0)
	lea	($FFFFF740).w,a1
	andi.b	#$F0,2(a1)
	ori.b	#6,2(a1)
	andi.b	#$F0,8(a1)
	ori.b	#6,8(a1)
	andi.b	#$F0,6(a1)
	ori.b	#$D,6(a1)
	move.b	#$20,5(a1)
	move.w	#$64,($FFFFF75C).w
	move.b	#$30,1(a1)
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	($FFFFF750).w,d0
	bmi.s	loc_31210
	bset	#0,render_flags(a0)

loc_31210:
	move.w	#-$200,($FFFFF758).w
	move.w	#0,($FFFFF75A).w
	btst	#0,render_flags(a0)
	beq.s	loc_31228
	neg.w	($FFFFF758).w

loc_31228:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3143A
	lea	(off_3160A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_3124A:
	subi.w	#1,($FFFFF75C).w
	cmpi.w	#$28,($FFFFF75C).w
	bgt.w	loc_312E8
	move.b	#1,($FFFFF73F).w
	tst.w	($FFFFF75C).w
	bpl.w	loc_312E8
	tst.b	objoff_38(a0)
	beq.s	loc_31274
	sf	objoff_38(a0)
	bra.s	loc_31298
; ===========================================================================

loc_31274:
	bsr.w	loc_2D5DE
	cmpi.w	#$2120,($FFFFF750).w
	bgt.s	loc_31288
	move.w	#$2120,($FFFFF750).w
	bra.s	loc_312A2
; ===========================================================================

loc_31288:
	cmpi.w	#$2200,($FFFFF750).w
	blt.s	loc_312E8
	move.w	#$2200,($FFFFF750).w
	bra.s	loc_312A2
; ===========================================================================

loc_31298:
	lea	($FFFFF740).w,a1
	move.b	#$30,7(a1)

loc_312A2:
	move.w	#0,($FFFFF758).w
	move.b	#0,angle(a0)
	lea	($FFFFF740).w,a1
	andi.b	#$F0,2(a1)
	ori.b	#$B,2(a1)
	andi.b	#$F0,8(a1)
	ori.b	#$B,8(a1)
	move.b	#0,1(a1)
	andi.b	#$F0,6(a1)
	ori.b	#$D,6(a1)
	move.w	#$64,($FFFFF75C).w
	move.w	#-$C0,($FFFFF75A).w

loc_312E8:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3143A
	lea	(off_3160A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_3130A:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,y_radius(a0)
	move.w	d1,priority(a0)
	move.w	d0,anim(a0)
	move.w	d1,anim_frame_duration(a0)
	tst.b	objoff_2C(a0)
	bne.s	loc_31358
	move.w	d0,status(a0)
	move.w	d1,routine(a0)
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	move.w	d1,objoff_3A(a0)
	move.w	d1,objoff_34(a0)
	btst	#0,render_flags(a0)
	beq.s	loc_31350
	addi.w	#$28,status(a0)
	rts
; ===========================================================================

loc_31350:
	subi.w	#$28,status(a0)
	rts
; ===========================================================================

loc_31358:
	cmpi.w	#$78,($FFFFF75C).w
	bgt.s	return_313C4
	subi.w	#1,status(a0)
	move.l	objoff_3A(a0),d0
	move.w	objoff_2E(a0),d1
	addi.w	#$38,objoff_2E(a0)
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d0
	move.l	d0,objoff_3A(a0)
	move.w	objoff_3A(a0),routine(a0)
	cmpi.w	#$6F0,routine(a0)
	blt.s	loc_31392
	move.w	#0,objoff_2E(a0)

loc_31392:
	addi.w	#1,x_vel(a0)
	move.l	objoff_34(a0),d0
	move.w	objoff_30(a0),d1
	addi.w	#$38,objoff_30(a0)
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d0
	move.l	d0,objoff_34(a0)
	move.w	objoff_34(a0),y_vel(a0)
	cmpi.w	#$6F0,y_vel(a0)
	blt.s	return_313C4
	move.w	#0,objoff_30(a0)

return_313C4:
	rts
; ===========================================================================

loc_313C6:
	move.b	($FFFFFE0F).w,d1
	sf	d2
	andi.b	#$1F,d1
	beq.s	loc_313DA
	andi.b	#7,d1
	bne.s	return_31438
	st	d2

loc_313DA:
	bsr.w	JmpTo4_RandomNumber
	swap	d1
	andi.w	#$1FF,d1
	addi.w	#$20F0,d1
	cmpi.w	#$2230,d1
	bgt.s	loc_313DA
	bsr.w	JmpTo15_SingleObjLoad
	bne.s	return_31438
	move.b	#$57,(a1) ; load obj57
	move.b	#4,objoff_A(a1)
	move.w	d1,x_pos(a1)
	move.w	#$5F0,y_pos(a1)
	move.l	#Obj57_MapUnc_316EC,mappings(a1)
	move.w	#$560,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	move.b	#$D,mapping_frame(a1)
	tst.b	d2
	bne.s	return_31438
	move.b	#$14,mapping_frame(a1)
	move.b	#$B1,collision_flags(a1)

return_31438:
	rts
; ===========================================================================

loc_3143A:
	bsr.w	loc_31470
	cmpi.b	#$1F,objoff_14(a0)
	bne.s	return_31450
	lea	($FFFFF740).w,a1
	move.b	#-$40,7(a1)

return_31450:
	rts
; ===========================================================================

loc_31452:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	addq.b	#2,mapping_frame(a0)

loc_31470:
	cmpi.b	#8,angle(a0)
	bcc.s	return_314B6
	tst.b	objoff_32(a0)
	beq.s	loc_314B8
	tst.b	collision_flags(a0)
	bne.s	return_314B6
	tst.b	objoff_14(a0)
	bne.s	loc_3149A
	move.b	#$20,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_3149A:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_314A8
	move.w	#$EEE,d0

loc_314A8:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_314B6
	move.b	#$F,collision_flags(a0)

return_314B6:
	rts
; ===========================================================================

loc_314B8:
	moveq	#$64,d0
	bsr.w	JmpTo6_AddPoints
	move.w	#$B3,($FFFFF75C).w
	move.b	#8,angle(a0)
	moveq	#$40,d0
	bsr.w	JmpTo9_LoadPLC
	rts
; ===========================================================================

loc_314D2:
	st	objoff_2C(a0)
	move.b	#0,($FFFFEEBD).w
	subq.w	#1,($FFFFF75C).w
	bmi.s	loc_314F4
	move.b	#$13,collision_property(a0)
	move.b	#7,objoff_B(a0)
	bsr.w	loc_2D6CC
	bra.s	loc_31512
; ===========================================================================

loc_314F4:
	bset	#0,render_flags(a0)
	clr.w	($FFFFF758).w
	clr.w	($FFFFF75A).w
	addq.b	#2,angle(a0)
	move.b	#$12,collision_property(a0)
	move.w	#-$12,($FFFFF75C).w

loc_31512:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_31526:
	addq.w	#1,($FFFFF75C).w
	beq.s	loc_31542
	bpl.s	loc_31548
	cmpi.w	#$620,($FFFFF754).w
	bcc.s	loc_3153A
	subq.w	#1,($FFFFF75C).w

loc_3153A:
	addi.w	#$10,($FFFFF75A).w
	bra.s	loc_3158A
; ===========================================================================

loc_31542:
	clr.w	($FFFFF75A).w
	bra.s	loc_3158A
; ===========================================================================

loc_31548:
	cmpi.w	#$18,($FFFFF75C).w
	bcs.s	loc_31576
	beq.s	loc_3157E
	cmpi.w	#$20,($FFFFF75C).w
	bcs.s	loc_3158A
	lea	($FFFFF740).w,a1
	move.b	#$D,7(a1)
	_move.b	#2,0(a2)
	move.b	#0,1(a1)
	addq.b	#2,angle(a0)
	bra.s	loc_3158A
; ===========================================================================

loc_31576:
	subi.w	#8,($FFFFF75A).w
	bra.s	loc_3158A
; ===========================================================================

loc_3157E:
	clr.w	($FFFFF75A).w
	bsr.w	JmpTo5_loc_F626
	bsr.w	JmpTo5_loc_F62E

loc_3158A:
	bsr.w	loc_2D5DE
	bsr.w	loc_31452
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

loc_315A6:
	move.w	#$400,($FFFFF758).w
	move.w	#-$40,($FFFFF75A).w
	cmpi.w	#$2240,(Camera_Max_X_pos).w
	beq.s	loc_315C0
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_315C6
; ===========================================================================

loc_315C0:
	tst.b	render_flags(a0)
	bpl.s	JmpTo56_DeleteObject

loc_315C6:
	bsr.w	loc_2D5DE
	bsr.w	loc_31452
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_3160A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_3130A
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================

JmpTo56_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_315F2:
	bsr.w	JmpTo5_ObjectMoveAndFall
	subi.w	#$28,y_vel(a0)
	cmpi.w	#$6F0,y_pos(a0)
	bgt.w	JmpTo57_DeleteObject
	bra.w	JmpTo38_DisplaySprite
; ===========================================================================
; animation script
off_3160A:
	dc.w byte_31628-off_3160A
	dc.w byte_3162E-off_3160A; 1
	dc.w byte_31631-off_3160A; 2
	dc.w byte_31638-off_3160A; 3
	dc.w byte_31649-off_3160A; 4
	dc.w byte_3165A-off_3160A; 5
	dc.w byte_31661-off_3160A; 6
	dc.w byte_31673-off_3160A; 7
	dc.w byte_31684-off_3160A; 8
	dc.w byte_31695-off_3160A; 9
	dc.w byte_316A6-off_3160A; 10
	dc.w byte_316AD-off_3160A; 11
	dc.w byte_316BF-off_3160A; 12
	dc.w byte_316D1-off_3160A; 13
	dc.w byte_316E8-off_3160A; 14
byte_31628:	dc.b  $F,  1,$FF,  0,$FC,  2
byte_3162E:	dc.b   5,  8,$FF
byte_31631:	dc.b   1,  5,  6,$FF,  7,$FC,  3
byte_31638:	dc.b   1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,$FD
		dc.b   4	; 16
byte_31649:	dc.b   1,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  3,  3,$FD
		dc.b   5	; 16
byte_3165A:	dc.b   1,  4,  2,  3,  4,$FC,  1
byte_31661:	dc.b   1,  2,  3,  4,  4,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  2
		dc.b $FD,  7	; 16
byte_31673:	dc.b   1,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  2,  8,  8,  8,$FD
		dc.b   8	; 16
byte_31684:	dc.b   1,  9,  9,  9,  9,  9, $A, $A, $A, $A, $A, $B, $B, $B, $B,$FD
		dc.b   9	; 16
byte_31695:	dc.b   1,  9,  9,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9, $A, $A,$FD
		dc.b  $A	; 16
byte_316A6:	dc.b   1, $B,  9, $A, $B,$FC,  1
byte_316AD:	dc.b   1,  9, $A, $B, $B,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9,  9
		dc.b $FD, $C	; 16
byte_316BF:	dc.b   1,  9, $A, $A, $A, $A, $B, $B, $B, $B, $B,  9,  8,  8,  8,  8
		dc.b $FD,  3	; 16
byte_316D1:	dc.b   7, $E, $F,$FF,$10,$11,$10,$11,$10,$11,$10,$11,$FF,$12,$12,$12
		dc.b $12,$12,$12,$12,$12,$12,$FF; 16
byte_316E8:	dc.b   7,$12,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj57_MapUnc_316EC:	BINCLUDE "mappings/sprite/obj57.bin"
; ===========================================================================

JmpTo38_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo57_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo15_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo4_RandomNumber 
	jmp	(RandomNumber).l
; ===========================================================================

JmpTo9_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo6_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo5_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo5_loc_F62E 
	jmp	loc_F62E
; ===========================================================================

JmpTo5_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 51 - CNZ boss
; ----------------------------------------------------------------------------
; Sprite_318F0:
Obj51:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_318FE(pc,d0.w),d1
	jmp	off_318FE(pc,d1.w)
; ===========================================================================
off_318FE:
	dc.w loc_31904-off_318FE
	dc.w loc_31A04-off_318FE; 1
	dc.w loc_31F24-off_318FE; 2
; ===========================================================================

loc_31904:
	move.l	#Obj51_MapUnc_320EA,mappings(a0)
	move.w	#$3A7,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.w	#$2A46,x_pos(a0)
	move.w	#$654,y_pos(a0)
	move.b	#0,objoff_B(a0)
	move.b	#$20,objoff_E(a0)
	move.b	#$80,objoff_14(a0)
	addq.b	#2,objoff_A(a0)
	move.b	#0,angle(a0)
	bset	#6,render_flags(a0)
	move.b	#4,objoff_F(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.w	x_pos(a0),($FFFFF750).w
	move.w	y_pos(a0),($FFFFF754).w
	move.w	x_pos(a0),x_vel(a0)
	move.w	y_pos(a0),y_vel(a0)
	move.b	#5,objoff_15(a0)
	move.w	x_pos(a0),y_radius(a0)
	move.w	y_pos(a0),priority(a0)
	move.b	#1,anim_frame(a0)
	move.w	x_pos(a0),anim(a0)
	move.w	y_pos(a0),anim_frame_duration(a0)
	move.b	#6,collision_property(a0)
	move.w	x_pos(a0),status(a0)
	move.w	y_pos(a0),routine(a0)
	move.b	#2,objoff_27(a0)
	move.b	#0,objoff_38(a0)
	move.w	#0,($FFFFF75A).w
	move.w	#-$180,($FFFFF758).w
	move.b	#0,objoff_2D(a0)
	move.w	#1,($FFFFF75C).w
	bsr.w	loc_319D6
	rts
; ===========================================================================

loc_319D6:
	lea	($FFFFF740).w,a2
	move.b	#8,(a2)+
	move.b	#0,(a2)+
	move.b	#1,(a2)+
	move.b	#0,(a2)+
	move.b	#$10,(a2)+
	move.b	#0,(a2)+
	move.b	#3,(a2)+
	move.b	#0,(a2)+
	move.b	#2,(a2)+
	move.b	#0,(a2)+
	rts
; ===========================================================================

loc_31A04:
	tst.b	($FFFFF73F).w
	beq.s	loc_31A1C
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_31A1C
	move.b	#-$30,d0
	bsr.w	JmpTo9_PlaySound

loc_31A1C:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_31A2A(pc,d0.w),d1
	jmp	off_31A2A(pc,d1.w)
; ===========================================================================
off_31A2A:
	dc.w loc_31A36-off_31A2A
	dc.w loc_31BA8-off_31A2A; 1
	dc.w loc_31C22-off_31A2A; 2
	dc.w loc_31D5C-off_31A2A; 3
	dc.w loc_31DCC-off_31A2A; 4
	dc.w loc_31E2A-off_31A2A; 5
; ===========================================================================

loc_31A36:
	moveq	#0,d0
	move.b	objoff_38(a0),d0
	move.w	off_31A44(pc,d0.w),d0
	jmp	off_31A44(pc,d0.w)
; ===========================================================================
off_31A44:
	dc.w loc_31A48-off_31A44
	dc.w loc_31A78-off_31A44; 1
; ===========================================================================

loc_31A48:
	cmpi.w	#$28C0,($FFFFF750).w
	bgt.s	BranchTo_loc_31AA4
	move.w	#$28C0,($FFFFF750).w
	move.w	#0,($FFFFF75A).w
	move.w	#$180,($FFFFF758).w
	move.b	#2,objoff_38(a0)
	bset	#0,render_flags(a0)
	move.b	#0,objoff_2D(a0)

BranchTo_loc_31AA4 
	bra.w	loc_31AA4
; ===========================================================================

loc_31A78:
	cmpi.w	#$29C0,($FFFFF750).w
	blt.s	loc_31AA4
	move.w	#$29C0,($FFFFF750).w
	move.w	#0,($FFFFF75A).w
	move.w	#-$180,($FFFFF758).w
	move.b	#0,objoff_38(a0)
	bclr	#0,render_flags(a0)
	move.b	#0,objoff_2D(a0)

loc_31AA4:
	bsr.w	loc_2D5DE
	tst.b	objoff_3F(a0)
	beq.s	loc_31AB6
	subq.b	#1,objoff_3F(a0)
	bra.w	loc_31B46
; ===========================================================================

loc_31AB6:
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	addi.w	#$10,d0
	cmpi.w	#$20,d0
	bcc.s	loc_31B46
	cmpi.w	#$6B0,(MainCharacter+y_pos).w
	bcs.s	loc_31B06
	cmpi.b	#3,objoff_2D(a0)
	bcc.s	loc_31B46
	addq.b	#1,objoff_2D(a0)
	addq.b	#2,angle(a0)
	move.b	#8,($FFFFF740).w
	move.b	#0,($FFFFF743).w
	move.b	#0,($FFFFF749).w
	move.b	#0,($FFFFF73F).w
	bsr.w	loc_31BF2
	move.w	#$50,($FFFFF75C).w
	bra.w	loc_31C08
; ===========================================================================

loc_31B06:
	cmpi.w	#$67C,(MainCharacter+y_pos).w
	bcs.s	loc_31B46
	move.b	#$F,objoff_B(a0)
	move.b	#2,($FFFFF73F).w
	move.b	#$20,($FFFFF743).w
	move.b	#$20,($FFFFF749).w
	move.b	#9,($FFFFF740).w
	addq.b	#4,angle(a0)
	move.w	#0,($FFFFF758).w
	move.w	#$180,($FFFFF75A).w
	move.b	#0,objoff_3E(a0)
	bra.w	loc_31C08
; ===========================================================================

loc_31B46:
	bra.w	+
+	addi.w	#1,($FFFFF75C).w
	move.w	($FFFFF75C).w,d0
	andi.w	#$3F,d0
	bne.w	loc_31C08
	btst	#6,($FFFFF75D).w
	beq.s	loc_31B86
	move.b	#$F,objoff_B(a0)
	move.b	#2,($FFFFF73F).w
	move.b	#$20,($FFFFF743).w
	move.b	#$20,($FFFFF749).w
	move.b	#9,($FFFFF740).w
	bra.w	loc_31C08
; ===========================================================================

loc_31B86:
	move.b	#$C,objoff_B(a0)
	move.b	#1,($FFFFF73F).w
	move.b	#0,($FFFFF743).w
	move.b	#0,($FFFFF749).w
	move.b	#4,($FFFFF740).w
	bra.w	loc_31C08
; ===========================================================================

loc_31BA8:
	move.b	#0,($FFFFF73F).w
	subi.w	#1,($FFFFF75C).w
	bne.s	loc_31BC6
	move.b	#$20,($FFFFF743).w
	move.b	#$20,($FFFFF749).w
	bra.w	loc_31C08
; ===========================================================================

loc_31BC6:
	cmpi.w	#-$14,($FFFFF75C).w
	bgt.w	loc_31C08
	move.b	#0,($FFFFF743).w
	move.b	#0,($FFFFF749).w
	move.b	#0,angle(a0)
	move.w	#-1,($FFFFF75C).w
	move.b	#$40,objoff_3F(a0)
	bra.w	loc_31C08
; ===========================================================================

loc_31BF2:
	bsr.w	JmpTo16_SingleObjLoad
	bne.s	return_31C06
	move.b	#$51,(a1) ; load obj51
	move.b	#4,objoff_A(a1)
	move.l	a0,objoff_34(a1)

return_31C06:
	rts
; ===========================================================================

loc_31C08:
	bsr.w	loc_31CDC
	bsr.w	loc_31E76
	bsr.w	loc_31C92
	lea	(off_3209C).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

loc_31C22:
	bsr.w	loc_2D5DE
	tst.b	objoff_3E(a0)
	bne.s	loc_31C60
	cmpi.w	#$680,y_pos(a0)
	bcs.s	loc_31C08
	move.w	#0,($FFFFF758).w
	move.w	#-$180,($FFFFF75A).w
	move.b	#-1,objoff_3E(a0)
	move.b	#1,($FFFFF73F).w
	move.b	#0,($FFFFF743).w
	move.b	#0,($FFFFF749).w
	move.b	#4,($FFFFF740).w
	bra.s	loc_31C08
; ===========================================================================

loc_31C60:
	cmpi.w	#$654,y_pos(a0)
	bcc.s	loc_31C08
	move.b	#0,angle(a0)
	move.w	#0,($FFFFF75A).w
	move.w	#-$180,($FFFFF758).w
	btst	#0,render_flags(a0)
	beq.s	BranchTo_loc_31C08
	move.w	#$180,($FFFFF758).w
	move.b	#$C,objoff_B(a0)

BranchTo_loc_31C08 
	bra.w	loc_31C08
; ===========================================================================

loc_31C92:
	cmpi.b	#$2F,objoff_14(a0)
	bne.s	loc_31CAC
	lea	($FFFFF740).w,a1
	andi.b	#$F0,6(a1)
	ori.b	#6,6(a1)
	rts
; ===========================================================================

loc_31CAC:
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_31CBC
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	return_31CDA

loc_31CBC:
	lea	($FFFFF740).w,a1
	move.b	6(a1),d0
	andi.b	#$F,d0
	cmpi.b	#6,d0
	beq.s	return_31CDA
	andi.b	#$F0,6(a1)
	ori.b	#5,6(a1)

return_31CDA:
	rts
; ===========================================================================

loc_31CDC:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	addq.b	#2,mapping_frame(a0)
	cmpi.b	#6,angle(a0)
	bcc.s	return_31D40
	tst.b	objoff_32(a0)
	beq.s	loc_31D42
	tst.b	collision_flags(a0)
	bne.s	return_31D40
	tst.b	objoff_14(a0)
	bne.s	loc_31D24
	move.b	#$30,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_31D24:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_31D32
	move.w	#$EEE,d0

loc_31D32:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_31D40
	move.b	#$F,collision_flags(a0)

return_31D40:
	rts
; ===========================================================================

loc_31D42:
	moveq	#$64,d0
	bsr.w	JmpTo7_AddPoints
	move.w	#$B3,($FFFFF75C).w
	move.b	#6,angle(a0)
	moveq	#$40,d0
	bsr.w	JmpTo10_LoadPLC
	rts
; ===========================================================================

loc_31D5C:
	st	objoff_2C(a0)
	subq.w	#1,($FFFFF75C).w
	bmi.s	loc_31D7E
	move.b	#0,($FFFFF73F).w
	move.b	#0,objoff_B(a0)
	move.b	#$B,collision_property(a0)
	bsr.w	loc_2D6CC
	bra.s	loc_31DB8
; ===========================================================================

loc_31D7E:
	bset	#0,render_flags(a0)
	clr.w	($FFFFF758).w
	clr.w	($FFFFF75A).w
	addq.b	#2,angle(a0)
	lea	($FFFFF740).w,a1
	andi.b	#$F0,6(a1)
	ori.b	#3,6(a1)
	_move.b	#8,0(a1)
	move.b	#-$23,($FFFF8C54).w
	move.b	#1,(Dirty_flag).w
	move.w	#-$12,($FFFFF75C).w

loc_31DB8:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_31E76
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

loc_31DCC:
	addq.w	#1,($FFFFF75C).w
	beq.s	loc_31DDC
	bpl.s	loc_31DE2
	addi.w	#$18,($FFFFF75A).w
	bra.s	loc_31E0E
; ===========================================================================

loc_31DDC:
	clr.w	($FFFFF75A).w
	bra.s	loc_31E0E
; ===========================================================================

loc_31DE2:
	cmpi.w	#$18,($FFFFF75C).w
	bcs.s	loc_31DFA
	beq.s	loc_31E02
	cmpi.w	#$20,($FFFFF75C).w
	bcs.s	loc_31E0E
	addq.b	#2,angle(a0)
	bra.s	loc_31E0E
; ===========================================================================

loc_31DFA:
	subi.w	#8,($FFFFF75A).w
	bra.s	loc_31E0E
; ===========================================================================

loc_31E02:
	clr.w	($FFFFF75A).w
	bsr.w	JmpTo6_loc_F626
	bsr.w	JmpTo6_loc_F62E

loc_31E0E:
	bsr.w	loc_2D5DE
	bsr.w	loc_31CDC
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_31E76
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

loc_31E2A:
	move.w	#$400,($FFFFF758).w
	move.w	#-$40,($FFFFF75A).w
	cmpi.w	#$2B20,(Camera_Max_X_pos).w
	beq.s	loc_31E44
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_31E4A
; ===========================================================================

loc_31E44:
	tst.b	render_flags(a0)
	bpl.s	JmpTo58_DeleteObject

loc_31E4A:
	bsr.w	loc_2D5DE
	bsr.w	loc_31CDC
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_31E76
	lea	(off_3209C).l,a1
	bsr.w	loc_2D604
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

JmpTo58_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_31E76:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,y_radius(a0)
	move.w	d1,priority(a0)
	move.w	d0,anim(a0)
	move.w	d1,anim_frame_duration(a0)
	tst.b	objoff_2C(a0)
	bne.s	loc_31EAE
	move.w	d0,status(a0)
	move.w	d1,routine(a0)
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	move.w	d1,objoff_3A(a0)
	move.w	d1,objoff_34(a0)
	rts
; ===========================================================================

loc_31EAE:
	cmpi.w	#$78,($FFFFF75C).w
	bgt.s	return_31F22
	subi.w	#1,status(a0)
	move.l	objoff_3A(a0),d0
	move.w	objoff_2E(a0),d1
	addi.w	#$38,objoff_2E(a0)
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d0
	move.l	d0,objoff_3A(a0)
	move.w	objoff_3A(a0),routine(a0)
	cmpi.w	#$6F0,routine(a0)
	blt.s	loc_31EE8
	move.w	#0,objoff_2E(a0)

loc_31EE8:
	cmpi.w	#$3C,($FFFFF75C).w
	bgt.s	return_31F22
	addi.w	#1,x_vel(a0)
	move.l	objoff_34(a0),d0
	move.w	objoff_30(a0),d1
	addi.w	#$38,objoff_30(a0)
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d0
	move.l	d0,objoff_34(a0)
	move.w	objoff_34(a0),y_vel(a0)
	cmpi.w	#$6F0,y_vel(a0)
	blt.s	return_31F22
	move.w	#0,objoff_30(a0)

return_31F22:
	rts
; ===========================================================================

loc_31F24:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#6,angle(a1)
	bcc.w	JmpTo59_DeleteObject
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_31F40(pc,d0.w),d1
	jmp	off_31F40(pc,d1.w)
; ===========================================================================
off_31F40:
	dc.w loc_31F48-off_31F40
	dc.w loc_31F96-off_31F40; 1
	dc.w loc_31FDC-off_31F40; 2
	dc.w loc_32080-off_31F40; 3
; ===========================================================================

loc_31F48:
	move.l	#Obj51_MapUnc_320EA,mappings(a0)
	move.w	#$3A7,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#7,priority(a0)
	addq.b	#2,routine_secondary(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#$30,y_pos(a0)
	move.b	#8,y_radius(a0)
	move.b	#8,x_radius(a0)
	move.b	#$12,mapping_frame(a0)
	move.b	#$98,collision_flags(a0)
	rts
; ===========================================================================

loc_31F96:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.w	objoff_28(a0),d0
	add.w	d0,y_pos(a0)
	addi.w	#1,d0
	cmpi.w	#$2E,d0
	blt.s	+
	move.w	#$2E,d0
+
	move.w	d0,objoff_28(a0)
	tst.w	($FFFFF75C).w
	bne.w	JmpTo39_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,y_vel(a0)
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

loc_31FDC:
	bsr.w	loc_31FF8
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.w	JmpTo39_DisplaySprite
	add.w	d1,y_pos(a0)
	bsr.w	loc_32030
	bra.w	JmpTo39_DisplaySprite
; ===========================================================================

loc_31FF8:
	moveq	#0,d2
	move.w	x_pos(a0),d2
	swap	d2
	moveq	#0,d3
	move.w	y_pos(a0),d3
	swap	d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	addi.w	#$38,y_vel(a0)
	swap	d2
	move.w	d2,x_pos(a0)
	swap	d3
	move.w	d3,y_pos(a0)
	rts
; ===========================================================================

loc_32030:
	move.b	#-$3C,d0
	bsr.w	JmpTo9_PlaySound
	move.w	#$3A7,art_tile(a0)
	move.b	#7,anim(a0)
	move.w	#-$300,y_vel(a0)
	move.w	#-$100,x_vel(a0)
	move.b	#4,objoff_A(a0)
	move.b	#6,routine_secondary(a0)
	move.b	#$98,collision_flags(a0)
	bsr.w	JmpTo23_SingleObjLoad2
	bne.s	return_3207E
	moveq	#0,d0
	move.w	#$F,d1

loc_3206E:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_3206E
	neg.w	x_vel(a1)

return_3207E:
	rts
; ===========================================================================

loc_32080:
	bsr.w	loc_31FF8
	lea	(off_3209C).l,a1
	bsr.w	JmpTo20_AnimateSprite
	cmpi.w	#$705,y_pos(a0)
	bcs.w	JmpTo39_DisplaySprite
	bra.w	JmpTo59_DeleteObject
; ===========================================================================
off_3209C:
	dc.w byte_320B0-off_3209C
	dc.w byte_320B3-off_3209C; 1
	dc.w byte_320B9-off_3209C; 2
	dc.w byte_320BF-off_3209C; 3
	dc.w byte_320C3-off_3209C; 4
	dc.w byte_320C8-off_3209C; 5
	dc.w byte_320D3-off_3209C; 6
	dc.w byte_320DD-off_3209C; 7
	dc.w byte_320E1-off_3209C; 8
	dc.w byte_320E4-off_3209C; 9
byte_320B0:	dc.b  $F,  1,$FF
byte_320B3:	dc.b  $F,  4,$FF,  5,$FC,  2
byte_320B9:	dc.b  $F,  2,$FF,  3,$FC,  2
byte_320BF:	dc.b   7,  6,  7,$FF
byte_320C3:	dc.b   1, $C, $D, $E,$FF
byte_320C8:	dc.b   7,  8,  9,  8,  9,  8,  9,  8,  9,$FD,  3
byte_320D3:	dc.b   7, $A, $A, $A, $A, $A, $A, $A,$FD,  3
byte_320DD:	dc.b   3,$13,$14,$FF
byte_320E1:	dc.b   1,  0,$FF
byte_320E4:	dc.b   1, $F,$10,$11,$FF,  0
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj51_MapUnc_320EA:	BINCLUDE "mappings/sprite/obj51.bin"
; ===========================================================================

JmpTo39_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo59_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo16_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo9_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo23_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo20_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo10_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo7_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo6_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo6_loc_F62E 
	jmp	loc_F62E
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 54 - MTZ boss
; ----------------------------------------------------------------------------
; Sprite_32288:
Obj54:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_32296(pc,d0.w),d1
	jmp	off_32296(pc,d1.w)
; ===========================================================================
off_32296:
	dc.w loc_3229E-off_32296
	dc.w loc_323BA-off_32296; 1
	dc.w loc_32CAE-off_32296; 2
	dc.w loc_32D48-off_32296; 3
; ===========================================================================

loc_3229E:
	move.l	#Obj54_MapUnc_32DC6,mappings(a0)
	move.w	#$37C,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.w	#$2B50,x_pos(a0)
	move.w	#$380,y_pos(a0)
	move.b	#2,objoff_B(a0)
	addq.b	#2,objoff_A(a0)
	bset	#6,render_flags(a0)
	move.b	#2,objoff_F(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.b	#7,objoff_3E(a0)
	move.w	x_pos(a0),($FFFFF750).w
	move.w	y_pos(a0),($FFFFF754).w
	move.w	#0,($FFFFF758).w
	move.w	#$100,($FFFFF75A).w
	move.b	#$20,objoff_E(a0)
	clr.b	objoff_2B(a0)
	clr.b	objoff_2C(a0)
	move.b	#$40,mapping_frame(a0)
	move.b	#$27,objoff_33(a0)
	move.b	#$27,objoff_39(a0)
	move.w	x_pos(a0),x_vel(a0)
	move.w	y_pos(a0),y_vel(a0)
	move.b	#$C,objoff_15(a0)
	move.w	x_pos(a0),y_radius(a0)
	move.w	y_pos(a0),priority(a0)
	move.b	#0,anim_frame(a0)
	bsr.w	JmpTo17_SingleObjLoad
	bne.s	loc_3239C
	move.b	#$54,(a1) ; load obj54
	move.b	#6,objoff_A(a1)
	move.b	#$13,mapping_frame(a1)
	move.l	#Obj54_MapUnc_32DC6,mappings(a1)
	move.w	#$37C,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#6,priority(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	a0,objoff_34(a1)
	move.b	#$20,width_pixels(a1)
	bsr.w	JmpTo17_SingleObjLoad
	bne.s	loc_3239C
	move.b	#$53,(a1) ; load obj53
	move.l	a0,objoff_34(a1)

loc_3239C:
	lea	($FFFFF740).w,a2
	move.b	#$10,(a2)+
	move.b	#0,(a2)+
	move.b	#3,(a2)+
	move.b	#0,(a2)+
	move.b	#1,(a2)+
	move.b	#0,(a2)+
	rts
; ===========================================================================

loc_323BA:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_323C8(pc,d0.w),d1
	jmp	off_323C8(pc,d1.w)
; ===========================================================================
off_323C8:
	dc.w loc_323DC-off_323C8
	dc.w loc_32456-off_323C8; 1
	dc.w loc_324DC-off_323C8; 2
	dc.w loc_32524-off_323C8; 3
	dc.w loc_32544-off_323C8; 4
	dc.w loc_32574-off_323C8; 5
	dc.w loc_325BE-off_323C8; 6
	dc.w loc_3262E-off_323C8; 7
	dc.w loc_32802-off_323C8; 8
	dc.w loc_32864-off_323C8; 9
; ===========================================================================

loc_323DC:
	bsr.w	loc_2D5DE
	move.w	($FFFFF754).w,y_pos(a0)
	cmpi.w	#$4A0,($FFFFF754).w
	bcs.s	loc_32426
	addq.b	#2,angle(a0)
	move.w	#0,($FFFFF75A).w
	move.w	#-$100,($FFFFF758).w
	bclr	#7,objoff_2B(a0)
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d0
	cmp.w	($FFFFF750).w,d0
	bcs.s	loc_32426
	move.w	#$100,($FFFFF758).w
	bset	#7,objoff_2B(a0)
	bset	#0,render_flags(a0)

loc_32426:
	bsr.w	loc_3278E
	lea	(off_32D7A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_32774
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_3243C:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	addq.b	#4,mapping_frame(a0)
	rts
; ===========================================================================

loc_32456:
	bsr.w	loc_2D5DE
	btst	#7,objoff_2B(a0)
	bne.s	loc_32490
	cmpi.w	#$2AD0,($FFFFF750).w
	bcc.s	loc_324BC
	bchg	#7,objoff_2B(a0)
	move.w	#$100,($FFFFF758).w
	bset	#0,render_flags(a0)
	bset	#6,objoff_2B(a0)
	beq.s	loc_324BC
	addq.b	#2,angle(a0)
	move.w	#-$100,($FFFFF75A).w
	bra.s	loc_324BC
; ===========================================================================

loc_32490:
	cmpi.w	#$2BD0,($FFFFF750).w
	bcs.s	loc_324BC
	bchg	#7,objoff_2B(a0)
	move.w	#-$100,($FFFFF758).w
	bclr	#0,render_flags(a0)
	bset	#6,objoff_2B(a0)
	beq.s	loc_324BC
	addq.b	#2,angle(a0)
	move.w	#-$100,($FFFFF75A).w

loc_324BC:
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_3243C

loc_324C6:
	bsr.w	loc_3278E
	lea	(off_32D7A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_32774
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_324DC:
	bsr.w	loc_2D5DE
	cmpi.w	#$470,($FFFFF754).w
	bcc.s	loc_324EE
	move.w	#0,($FFFFF75A).w

loc_324EE:
	btst	#7,objoff_2B(a0)
	bne.s	loc_32506
	cmpi.w	#$2B50,($FFFFF750).w
	bcc.s	loc_32514
	move.w	#0,($FFFFF758).w
	bra.s	loc_32514
; ===========================================================================

loc_32506:
	cmpi.w	#$2B50,($FFFFF750).w
	bcs.s	loc_32514
	move.w	#0,($FFFFF758).w

loc_32514:
	move.w	($FFFFF758).w,d0
	or.w	($FFFFF75A).w,d0
	bne.s	BranchTo_loc_324BC
	addq.b	#2,angle(a0)

BranchTo_loc_324BC 
	bra.s	loc_324BC
; ===========================================================================

loc_32524:
	cmpi.b	#$68,objoff_33(a0)
	bcc.s	loc_32536
	addq.b	#1,objoff_33(a0)
	addq.b	#1,objoff_39(a0)
	bra.s	BranchTo2_loc_324BC
; ===========================================================================

loc_32536:
	subq.b	#1,objoff_39(a0)
	bne.s	BranchTo2_loc_324BC
	addq.b	#2,angle(a0)

BranchTo2_loc_324BC 
	bra.w	loc_324BC
; ===========================================================================

loc_32544:
	cmpi.b	#$27,objoff_33(a0)
	bcs.s	loc_32552
	subq.b	#1,objoff_33(a0)
	bra.s	BranchTo3_loc_324BC
; ===========================================================================

loc_32552:
	addq.b	#1,objoff_39(a0)
	cmpi.b	#$27,objoff_39(a0)
	bcs.s	BranchTo3_loc_324BC
	move.w	#$100,($FFFFF75A).w
	move.b	#0,angle(a0)
	bclr	#6,objoff_2B(a0)

BranchTo3_loc_324BC 
	bra.w	loc_324BC
; ===========================================================================

loc_32574:
	tst.b	objoff_39(a0)
	beq.s	loc_32580
	subq.b	#1,objoff_39(a0)
	bra.s	loc_32586
; ===========================================================================

loc_32580:
	move.b	#-1,objoff_3A(a0)

loc_32586:
	cmpi.b	#$27,objoff_33(a0)
	bcs.s	loc_32592
	subq.b	#1,objoff_33(a0)

loc_32592:
	bsr.w	loc_2D5DE
	cmpi.w	#$420,($FFFFF754).w
	bcc.s	loc_325A4
	move.w	#0,($FFFFF75A).w

loc_325A4:
	tst.b	objoff_2C(a0)
	bne.s	BranchTo4_loc_324BC
	tst.b	objoff_3A(a0)
	beq.s	loc_325B6
	move.b	#$80,objoff_3A(a0)

loc_325B6:
	addq.b	#2,angle(a0)

BranchTo4_loc_324BC 
	bra.w	loc_324BC
; ===========================================================================

loc_325BE:
	tst.b	objoff_3E(a0)
	beq.s	loc_325EC
	tst.b	objoff_3A(a0)
	bne.s	BranchTo5_loc_324BC
	cmpi.b	#$27,objoff_39(a0)
	bcc.s	loc_325D8
	addq.b	#1,objoff_39(a0)
	bra.s	BranchTo5_loc_324BC
; ===========================================================================

loc_325D8:
	move.w	#$100,($FFFFF75A).w
	move.b	#0,angle(a0)
	bclr	#6,objoff_2B(a0)
	bra.s	BranchTo5_loc_324BC
; ===========================================================================

loc_325EC:
	move.w	#-$180,($FFFFF75A).w
	move.w	#-$100,($FFFFF758).w
	bclr	#0,render_flags(a0)
	btst	#7,objoff_2B(a0)
	beq.s	loc_32612
	move.w	#$100,($FFFFF758).w
	bset	#0,render_flags(a0)

loc_32612:
	move.b	#$E,angle(a0)
	move.b	#0,objoff_2E(a0)
	bclr	#6,objoff_2B(a0)
	move.b	#0,objoff_2F(a0)

BranchTo5_loc_324BC 
	bra.w	loc_324BC
; ===========================================================================

loc_3262E:
	tst.b	objoff_2F(a0)
	beq.s	loc_3263C
	subq.b	#1,objoff_2F(a0)
	bra.w	loc_324C6
; ===========================================================================

loc_3263C:
	moveq	#0,d0
	move.b	objoff_2E(a0),d0
	move.w	off_3264A(pc,d0.w),d1
	jmp	off_3264A(pc,d1.w)
; ===========================================================================
off_3264A:
	dc.w loc_32650-off_3264A
	dc.w loc_326B8-off_3264A; 1
	dc.w loc_32704-off_3264A; 2
; ===========================================================================

loc_32650:
	bsr.w	loc_2D5DE
	cmpi.w	#$420,($FFFFF754).w
	bcc.s	loc_32662
	move.w	#0,($FFFFF75A).w

loc_32662:
	btst	#7,objoff_2B(a0)
	bne.s	loc_32690
	cmpi.w	#$2AF0,($FFFFF750).w
	bcc.s	BranchTo6_loc_324BC
	addq.b	#2,objoff_2E(a0)
	move.w	#$180,($FFFFF75A).w
	move.b	#3,objoff_2D(a0)
	move.w	#$1E,($FFFFF75C).w
	bset	#0,render_flags(a0)
	bra.s	BranchTo6_loc_324BC
; ===========================================================================

loc_32690:
	cmpi.w	#$2BB0,($FFFFF750).w
	bcs.s	BranchTo6_loc_324BC
	addq.b	#2,objoff_2E(a0)
	move.w	#$180,($FFFFF75A).w
	move.b	#3,objoff_2D(a0)
	move.w	#$1E,($FFFFF75C).w
	bclr	#0,render_flags(a0)

BranchTo6_loc_324BC 
	bra.w	loc_324BC
; ===========================================================================

loc_326B8:
	bsr.w	loc_2D5DE
	cmpi.w	#$4A0,($FFFFF754).w
	bcs.s	loc_326D6
	move.w	#-$180,($FFFFF75A).w
	addq.b	#2,objoff_2E(a0)
	bchg	#7,objoff_2B(a0)
	bra.s	loc_326FC
; ===========================================================================

loc_326D6:
	btst	#7,objoff_2B(a0)
	bne.s	loc_326EE
	cmpi.w	#$2AD0,($FFFFF750).w
	bcc.s	loc_326FC
	move.w	#0,($FFFFF758).w
	bra.s	loc_326FC
; ===========================================================================

loc_326EE:
	cmpi.w	#$2BD0,($FFFFF750).w
	bcs.s	loc_326FC
	move.w	#0,($FFFFF758).w

loc_326FC:
	bsr.w	loc_32740
	bra.w	loc_324BC
; ===========================================================================

loc_32704:
	bsr.w	loc_2D5DE
	cmpi.w	#$470,($FFFFF754).w
	bcc.s	loc_32724
	move.w	#$100,($FFFFF758).w
	btst	#7,objoff_2B(a0)
	bne.s	loc_32724
	move.w	#-$100,($FFFFF758).w

loc_32724:
	cmpi.w	#$420,($FFFFF754).w
	bcc.s	loc_32738
	move.w	#0,($FFFFF75A).w
	move.b	#0,objoff_2E(a0)

loc_32738:
	bsr.w	loc_32740
	bra.w	loc_324BC
; ===========================================================================

loc_32740:
	subi.w	#1,($FFFFF75C).w
	bne.s	return_32772
	tst.b	objoff_2D(a0)
	beq.s	return_32772
	subq.b	#1,objoff_2D(a0)
	bsr.w	JmpTo17_SingleObjLoad
	bne.s	return_32772
	move.b	#$54,(a1) ; load obj54
	move.b	#4,objoff_A(a1)
	move.l	a0,objoff_34(a1)
	move.w	#$1E,($FFFFF75C).w
	move.b	#$10,objoff_2F(a0)

return_32772:
	rts
; ===========================================================================

loc_32774:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	move.w	d0,y_radius(a0)
	move.w	d1,priority(a0)
	rts
; ===========================================================================

loc_3278E:
	bsr.w	loc_328DE
	cmpi.b	#$3F,objoff_14(a0)
	bne.s	loc_327D2
	st	objoff_38(a0)
	lea	($FFFFF740).w,a1
	andi.b	#$F0,2(a1)
	ori.b	#5,2(a1)
	tst.b	objoff_3E(a0)
	beq.s	loc_327CA
	move.b	#$A,angle(a0)
	move.w	#-$180,($FFFFF75A).w
	subq.b	#1,objoff_3E(a0)
	move.w	#0,($FFFFF758).w

loc_327CA:
	move.w	#0,($FFFFF758).w
	rts
; ===========================================================================

loc_327D2:
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_327E2
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	return_32800

loc_327E2:
	lea	($FFFFF740).w,a1
	move.b	2(a1),d0
	andi.b	#$F,d0
	cmpi.b	#4,d0
	beq.s	return_32800
	andi.b	#$F0,2(a1)
	ori.b	#4,2(a1)

return_32800:
	rts
; ===========================================================================

loc_32802:
	subq.w	#1,($FFFFF75C).w
	cmpi.w	#$3C,($FFFFF75C).w
	bcs.s	loc_32846
	bmi.s	loc_32820
	bsr.w	loc_2D6CC
	lea	($FFFFF740).w,a1
	move.b	#7,2(a1)
	bra.s	loc_32846
; ===========================================================================

loc_32820:
	bset	#0,render_flags(a0)
	clr.w	($FFFFF758).w
	clr.w	($FFFFF75A).w
	addq.b	#2,angle(a0)
	move.w	#-$12,($FFFFF75C).w
	lea	($FFFFF740).w,a1
	move.b	#3,2(a1)
	bsr.w	JmpTo7_loc_F626

loc_32846:
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_32D7A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_32774
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32864:
	move.w	#$400,($FFFFF758).w
	move.w	#-$40,($FFFFF75A).w
	cmpi.w	#$2BF0,(Camera_Max_X_pos).w
	bcc.s	loc_3287E
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_32884
; ===========================================================================

loc_3287E:
	tst.b	render_flags(a0)
	bpl.s	JmpTo60_DeleteObject

loc_32884:
	tst.b	($FFFFF7A7).w
	bne.s	loc_32894
	move.b	#1,($FFFFF7A7).w
	bsr.w	JmpTo7_loc_F62E

loc_32894:
	bsr.w	loc_2D5DE
	bsr.w	loc_328C0
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	lea	(off_32D7A).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_32774
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

JmpTo60_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

loc_328C0:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#6,d0
	add.w	($FFFFF754).w,d0
	move.w	d0,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	addq.b	#2,mapping_frame(a0)

loc_328DE:
	cmpi.b	#$10,angle(a0)
	bcc.s	return_32924
	tst.b	objoff_32(a0)
	beq.s	loc_32926
	tst.b	collision_flags(a0)
	bne.s	return_32924
	tst.b	objoff_14(a0)
	bne.s	loc_32908
	move.b	#$40,objoff_14(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_32908:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_32916
	move.w	#$EEE,d0

loc_32916:
	move.w	d0,(a1)
	subq.b	#1,objoff_14(a0)
	bne.s	return_32924
	move.b	#$F,collision_flags(a0)

return_32924:
	rts
; ===========================================================================

loc_32926:
	moveq	#$64,d0
	bsr.w	JmpTo8_AddPoints
	move.w	#$EF,($FFFFF75C).w
	move.b	#$10,angle(a0)
	moveq	#$40,d0
	bsr.w	JmpTo11_LoadPLC
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 53 - Shield orbs that surround MTZ boss
; ----------------------------------------------------------------------------
; Sprite_32940:
Obj53:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3294E(pc,d0.w),d1
	jmp	off_3294E(pc,d1.w)
; ===========================================================================
off_3294E:
	dc.w loc_32958-off_3294E
	dc.w loc_329DA-off_3294E; 1
	dc.w loc_32B64-off_3294E; 2
	dc.w loc_32BDC-off_3294E; 3
	dc.w loc_32C98-off_3294E; 4
; ===========================================================================

loc_32958:
	movea.l	a0,a1
	moveq	#6,d3
	moveq	#0,d2
	bra.s	loc_32966
; ===========================================================================

loc_32960:
	bsr.w	JmpTo17_SingleObjLoad
	bne.s	return_329CA

loc_32966:
	move.b	#$20,width_pixels(a1)
	move.l	objoff_34(a0),objoff_34(a1)
	move.b	#$53,(a1) ; load obj53
	move.l	#Obj54_MapUnc_32DC6,mappings(a1)
	move.w	#$37C,art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#3,priority(a1)
	addq.b	#2,routine(a1)
	move.b	#5,mapping_frame(a1)
	move.b	byte_329CC(pc,d2.w),objoff_28(a1)
	move.b	byte_329CC(pc,d2.w),objoff_3B(a1)
	move.b	byte_329D3(pc,d2.w),objoff_3A(a1)
	move.b	#$40,objoff_29(a1)
	move.b	#$87,collision_flags(a1)
	move.b	#2,collision_property(a1)
	move.b	#0,objoff_3C(a1)
	addq.w	#1,d2
	dbf	d3,loc_32960

return_329CA:
	rts
; ===========================================================================
byte_329CC:
	dc.b $24
	dc.b $6C	; 1
	dc.b $B4	; 2
	dc.b $FC	; 3
	dc.b $48	; 4
	dc.b $90	; 5
	dc.b $D8	; 6
byte_329D3:
	dc.b   0
	dc.b   1	; 1
	dc.b   1	; 2
	dc.b   0	; 3
	dc.b   1	; 4
	dc.b   1	; 5
	dc.b   0	; 6
; ===========================================================================

loc_329DA:
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	y_pos(a1),objoff_2A(a0)
	subi.w	#4,objoff_2A(a0)
	move.w	x_pos(a1),objoff_38(a0)
	tst.b	objoff_38(a1)
	beq.s	loc_32A56
	move.b	#0,objoff_38(a1)
	addi.b	#1,objoff_2C(a1)
	addq.b	#2,routine(a0)
	move.b	#$3C,objoff_32(a0)
	move.b	#2,anim(a0)
	move.w	#-$400,y_vel(a0)
	move.w	#-$80,d1
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	bpl.s	loc_32A28
	neg.w	d1

loc_32A28:
	cmpi.w	#$2AF0,x_pos(a0)
	bcc.s	loc_32A34
	move.w	#$80,d1

loc_32A34:
	cmpi.w	#$2BB0,x_pos(a0)
	bcs.s	loc_32A40
	move.w	#-$80,d1

loc_32A40:
	bclr	#0,render_flags(a0)
	tst.w	d1
	bmi.s	loc_32A50
	bset	#0,render_flags(a0)

loc_32A50:
	move.w	d1,x_vel(a0)
	bra.s	loc_32A64
; ===========================================================================

loc_32A56:
	cmpi.b	#2,collision_property(a0)
	beq.s	loc_32A64
	move.b	#0,collision_flags(a1)

loc_32A64:
	bsr.w	loc_32A70
	bsr.w	loc_32B1A
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32A70:
	move.b	objoff_29(a0),d0
	jsr	(CalcSine).l
	move.w	d0,d3
	moveq	#0,d1
	move.b	objoff_33(a1),d1
	muls.w	d1,d0
	move.w	d0,d5
	move.w	d0,d4
	move.b	objoff_39(a1),d2
	tst.b	objoff_3A(a1)
	beq.s	loc_32A96
	move.w	#$10,d2

loc_32A96:
	muls.w	d3,d2
	move.w	objoff_38(a0),d6
	move.b	objoff_28(a0),d0
	jsr	(CalcSine).l
	muls.w	d0,d5
	swap	d5
	add.w	d6,d5
	move.w	d5,x_pos(a0)
	muls.w	d1,d4
	swap	d4
	move.w	d4,objoff_30(a0)
	move.w	objoff_2A(a0),d6
	move.b	objoff_3B(a0),d0
	tst.b	objoff_3A(a1)
	beq.s	loc_32ACA
	move.b	objoff_3C(a0),d0

loc_32ACA:
	jsr	(CalcSine).l
	muls.w	d0,d2
	swap	d2
	add.w	d6,d2
	move.w	d2,y_pos(a0)
	addq.b	#4,objoff_28(a0)
	tst.b	objoff_3A(a1)
	bne.s	loc_32AEA
	addq.b	#8,objoff_3B(a0)
	rts
; ===========================================================================

loc_32AEA:
	cmpi.b	#-1,objoff_3A(a1)
	beq.s	loc_32B0C
	cmpi.b	#$80,objoff_3A(a1)
	bne.s	loc_32B04
	subq.b	#2,objoff_3C(a0)
	bpl.s	return_32B18
	clr.b	objoff_3C(a0)

loc_32B04:
	move.b	#0,objoff_3A(a1)
	rts
; ===========================================================================

loc_32B0C:
	cmpi.b	#$40,objoff_3C(a0)
	bcc.s	return_32B18
	addq.b	#2,objoff_3C(a0)

return_32B18:
	rts
; ===========================================================================

loc_32B1A:
	move.w	objoff_30(a0),d0
	bmi.s	loc_32B42
	cmpi.w	#$C,d0
	blt.s	loc_32B34
	move.b	#3,mapping_frame(a0)
	move.b	#1,priority(a0)
	rts
; ===========================================================================

loc_32B34:
	move.b	#4,mapping_frame(a0)
	move.b	#2,priority(a0)
	rts
; ===========================================================================

loc_32B42:
	cmpi.w	#-$C,d0
	blt.s	loc_32B56
	move.b	#4,mapping_frame(a0)
	move.b	#6,priority(a0)
	rts
; ===========================================================================

loc_32B56:
	move.b	#5,mapping_frame(a0)
	move.b	#7,priority(a0)
	rts
; ===========================================================================

loc_32B64:
	tst.b	objoff_32(a0)
	bmi.s	loc_32B76
	subq.b	#1,objoff_32(a0)
	bpl.s	loc_32B76
	move.b	#$DA,collision_flags(a0)

loc_32B76:
	bsr.w	JmpTo6_ObjectMoveAndFall
	subi.w	#$20,y_vel(a0)
	cmpi.w	#$180,y_vel(a0)
	blt.s	loc_32B8E
	move.w	#$180,y_vel(a0)

loc_32B8E:
	cmpi.w	#$4AC,y_pos(a0)
	bcs.s	loc_32BB0
	move.w	#$4AC,y_pos(a0)
	move.w	#$4AC,objoff_2E(a0)
	move.b	#1,objoff_2C(a0)
	addq.b	#2,routine(a0)
	bsr.w	loc_32C4C

loc_32BB0:
	bsr.w	loc_32BC2
	lea	(off_32D7A).l,a1
	bsr.w	JmpTo21_AnimateSprite
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32BC2:
	cmpi.b	#-2,collision_property(a0)
	bgt.s	return_32BDA
	move.b	#$14,mapping_frame(a0)
	move.b	#6,anim(a0)
	addq.b	#2,routine(a0)

return_32BDA:
	rts
; ===========================================================================

loc_32BDC:
	tst.b	objoff_32(a0)
	bmi.s	loc_32BEE
	subq.b	#1,objoff_32(a0)
	bpl.s	loc_32BEE
	move.b	#$DA,collision_flags(a0)

loc_32BEE:
	bsr.w	loc_32C66
	cmpi.b	#$B,mapping_frame(a0)
	bne.s	loc_32BB0
	move.b	objoff_2C(a0),d0
	jsr	(CalcSine).l
	neg.w	d0
	asr.w	#2,d0
	add.w	objoff_2E(a0),d0
	cmpi.w	#$4AC,d0
	bcc.s	loc_32C38
	move.w	d0,y_pos(a0)
	addq.b	#1,objoff_2C(a0)
	btst	#0,objoff_2C(a0)
	beq.w	JmpTo40_DisplaySprite
	moveq	#-1,d0
	btst	#0,render_flags(a0)
	beq.s	loc_32C30
	neg.w	d0

loc_32C30:
	add.w	d0,x_pos(a0)
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32C38:
	move.w	#$4AC,y_pos(a0)
	bsr.w	loc_32C4C
	move.b	#1,objoff_2C(a0)
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32C4C:
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	bpl.s	loc_32C5E
	bclr	#0,render_flags(a0)
	rts
; ===========================================================================

loc_32C5E:
	bset	#0,render_flags(a0)
	rts
; ===========================================================================

loc_32C66:
	cmpi.b	#4,(MainCharacter+routine).w
	beq.s	loc_32C76
	cmpi.b	#4,(Sidekick+routine).w
	bne.s	loc_32C82

loc_32C76:
	move.b	#$14,mapping_frame(a0)
	move.b	#6,anim(a0)

loc_32C82:
	cmpi.b	#-2,collision_property(a0)
	bgt.s	return_32C96
	move.b	#$14,mapping_frame(a0)
	move.b	#6,anim(a0)

return_32C96:
	rts
; ===========================================================================

loc_32C98:
	move.b	#-$3C,d0
	bsr.w	JmpTo10_PlaySound
	movea.l	objoff_34(a0),a1 ; a1=object
	subi.b	#1,objoff_2C(a1)
	bra.w	JmpTo61_DeleteObject
; ===========================================================================

loc_32CAE:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_32CBC(pc,d0.w),d0
	jmp	off_32CBC(pc,d0.w)
; ===========================================================================
off_32CBC:
	dc.w loc_32CC0-off_32CBC
	dc.w loc_32D2C-off_32CBC; 1
; ===========================================================================

loc_32CC0:
	move.l	#Obj54_MapUnc_32DC6,mappings(a0)
	move.w	#$37C,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#5,priority(a0)
	move.b	#$12,mapping_frame(a0)
	addq.b	#2,routine_secondary(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	#$50,width_pixels(a0)
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	addi.w	#7,y_pos(a0)
	subi.w	#4,x_pos(a0)
	move.w	#-$400,d0
	btst	#0,render_flags(a1)
	beq.s	loc_32D1A
	neg.w	d0
	addi.w	#8,x_pos(a0)

loc_32D1A:
	move.w	d0,x_vel(a0)
	move.b	#$99,collision_flags(a0)
	move.b	#-$16,d0
	bsr.w	JmpTo10_PlaySound

loc_32D2C:
	bsr.w	JmpTo24_ObjectMove
	cmpi.w	#$2AB0,x_pos(a0)
	bcs.w	JmpTo61_DeleteObject
	cmpi.w	#$2BF0,x_pos(a0)
	bcc.w	JmpTo61_DeleteObject
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================

loc_32D48:
	movea.l	objoff_34(a0),a1 ; a1=object
	cmpi.b	#$54,(a1)
	bne.w	JmpTo61_DeleteObject
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	bclr	#0,render_flags(a0)
	btst	#0,render_flags(a1)
	beq.w	JmpTo40_DisplaySprite
	bset	#0,render_flags(a0)
	bra.w	JmpTo40_DisplaySprite
; ===========================================================================
off_32D7A:
	dc.w byte_32D8A-off_32D7A
	dc.w byte_32D8D-off_32D7A; 1
	dc.w byte_32D91-off_32D7A; 2
	dc.w byte_32DA6-off_32D7A; 3
	dc.w byte_32DAA-off_32D7A; 4
	dc.w byte_32DB5-off_32D7A; 5
	dc.w byte_32DC0-off_32D7A; 6
	dc.w byte_32DC3-off_32D7A; 7
byte_32D8A:	dc.b  $F,  2,$FF
byte_32D8D:	dc.b   1,  0,  1,$FF
byte_32D91:	dc.b   3,  5,  5,  5,  5,  5,  5,  5,  5,  6,  7,  6,  7,  6,  7,  8
		dc.b   9, $A, $B,$FE,  1; 16
byte_32DA6:	dc.b   7, $C, $D,$FF
byte_32DAA:	dc.b   7, $E, $F, $E, $F, $E, $F, $E, $F,$FD,  3
byte_32DB5:	dc.b   7,$10,$10,$10,$10,$10,$10,$10,$10,$FD,  3
byte_32DC0:	dc.b   1,$14,$FC
byte_32DC3:	dc.b   7,$11,$FF
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj54_MapUnc_32DC6:	BINCLUDE "mappings/sprite/obj54.bin"
; ===========================================================================

JmpTo40_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo61_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo17_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo10_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo21_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo11_LoadPLC 
	jmp	(LoadPLC).l
; ===========================================================================

JmpTo8_AddPoints 
	jmp	AddPoints
; ===========================================================================

JmpTo7_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo7_loc_F62E 
	jmp	loc_F62E
; ===========================================================================

JmpTo6_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
; loc_32F88:
JmpTo24_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 55 - OOZ boss
; ----------------------------------------------------------------------------
; Sprite_32F90:
Obj55:
	moveq	#0,d0
	move.b	objoff_A(a0),d0
	move.w	off_32F9E(pc,d0.w),d1
	jmp	off_32F9E(pc,d1.w)
; ===========================================================================
off_32F9E:
	dc.w loc_32FA8-off_32F9E
	dc.w loc_32FE6-off_32F9E; 1
	dc.w loc_3320A-off_32F9E; 2
	dc.w loc_33456-off_32F9E; 3
	dc.w loc_33570-off_32F9E; 4
; ===========================================================================

loc_32FA8:
	move.l	#Obj55_MapUnc_33756,mappings(a0)
	move.w	#$38C,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	bset	#6,render_flags(a0)
	move.b	#0,objoff_F(a0)
	addq.b	#2,objoff_A(a0)
	move.b	#$F,collision_flags(a0)
	move.b	#8,objoff_32(a0)
	move.b	#$40,objoff_E(a0)
	rts
; ===========================================================================

loc_32FE6:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_32FF4(pc,d0.w),d1
	jmp	off_32FF4(pc,d1.w)
; ===========================================================================
off_32FF4:
	dc.w loc_32FFE-off_32FF4
	dc.w loc_33078-off_32FF4; 1
	dc.w loc_330BA-off_32FF4; 2
	dc.w loc_33104-off_32FF4; 3
	dc.w loc_331A6-off_32FF4; 4
; ===========================================================================

loc_32FFE:
	move.w	#$2940,($FFFFF750).w
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d1
	cmpi.w	#$293A,d1
	bcc.s	loc_3301A
	bchg	#0,render_flags(a0)

loc_3301A:
	move.w	#$2D0,y_pos(a0)
	move.w	#$2D0,($FFFFF754).w
	move.b	#8,objoff_B(a0)
	move.b	#1,objoff_F(a0)
	addq.b	#2,angle(a0)
	move.w	#-$80,($FFFFF75A).w
	move.b	#$F,collision_flags(a0)
	move.w	x_pos(a0),x_vel(a0)
	move.w	y_pos(a0),y_vel(a0)
	clr.b	mapping_frame(a0)
	clr.b	objoff_2A(a0)
	move.b	#8,objoff_15(a0)
	lea	($FFFFF740).w,a2
	move.b	#5,(a2)+
	move.b	#0,(a2)+
	move.b	#1,(a2)+
	move.b	#0,(a2)
	move.b	#0,($FFFFF73F).w
	rts
; ===========================================================================

loc_33078:
	bsr.w	loc_2D5DE
	move.w	($FFFFF750).w,x_pos(a0)
	bsr.w	loc_330EA
	cmpi.w	#$290,($FFFFF754).w
	bcc.w	loc_3315E
	move.w	#$290,($FFFFF754).w
	addq.b	#2,angle(a0)
	move.w	#$A8,($FFFFF75C).w
	btst	#7,objoff_2A(a0)
	bne.w	loc_3315E
	lea	($FFFFF740).w,a2
	move.b	#$10,(a2)+
	move.b	#0,(a2)
	bra.w	loc_3315E
; ===========================================================================

loc_330BA:
	btst	#7,objoff_2A(a0)
	bne.s	loc_330DC
	bsr.w	loc_330EA
	subi.w	#1,($FFFFF75C).w
	bpl.w	loc_3315E
	lea	($FFFFF740).w,a2
	move.b	#5,(a2)+
	move.b	#0,(a2)

loc_330DC:
	addq.b	#2,angle(a0)
	move.w	#-$40,($FFFFF75A).w
	bra.w	loc_3315E
; ===========================================================================

loc_330EA:
	move.b	mapping_frame(a0),d0
	jsr	(CalcSine).l
	asr.w	#7,d1
	add.w	($FFFFF754).w,d1
	move.w	d1,y_pos(a0)
	addq.b	#4,mapping_frame(a0)
	rts
; ===========================================================================

loc_33104:
	bsr.w	loc_2D5DE
	move.w	($FFFFF754).w,y_pos(a0)
	move.w	($FFFFF750).w,x_pos(a0)
	btst	#6,objoff_2A(a0)
	bne.s	loc_3313C
	cmpi.w	#$28C,($FFFFF754).w
	bcc.w	loc_3315E
	move.w	#$28C,($FFFFF754).w
	move.w	#$80,($FFFFF75A).w
	ori.b	#$40,objoff_2A(a0)
	bra.w	loc_3315E
; ===========================================================================

loc_3313C:
	cmpi.w	#$2D0,($FFFFF754).w
	bcs.s	loc_3315E
	move.w	#$2D0,($FFFFF754).w
	clr.b	angle(a0)
	addq.b	#2,objoff_A(a0)
	btst	#7,objoff_2A(a0)
	beq.s	loc_3315E
	addq.b	#2,objoff_A(a0)

loc_3315E:
	bsr.w	loc_33174
	lea	(off_33712).l,a1
	bsr.w	loc_2D604
	bsr.w	loc_33194
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_33174:
	bsr.w	loc_2D57C
	cmpi.b	#$1F,objoff_14(a0)
	bne.s	return_33192
	lea	($FFFFF740).w,a1
	andi.b	#$F0,(a1)
	ori.b	#3,(a1)
	ori.b	#$80,objoff_2A(a0)

return_33192:
	rts
; ===========================================================================

loc_33194:
	move.w	x_pos(a0),d0
	move.w	y_pos(a0),d1
	move.w	d0,x_vel(a0)
	move.w	d1,y_vel(a0)
	rts
; ===========================================================================

loc_331A6:
	clr.w	(Normal_palette_line2+2).w
	subq.w	#1,($FFFFF75C).w
	bmi.s	loc_331CA
	cmpi.w	#$1E,($FFFFF75C).w
	bcc.s	loc_331C2
	move.b	#$B,objoff_B(a0)
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_331C2:
	bsr.w	loc_2D6CC
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_331CA:
	tst.b	($FFFFF7A7).w
	bne.s	loc_331DE
	bsr.w	JmpTo8_loc_F626
	bsr.w	JmpTo8_loc_F62E
	move.b	#1,($FFFFF7A7).w

loc_331DE:
	cmpi.w	#$2A20,(Camera_Max_X_pos).w
	bcc.s	loc_331EC
	addq.w	#2,(Camera_Max_X_pos).w
	bra.s	loc_331FA
; ===========================================================================

loc_331EC:
	move.w	#$2A20,(Camera_Max_X_pos).w
	cmpi.w	#$2D0,y_pos(a0)
	bcc.s	BranchTo_JmpTo62_DeleteObject

loc_331FA:
	addi.w	#1,y_pos(a0)
	bsr.s	loc_33194
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

BranchTo_JmpTo62_DeleteObject 
	bra.w	JmpTo62_DeleteObject
; ===========================================================================

loc_3320A:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_33218(pc,d0.w),d1
	jmp	off_33218(pc,d1.w)
; ===========================================================================
off_33218:
	dc.w loc_33222-off_33218
	dc.w loc_33296-off_33218; 1
	dc.w loc_332C6-off_33218; 2
	dc.w loc_33324-off_33218; 3
	dc.w loc_33388-off_33218; 4
; ===========================================================================

loc_33222:
	clr.w	(Normal_palette_line2+2).w
	move.w	#$2940,($FFFFF750).w
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d1
	cmpi.w	#$293A,d1
	bcs.s	loc_33242
	bchg	#0,render_flags(a0)

loc_33242:
	move.w	#$2B0,($FFFFF754).w
	move.w	#$2B0,y_pos(a0)
	move.b	#2,angle(a0)
	move.b	#$8A,collision_flags(a0)
	move.b	#5,objoff_B(a0)
	moveq	#7,d0
	moveq	#7,d2
	moveq	#0,d4
	move.w	($FFFFF754).w,d5

loc_3326A:
	addi.w	#$F,d5
	move.b	d0,$15(a0,d4.w)
	move.w	d5,$12(a0,d4.w)
	addq.w	#6,d4
	dbf	d2,loc_3326A
	move.b	#8,objoff_F(a0)
	move.w	#-$80,($FFFFF75A).w
	move.b	#0,objoff_3E(a0)
	move.b	#1,($FFFFF73F).w
	rts
; ===========================================================================

loc_33296:
	bsr.w	loc_2D5DE
	cmpi.w	#$240,($FFFFF754).w
	bcc.w	loc_333BA
	move.w	#$240,($FFFFF754).w
	move.w	#0,($FFFFF75A).w
	addi.b	#2,angle(a0)
	move.w	#$80,($FFFFF75C).w
	move.b	#3,objoff_38(a0)
	bra.w	loc_333BA
; ===========================================================================

loc_332C6:
	subq.b	#1,objoff_2C(a0)
	bne.s	loc_332D2
	move.b	#5,objoff_B(a0)

loc_332D2:
	subi.w	#1,($FFFFF75C).w
	bne.w	loc_333BA
	subi.b	#1,objoff_38(a0)
	bmi.s	loc_3330C
	bsr.w	JmpTo5_RandomNumber

loc_332E8:
	addq.b	#1,d0
	andi.w	#3,d0
	btst	d0,objoff_3E(a0)
	bne.s	loc_332E8
	bset	d0,objoff_3E(a0)
	add.w	d0,d0
	move.w	word_3331C(pc,d0.w),($FFFFF75C).w
	addq.b	#2,angle(a0)
	bsr.w	loc_333C6
	bra.w	loc_333BA
; ===========================================================================

loc_3330C:
	move.w	#$80,($FFFFF75A).w
	move.b	#8,angle(a0)
	bra.w	loc_333BA
; ===========================================================================
word_3331C:
	dc.w  $238
	dc.w  $230	; 1
	dc.w  $240	; 2
	dc.w  $25F	; 3
; ===========================================================================

loc_33324:
	bsr.w	loc_2D5DE
	move.w	($FFFFF75C).w,d0
	tst.w	($FFFFF75A).w
	bmi.s	loc_3333C
	cmp.w	($FFFFF754).w,d0
	bcs.s	loc_33342
	bra.w	loc_333BA
; ===========================================================================

loc_3333C:
	cmp.w	($FFFFF754).w,d0
	bcs.s	loc_333BA

loc_33342:
	move.w	#0,($FFFFF75A).w
	move.b	#8,objoff_2C(a0)
	move.b	#6,objoff_B(a0)
	bsr.w	JmpTo18_SingleObjLoad
	bne.w	loc_333BA
	move.b	#$55,(a1) ; load obj55
	move.b	#8,objoff_A(a1)
	move.l	a0,objoff_34(a1)
	move.b	#-$16,d0
	bsr.w	JmpTo11_PlaySound
	move.b	#4,angle(a0)
	move.w	#$28,($FFFFF75C).w
	move.w	#-$80,($FFFFF75A).w
	bra.w	loc_333BA
; ===========================================================================

loc_33388:
	subq.b	#1,objoff_2C(a0)
	bne.s	loc_33394
	move.b	#5,objoff_B(a0)

loc_33394:
	bsr.w	loc_2D5DE
	cmpi.w	#$2B0,($FFFFF754).w
	bcs.s	loc_333BA
	move.w	#$2B0,($FFFFF754).w
	move.w	#0,($FFFFF75A).w
	move.b	#0,angle(a0)
	move.b	#2,objoff_A(a0)
	rts
; ===========================================================================

loc_333BA:
	bsr.w	loc_333E0
	bsr.w	loc_33406
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_333C6:
	move.w	($FFFFF75C).w,d0
	sub.w	($FFFFF754).w,d0
	bpl.s	loc_333D8
	move.w	#-$80,($FFFFF75A).w
	rts
; ===========================================================================

loc_333D8:
	move.w	#$80,($FFFFF75A).w
	rts
; ===========================================================================

loc_333E0:
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	blt.s	loc_333F8
	subi.w	#8,d0
	blt.s	return_333F6
	bset	#0,render_flags(a0)

return_333F6:
	rts
; ===========================================================================

loc_333F8:
	addi.w	#8,d0
	bgt.s	return_333F6
	bclr	#0,render_flags(a0)
	rts
; ===========================================================================

loc_33406:
	move.w	($FFFFF750).w,d5
	move.w	($FFFFF754).w,d6
	move.b	mapping_frame(a0),d3
	move.b	d3,d0
	bsr.w	loc_33446
	move.w	d1,x_pos(a0)
	move.w	d0,y_pos(a0)
	addi.b	#2,mapping_frame(a0)
	moveq	#7,d2
	moveq	#0,d4

loc_3342A:
	addi.w	#$F,d6
	subi.b	#$10,d3
	bsr.w	loc_33446
	move.w	d1,$10(a0,d4.w)
	move.w	d0,$12(a0,d4.w)
	addq.w	#6,d4
	dbf	d2,loc_3342A
	rts
; ===========================================================================

loc_33446:
	move.b	d3,d0
	bsr.w	JmpTo13_CalcSine
	asr.w	#4,d1
	add.w	d5,d1
	asr.w	#6,d0
	add.w	d6,d0
	rts
; ===========================================================================

loc_33456:
	moveq	#0,d0
	move.b	angle(a0),d0
	move.w	off_33464(pc,d0.w),d1
	jmp	off_33464(pc,d1.w)
; ===========================================================================
off_33464:
	dc.w loc_33468-off_33464
	dc.w loc_334CC-off_33464; 1
; ===========================================================================

loc_33468:
	clr.w	(Normal_palette_line2+2).w
	move.w	#$28C0,($FFFFF750).w
	bclr	#0,render_flags(a0)
	move.w	(MainCharacter+x_pos).w,d1
	cmpi.w	#$293A,d1
	bcs.s	loc_3348E
	move.w	#$29C0,($FFFFF750).w
	bset	#0,render_flags(a0)

loc_3348E:
	move.w	#$2A0,($FFFFF754).w
	move.b	#2,objoff_B(a0)
	move.b	#$8A,collision_flags(a0)
	addq.b	#2,angle(a0)
	move.b	#$80,objoff_E(a0)
	clr.b	mapping_frame(a0)
	moveq	#7,d0
	moveq	#7,d1
	moveq	#0,d2

loc_334B4:
	move.b	d1,$15(a0,d2.w)
	addq.w	#6,d2
	dbf	d0,loc_334B4
	move.b	#8,objoff_F(a0)
	move.b	#2,($FFFFF73F).w
	rts
; ===========================================================================

loc_334CC:
	bsr.w	loc_334EE
	cmpi.b	#-2,mapping_frame(a0)
	bcs.s	loc_334E6
	move.b	#0,angle(a0)
	move.b	#4,objoff_A(a0)
	rts
; ===========================================================================

loc_334E6:
	bsr.w	loc_3354C
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_334EE:
	move.b	mapping_frame(a0),d0
	addi.b	#$40,d0
	move.b	d0,d3
	bsr.w	loc_33526
	move.w	d1,x_pos(a0)
	move.w	d0,y_pos(a0)
	addi.b	#1,mapping_frame(a0)
	moveq	#7,d2
	moveq	#0,d4

loc_3350E:
	subi.b	#6,d3
	bsr.w	loc_33526
	move.w	d1,$10(a0,d4.w)
	move.w	d0,$12(a0,d4.w)
	addq.w	#6,d4
	dbf	d2,loc_3350E
	rts
; ===========================================================================

loc_33526:
	move.b	d3,d0
	bsr.w	JmpTo13_CalcSine
	muls.w	#$68,d1
	asr.l	#8,d1
	btst	#0,render_flags(a0)
	bne.s	loc_3353C
	neg.w	d1

loc_3353C:
	add.w	($FFFFF750).w,d1
	muls.w	#$68,d0
	asr.l	#8,d0
	add.w	($FFFFF754).w,d0
	rts
; ===========================================================================

loc_3354C:
	move.b	mapping_frame(a0),d0
	moveq	#$15,d1
	cmpi.b	#$52,d0
	bcs.s	loc_3356A
	moveq	#3,d1
	cmpi.b	#$6B,d0
	bcs.s	loc_3356A
	moveq	#2,d1
	cmpi.b	#-$6E,d0
	bcs.s	loc_3356A
	moveq	#4,d1

loc_3356A:
	move.b	d1,objoff_B(a0)
	rts
; ===========================================================================

loc_33570:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3357E(pc,d0.w),d0
	jmp	off_3357E(pc,d0.w)
; ===========================================================================
off_3357E:
	dc.w loc_33586-off_3357E
	dc.w loc_335DE-off_3357E; 1
	dc.w loc_336B2-off_3357E; 2
	dc.w BranchTo2_JmpTo62_DeleteObject-off_3357E; 3
; ===========================================================================

loc_33586:
	addq.b	#2,routine_secondary(a0)
	move.l	#Obj55_MapUnc_33756,mappings(a0)
	move.w	#$38C,art_tile(a0)
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	movea.l	objoff_34(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	#$C,mapping_frame(a0)
	move.w	#-$20,d0
	move.w	#-$400,x_vel(a0)
	btst	#0,render_flags(a1)
	beq.s	loc_335D2
	neg.w	d0
	neg.w	x_vel(a0)

loc_335D2:
	add.w	d0,x_pos(a0)
	move.b	#$AF,collision_flags(a0)
	rts
; ===========================================================================

loc_335DE:
	bsr.w	loc_335FE
	bsr.w	JmpTo25_ObjectMove
	cmpi.w	#$2870,x_pos(a0)
	bcs.w	JmpTo62_DeleteObject
	cmpi.w	#$2A10,x_pos(a0)
	bcc.w	JmpTo62_DeleteObject
	bra.w	JmpTo41_DisplaySprite
; ===========================================================================

loc_335FE:
	cmpi.w	#$250,y_pos(a0)
	bcs.s	return_33626
	tst.w	x_vel(a0)
	bmi.w	loc_33628
	move.w	x_pos(a0),d0
	cmpi.w	#$2980,d0
	bcc.s	return_33626
	cmpi.w	#$297C,d0
	bcs.w	return_33626
	move.w	#$2988,d1
	bra.s	loc_33640
; ===========================================================================

return_33626:
	rts
; ===========================================================================

loc_33628:
	move.w	x_pos(a0),d0
	cmpi.w	#$2900,d0
	bcs.s	return_3363E
	cmpi.w	#$2904,d0
	bcc.s	return_3363E
	move.w	#$28F8,d1
	bra.s	loc_33640
; ===========================================================================

return_3363E:
	rts
; ===========================================================================

loc_33640:
	bsr.w	JmpTo18_SingleObjLoad
	bne.s	return_336B0
	move.b	#$55,(a1) ; load obj55
	move.b	#8,objoff_A(a1)
	move.b	#4,routine_secondary(a1)
	move.b	#$8B,collision_flags(a1)
	move.b	#2,anim(a1)
	move.b	#$D,mapping_frame(a1)
	move.w	#0,y_vel(a1)
	move.l	#Obj55_MapUnc_33756,mappings(a1)
	move.w	#$38C,art_tile(a1)
	bsr.w	JmpTo63_Adjust2PArtPointer
	ori.b	#4,render_flags(a1)
	move.b	#2,priority(a1)
	move.w	#5,objoff_32(a1)
	move.b	#7,objoff_36(a1)
	move.w	x_vel(a0),x_vel(a1)
	move.w	d1,x_pos(a1)
	move.w	#$250,y_pos(a1)
	move.b	#-$15,d0
	bsr.w	JmpTo11_PlaySound

return_336B0:
	rts
; ===========================================================================

loc_336B2:
	subq.w	#1,objoff_32(a0)
	bpl.s	loc_33700
	move.w	#$C7,objoff_32(a0)
	subq.b	#1,objoff_36(a0)
	bmi.s	loc_33700
	bsr.w	JmpTo24_SingleObjLoad2
	bne.s	loc_33700
	moveq	#0,d0
	move.w	#$F,d1

loc_336D0:
	move.l	(a0,d0.w),(a1,d0.w)
	addq.w	#4,d0
	dbf	d1,loc_336D0
	move.w	#5,objoff_32(a1)
	move.w	#$200,anim(a1)
	move.w	#$10,d0
	tst.w	x_vel(a1)
	bpl.s	loc_336F4
	neg.w	d0

loc_336F4:
	add.w	d0,x_pos(a1)
	move.b	#-$15,d0
	bsr.w	JmpTo11_PlaySound

loc_33700:
	lea	(off_33712).l,a1
	bsr.w	JmpTo22_AnimateSprite
	bra.w	JmpTo38_MarkObjGone
; ===========================================================================

BranchTo2_JmpTo62_DeleteObject 
	bra.w	JmpTo62_DeleteObject
; ===========================================================================
off_33712:
	dc.w byte_3371E-off_33712
	dc.w byte_33738-off_33712; 1
	dc.w byte_3373B-off_33712; 2
	dc.w byte_3374D-off_33712; 3
	dc.w byte_33750-off_33712; 4
	dc.w byte_33753-off_33712; 5
byte_3371E:
	dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9

	dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,$FF; 16
byte_33738:
	dc.b  $F,  1,$FF
byte_3373B:
	dc.b   1, $D,$11, $E,$12, $F,$13,$10,$14,$14,$10,$13, $F,$12, $E,$11

	dc.b  $D,$FA	; 16
byte_3374D:
	dc.b  $F, $A,$FF
byte_33750:
	dc.b  $F, $B,$FF
byte_33753:
	dc.b  $F,  8,$FF
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj55_MapUnc_33756:	BINCLUDE "mappings/sprite/obj55.bin"
; ===========================================================================

JmpTo41_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo62_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo18_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo38_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo11_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo24_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo22_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo5_RandomNumber 
	jmp	(RandomNumber).l
; ===========================================================================

JmpTo63_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo13_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo8_loc_F626 
	jmp	loc_F626
; ===========================================================================

JmpTo8_loc_F62E 
	jmp	loc_F62E
; ===========================================================================
; loc_338E4:
JmpTo25_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 09 - Sonic in Special Stage
; ----------------------------------------------------------------------------
; Sprite_338EC:
Obj09:
	bsr.w	loc_33908
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_338FE(pc,d0.w),d1
	jmp	off_338FE(pc,d1.w)
; ===========================================================================
off_338FE:
	dc.w loc_3391C-off_338FE
	dc.w loc_339D6-off_338FE; 1
	dc.w loc_33BAE-off_338FE; 2
	dc.w off_338FE-off_338FE; 3
	dc.w loc_33BD8-off_338FE; 4
; ===========================================================================

loc_33908:
	lea	($FFFFDB82).w,a1
	moveq	#$E,d0

loc_3390E:
	move.w	-4(a1),-(a1)
	dbf	d0,loc_3390E
	move.w	(Ctrl_1_Logical).w,-(a1)
	rts
; ===========================================================================

loc_3391C:
	move.b	#2,routine(a0)
	moveq	#0,d0
	move.l	d0,objoff_2A(a0)
	move.w	#$80,d1
	move.w	d1,objoff_2E(a0)
	move.w	d0,objoff_30(a0)
	add.w	($FFFFF73E).w,d0
	move.w	d0,x_pos(a0)
	add.w	($FFFFF740).w,d1
	move.w	d1,y_pos(a0)
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.l	#Obj09_MapUnc_34212,mappings(a0)
	move.w	#$22E5,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.w	#$6E,objoff_34(a0)
	clr.b	($FFFFF742).w
	move.w	#$400,objoff_32(a0)
	move.b	#$40,angle(a0)
	move.b	#1,($FFFFF766).w
	clr.b	objoff_37(a0)
	bclr	#6,status(a0)
	clr.b	collision_property(a0)
	clr.b	respawn_index(a0)
	movea.l	#Object_RAM+$140,a1
	move.b	#$63,(a1) ; load obj63 (shadow) at $FFFFB140
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$18,y_pos(a1)
	move.l	#Obj63_MapUnc_34492,mappings(a1)
	move.w	#$623C,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.l	a0,objoff_38(a1)
	bra.w	loc_33AB2
; ===========================================================================

loc_339D6:
	tst.b	routine_secondary(a0)
	bne.s	loc_33A0E
	lea	(Ctrl_1_Held_Logical).w,a2
	bsr.w	loc_33F8A
	bsr.w	loc_3400A
	bsr.w	loc_33E44
	bsr.w	loc_3404A
	bsr.w	loc_34084
	bsr.w	loc_33B40
	bsr.w	loc_33EA0
	lea	(off_341E4).l,a1
	bsr.w	loc_33F00
	bsr.w	loc_33DFC
	bra.w	loc_33AB2
; ===========================================================================

loc_33A0E:
	bsr.w	loc_33A22
	bsr.w	loc_33E44
	bsr.w	loc_3404A
	bsr.w	loc_34084
	bra.w	loc_33AB2
; ===========================================================================

loc_33A22:
	moveq	#0,d0
	move.b	objoff_36(a0),d0
	addi.b	#8,d0
	move.b	d0,objoff_36(a0)
	bne.s	loc_33A3E
	move.b	#0,routine_secondary(a0)
	move.b	#$1E,respawn_index(a0)

loc_33A3E:
	add.b	angle(a0),d0
	andi.b	#$FC,render_flags(a0)
	subi.b	#$10,d0
	lsr.b	#5,d0
	add.w	d0,d0
	move.b	byte_33A92(pc,d0.w),mapping_frame(a0)
	move.b	byte_33A92+1(pc,d0.w),d0
	or.b	d0,render_flags(a0)
	move.b	objoff_36(a0),d0
	subi.b	#8,d0
	bne.s	return_33A90
	move.b	d0,collision_property(a0)
	cmpa.l	#MainCharacter,a0
	bne.s	loc_33A7C
	tst.w	(Ring_count).w
	beq.s	return_33A90
	bra.s	loc_33A82
; ===========================================================================

loc_33A7C:
	tst.w	(Ring_count_2P).w
	beq.s	return_33A90

loc_33A82:
	bsr.w	JmpTo_sub_6F8E
	bne.s	return_33A90
	move.l	a0,objoff_38(a1)
	move.b	#$5B,(a1) ; load obj5B

return_33A90:
	rts
; ===========================================================================
byte_33A92:
	dc.b   4,  1
	dc.b   0,  0	; 2
	dc.b   4,  0	; 4
	dc.b  $C,  0	; 6
	dc.b   4,  2	; 8
	dc.b   0,  2	; 10
	dc.b   4,  3	; 12
	dc.b  $C,  1	; 14
dword_33AA2:
	dc.l   $FF0000
	dc.l   $FF0B00	; 1
	dc.l   $FF2480	; 2
	dc.l   $FF2E20	; 3
; ===========================================================================

loc_33AB2:
	move.b	respawn_index(a0),d0
	beq.s	loc_33AC6
	subq.b	#1,d0
	move.b	d0,respawn_index(a0)
	andi.b	#1,d0
	beq.s	loc_33AC6
	rts
; ===========================================================================

loc_33AC6:
	bsr.w	JmpTo42_DisplaySprite
	lea	dword_33AA2(pc),a3
	lea	($FFFFF766).w,a4
	move.w	#$5CA0,d4
	moveq	#0,d1

loc_33AD8:
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	cmp.b	(a4),d0
	beq.s	return_33B3E
	move.b	d0,(a4)
	moveq	#0,d6
	cmpi.b	#4,d0
	blt.s	loc_33AFE
	addq.w	#4,d6
	cmpi.b	#$C,d0
	blt.s	loc_33AFE
	addq.w	#4,d6
	cmpi.b	#$10,d0
	blt.s	loc_33AFE
	addq.b	#4,d6

loc_33AFE:
	move.l	(a3,d6.w),d6
	add.w	d1,d0
	add.w	d0,d0
	lea	(Obj09_MapRUnc_345FA).l,a2
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d5
	subq.w	#1,d5
	bmi.s	return_33B3E

loc_33B16:
	moveq	#0,d1
	move.w	(a2)+,d1
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.w	#1,d1
	add.l	d6,d1
	move.w	d4,d2
	add.w	d3,d4
	add.w	d3,d4
	jsr	(QueueDMATransfer).l
	dbf	d5,loc_33B16

return_33B3E:
	rts
; ===========================================================================

loc_33B40:
	lea	(Ctrl_1_Press_Logical).w,a2

loc_33B44:
	move.b	(a2),d0
	andi.b	#$70,d0
	beq.w	return_33BAC
	move.w	#$780,d2
	moveq	#0,d0
	move.b	angle(a0),d0
	addi.b	#$80,d0
	jsr	(CalcSine).l
	muls.w	d2,d1
	asr.l	#8,d1
	add.w	d1,x_vel(a0)
	muls.w	d2,d0
	asr.l	#7,d0
	add.w	d0,y_vel(a0)
	bset	#2,status(a0)
	move.b	#4,routine(a0)
	move.b	#3,anim(a0)
	moveq	#0,d0
	move.b	d0,anim_frame_duration(a0)
	move.b	d0,anim_frame(a0)
	move.b	d0,collision_property(a0)
	tst.b	(System_Stack).w
	bne.s	loc_33B9E
	tst.w	(Player_mode).w
	bne.s	loc_33BA2

loc_33B9E:
	not.b	($FFFFF742).w

loc_33BA2:
	move.w	#$A0,d0
	jsr	(PlaySound).l

return_33BAC:
	rts
; ===========================================================================

loc_33BAE:
	lea	(Ctrl_1_Held_Logical).w,a2
	bsr.w	loc_33C32
	bsr.w	loc_33C06
	bsr.w	loc_33C54
	bsr.w	loc_33DB4
	bsr.w	loc_33E44
	bsr.w	loc_34084
	lea	(off_341E4).l,a1
	bsr.w	loc_33F00
	bra.w	loc_33AB2
; ===========================================================================

loc_33BD8:
	lea	(Ctrl_1_Held_Logical).w,a2
	bsr.w	loc_33C32
	bsr.w	loc_33C06
	bsr.w	loc_33C54
	bsr.w	loc_33DB4
	bsr.w	loc_33E44
	bsr.w	loc_34084
	bsr.w	loc_33EA0
	lea	(off_341E4).l,a1
	bsr.w	loc_33F00
	bra.w	loc_33AB2
; ===========================================================================

loc_33C06:
	move.l	objoff_2A(a0),d2
	move.l	objoff_2E(a0),d3
	move.w	x_vel(a0),d0
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d2
	move.w	y_vel(a0),d0
	addi.w	#$A8,y_vel(a0)
	ext.l	d0
	asl.l	#8,d0
	add.l	d0,d3
	move.l	d2,objoff_2A(a0)
	move.l	d3,objoff_2E(a0)
	rts
; ===========================================================================

loc_33C32:
	move.b	(a2),d0
	btst	#2,d0
	bne.s	loc_33C44
	btst	#3,d0
	bne.w	loc_33C4C
	rts
; ===========================================================================

loc_33C44:
	subi.w	#$40,x_vel(a0)
	rts
; ===========================================================================

loc_33C4C:
	addi.w	#$40,x_vel(a0)
	rts
; ===========================================================================

loc_33C54:
	moveq	#0,d2
	moveq	#0,d3
	move.w	objoff_2E(a0),d2
	bmi.s	loc_33CB4
	move.w	objoff_2A(a0),d3
	bmi.s	loc_33C90
	cmp.w	d2,d3
	bcs.s	loc_33C80
	bne.s	loc_33C76
	tst.w	d3
	bne.s	loc_33C76
	move.b	#$40,angle(a0)
	rts
; ===========================================================================

loc_33C76:
	lsl.l	#5,d2
	divu.w	d3,d2
	move.b	d2,angle(a0)
	rts
; ===========================================================================

loc_33C80:
	lsl.l	#5,d3
	divu.w	d2,d3
	subi.w	#$40,d3
	neg.w	d3
	move.b	d3,angle(a0)
	rts
; ===========================================================================

loc_33C90:
	neg.w	d3
	cmp.w	d2,d3
	bcc.s	loc_33CA4
	lsl.l	#5,d3
	divu.w	d2,d3
	addi.w	#$40,d3
	move.b	d3,angle(a0)
	rts
; ===========================================================================

loc_33CA4:
	lsl.l	#5,d2
	divu.w	d3,d2
	subi.w	#$80,d2
	neg.w	d2
	move.b	d2,angle(a0)
	rts
; ===========================================================================

loc_33CB4:
	neg.w	d2
	move.w	objoff_2A(a0),d3
	bpl.s	loc_33CE0
	neg.w	d3
	cmp.w	d2,d3
	bcs.s	loc_33CD0
	lsl.l	#5,d2
	divu.w	d3,d2
	addi.w	#$80,d2
	move.b	d2,angle(a0)
	rts
; ===========================================================================

loc_33CD0:
	lsl.l	#5,d3
	divu.w	d2,d3
	subi.w	#$C0,d3
	neg.w	d3
	move.b	d3,angle(a0)
	rts
; ===========================================================================

loc_33CE0:
	cmp.w	d2,d3
	bcc.s	loc_33CF2
	lsl.l	#5,d3
	divu.w	d2,d3
	addi.w	#$C0,d3
	move.b	d3,angle(a0)
	rts
; ===========================================================================

loc_33CF2:
	lsl.l	#5,d2
	divu.w	d3,d2
	subi.w	#$100,d2
	neg.w	d2
	move.b	d2,angle(a0)
	rts
; ===========================================================================

loc_33D02:
	moveq	#0,d6
	moveq	#0,d0
	move.w	objoff_2A(a1),d0
	bpl.s	loc_33D10
	st	d6
	neg.w	d0

loc_33D10:
	lsl.l	#7,d0
	divu.w	objoff_34(a1),d0
	move.b	byte_33D32(pc,d0.w),d0
	tst.b	d6
	bne.s	loc_33D24
	subi.b	#$80,d0
	neg.b	d0

loc_33D24:
	tst.w	objoff_2E(a1)
	bpl.s	loc_33D2C
	neg.b	d0

loc_33D2C:
	move.b	d0,angle(a0)
	rts
; ===========================================================================
byte_33D32:
	dc.b $40,$40,$40,$40,$41,$41,$41,$42,$42,$42,$43,$43,$43,$44,$44,$44
	dc.b $45,$45,$45,$46,$46,$46,$47,$47,$47,$48,$48,$48,$48,$49,$49,$49; 16
	dc.b $4A,$4A,$4A,$4B,$4B,$4B,$4C,$4C,$4C,$4D,$4D,$4D,$4E,$4E,$4E,$4F; 32
	dc.b $4F,$50,$50,$50,$51,$51,$51,$52,$52,$52,$53,$53,$53,$54,$54,$54; 48
	dc.b $55,$55,$56,$56,$56,$57,$57,$57,$58,$58,$59,$59,$59,$5A,$5A,$5B; 64
	dc.b $5B,$5B,$5C,$5C,$5D,$5D,$5E,$5E,$5E,$5F,$5F,$60,$60,$61,$61,$62; 80
	dc.b $62,$63,$63,$64,$64,$65,$65,$66,$66,$67,$67,$68,$68,$69,$6A,$6A; 96
	dc.b $6B,$6C,$6C,$6D,$6E,$6E,$6F,$70,$71,$72,$73,$74,$75,$77,$78,$7A; 112
	dc.b $80,  0	; 128
; ===========================================================================

loc_33DB4:
	move.w	objoff_2E(a0),d0
	ble.s	return_33DFA
	muls.w	d0,d0
	move.w	objoff_2A(a0),d1
	muls.w	d1,d1
	add.w	d1,d0
	move.w	objoff_34(a0),d1
	mulu.w	d1,d1
	cmp.l	d1,d0
	bcs.s	return_33DFA
	move.b	#2,routine(a0)
	bclr	#2,status(a0)
	moveq	#0,d0
	move.w	d0,x_vel(a0)
	move.w	d0,y_vel(a0)
	move.w	d0,objoff_14(a0)
	move.b	d0,objoff_37(a0)
	bset	#6,status(a0)
	bsr.w	loc_3404A
	bsr.w	loc_34084

return_33DFA:
	rts
; ===========================================================================

loc_33DFC:
	tst.b	collision_property(a0)
	beq.s	return_33E42
	clr.b	collision_property(a0)
	tst.b	respawn_index(a0)
	bne.s	return_33E42
	clr.b	objoff_14(a0)
	cmpa.l	#MainCharacter,a0
	bne.s	loc_33E24
	st	($FFFFF742).w
	tst.w	(Ring_count).w
	beq.s	loc_33E38
	bra.s	loc_33E2E
; ===========================================================================

loc_33E24:
	clr.b	($FFFFF742).w
	tst.w	(Ring_count_2P).w
	beq.s	loc_33E38

loc_33E2E:
	move.w	#$C6,d0
	jsr	(PlaySound).l

loc_33E38:
	move.b	#2,routine_secondary(a0)
	clr.b	objoff_36(a0)

return_33E42:
	rts
; ===========================================================================

loc_33E44:
	tst.w	(Player_mode).w
	bne.s	return_33E8E
	move.w	objoff_34(a0),d0
	cmpa.l	#MainCharacter,a0
	bne.s	loc_33E5E
	tst.b	($FFFFF742).w
	beq.s	loc_33E6E
	bra.s	loc_33E64
; ===========================================================================

loc_33E5E:
	tst.b	($FFFFF742).w
	bne.s	loc_33E6E

loc_33E64:
	cmpi.w	#$80,d0
	beq.s	return_33E8E
	addq.w	#1,d0
	bra.s	loc_33E76
; ===========================================================================

loc_33E6E:
	cmpi.w	#$6E,d0
	beq.s	return_33E8E
	subq.w	#1,d0

loc_33E76:
	move.w	d0,objoff_34(a0)
	cmpi.w	#$77,d0
	bcc.s	loc_33E88
	move.b	#3,priority(a0)
	rts
; ===========================================================================

loc_33E88:
	move.b	#2,priority(a0)

return_33E8E:
	rts
; ===========================================================================
byte_33E90:
	dc.b   1,  1
	dc.b   0,  0	; 2
	dc.b   1,  0	; 4
	dc.b   2,  0	; 6
	dc.b   1,  2	; 8
	dc.b   0,  2	; 10
	dc.b   1,  3	; 12
	dc.b   2,  1	; 14
; ===========================================================================

loc_33EA0:
	btst	#2,status(a0)
	beq.s	loc_33EB6
	move.b	#3,anim(a0)
	andi.b	#$FC,status(a0)
	rts
; ===========================================================================

loc_33EB6:
	moveq	#0,d0
	move.b	angle(a0),d0
	subi.b	#$10,d0
	lsr.b	#5,d0
	move.b	d0,d1
	add.w	d0,d0
	move.b	byte_33E90(pc,d0.w),d2
	cmp.b	anim(a0),d2
	bne.s	loc_33ED6
	cmp.b	objoff_3F(a0),d1
	beq.s	return_33EFE

loc_33ED6:
	move.b	d1,objoff_3F(a0)
	move.b	d2,anim(a0)
	move.b	byte_33E90+1(pc,d0.w),d0
	andi.b	#$FC,status(a0)
	or.b	d0,status(a0)
	cmpi.b	#1,d1
	beq.s	loc_33EF8
	cmpi.b	#5,d1
	bne.s	return_33EFE

loc_33EF8:
	move.w	#$400,objoff_32(a0)

return_33EFE:
	rts
; ===========================================================================

loc_33F00:
	moveq	#0,d0
	move.b	anim(a0),d0
	cmp.b	next_anim(a0),d0
	beq.s	loc_33F1C
	move.b	#0,anim_frame(a0)
	move.b	d0,next_anim(a0)
	move.b	#0,anim_frame_duration(a0)

loc_33F1C:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_33F88
	add.w	d0,d0
	adda.w	(a1,d0.w),a1
	move.b	($FFFFDB21).w,d0
	lsr.b	#1,d0
	move.b	d0,anim_frame_duration(a0)
	cmpi.b	#0,anim(a0)
	bne.s	loc_33F54
	subi.b	#1,objoff_33(a0)
	bgt.s	loc_33F54
	bchg	#0,status(a0)
	bchg	#0,render_flags(a0)
	move.b	objoff_32(a0),objoff_33(a0)

loc_33F54:
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	1(a1,d1.w),d0
	bpl.s	loc_33F6A
	move.b	#0,anim_frame(a0)
	move.b	1(a1),d0

loc_33F6A:
	andi.b	#$7F,d0
	move.b	d0,mapping_frame(a0)
	move.b	status(a0),d1
	andi.b	#3,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	addq.b	#1,anim_frame(a0)

return_33F88:
	rts
; ===========================================================================

loc_33F8A:
	move.w	objoff_14(a0),d2
	move.b	(a2),d0
	btst	#2,d0
	bne.s	loc_33FDC
	btst	#3,d0
	bne.w	loc_33FEC
	bset	#6,status(a0)
	bne.s	loc_33FAC
	move.b	#$1E,objoff_37(a0)

loc_33FAC:
	move.b	angle(a0),d0
	bmi.s	loc_33FC4
	subi.b	#$38,d0
	cmpi.b	#$10,d0
	bcc.s	loc_33FC4
	move.w	d2,d1
	asr.w	#3,d1
	sub.w	d1,d2
	bra.s	loc_33FCA
; ===========================================================================

loc_33FC4:
	move.w	d2,d1
	asr.w	#3,d1
	sub.w	d1,d2

loc_33FCA:
	move.w	d2,objoff_14(a0)
	move.b	objoff_37(a0),d0
	beq.s	return_33FDA
	subq.b	#1,d0
	move.b	d0,objoff_37(a0)

return_33FDA:
	rts
; ===========================================================================

loc_33FDC:
	addi.w	#$60,d2
	cmpi.w	#$600,d2
	ble.s	loc_33FFA
	move.w	#$600,d2
	bra.s	loc_33FFA
; ===========================================================================

loc_33FEC:
	subi.w	#$60,d2
	cmpi.w	#-$600,d2
	bge.s	loc_33FFA
	move.w	#-$600,d2

loc_33FFA:
	move.w	d2,objoff_14(a0)
	bclr	#6,status(a0)
	clr.b	objoff_37(a0)
	rts
; ===========================================================================

loc_3400A:
	tst.b	objoff_37(a0)
	bne.s	loc_34024
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	#$50,d1
	asr.l	#8,d1
	add.w	d1,objoff_14(a0)

loc_34024:
	move.b	angle(a0),d0
	bpl.s	return_34048
	addi.b	#4,d0
	cmpi.b	#-$78,d0
	bcs.s	return_34048
	move.w	objoff_14(a0),d0
	bpl.s	loc_3403C
	neg.w	d0

loc_3403C:
	cmpi.w	#$100,d0
	bcc.s	return_34048
	move.b	#8,routine(a0)

return_34048:
	rts
; ===========================================================================

loc_3404A:
	moveq	#0,d0
	moveq	#0,d1
	move.w	objoff_14(a0),d2
	bpl.s	loc_3405E
	neg.w	d2
	lsr.w	#8,d2
	sub.b	d2,angle(a0)
	bra.s	loc_34064
; ===========================================================================

loc_3405E:
	lsr.w	#8,d2
	add.b	d2,angle(a0)

loc_34064:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	objoff_34(a0),d1
	asr.l	#8,d1
	move.w	d1,objoff_2A(a0)
	muls.w	objoff_34(a0),d0
	asr.l	#8,d0
	move.w	d0,objoff_2E(a0)
	rts
; ===========================================================================

loc_34084:
	move.w	objoff_2A(a0),d0
	muls.w	#$CC,d0
	asr.l	#8,d0
	add.w	($FFFFF73E).w,d0
	move.w	d0,x_pos(a0)
	move.w	objoff_2E(a0),d0
	add.w	($FFFFF740).w,d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 63 - Character shadow from Special Stage
; ----------------------------------------------------------------------------
; Sprite_340A4:
Obj63:
	movea.l	objoff_38(a0),a1 ; a1=object
	cmpa.l	#MainCharacter,a1
	bne.s	loc_340BC
	movea.l	#MainCharacter,a1 ; a1=character
	bsr.s	loc_340CC
	bra.w	JmpTo42_DisplaySprite
; ===========================================================================

loc_340BC:
	movea.l	#Sidekick,a1 ; a1=object
	bsr.s	loc_340CC
	bsr.w	loc_341BA
	bra.w	JmpTo42_DisplaySprite
; ===========================================================================

loc_340CC:
	cmpi.b	#2,routine(a1)
	beq.w	loc_34108
	bsr.w	loc_33D02
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	muls.w	objoff_34(a1),d1
	muls.w	#$CC,d1
	swap	d1
	add.w	($FFFFF73E).w,d1
	move.w	d1,x_pos(a0)
	muls.w	objoff_34(a1),d0
	asr.l	#8,d0
	add.w	($FFFFF740).w,d0
	move.w	d0,y_pos(a0)
	bra.w	loc_3411A
; ===========================================================================

loc_34108:
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	angle(a1),angle(a0)

loc_3411A:
	moveq	#0,d0
	move.b	angle(a0),d0
	subi.b	#$10,d0
	lsr.b	#5,d0
	move.b	d0,d1
	lsl.w	#3,d0
	lea	word_3417A(pc),a2
	adda.w	d0,a2
	move.w	(a2)+,art_tile(a0)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a0)
	move.w	(a2)+,d0
	add.w	d0,y_pos(a0)
	move.b	(a2)+,mapping_frame(a0)
	move.b	render_flags(a0),d0
	andi.b	#$FC,d0
	or.b	(a2)+,d0
	move.b	d0,render_flags(a0)
	tst.b	angle(a0)
	bpl.s	return_34178
	cmpi.b	#3,d1
	beq.s	loc_34164
	cmpi.b	#7,d1
	bne.s	loc_3416A

loc_34164:
	addi.b	#3,mapping_frame(a0)

loc_3416A:
	move.w	($FFFFF740).w,d1
	sub.w	y_pos(a0),d1
	add.w	d1,d1
	add.w	d1,y_pos(a0)

return_34178:
	rts
; ===========================================================================
word_3417A:
	dc.w $6262,  $14,  $14,	$101
	dc.w $623C,    0,  $18,	   0; 4
	dc.w $6262,$FFEC,  $14,	$100; 8
	dc.w $629C,$FFEC,    0,	$200; 12
	dc.w $6262,$FFEC,$FFEC,	$700; 16
	dc.w $623C,    0,$FFE8,	$900; 20
	dc.w $6262,  $14,$FFEC,	$701; 24
	dc.w $629C,  $14,    0,	$201; 28
; ===========================================================================

loc_341BA:
	cmpi.b	#1,anim(a1)
	bne.s	return_341E0
	move.b	status(a1),d1
	andi.w	#3,d1
	cmpi.b	#2,d1
	bcc.s	return_341E0
	move.b	byte_341E2(pc,d1.w),d0
	ext.w	d0
	add.w	d0,x_pos(a0)
	subi.w	#4,y_pos(a0)

return_341E0:
	rts
; ===========================================================================
; animation script
byte_341E2:
	dc.b   4
	dc.b $FC	; 1
off_341E4:
	dc.w byte_341EE-off_341E4
	dc.w byte_341F4-off_341E4; 1
	dc.w byte_341FE-off_341E4; 2
	dc.w byte_34204-off_341E4; 3
	dc.w byte_34208-off_341E4; 4
byte_341EE:
	dc.b   3,  0,  1,  2,  3,$FF
byte_341F4:
	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF
byte_341FE:
	dc.b   3, $C, $D, $E, $F,$FF
byte_34204:
	dc.b   1,$10,$11,$FF
byte_34208:
	dc.b   3,  0,  4, $C,  4,  0,  4, $C,  4,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings - uses ArtNem_SpecialSonicAndTails
; ----------------------------------------------------------------------------
Obj09_MapUnc_34212:	BINCLUDE "mappings/sprite/obj09.bin"
; ----------------------------------------------------------------------------
; sprite mappings for special stage shadows
; ----------------------------------------------------------------------------
Obj63_MapUnc_34492:	BINCLUDE "mappings/sprite/obj63.bin"
; ----------------------------------------------------------------------------
; dynamic pattern loading cues of some sort (?)
; ----------------------------------------------------------------------------
Obj09_MapRUnc_345FA:	BINCLUDE "mappings/spriteDPLC/obj09.bin"
; ===========================================================================

JmpTo42_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo_sub_6F8E 
	jmp	(sub_6F8E).l
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 10 - Tails in Special Stage
; ----------------------------------------------------------------------------
; Sprite_347EC:
Obj10:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_347FA(pc,d0.w),d1
	jmp	off_347FA(pc,d1.w)
; ===========================================================================
off_347FA:
	dc.w loc_34804-off_347FA
	dc.w loc_34908-off_347FA; 1
	dc.w loc_349F2-off_347FA; 2
	dc.w off_347FA-off_347FA; 3
	dc.w loc_34A24-off_347FA; 4
; ===========================================================================

loc_34804:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.w	d0,objoff_2A(a0)
	move.w	#$80,d1
	move.w	d1,objoff_2E(a0)
	add.w	($FFFFF73E).w,d0
	move.w	d0,x_pos(a0)
	add.w	($FFFFF740).w,d1
	move.w	d1,y_pos(a0)
	move.b	#$E,y_radius(a0)
	move.b	#7,x_radius(a0)
	move.l	#Obj10_MapUnc_34B3E,mappings(a0)
	move.w	#$4300,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#2,priority(a0)
	move.w	#$80,objoff_34(a0)
	tst.w	(Player_mode).w
	beq.s	loc_34864
	move.b	#3,priority(a0)
	move.w	#$6E,objoff_34(a0)

loc_34864:
	move.w	#$400,objoff_32(a0)
	move.b	#$40,angle(a0)
	move.b	#1,($FFFFF7DE).w
	clr.b	collision_property(a0)
	clr.b	respawn_index(a0)
	bsr.w	loc_349C8
	movea.l	#Object_RAM+$180,a1
	move.b	#$63,(a1) ; load obj63 (shadow) at $FFFFB180
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$18,y_pos(a1)
	move.l	#Obj63_MapUnc_34492,mappings(a1)
	move.w	#$623C,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.l	a0,objoff_38(a1)
	movea.l	#Object_RAM+$1C0,a1
	move.b	#$88,(a1) ; load obj88
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	#Obj88_MapUnc_34DA8,mappings(a1)
	move.w	#$4316,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	priority(a0),priority(a1)
	subi.b	#1,priority(a1)
	move.l	a0,objoff_38(a1)
	movea.l	a1,a0
	move.b	#1,($FFFFF7DF).w
	clr.b	respawn_index(a0)
	movea.l	objoff_38(a0),a0 ; load 0bj address
	rts
; ===========================================================================

loc_34908:
	tst.b	routine_secondary(a0)
	bne.s	loc_3495E
	bsr.w	loc_34972
	lea	(Ctrl_2_Held_Logical).w,a2
	tst.w	(Player_mode).w
	beq.s	loc_34920
	lea	(Ctrl_1_Held_Logical).w,a2

loc_34920:
	bsr.w	loc_33F8A
	bsr.w	loc_3400A
	moveq	#1,d0
	bsr.w	loc_33E44
	bsr.w	loc_3404A
	bsr.w	loc_34084
	lea	(Ctrl_2_Press_Logical).w,a2
	tst.w	(Player_mode).w
	beq.s	loc_34944
	lea	(Ctrl_1_Press_Logical).w,a2

loc_34944:
	bsr.w	loc_33B44
	bsr.w	loc_33EA0
	lea	(off_34B1C).l,a1
	bsr.w	loc_33F00
	bsr.w	loc_33DFC
	bra.w	loc_349C8
; ===========================================================================

loc_3495E:
	bsr.w	loc_33A22
	bsr.w	loc_33E44
	bsr.w	loc_3404A
	bsr.w	loc_34084
	bra.w	loc_349C8
; ===========================================================================

loc_34972:
	tst.b	(System_Stack).w
	bne.s	return_3497E
	tst.w	(Player_mode).w
	beq.s	loc_34980

return_3497E:
	rts
; ===========================================================================

loc_34980:
	move.b	(Ctrl_2_Held_Logical).w,d0
	andi.b	#$7F,d0
	beq.s	loc_349A2
	moveq	#0,d0
	moveq	#3,d1
	lea	($FFFFDB62).w,a1

loc_34992:
	move.l	d0,(a1)
	move.l	d0,(a1)
	dbf	d1,loc_34992
	move.w	#$B4,(Tails_control_counter).w
	rts
; ===========================================================================

loc_349A2:
	tst.w	(Tails_control_counter).w
	beq.s	loc_349AE
	subq.w	#1,(Tails_control_counter).w
	rts
; ===========================================================================

loc_349AE:
	lea	($FFFFDB80).w,a1
	move.w	(a1),(Ctrl_2_Logical).w
	rts
; ===========================================================================
dword_349B8:
	dc.l   $FF3060
	dc.l   $FF3800	; 1
	dc.l   $FF4C80	; 2
	dc.l   $FF53C0	; 3
; ===========================================================================

loc_349C8:
	move.b	respawn_index(a0),d0
	beq.s	loc_349DC
	subq.b	#1,d0
	move.b	d0,respawn_index(a0)
	andi.b	#1,d0
	beq.s	loc_349DC
	rts
; ===========================================================================

loc_349DC:
	bsr.w	JmpTo43_DisplaySprite
	lea	dword_349B8(pc),a3
	lea	($FFFFF7DE).w,a4
	move.w	#$6000,d4
	moveq	#$12,d1
	bra.w	loc_33AD8
; ===========================================================================

loc_349F2:
	lea	(Ctrl_2_Held_Logical).w,a2
	tst.w	(Player_mode).w
	beq.s	loc_34A00
	lea	(Ctrl_1_Held_Logical).w,a2

loc_34A00:
	bsr.w	loc_33C32
	bsr.w	loc_33C06
	bsr.w	loc_33DB4
	bsr.w	loc_33E44
	bsr.w	loc_34084
	bsr.w	loc_33C54
	lea	(off_34B1C).l,a1
	bsr.w	loc_33F00
	bra.s	loc_349C8
; ===========================================================================

loc_34A24:
	lea	(Ctrl_2_Held_Logical).w,a2
	tst.w	(Player_mode).w
	beq.s	loc_34A32
	lea	(Ctrl_1_Held_Logical).w,a2

loc_34A32:
	bsr.w	loc_33C32
	bsr.w	loc_33C06
	bsr.w	loc_33C54
	bsr.w	loc_33DB4
	bsr.w	loc_33E44
	bsr.w	loc_34084
	bsr.w	loc_33EA0
	lea	(off_34B1C).l,a1
	bsr.w	loc_33F00
	bra.w	loc_349C8
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 88 - Tails' tails in Special Stage
; ----------------------------------------------------------------------------
; Sprite_34A5C:
Obj88:
	movea.l	objoff_38(a0),a1 ; load obj address of Tails
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.b	render_flags(a1),render_flags(a0)
	move.b	status(a1),status(a0)
	move.b	anim(a1),anim(a0)
	move.b	priority(a1),d0
	subq.b	#1,d0
	move.b	d0,priority(a0)
	cmpi.b	#3,anim(a0)
	bcc.s	return_34A9E
	lea	(off_34D86).l,a1
	bsr.w	JmpTo23_AnimateSprite
	bra.w	loc_34AAC
; ===========================================================================

return_34A9E:
	rts
; ===========================================================================
dword_34AA0:
	dc.l   $FF55C0	; 0
	dc.l   $FF5C60	; 1
	dc.l   $FF63C0	; 2
; ===========================================================================

loc_34AAC:
	movea.l	objoff_38(a0),a1 ; load obj address of Tails
	move.b	respawn_index(a1),d0
	beq.s	loc_34ABE
	andi.b	#1,d0
	beq.s	loc_34ABE
	rts
; ===========================================================================

loc_34ABE:
	bsr.w	JmpTo43_DisplaySprite
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	cmp.b	($FFFFF7DF).w,d0
	beq.s	return_34B1A
	move.b	d0,($FFFFF7DF).w
	moveq	#0,d6
	cmpi.b	#7,d0
	blt.s	loc_34AE4
	addq.w	#4,d6
	cmpi.b	#$E,d0
	blt.s	loc_34AE4
	addq.w	#4,d6

loc_34AE4:
	move.l	dword_34AA0(pc,d6.w),d6
	addi.w	#$24,d0
	add.w	d0,d0
	lea	(Obj09_MapRUnc_345FA).l,a2
	adda.w	(a2,d0.w),a2
	move.w	#$62C0,d2
	moveq	#0,d1
	move.w	(a2)+,d1
	move.w	d1,d3
	lsr.w	#8,d3
	andi.w	#$F0,d3
	addi.w	#$10,d3
	andi.w	#$FFF,d1
	lsl.w	#1,d1
	add.l	d6,d1
	jsr	(QueueDMATransfer).l

return_34B1A:
	rts
; ===========================================================================
off_34B1C:
	dc.w byte_34B24-off_34B1C
	dc.w byte_34B2A-off_34B1C; 1
	dc.w byte_34B34-off_34B1C; 2
	dc.w byte_34B3A-off_34B1C; 3
byte_34B24:
	dc.b   3,  0,  1,  2,  3,$FF
byte_34B2A:
	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF
byte_34B34:
	dc.b   3, $C, $D, $E, $F,$FF
byte_34B3A:
	dc.b   1,$10,$11,$FF
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj10_MapUnc_34B3E:	BINCLUDE "mappings/sprite/obj10.bin"

; animation script
off_34D86:
	dc.w byte_34D8C-off_34D86
	dc.w byte_34D95-off_34D86; 1
	dc.w byte_34D9E-off_34D86; 2
byte_34D8C:	dc.b   3,  0,  1,  2,  3,  4,  5,  6,$FF
byte_34D95:	dc.b   3,  7,  8,  9, $A, $B, $C, $D,$FF
byte_34D9E:	dc.b   3, $E, $F,$10,$11,$12,$13,$14,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings for Tails' tails in special stage
; ----------------------------------------------------------------------------
Obj88_MapUnc_34DA8:	BINCLUDE "mappings/sprite/obj88.bin"
; ===========================================================================

JmpTo43_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo23_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 61 - Bombs from Special Stage
; ----------------------------------------------------------------------------
; Sprite_34EB0:
Obj61:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_34EBE(pc,d0.w),d1
	jmp	off_34EBE(pc,d1.w)
; ===========================================================================
off_34EBE:
	dc.w loc_34EC6-off_34EBE
	dc.w loc_34F06-off_34EBE; 1
	dc.w loc_3533A-off_34EBE; 2
	dc.w loc_34F6A-off_34EBE; 3
; ===========================================================================

loc_34EC6:
	addq.b	#2,routine(a0)
	move.w	#$7F,x_pos(a0)
	move.w	#$58,y_pos(a0)
	move.l	#Obj61_MapUnc_36508,mappings(a0)
	move.w	#$238A,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#2,collision_flags(a0)
	move.b	#-1,($FFFFDB4D).w
	tst.b	angle(a0)
	bmi.s	loc_34F06
	bsr.w	loc_3529C

loc_34F06:

	bsr.w	loc_3512A
	bsr.w	loc_351A0
	lea	(off_364CE).l,a1
	bsr.w	loc_3539E
	tst.b	render_flags(a0)
	bpl.s	return_34F26
	bsr.w	loc_34F28
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

return_34F26:
	rts
; ===========================================================================

loc_34F28:
	move.w	#8,d6
	bsr.w	loc_350A0
	bcc.s	return_34F68
	move.b	#1,$21(a1)
	move.w	#$CB,d0
	jsr	(PlaySoundStereo).l
	move.b	#6,routine(a0)
	move.b	#0,anim_frame(a0)
	move.b	#0,anim_frame_duration(a0)
	move.l	objoff_34(a0),d0
	beq.s	return_34F68
	move.l	#0,objoff_34(a0)
	movea.l	d0,a1 ; a1=object
	st	objoff_2A(a1)

return_34F68:
	rts
; ===========================================================================

loc_34F6A:
	move.b	#$A,anim(a0)
	move.w	#$42B5,art_tile(a0)
	bsr.w	loc_34F90
	bsr.w	loc_3512A
	bsr.w	loc_351A0
	lea	(off_364CE).l,a1
	bsr.w	JmpTo24_AnimateSprite
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_34F90:
	cmpi.w	#4,objoff_30(a0)
	bcc.s	return_34F9E
	move.b	#1,priority(a0)

return_34F9E:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 60 - Rings from Special Stage
; ----------------------------------------------------------------------------
; Sprite_34FA0:
Obj60:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_34FAE(pc,d0.w),d1
	jmp	off_34FAE(pc,d1.w)
; ===========================================================================
off_34FAE:
	dc.w loc_34FB6-off_34FAE
	dc.w loc_34FF0-off_34FAE; 1
	dc.w loc_3533A-off_34FAE; 2
	dc.w loc_35010-off_34FAE; 3
; ===========================================================================

loc_34FB6:
	addq.b	#2,routine(a0)
	move.w	#$7F,x_pos(a0)
	move.w	#$58,y_pos(a0)
	move.l	#Obj5A_Obj5B_Obj60_MapUnc_3632A,mappings(a0)
	move.w	#$6322,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#3,priority(a0)
	move.b	#1,collision_flags(a0)
	tst.b	angle(a0)
	bmi.s	loc_34FF0
	bsr.w	loc_3529C

loc_34FF0:

	bsr.w	loc_3512A
	bsr.w	loc_351A0
	bsr.w	loc_35036
	lea	(off_362D2).l,a1
	bsr.w	loc_3539E
	tst.b	render_flags(a0)
	bmi.w	JmpTo44_DisplaySprite
	rts
; ===========================================================================

loc_35010:
	move.b	#$A,anim(a0)
	move.w	#$477F,art_tile(a0)
	bsr.w	loc_34F90
	bsr.w	loc_3512A
	bsr.w	loc_351A0
	lea	(off_362D2).l,a1
	bsr.w	JmpTo24_AnimateSprite
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_35036:
	move.w	#$A,d6
	bsr.w	loc_350A0
	bcc.s	return_3509E
	cmpa.l	#MainCharacter,a1
	bne.s	loc_3504E
	addq.w	#1,(Ring_count).w
	bra.s	loc_35052
; ===========================================================================

loc_3504E:
	addq.w	#1,(Ring_count_2P).w

loc_35052:
	addq.b	#1,objoff_3E(a1)
	cmpi.b	#$A,objoff_3E(a1)
	blt.s	loc_3507A
	addq.b	#1,objoff_3D(a1)
	move.b	#0,objoff_3E(a1)
	cmpi.b	#$A,objoff_3D(a1)
	blt.s	loc_3507A
	addq.b	#1,objoff_3C(a1)
	move.b	#0,objoff_3D(a1)

loc_3507A:
	move.b	#6,routine(a0)
	move.l	objoff_34(a0),d0
	beq.s	loc_35094
	move.l	#0,objoff_34(a0)
	movea.l	d0,a1 ; a1=object
	st	objoff_2A(a1)

loc_35094:
	move.w	#$B5,d0
	jsr	(PlaySoundStereo).l

return_3509E:
	rts
; ===========================================================================

loc_350A0:
	cmpi.b	#8,anim(a0)
	bne.s	loc_350DC
	tst.b	collision_flags(a0)
	beq.s	loc_350DC
	lea	(MainCharacter).w,a2 ; a2=object (special stage sonic)
	lea	(Sidekick).w,a3 ; a3=object (special stage tails)
	move.w	objoff_34(a2),d0
	cmp.w	objoff_34(a3),d0
	bcs.s	loc_350CE
	movea.l	a3,a1
	bsr.w	loc_350E2
	bcs.s	return_350E0
	movea.l	a2,a1
	bra.w	loc_350E2
; ===========================================================================

loc_350CE:
	movea.l	a2,a1
	bsr.w	loc_350E2
	bcs.s	return_350E0
	movea.l	a3,a1
	bra.w	loc_350E2
; ===========================================================================

loc_350DC:
	move	#0,ccr

return_350E0:
	rts
; ===========================================================================

loc_350E2:
	tst.b	(a1)
	beq.s	loc_3511A
	cmpi.b	#2,routine(a1)
	bne.s	loc_3511A
	tst.b	routine_secondary(a1)
	bne.s	loc_3511A
	move.b	angle(a1),d0
	move.b	angle(a0),d1
	move.b	d1,d2
	add.b	d6,d1
	bcs.s	loc_35110
	sub.b	d6,d2
	bcs.s	loc_35112
	cmp.b	d1,d0
	bcc.s	loc_3511A
	cmp.b	d2,d0
	bcc.s	loc_35120
	bra.s	loc_3511A
; ===========================================================================

loc_35110:
	sub.b	d6,d2

loc_35112:
	cmp.b	d1,d0
	bcs.s	loc_35120
	cmp.b	d2,d0
	bcc.s	loc_35120

loc_3511A:
	move	#0,ccr
	rts
; ===========================================================================

loc_35120:
	clr.b	collision_flags(a0)
	move	#1,ccr
	rts
; ===========================================================================

loc_3512A:
	btst	#7,status(a0)
	bne.s	loc_3516C
	cmpi.b	#4,($FFFFDB0D).w
	bne.s	loc_35146
	subi.l	#$CCCC,objoff_30(a0)
	ble.s	loc_3516C
	bra.s	loc_35150
; ===========================================================================

loc_35146:
	subi.l	#$CCCD,objoff_30(a0)
	ble.s	loc_3516C

loc_35150:
	cmpi.b	#$A,anim(a0)
	beq.s	return_3516A
	move.w	objoff_30(a0),d0
	cmpi.w	#$1D,d0
	ble.s	loc_35164
	moveq	#$1E,d0

loc_35164:
	move.b	byte_35180(pc,d0.w),anim(a0)

return_3516A:
	rts
; ===========================================================================

loc_3516C:
	move.l	(sp)+,d0
	move.l	objoff_34(a0),d0
	beq.w	JmpTo63_DeleteObject
	movea.l	d0,a1 ; a1=object
	st	objoff_2A(a1)
	bra.w	JmpTo63_DeleteObject
; ===========================================================================
byte_35180:
	dc.b   9,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4,  3,  3,  3
	dc.b   2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0; 16
; ===========================================================================

loc_351A0:
	move.w	d7,-(sp)
	moveq	#0,d2
	moveq	#0,d3
	moveq	#0,d4
	moveq	#0,d5
	moveq	#0,d6
	moveq	#0,d7
	movea.l	($FFFFDB82).w,a1
	move.w	objoff_30(a0),d0
	beq.w	loc_35258
	cmp.w	(a1)+,d0
	bgt.w	loc_35258
	subq.w	#1,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	tst.b	($FFFFDB0E).w
	bne.w	loc_35260
	move.b	4(a1,d0.w),d6
	move.b	5(a1,d0.w),d7
	beq.s	loc_351E8
	move.b	angle(a0),d1
	cmp.b	d6,d1
	bcs.s	loc_351E8
	cmp.b	d7,d1
	bcs.s	loc_35258

loc_351E8:
	move.b	(a1,d0.w),d2
	move.b	2(a1,d0.w),d4
	move.b	3(a1,d0.w),d5
	move.b	1(a1,d0.w),d3

loc_351F8:
	bpl.s	loc_35202
	cmpi.b	#$48,d3
	bcs.s	loc_35202
	ext.w	d3

loc_35202:
	move.b	angle(a0),d0
	bsr.w	JmpTo14_CalcSine
	muls.w	d4,d1
	muls.w	d5,d0
	asr.l	#8,d0
	asr.l	#8,d1
	add.w	d2,d1
	add.w	d3,d0
	move.w	d1,x_pos(a0)
	move.w	d0,y_pos(a0)
	move.l	objoff_34(a0),d0
	beq.s	loc_3524E
	movea.l	d0,a1 ; a1=object
	move.b	angle(a0),d0
	bsr.w	JmpTo14_CalcSine
	move.w	d4,d7
	lsr.w	#2,d7
	add.w	d7,d4
	muls.w	d4,d1
	move.w	d5,d7
	asr.w	#2,d7
	add.w	d7,d5
	muls.w	d5,d0
	asr.l	#8,d0
	asr.l	#8,d1
	add.w	d2,d1
	add.w	d3,d0
	move.w	d1,x_pos(a1)
	move.w	d0,y_pos(a1)

loc_3524E:
	ori.b	#$80,render_flags(a0)

loc_35254:
	move.w	(sp)+,d7
	rts
; ===========================================================================

loc_35258:
	andi.b	#$7F,render_flags(a0)
	bra.s	loc_35254
; ===========================================================================

loc_35260:
	move.b	#$80,d1
	move.b	4(a1,d0.w),d6
	move.b	5(a1,d0.w),d7
	beq.s	loc_35282
	sub.w	d1,d6
	sub.w	d1,d7
	neg.w	d6
	neg.w	d7
	move.b	angle(a0),d1
	cmp.b	d7,d1
	bcs.s	loc_35282
	cmp.b	d6,d1
	bcs.s	loc_35258

loc_35282:
	move.b	(a1,d0.w),d2
	move.b	2(a1,d0.w),d4
	move.b	3(a1,d0.w),d5
	subi.w	#$100,d2
	neg.w	d2
	move.b	1(a1,d0.w),d3
	bra.w	loc_351F8
; ===========================================================================

loc_3529C:
	bsr.w	JmpTo_loc_6FA4
	bne.w	return_3532C
	move.l	a0,objoff_34(a1)
	move.b	(a0),(a1)
	move.b	#4,routine(a1)
	move.l	#Obj63_MapUnc_34492,mappings(a1)
	move.w	#$623C,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#5,priority(a1)
	move.b	angle(a0),d0
	cmpi.b	#$10,d0
	bgt.s	loc_352E6
	bset	#0,render_flags(a1)
	move.b	#2,objoff_2B(a1)
	move.l	a1,objoff_34(a0)
	rts
; ===========================================================================

loc_352E6:
	cmpi.b	#$30,d0
	bgt.s	loc_352FE
	bset	#0,render_flags(a1)
	move.b	#1,objoff_2B(a1)
	move.l	a1,objoff_34(a0)
	rts
; ===========================================================================

loc_352FE:
	cmpi.b	#$50,d0
	bgt.s	loc_35310
	move.b	#0,objoff_2B(a1)
	move.l	a1,objoff_34(a0)
	rts
; ===========================================================================

loc_35310:
	cmpi.b	#$70,d0
	bgt.s	loc_35322
	move.b	#1,objoff_2B(a1)
	move.l	a1,objoff_34(a0)
	rts
; ===========================================================================

loc_35322:
	move.b	#2,objoff_2B(a1)
	move.l	a1,objoff_34(a0)

return_3532C:
	rts
; ===========================================================================
	dc.b   0
	dc.b   0	; 1
	dc.b   0	; 2
	dc.b $18	; 3
	dc.b   0	; 4
	dc.b $14	; 5
	dc.b   0	; 6
	dc.b $14	; 7
	dc.b   0	; 8
	dc.b $14	; 9
	dc.b   0	; 10
	dc.b   0	; 11
; ===========================================================================

loc_3533A:
	tst.b	objoff_2A(a0)
	bne.w	BranchTo_JmpTo63_DeleteObject
	movea.l	objoff_34(a0),a1 ; a1=object
	tst.b	render_flags(a1)
	bmi.s	loc_3534E
	rts
; ===========================================================================

loc_3534E:
	moveq	#9,d0
	sub.b	anim(a1),d0
	addi.b	#1,d0
	cmpi.b	#$A,d0
	bne.s	loc_35362
	move.w	#9,d0

loc_35362:
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	moveq	#0,d1
	move.b	objoff_2B(a0),d1
	beq.s	loc_3538A
	cmpi.b	#1,d1
	beq.s	loc_35380
	add.w	d1,d0
	move.w	#$629C,art_tile(a0)
	bra.s	loc_35392
; ===========================================================================

loc_35380:
	add.w	d1,d0
	move.w	#$6262,art_tile(a0)
	bra.s	loc_35392
; ===========================================================================

loc_3538A:
	add.w	d1,d0
	move.w	#$623C,art_tile(a0)

loc_35392:
	move.b	d0,mapping_frame(a0)
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

BranchTo_JmpTo63_DeleteObject 
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_3539E:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_353E8
	moveq	#0,d0
	move.b	anim(a0),d0
	add.w	d0,d0
	adda.w	(a1,d0.w),a1
	move.b	(a1),anim_frame_duration(a0)
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	1(a1,d1.w),d0
	bpl.s	loc_353CA
	move.b	#0,anim_frame(a0)
	move.b	1(a1),d0

loc_353CA:
	andi.b	#$7F,d0
	move.b	d0,mapping_frame(a0)
	move.b	status(a0),d1
	andi.b	#3,d1
	andi.b	#$FC,render_flags(a0)
	or.b	d1,render_flags(a0)
	addq.b	#1,anim_frame(a0)

return_353E8:
	rts
; ===========================================================================
byte_353EA:
	dc.b $38
	dc.b $48	; 1
	dc.b $2A	; 2
	dc.b $56	; 3
	dc.b $1C	; 4
	dc.b $64	; 5
	dc.b  $E	; 6
	dc.b $72	; 7
	dc.b   0	; 8
	dc.b $80	; 9
byte_353F4:
	dc.b $40
	dc.b $30	; 1
	dc.b $50	; 2
	dc.b $20	; 3
	dc.b $60	; 4
	dc.b $10	; 5
	dc.b $70	; 6
	dc.b   0	; 7
	dc.b $80	; 8
	dc.b   0	; 9
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5B - Ring spray/spill in Special Stage
; ----------------------------------------------------------------------------
; Sprite_353FE:
Obj5B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3540C(pc,d0.w),d1
	jmp	off_3540C(pc,d1.w)
; ===========================================================================
off_3540C:
	dc.w loc_35410-off_3540C
	dc.w loc_354E4-off_3540C; 1
; ===========================================================================

loc_35410:
	movea.l	objoff_38(a0),a3
	moveq	#0,d1
	move.b	$3D(a3),d1
	beq.s	loc_35428
	subi.b	#1,$3D(a3)
	move.w	#$A,d1
	bra.s	loc_35458
; ===========================================================================

loc_35428:
	move.b	$3C(a3),d1
	beq.s	loc_35440
	subi.b	#1,$3C(a3)
	move.b	#9,$3D(a3)
	move.w	#$A,d1
	bra.s	loc_35458
; ===========================================================================

loc_35440:
	move.b	$3E(a3),d1
	beq.s	loc_3545C
	move.b	#0,$3E(a3)
	btst	#0,d1
	beq.s	loc_35458
	lea	byte_353F4(pc),a2
	bra.s	loc_3545C
; ===========================================================================

loc_35458:
	lea	byte_353EA(pc),a2

loc_3545C:
	cmpi.b	#9,(a3)
	bne.s	loc_35468
	sub.w	d1,(Ring_count).w
	bra.s	loc_3546C
; ===========================================================================

loc_35468:
	sub.w	d1,(Ring_count_2P).w

loc_3546C:
	move.w	d1,d2
	subq.w	#1,d2
	bmi.w	JmpTo63_DeleteObject
	movea.l	a0,a1
	bra.s	loc_3547E
; ===========================================================================

loc_35478:
	bsr.w	JmpTo2_sub_6F8E
	bne.s	loc_354DE

loc_3547E:
	move.b	#$5B,(a1) ; load obj5B
	move.b	#2,routine(a1)
	move.l	#Obj5A_Obj5B_Obj60_MapUnc_3632A,mappings(a1)
	move.w	#$6322,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#5,priority(a1)
	move.b	#0,collision_flags(a1)
	move.b	#8,anim(a1)
	move.w	8(a3),x_pos(a1)
	move.w	$C(a3),y_pos(a1)
	move.b	$26(a3),d0
	addi.b	#$40,d0
	add.b	(a2)+,d0
	jsr	(CalcSine).l
	muls.w	#$400,d1
	asr.l	#8,d1
	move.w	d1,x_vel(a1)
	muls.w	#$1000,d0
	asr.l	#8,d0
	move.w	d0,y_vel(a1)

loc_354DE:
	dbf	d2,loc_35478
	rts
; ===========================================================================

loc_354E4:
	bsr.w	JmpTo7_ObjectMoveAndFall
	addi.w	#$80,y_vel(a0)
	bsr.w	loc_3551C
	tst.w	x_pos(a0)
	bmi.w	JmpTo63_DeleteObject
	cmpi.w	#$100,x_pos(a0)
	bcc.w	JmpTo63_DeleteObject
	cmpi.w	#$E0,y_pos(a0)
	bgt.w	JmpTo63_DeleteObject
	lea	(off_362D2).l,a1
	bsr.w	JmpTo24_AnimateSprite
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3551C:
	tst.w	y_vel(a0)
	bmi.w	return_35530
	move.b	#0,priority(a0)
	move.b	#9,anim(a0)

return_35530:
	rts
; ===========================================================================
	rts
; ===========================================================================

loc_35534:
	move.w	word_35548(pc,d0.w),(Normal_palette_line4+$16).w
	move.w	word_35548+2(pc,d0.w),(Normal_palette_line4+$18).w
	move.w	word_35548+4(pc,d0.w),(Normal_palette_line4+$1A).w
	rts
; ===========================================================================
word_35548:
	dc.w   $EE,  $88,  $44
	dc.w   $EE,  $CC,  $88	; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5A - Messages/checkpoint from Special Stage
; ----------------------------------------------------------------------------
; Sprite_35554:
Obj5A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_35562(pc,d0.w),d1
	jmp	off_35562(pc,d1.w)
; ===========================================================================
off_35562:
	dc.w loc_35578-off_35562
	dc.w loc_357FE-off_35562; 1
	dc.w loc_35B5A-off_35562; 2
	dc.w loc_359CE-off_35562; 3
	dc.w loc_35B96-off_35562; 4
	dc.w loc_359A6-off_35562; 5
	dc.w loc_359BC-off_35562; 6
	dc.w loc_35706-off_35562; 7
	dc.w loc_357B2-off_35562; 8
	dc.w loc_357D2-off_35562; 9
	dc.w loc_357E8-off_35562; 10
; ===========================================================================

loc_35578:
	tst.b	($FFFFDB95).w
	bne.s	loc_355E0
	movea.l	($FFFFDB28).w,a1
	cmpa.l	#MapSpec_Straight4,a1
	blt.s	return_355DE
	cmpa.l	#MapSpec_Drop1,a1
	bge.s	return_355DE
	moveq	#6,d0
	bsr.s	loc_35534
	st	($FFFFDB98).w
	moveq	#6,d0

loc_3559C:
	bsr.w	JmpTo2_sub_6F8E
	bne.s	loc_355D6
	move.b	#$5A,(a1) ; load obj5A
	move.b	#2,routine(a1)
	move.l	#Obj5A_Obj5B_Obj60_MapUnc_3632A,mappings(a1)
	move.w	#$6322,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#5,priority(a1)
	move.b	d0,objoff_2A(a1)
	move.w	#0,objoff_30(a1)
	move.b	#-1,mapping_frame(a1)

loc_355D6:
	dbf	d0,loc_3559C
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

return_355DE:
	rts
; ===========================================================================

loc_355E0:
	sf	($FFFFDB95).w
	tst.b	(System_Stack).w
	bne.w	JmpTo63_DeleteObject
	sf	($FFFFDBA6).w
	sf	($FFFFDBA7).w
	move.w	#0,($FFFFDBA2).w
	move.b	#0,objoff_3A(a0)
	bra.w	JmpTo63_DeleteObject
; ===========================================================================
byte_35604:
	dc.b   3
	dc.b   4	; 1
	dc.b   5	; 2
	dc.b   0	; 3
	dc.b $FF	; 4
	dc.b $11	; 5
	dc.b   8	; 6
	dc.b   0	; 7
	dc.b   8	; 8
	dc.b   2	; 9
	dc.b $FF	; 10
	dc.b   6	; 11
	dc.b $FF	; 12
	dc.b   0	; 13
word_35612:
	dc.w   $C0
	dc.w   $B8	; 1
	dc.w   $B0	; 2
	dc.w   $A0	; 3
	dc.w   $98	; 4
	dc.w   $88	; 5
; ===========================================================================

loc_3561E:
	st	($FFFFDBA7).w
	bsr.w	JmpTo2_sub_6F8E
	bne.w	return_356E4
	move.l	#Obj5F_MapUnc_72D2,mappings(a1)
	move.w	#$41FA,art_tile(a1)
	move.b	#$5A,(a1) ; load obj5A
	move.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	bset	#6,render_flags(a1)
	move.b	#0,objoff_F(a1)
	move.b	#$E,routine(a1)
	lea	$10(a1),a2
	move.w	#$5A,d1
	move.w	#$38,d2
	moveq	#0,d0
	moveq	#2,d3

loc_3566A:
	move.w	d1,(a2)+
	move.w	d2,(a2)+
	move.w	d0,(a2)+
	subq.w	#8,d1
	dbf	d3,loc_3566A
	lea	byte_35604(pc),a3
	move.w	#$68,d1
	move.w	#$38,d2

loc_35682:
	move.b	(a3)+,d0
	bmi.s	loc_356A4
	bsr.w	JmpTo2_sub_6F8E
	bne.s	return_356E4
	bsr.s	loc_356E6
	move.b	#$10,routine(a1)
	move.w	d1,x_pos(a1)
	move.w	d2,y_pos(a1)
	move.b	d0,mapping_frame(a1)
	addq.w	#8,d1
	bra.s	loc_35682
; ===========================================================================

loc_356A4:
	lea	word_35612(pc),a2

loc_356A8:
	move.b	(a3)+,d0
	bmi.s	loc_356C8
	bsr.w	JmpTo2_sub_6F8E
	bne.s	return_356E4
	bsr.s	loc_356E6
	move.b	#$12,routine(a1)
	move.w	(a2)+,objoff_2A(a1)
	move.w	d2,y_pos(a1)
	move.b	d0,mapping_frame(a1)
	bra.s	loc_356A8
; ===========================================================================

loc_356C8:
	move.b	(a3)+,d0
	bsr.w	JmpTo2_sub_6F8E
	bne.s	return_356E4
	bsr.s	loc_356E6
	move.b	#$14,routine(a1)
	move.w	(a2)+,x_pos(a1)
	move.w	d2,y_pos(a1)
	move.b	d0,mapping_frame(a1)

return_356E4:
	rts
; ===========================================================================

loc_356E6:
	move.b	#$5A,(a1) ; load obj5A
	move.l	#Obj5A_MapUnc_35E1E,mappings(a1)
	move.w	#$41A2,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	rts
; ===========================================================================

loc_35706:
	move.b	($FFFFDBA7).w,($FFFFDBA6).w
	bne.s	return_35714
	bsr.s	loc_35716
	bra.w	loc_357B2
; ===========================================================================

return_35714:
	rts
; ===========================================================================

loc_35716:
	move.w	(Ring_count).w,d0
	cmpi.w	#1,(Player_mode).w
	blt.s	loc_3572A
	beq.s	loc_3572E
	move.w	(Ring_count_2P).w,d0
	bra.s	loc_3572E
; ===========================================================================

loc_3572A:
	add.w	(Ring_count_2P).w,d0

loc_3572E:
	sub.w	($FFFFDB8C).w,d0
	neg.w	d0
	bgt.s	loc_3574E
	moveq	#0,d0
	moveq	#1,d2
	addi.w	#1,($FFFFDBA2).w
	cmpi.w	#$C,($FFFFDBA2).w
	bcs.s	loc_3577A
	st	($FFFFDBA6).w
	bra.s	loc_3577A
; ===========================================================================

loc_3574E:
	moveq	#0,d1
	move.w	d0,d1
	moveq	#0,d0
	cmpi.w	#$64,d1
	blt.s	loc_35764

loc_3575A:
	addi.w	#$100,d0
	subi.w	#$64,d1
	bgt.s	loc_3575A

loc_35764:
	divu.w	#$A,d1
	lsl.w	#4,d1
	or.b	d1,d0
	swap	d1
	or.b	d1,d0
	move.w	#0,($FFFFDBA2).w
	sf	($FFFFDBA6).w

loc_3577A:
	moveq	#1,d2
	lea	$10(a0),a1
	move.w	d0,($FFFFDBA4).w
	move.w	d0,d1
	andi.w	#$F,d1
	move.b	d1,5(a1)
	lsr.w	#4,d0
	beq.s	loc_357AC
	addq.w	#1,d2
	move.w	d0,d1
	andi.w	#$F,d1
	move.b	d1,$B(a1)
	lsr.w	#4,d0
	beq.s	loc_357AC
	addq.w	#1,d2
	andi.w	#$F,d0
	move.b	d0,$11(a1)

loc_357AC:
	move.b	d2,objoff_F(a0)
	rts
; ===========================================================================

loc_357B2:
	tst.b	($FFFFDBA0).w
	bne.w	return_357D0
	tst.b	($FFFFDBA6).w
	bne.s	return_357D0
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	cmpi.b	#6,d0
	bcs.w	JmpTo44_DisplaySprite

return_357D0:
	rts
; ===========================================================================

loc_357D2:
	moveq	#0,d0
	cmpi.w	#2,($FFFFDBA4).w
	bcc.s	loc_357DE
	moveq	#-8,d0

loc_357DE:
	add.w	objoff_2A(a0),d0
	move.w	d0,x_pos(a0)
	bra.s	loc_357B2
; ===========================================================================

loc_357E8:
	moveq	#0,d0
	cmpi.w	#2,($FFFFDBA4).w
	bcc.s	loc_357B2
	rts
; ===========================================================================
byte_357F4:
	dc.b   0
	dc.b   1	; 1
	dc.b   1	; 2
	dc.b   1	; 3
	dc.b   2	; 4
	dc.b   4	; 5
	dc.b   6	; 6
	dc.b   8	; 7
	dc.b   9	; 8
	dc.b $FF	; 9
; ===========================================================================

loc_357FE:
	cmpi.b	#4,($FFFFDB0D).w
	bne.s	loc_3583C
	move.w	objoff_2C(a0),d0
	move.b	byte_357F4(pc,d0.w),mapping_frame(a0)
	bmi.w	loc_358C4
	addi.w	#1,objoff_2C(a0)
	moveq	#0,d0
	move.b	objoff_2A(a0),d0
	add.w	d0,d0
	add.w	objoff_30(a0),d0
	move.b	byte_35846(pc,d0.w),1+x_pos(a0)
	move.b	byte_35846+1(pc,d0.w),1+y_pos(a0)
	addi.w	#$E,objoff_30(a0)
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3583C:
	tst.b	mapping_frame(a0)
	bpl.w	JmpTo44_DisplaySprite
	rts
; ===========================================================================
byte_35846:
	dc.b $F6,$F6
	dc.b $70,$5E	; 2
	dc.b $76,$58	; 4
	dc.b $7E,$56	; 6
	dc.b $88,$58	; 8
	dc.b $8E,$5E	; 10
	dc.b $F6,$F6	; 12
	dc.b $F6,$F6	; 14
	dc.b $6D,$5A	; 16
	dc.b $74,$54	; 18
	dc.b $7E,$50	; 20
	dc.b $8A,$54	; 22
	dc.b $92,$5A	; 24
	dc.b $F6,$F6	; 26
	dc.b $F6,$F6	; 28
	dc.b $6A,$58	; 30
	dc.b $72,$50	; 32
	dc.b $7E,$4C	; 34
	dc.b $8C,$50	; 36
	dc.b $94,$58	; 38
	dc.b $F6,$F6	; 40
	dc.b $F6,$F6	; 42
	dc.b $68,$56	; 44
	dc.b $70,$4C	; 46
	dc.b $7E,$48	; 48
	dc.b $8E,$4C	; 50
	dc.b $96,$56	; 52
	dc.b $F6,$F6	; 54
	dc.b $62,$5E	; 56
	dc.b $66,$50	; 58
	dc.b $70,$46	; 60
	dc.b $7E,$42	; 62
	dc.b $8E,$46	; 64
	dc.b $98,$50	; 66
	dc.b $9C,$5E	; 68
	dc.b $5C,$5A	; 70
	dc.b $62,$4A	; 72
	dc.b $70,$3E	; 74
	dc.b $7E,$38	; 76
	dc.b $8E,$3E	; 78
	dc.b $9C,$4A	; 80
	dc.b $A2,$5A	; 82
	dc.b $54,$54	; 84
	dc.b $5A,$3E	; 86
	dc.b $6A,$30	; 88
	dc.b $7E,$2A	; 90
	dc.b $94,$30	; 92
	dc.b $A4,$3E	; 94
	dc.b $AA,$54	; 96
	dc.b $42,$4A	; 98
	dc.b $4C,$28	; 100
	dc.b $62,$12	; 102
	dc.b $7E, $A	; 104
	dc.b $9C,$12	; 106
	dc.b $B2,$28	; 108
	dc.b $BC,$4A	; 110
	dc.b $16,$26	; 112
	dc.b $28,$FC	; 114
	dc.b $EC,$EC	; 116
	dc.b $EC,$EC	; 118
	dc.b $EC,$EC	; 120
	dc.b $D6,$FC	; 122
	dc.b $E8,$26	; 124
; ===========================================================================

loc_358C4:
	cmpi.w	#$E8,x_pos(a0)
	bne.w	JmpTo63_DeleteObject
	moveq	#0,d0
	bsr.w	loc_35534
	sf	($FFFFDB98).w
	st	($FFFFDBA0).w
	tst.b	(System_Stack).w
	beq.w	loc_35978
	move.w	#$A1,d0
	jsr	(PlaySound).l
	addi.b	#$10,($FFFFDB93).w
	moveq	#0,d6
	addi.b	#1,($FFFFFE17).w
	move.w	#$C,d0
	move.w	(Ring_count).w,d2
	cmp.w	(Ring_count_2P).w,d2
	bgt.s	loc_3592A
	beq.s	loc_35942
	subi.b	#$10,($FFFFDB93).w
	addi.b	#1,($FFFFDB93).w
	move.w	#$E,d0
	tst.b	(Graphics_Flags).w
	bpl.s	loc_35926
	move.w	#$14,d0

loc_35926:
	move.w	#$2000,d6

loc_3592A:
	move.w	#$80,d3
	bsr.w	loc_35AB6
	add.w	d6,art_tile(a1)
	add.w	d6,2(a2)
	bsr.w	loc_35DAA
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_35942:
	subi.b	#$10,($FFFFDB93).w
	move.w	#$10,d0
	bsr.w	loc_35DAA
	cmpi.b	#3,($FFFFFE17).w
	beq.s	loc_35966
	move.w	#$46,objoff_2A(a0)
	move.b	#$A,routine(a0)
	rts
; ===========================================================================

loc_35966:
	bsr.w	loc_35A7A
	move.w	#$46,objoff_2A(a0)
	move.b	#$C,routine(a0)
	rts
; ===========================================================================

loc_35978:
	move.w	#6,d1
	move.w	#$ED,d0
	move.w	(Ring_count).w,d2
	add.w	(Ring_count_2P).w,d2
	cmp.w	($FFFFDB8C).w,d2
	blt.s	loc_35996
	move.w	#4,d1
	move.w	#$A1,d0

loc_35996:
	jsr	(PlaySound).l
	move.w	d1,d0
	bsr.w	loc_35D52
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_359A6:
	subi.w	#1,objoff_2A(a0)
	beq.s	loc_359B0
	rts
; ===========================================================================

loc_359B0:
	move.w	#$A,d0
	bsr.w	loc_35DAA
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_359BC:
	subi.w	#1,objoff_2A(a0)
	beq.s	loc_359C6
	rts
; ===========================================================================

loc_359C6:
	st	($FFFFDB86).w
	bra.w	loc_361CC
; ===========================================================================

loc_359CE:
	cmpi.b	#$15,mapping_frame(a0)
	bne.s	loc_35A1A
	move.w	objoff_30(a0),d0
	tst.b	objoff_2E(a0)
	bne.s	loc_359FE
	subi.w	#1,y_pos(a0)
	subi.w	#4,d0
	cmp.w	y_pos(a0),d0
	blt.s	loc_35A1A
	addi.w	#1,d0
	move.w	d0,y_pos(a0)
	st	objoff_2E(a0)
	bra.s	loc_35A1A
; ===========================================================================

loc_359FE:
	addi.w	#1,y_pos(a0)
	addi.w	#4,d0
	cmp.w	y_pos(a0),d0
	bgt.s	loc_35A1A
	subi.w	#1,d0
	move.w	d0,y_pos(a0)
	sf	objoff_2E(a0)

loc_35A1A:
	subi.w	#1,objoff_2A(a0)
	bne.w	JmpTo44_DisplaySprite
	tst.b	objoff_2F(a0)
	beq.s	loc_35A42

loc_35A2A:
	move.w	#$F9,d0
	jsr	(PlayMusic).l
	move.w	#$30,objoff_2A(a0)
	move.b	#$C,routine(a0)
	rts
; ===========================================================================

loc_35A42:
	cmpi.b	#$15,mapping_frame(a0)
	bne.w	JmpTo63_DeleteObject
	tst.w	objoff_30(a0)
	beq.w	JmpTo63_DeleteObject
	tst.b	(System_Stack).w
	beq.s	loc_35A72
	bsr.w	loc_35A7A
	cmpi.b	#3,($FFFFFE17).w
	beq.s	loc_35A2A
	move.w	#$A,d0
	bsr.w	loc_35DAA
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_35A72:
	bsr.w	loc_35CE2
	bra.w	JmpTo63_DeleteObject
; ===========================================================================

loc_35A7A:
	lea	($FFFFFFA0).w,a3
	moveq	#0,d0
	move.b	($FFFFFE17).w,d0
	subq.w	#1,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	(Ring_count).w,(a3,d0.w)
	move.w	(Ring_count_2P).w,2(a3,d0.w)
	move.w	#0,(Ring_count).w
	move.w	#0,(Ring_count_2P).w
	moveq	#0,d0
	move.w	d0,(MainCharacter+jumping).w
	move.b	d0,(MainCharacter+layer).w
	move.w	d0,(Sidekick+jumping).w
	move.b	d0,(Sidekick+layer).w
	rts
; ===========================================================================

loc_35AB6:
	move.w	#$48,d4
	tst.b	(System_Stack).w
	beq.s	loc_35AC4
	move.w	#$1C,d4

loc_35AC4:
	bsr.w	JmpTo2_sub_6F8E
	bne.w	return_35B58
	move.b	#$5A,(a1) ; load obj5A
	move.b	#6,routine(a1)
	move.l	#Obj5A_MapUnc_35E1E,mappings(a1)
	move.w	#$21A2,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	move.w	d3,x_pos(a1)
	move.w	d4,y_pos(a1)
	move.w	#$46,objoff_2A(a1)
	move.b	#$14,mapping_frame(a1)
	movea.l	a1,a2
	bsr.w	JmpTo2_sub_6F8E
	bne.s	return_35B58
	move.b	#$5A,(a1) ; load obj5A
	move.b	#6,routine(a1)
	move.l	#Obj5A_MapUnc_35E1E,mappings(a1)
	move.w	#$21A2,art_tile(a1)
	move.b	#4,render_flags(a1)
	move.b	#0,priority(a1)
	move.w	d3,x_pos(a1)
	move.w	d4,y_pos(a1)
	move.w	d4,objoff_30(a1)
	move.w	#$46,objoff_2A(a1)
	move.b	#$15,mapping_frame(a1)
	cmpi.w	#6,d0
	bne.s	return_35B58
	st	objoff_2F(a1)
	bset	#1,render_flags(a1)

return_35B58:
	rts
; ===========================================================================

loc_35B5A:
	subi.w	#1,objoff_2A(a0)
	bne.w	JmpTo44_DisplaySprite
	cmpi.b	#$13,mapping_frame(a0)
	bgt.w	JmpTo63_DeleteObject
	move.b	#8,routine(a0)
	move.w	#8,objoff_14(a0)
	move.w	x_pos(a0),d1
	subi.w	#$80,d1
	move.w	y_pos(a0),d2
	subi.w	#$70,d2
	bsr.w	JmpTo_CalcAngle
	move.b	d0,angle(a0)
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

; this makes special stage messages like "most rings wins!" fly off the screen 

loc_35B96:
	moveq	#0,d0
	move.b	angle(a0),d0
	bsr.w	JmpTo14_CalcSine
	muls.w	objoff_14(a0),d0
	muls.w	objoff_14(a0),d1
	asr.w	#8,d0
	asr.w	#8,d1
	add.w	d1,x_pos(a0)
	add.w	d0,y_pos(a0)
	cmpi.w	#0,x_pos(a0)
	blt.w	JmpTo63_DeleteObject
	cmpi.w	#$100,x_pos(a0)
	bgt.w	JmpTo63_DeleteObject
	cmpi.w	#0,y_pos(a0)
	blt.w	JmpTo63_DeleteObject
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_35BD6:
	bsr.w	JmpTo_loc_6FA4
	bne.s	return_35C12
	move.b	d0,mapping_frame(a1)
	move.l	#Obj5F_MapUnc_72D2,mappings(a1)
	move.w	#$41FA,art_tile(a1)
	move.b	#$5A,(a1) ; load obj5A
	move.b	#4,routine(a1)
	move.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	move.w	d1,x_pos(a1)
	move.w	d2,y_pos(a1)
	move.w	#$46,objoff_2A(a1)

return_35C12:
	rts
; ===========================================================================

loc_35C14:
	lea	off_35C62(pc),a3
	adda.w	(a3,d0.w),a3

loc_35C1C:
	move.b	(a3)+,d0
	bmi.s	return_35C60
	bsr.w	JmpTo_loc_6FA4
	bne.s	return_35C60
	move.b	d0,mapping_frame(a1)
	move.l	#Obj5A_MapUnc_35E1E,mappings(a1)
	move.w	#$41A2,art_tile(a1)
	move.b	#$5A,(a1) ; load obj5A
	move.b	#4,routine(a1)
	move.b	#4,render_flags(a1)
	move.b	#1,priority(a1)
	move.w	d1,x_pos(a1)
	move.w	d2,y_pos(a1)
	move.w	#$46,objoff_2A(a1)
	addq.w	#8,d1
	bra.s	loc_35C1C
; ===========================================================================

return_35C60:
	rts
; ===========================================================================
; animation script
off_35C62:
	dc.w byte_35C86-off_35C62
	dc.w byte_35C8A-off_35C62; 1
	dc.w byte_35C90-off_35C62; 2
	dc.w byte_35C96-off_35C62; 3
	dc.w byte_35C9A-off_35C62; 4
	dc.w byte_35CA1-off_35C62; 5
	dc.w byte_35CA8-off_35C62; 6
	dc.w byte_35CAD-off_35C62; 7
	dc.w byte_35CB3-off_35C62; 8
	dc.w byte_35CB9-off_35C62; 9
	dc.w byte_35CBF-off_35C62; 10
	dc.w byte_35CC4-off_35C62; 11
	dc.w byte_35CC8-off_35C62; 12
	dc.w byte_35CCE-off_35C62; 13
	dc.w byte_35CD3-off_35C62; 14
	dc.w byte_35CD5-off_35C62; 15
	dc.w byte_35CD9-off_35C62; 16
	dc.w byte_35CDB-off_35C62; 17
byte_35C86:
	dc.b   0,  1,  2,$FF
byte_35C8A:
	dc.b   3,  4,  5,  0,  6,$FF
byte_35C90:
	dc.b   7,  8,  8,  9,$11,$FF
byte_35C96:
	dc.b   5,  8,  2,$FF
byte_35C9A:
	dc.b   1,  5,  8, $A,  0, $B,$FF
byte_35CA1:
	dc.b  $C,  9, $D, $E,  1,  3,$FF
byte_35CA8:
	dc.b  $F,  8,  6,  2,$FF
byte_35CAD:
	dc.b $10,  4,  5,  6,$11,$FF
byte_35CB3:
	dc.b   6,  8,  5,  4,  7,$FF
byte_35CB9:
	dc.b  $F,  4,  9,  1,  6,$FF
byte_35CBF:
	dc.b   2,  4,  1,$11,$FF
byte_35CC4:
	dc.b $10,  4,  5,$FF
byte_35CC8:
	dc.b   2,$10,  4,  7,  1,$FF
byte_35CCE:
	dc.b  $D,  9,  9,$11,$FF
byte_35CD3:
	dc.b $11,$FF
byte_35CD5:
	dc.b $12,$12,$12,$FF
byte_35CD9:
	dc.b $13,$FF
byte_35CDB:
	dc.b   2, $D,  4,  9,  6,$FF
	even
; ===========================================================================

loc_35CE2:
	moveq	#0,d0
	move.w	#$54,d1
	move.w	#$6C,d2
	bsr.w	loc_35C14
	bsr.w	JmpTo_loc_76FA
	move.w	d1,d4
	move.w	d2,d5
	movea.w	d2,a3
	move.w	#$80,d1
	cmpi.w	#2,d2
	beq.s	loc_35D08
	subi.w	#8,d1

loc_35D08:
	move.w	#$6C,d2

loc_35D0C:
	move.w	d4,d6
	lsr.w	#4,d4
	andi.w	#$F,d6
	move.b	d6,d0
	swap	d5
	bsr.w	loc_35BD6
	subi.w	#8,d1
	swap	d5
	dbf	d5,loc_35D0C
	moveq	#2,d0
	lea	(off_35DDE).l,a2
	adda.w	(a2,d0.w),a2
	move.w	#$6C,d2
	move.w	#$84,d1
	cmpa.w	#2,a3
	bne.s	loc_35D44
	addi.w	#8,d1

loc_35D44:
	moveq	#0,d0
	move.b	(a2)+,d0
	bmi.s	return_35D50
	bsr.w	loc_35C14
	bra.s	loc_35D44
; ===========================================================================

return_35D50:
	rts
; ===========================================================================

loc_35D52:
	move.w	#$80,d3
	bsr.w	loc_35AB6
	cmpi.w	#1,(Player_mode).w
	ble.s	loc_35D6E
	addi.w	#$2000,2(a1)
	addi.w	#$2000,2(a2)

loc_35D6E:
	move.w	#$74,d1
	move.w	#$68,d2
	lea	(off_35DDE).l,a2
	adda.w	(a2,d0.w),a2
	cmpi.b	#4,d0
	beq.s	loc_35D8A
	move.w	#$5E,d1

loc_35D8A:
	moveq	#0,d0
	move.b	(a2)+,d0
	bmi.s	return_35DA8
	cmpi.b	#2,d0
	bne.s	loc_35D9E
	move.w	#$5E,d1
	move.w	#$7E,d2

loc_35D9E:
	bsr.w	loc_35C14
	addi.w	#8,d1
	bra.s	loc_35D8A
; ===========================================================================

return_35DA8:
	rts
; ===========================================================================

loc_35DAA:
	move.w	d0,d3
	subq.w	#8,d3
	lsr.w	#1,d3
	moveq	#0,d1
	move.b	byte_35DD6(pc,d3.w),d1
	move.w	#$48,d2
	lea	(off_35DDE).l,a2
	adda.w	(a2,d0.w),a2

loc_35DC4:
	moveq	#0,d0
	move.b	(a2)+,d0
	bmi.s	return_35DD4
	bsr.w	loc_35C14
	addi.w	#8,d1
	bra.s	loc_35DC4
; ===========================================================================

return_35DD4:
	rts
; ===========================================================================
byte_35DD6:
	dc.b $48
	dc.b $44	; 1
	dc.b $58	; 2
	dc.b $58	; 3
	dc.b $74	; 4
	dc.b $3C	; 5
	dc.b $58	; 6
	dc.b   0	; 7

; animation script
off_35DDE:
	dc.w byte_35DF6-off_35DDE
	dc.w byte_35DF7-off_35DDE; 1
	dc.w byte_35DFA-off_35DDE; 2
	dc.w byte_35DFC-off_35DDE; 3
	dc.w byte_35E01-off_35DDE; 4
	dc.w byte_35E05-off_35DDE; 5
	dc.w byte_35E09-off_35DDE; 6
	dc.w byte_35E0C-off_35DDE; 7
	dc.w byte_35E0F-off_35DDE; 8
	dc.w byte_35E11-off_35DDE; 9
	dc.w byte_35E16-off_35DDE; 10
	dc.w byte_35E19-off_35DDE; 11
byte_35DF6:	dc.b $FF
byte_35DF7:	dc.b   2,$1C,$FF
byte_35DFA:	dc.b   4,$FF
byte_35DFC:	dc.b   6,  8,  2,$1E,$FF
byte_35E01:	dc.b  $A,$20, $A,$FF
byte_35E05:	dc.b  $C,  2, $E,$FF
byte_35E09:	dc.b $10, $E,$FF
byte_35E0C:	dc.b $12, $E,$FF
byte_35E0F:	dc.b $14,$FF
byte_35E11:	dc.b $16,$18,$16,$1A,$FF
byte_35E16:	dc.b $22, $E,$FF
byte_35E19:	dc.b   2,$24,$26,$1C,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj5A_MapUnc_35E1E:	BINCLUDE "mappings/sprite/obj5A.bin"
; ===========================================================================

loc_35F76:
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	move.w	word_35F92(pc,d0.w),(Normal_palette_line4+$16).w
	move.w	word_35F92+2(pc,d0.w),(Normal_palette_line4+$18).w
	move.w	word_35F92+4(pc,d0.w),(Normal_palette_line4+$1A).w
	rts
; ===========================================================================
; Special Stage Chaos Emerald palette
word_35F92:	BINCLUDE	"art/palettes/SS Emerald.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 59 - Emerald from Special Stage
; ----------------------------------------------------------------------------
; Sprite_35FBC:
Obj59:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_35FCA(pc,d0.w),d1
	jmp	off_35FCA(pc,d1.w)
; ===========================================================================
off_35FCA:
	dc.w loc_35FD4-off_35FCA
	dc.w loc_36022-off_35FCA
	dc.w loc_3533A-off_35FCA
	dc.w loc_36160-off_35FCA
	dc.w loc_36172-off_35FCA
; ===========================================================================

loc_35FD4:
	st	($FFFFDBA0).w
	st	($FFFFDB87).w
	subi.w	#1,objoff_2A(a0)
	cmpi.w	#-$3C,objoff_2A(a0)
	beq.s	loc_35FEC
	rts
; ===========================================================================

loc_35FEC:
	moveq	#0,d0
	move.b	(Current_Special_Stage).w,d0
	bsr.s	loc_35F76
	addq.b	#2,routine(a0)
	move.l	#Obj59_MapUnc_3625A,mappings(a0)
	move.w	#$6174,art_tile(a0)
	move.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.w	#$36,objoff_30(a0)
	move.b	#$40,angle(a0)
	bsr.w	loc_3529C

loc_36022:
	bsr.w	loc_360F0
	bsr.w	loc_3512A
	bsr.w	loc_3603C
	lea	(off_36228).l,a1
	bsr.w	loc_3539E
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3603C:
	move.w	d7,-(sp)
	moveq	#0,d2
	moveq	#0,d3
	moveq	#0,d4
	moveq	#0,d5
	moveq	#0,d6
	moveq	#0,d7
	movea.l	($FFFFDB82).w,a1
	adda.l	#2,a1
	move.w	objoff_30(a0),d0
	subq.w	#1,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	move.b	(a1,d0.w),d2
	move.b	1(a1,d0.w),d3
	move.b	2(a1,d0.w),d4
	move.b	3(a1,d0.w),d5
	move.w	d5,d6
	swap	d5
	move.w	d6,d5
	move.w	d4,d6
	swap	d4
	move.w	d6,d4
	bpl.s	loc_36088
	cmpi.b	#$48,d3
	bcs.s	loc_36088
	ext.w	d3

loc_36088:
	move.w	d4,d6
	add.w	d4,d4
	add.w	d6,d4
	lsr.w	#2,d4
	move.w	d5,d6
	add.w	d5,d5
	add.w	d6,d5
	lsr.w	#2,d5
	move.b	angle(a0),d0
	bsr.w	JmpTo14_CalcSine
	muls.w	d4,d1
	muls.w	d5,d0
	asr.l	#8,d0
	asr.l	#8,d1
	add.w	d2,d1
	add.w	d3,d0
	move.w	d1,x_pos(a0)
	move.w	d0,y_pos(a0)
	move.b	d1,objoff_3A(a0)
	move.b	d0,objoff_3B(a0)
	swap	d4
	swap	d5
	movea.l	objoff_34(a0),a1 ; a1=object
	move.b	angle(a0),d0
	bsr.w	JmpTo14_CalcSine
	move.w	d4,d6
	lsr.w	#2,d6
	add.w	d6,d4
	muls.w	d4,d1
	move.w	d5,d6
	asr.w	#2,d6
	add.w	d6,d5
	muls.w	d5,d0
	asr.l	#8,d0
	asr.l	#8,d1
	add.w	d2,d1
	add.w	d3,d0
	move.w	d1,x_pos(a1)
	move.w	d0,y_pos(a1)
	move.w	(sp)+,d7
	rts
; ===========================================================================

loc_360F0:
	cmpi.b	#3,anim(a0)
	bcs.s	return_36140
	tst.b	objoff_3E(a0)
	bne.s	loc_3610C
	move.w	#$F9,d0
	jsr	(PlayMusic).l
	st	objoff_3E(a0)

loc_3610C:
	cmpi.b	#6,anim(a0)
	bcs.s	return_36140
	move.w	(Ring_count).w,d2
	add.w	(Ring_count_2P).w,d2
	cmp.w	($FFFFDB8C).w,d2
	blt.s	loc_36142
	cmpi.b	#9,anim(a0)
	bcs.s	return_36140
	move.w	#$63,objoff_2A(a0)
	move.b	#8,routine(a0)
	move.w	#$9D,d0
	jsr	(PlayMusic).l

return_36140:
	rts
; ===========================================================================

loc_36142:
	move.l	#0,($FFFFDB12).w
	move.b	#6,routine(a0)
	move.w	#$4F,objoff_2A(a0)
	move.w	#6,d0
	bsr.w	loc_35D6E
	rts
; ===========================================================================

loc_36160:
	subi.w	#1,objoff_2A(a0)
	bpl.w	JmpTo44_DisplaySprite
	st	($FFFFDB86).w
	bra.w	loc_361CC
; ===========================================================================

loc_36172:
	subi.w	#1,objoff_2A(a0)
	bpl.s	loc_361A4
	moveq	#0,d0
	move.b	(Current_Special_Stage).w,d0
	lea	(Got_Emeralds_array).w,a0
	st	(a0,d0.w)
	st	(Got_Emerald).w
	addi.b	#1,(Current_Special_Stage).w
	addi.b	#1,(Emerald_count).w
	st	($FFFFDB86).w
	bsr.w	loc_361CC
	move.l	(sp)+,d0
	rts
; ===========================================================================

loc_361A4:
	addi.b	#1,objoff_3C(a0)
	moveq	#0,d0
	moveq	#0,d2
	move.b	objoff_3B(a0),d2
	move.b	objoff_3C(a0),d0
	lsr.w	#2,d0
	andi.w	#3,d0
	add.b	byte_361C8(pc,d0.w),d2
	move.w	d2,y_pos(a0)
	bra.w	JmpTo44_DisplaySprite
; ===========================================================================
byte_361C8:
	dc.b $FF
	dc.b   0	; 1
	dc.b   1	; 2
	dc.b   0	; 3
; ===========================================================================

loc_361CC:
	movea.l	#$FFB000,a1
	move.w	#$1FF,d0
	moveq	#0,d1

loc_361D8:
	move.l	d1,(a1)+
	move.l	d1,(a1)+
	move.l	d1,(a1)+
	move.l	d1,(a1)+
	dbf	d0,loc_361D8

	clearRAM Sprite_Table,$284

	rts
; ===========================================================================
	; unused/dead code ; a0=object
	cmpi.b	#$B,($FFFFDB0D).w
	bcs.s	loc_36208
	subi.l	#$4445,objoff_30(a0)
	bra.s	loc_36210
; ---------------------------------------------------------------------------
loc_36208:
	subi.l	#$4444,objoff_30(a0)
loc_36210:
	move.w	objoff_30(a0),d0
	cmpi.w	#$1D,d0
	ble.s	+
	moveq	#$1E,d0
+
	lea	byte_35180(pc),a1
	move.b	(a1,d0.w),anim(a0)
	rts
	; end of unused code

; ===========================================================================
; animation script for object 59
off_36228:
	dc.w byte_3623C-off_36228
	dc.w byte_3623F-off_36228; 1
	dc.w byte_36242-off_36228; 2
	dc.w byte_36245-off_36228; 3
	dc.w byte_36248-off_36228; 4
	dc.w byte_3624B-off_36228; 5
	dc.w byte_3624E-off_36228; 6
	dc.w byte_36251-off_36228; 7
	dc.w byte_36254-off_36228; 8
	dc.w byte_36257-off_36228; 9
byte_3623C:
	dc.b  $B,  0,$FF
byte_3623F:
	dc.b  $B,  1,$FF
byte_36242:
	dc.b  $B,  2,$FF
byte_36245:
	dc.b  $B,  3,$FF
byte_36248:
	dc.b  $B,  4,$FF
byte_3624B:
	dc.b  $B,  5,$FF
byte_3624E:
	dc.b  $B,  6,$FF
byte_36251:
	dc.b  $B,  7,$FF
byte_36254:
	dc.b  $B,  8,$FF
byte_36257:
	dc.b  $B,  9,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj59_MapUnc_3625A:	BINCLUDE "mappings/sprite/obj59.bin"

; animation script for object 5B:
off_362D2:
	dc.w byte_362E8-off_362D2
	dc.w byte_362EE-off_362D2; 1
	dc.w byte_362F4-off_362D2; 2
	dc.w byte_362FA-off_362D2; 3
	dc.w byte_36300-off_362D2; 4
	dc.w byte_36306-off_362D2; 5
	dc.w byte_3630C-off_362D2; 6
	dc.w byte_36312-off_362D2; 7
	dc.w byte_36318-off_362D2; 8
	dc.w byte_3631E-off_362D2; 9
	dc.w byte_36324-off_362D2; 10
byte_362E8: dc.b   5,  0, $A,$14, $A,$FF
byte_362EE: dc.b   5,  1, $B,$15, $B,$FF
byte_362F4: dc.b   5,  2, $C,$16, $C,$FF
byte_362FA: dc.b   5,  3, $D,$17, $D,$FF
byte_36300: dc.b   5,  4, $E,$18, $E,$FF
byte_36306: dc.b   5,  5, $F,$19, $F,$FF
byte_3630C: dc.b   5,  6,$10,$1A,$10,$FF
byte_36312: dc.b   5,  7,$11,$1B,$11,$FF
byte_36318: dc.b   5,  8,$12,$1C,$12,$FF
byte_3631E: dc.b   5,  9,$13,$1D,$13,$FF
byte_36324: dc.b   1,$1E,$1F,$20,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj5A_Obj5B_Obj60_MapUnc_3632A:	BINCLUDE "mappings/sprite/obj5A_5B_60.bin"

; animation script for object 61:
off_364CE:
	dc.w byte_364E4-off_364CE
	dc.w byte_364E7-off_364CE; 1
	dc.w byte_364EA-off_364CE; 2
	dc.w byte_364ED-off_364CE; 3
	dc.w byte_364F0-off_364CE; 4
	dc.w byte_364F3-off_364CE; 5
	dc.w byte_364F6-off_364CE; 6
	dc.w byte_364F9-off_364CE; 7
	dc.w byte_364FC-off_364CE; 8
	dc.w byte_364FF-off_364CE; 9
	dc.w byte_36502-off_364CE; 10
byte_364E4: dc.b  $B,  0,$FF
byte_364E7: dc.b  $B,  1,$FF
byte_364EA: dc.b  $B,  2,$FF
byte_364ED: dc.b  $B,  3,$FF
byte_364F0: dc.b  $B,  4,$FF
byte_364F3: dc.b  $B,  5,$FF
byte_364F6: dc.b  $B,  6,$FF
byte_364F9: dc.b  $B,  7,$FF
byte_364FC: dc.b  $B,  8,$FF
byte_364FF: dc.b  $B,  9,$FF
byte_36502: dc.b   2, $A, $B, $C,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj61_MapUnc_36508:	BINCLUDE "mappings/sprite/obj61.bin"
; ===========================================================================

JmpTo44_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo63_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo24_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo_loc_76FA 
	jmp	(loc_76FA).l
; ===========================================================================

JmpTo_CalcAngle 
	jmp	(CalcAngle).l
; ===========================================================================

JmpTo14_CalcSine 
	jmp	(CalcSine).l
; ===========================================================================

JmpTo7_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================

JmpTo_loc_6FA4 
	jmp	(loc_6FA4).l
; ===========================================================================

JmpTo2_sub_6F8E 
	jmp	(sub_6F8E).l
; ===========================================================================
	align 4
; ===========================================================================




; ---------------------------------------------------------------------------
; loadSubObject
; loads information from a sub-object into this object a0
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_365F4:
LoadSubObject:
	moveq	#0,d0
	move.b	subtype(a0),d0
; loc_365FA:
LoadSubObject_Part2:
	move.w	SubObjData_Index(pc,d0.w),d0
	lea	SubObjData_Index(pc,d0.w),a1
; loc_36602:
LoadSubObject_Part3:
	move.l	(a1)+,mappings(a0)
	move.w	(a1)+,art_tile(a0)
	jsr	Adjust2PArtPointer
	move.b	(a1)+,d0
	or.b	d0,render_flags(a0)
	move.b	(a1)+,priority(a0)
	move.b	(a1)+,width_pixels(a0)
	move.b	(a1),collision_flags(a0)
	addq.b	#2,routine(a0)
	rts

; ===========================================================================
; table that maps from the subtype ID to which address to load the data from
; the format of the data there is
;	dc.l Pointer_To_Sprite_Mappings
;	dc.w VRAM_Location
;	dc.b render_flags, priority, width_pixels, collision_flags
; 
; for whatever reason, only Obj8C and later have entries in this table

; off_36628:
SubObjData_Index:
	dc.w Obj8C_SubObjData - SubObjData_Index	; $0
	dc.w Obj8D_SubObjData - SubObjData_Index	; $2
	dc.w Obj90_SubObjData - SubObjData_Index	; $4
	dc.w Obj90_SubObjData2 - SubObjData_Index	; $6
	dc.w Obj91_SubObjData - SubObjData_Index	; $8
	dc.w Obj92_SubObjData - SubObjData_Index	; $A
	dc.w Invalid_SubObjData - SubObjData_Index	; $C
	dc.w Obj94_SubObjData - SubObjData_Index	; $E
	dc.w Obj94_SubObjData2 - SubObjData_Index	; $10
	dc.w Obj99_SubObjData2 - SubObjData_Index	; $12
	dc.w Obj99_SubObjData - SubObjData_Index	; $14
	dc.w Obj9A_SubObjData - SubObjData_Index	; $16
	dc.w Obj9B_SubObjData - SubObjData_Index	; $18
	dc.w Obj9C_SubObjData - SubObjData_Index	; $1A
	dc.w Obj9A_SubObjData2 - SubObjData_Index	; $1C
	dc.w Obj9D_SubObjData - SubObjData_Index	; $1E
	dc.w Obj9D_SubObjData2 - SubObjData_Index	; $20
	dc.w Obj9E_SubObjData - SubObjData_Index	; $22
	dc.w Obj9F_SubObjData - SubObjData_Index	; $24
	dc.w ObjA0_SubObjData - SubObjData_Index	; $26
	dc.w ObjA1_SubObjData - SubObjData_Index	; $28
	dc.w ObjA2_SubObjData - SubObjData_Index	; $2A
	dc.w ObjA3_SubObjData - SubObjData_Index	; $2C
	dc.w ObjA4_SubObjData - SubObjData_Index	; $2E
	dc.w ObjA4_SubObjData2 - SubObjData_Index	; $30
	dc.w ObjA5_SubObjData - SubObjData_Index	; $32
	dc.w ObjA6_SubObjData - SubObjData_Index	; $34
	dc.w ObjA7_SubObjData - SubObjData_Index	; $36
	dc.w ObjA7_SubObjData2 - SubObjData_Index	; $38
	dc.w ObjA8_SubObjData - SubObjData_Index	; $3A
	dc.w ObjA8_SubObjData2 - SubObjData_Index	; $3C
	dc.w ObjA7_SubObjData3 - SubObjData_Index	; $3E
	dc.w ObjAC_SubObjData - SubObjData_Index	; $40
	dc.w ObjAD_SubObjData - SubObjData_Index	; $42
	dc.w ObjAD_SubObjData2 - SubObjData_Index	; $44
	dc.w ObjAD_SubObjData3 - SubObjData_Index	; $46
	dc.w ObjAF_SubObjData2 - SubObjData_Index	; $48
	dc.w ObjAF_SubObjData - SubObjData_Index	; $4A
	dc.w ObjB0_SubObjData - SubObjData_Index	; $4C
	dc.w ObjB1_SubObjData - SubObjData_Index	; $4E
	dc.w ObjB2_SubObjData - SubObjData_Index	; $50
	dc.w ObjB2_SubObjData - SubObjData_Index	; $52
	dc.w ObjB2_SubObjData - SubObjData_Index	; $54
	dc.w ObjBC_SubObjData2 - SubObjData_Index	; $56
	dc.w ObjBC_SubObjData2 - SubObjData_Index	; $58
	dc.w ObjB3_SubObjData - SubObjData_Index	; $5A
	dc.w ObjB2_SubObjData2 - SubObjData_Index	; $5C
	dc.w ObjB3_SubObjData - SubObjData_Index	; $5E
	dc.w ObjB3_SubObjData - SubObjData_Index	; $60
	dc.w ObjB3_SubObjData - SubObjData_Index	; $62
	dc.w ObjB4_SubObjData - SubObjData_Index	; $64
	dc.w ObjB5_SubObjData - SubObjData_Index	; $66
	dc.w ObjB5_SubObjData - SubObjData_Index	; $68
	dc.w ObjB6_SubObjData - SubObjData_Index	; $6A
	dc.w ObjB6_SubObjData - SubObjData_Index	; $6C
	dc.w ObjB6_SubObjData - SubObjData_Index	; $6E
	dc.w ObjB6_SubObjData - SubObjData_Index	; $70
	dc.w ObjB7_SubObjData - SubObjData_Index	; $72
	dc.w ObjB8_SubObjData - SubObjData_Index	; $74
	dc.w ObjB9_SubObjData - SubObjData_Index	; $76
	dc.w ObjBA_SubObjData - SubObjData_Index	; $78
	dc.w ObjBB_SubObjData - SubObjData_Index	; $7A
	dc.w ObjBC_SubObjData2 - SubObjData_Index	; $7C
	dc.w ObjBD_SubObjData - SubObjData_Index	; $7E
	dc.w ObjBD_SubObjData - SubObjData_Index	; $80
	dc.w ObjBE_SubObjData - SubObjData_Index	; $82
	dc.w ObjBE_SubObjData2 - SubObjData_Index	; $84
	dc.w ObjC0_SubObjData - SubObjData_Index	; $86
	dc.w ObjC1_SubObjData - SubObjData_Index	; $88
	dc.w ObjC2_SubObjData - SubObjData_Index	; $8A
	dc.w Invalid_SubObjData2 - SubObjData_Index	; $8C
	dc.w ObjB8_SubObjData2 - SubObjData_Index	; $8E
	dc.w ObjC3_SubObjData - SubObjData_Index	; $90
	dc.w ObjC5_SubObjData - SubObjData_Index	; $92
	dc.w ObjC5_SubObjData2 - SubObjData_Index	; $94
	dc.w ObjC5_SubObjData3 - SubObjData_Index	; $96
	dc.w ObjC5_SubObjData3 - SubObjData_Index	; $98
	dc.w ObjC5_SubObjData3 - SubObjData_Index	; $9A
	dc.w ObjC5_SubObjData3 - SubObjData_Index	; $9C
	dc.w ObjC5_SubObjData3 - SubObjData_Index	; $9E
	dc.w ObjC6_SubObjData2 - SubObjData_Index	; $A0
	dc.w ObjC5_SubObjData4 - SubObjData_Index	; $A2
	dc.w ObjAF_SubObjData3 - SubObjData_Index	; $A4
	dc.w ObjC6_SubObjData3 - SubObjData_Index	; $A6
	dc.w ObjC6_SubObjData4 - SubObjData_Index	; $A8
	dc.w ObjC6_SubObjData - SubObjData_Index	; $AA
	dc.w ObjC8_SubObjData - SubObjData_Index	; $AC
; ===========================================================================

loc_366D6:
	moveq	#0,d0
	moveq	#0,d1
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a0),d2
	sub.w	x_pos(a1),d2
	move.w	d2,d4
	bpl.s	+
	neg.w	d4
+
	lea	(Sidekick).w,a2 ; a2=character
	move.w	x_pos(a0),d3
	sub.w	x_pos(a2),d3
	move.w	d3,d5
	bpl.s	+
	neg.w	d5
+
	cmp.w	d5,d4
	bls.s	+
	movea.l	a2,a1
	move.w	d3,d2
+
	tst.w	d2
	bpl.s	+
	addq.w	#2,d0
+
	move.w	y_pos(a0),d3
	sub.w	y_pos(a1),d3
	bcc.s	+
	addq.w	#2,d1
+
	rts
; ===========================================================================

loc_3671A:
	move.w	x_vel(a0),d2
	bpl.s	loc_3672C
	neg.w	d0
	cmp.w	d0,d2
	bcc.s	loc_36732
	move.w	d0,d2
	bra.w	loc_36732
; ===========================================================================

loc_3672C:
	cmp.w	d0,d2
	bls.s	loc_36732
	move.w	d0,d2

loc_36732:
	move.w	y_vel(a0),d3
	bpl.s	loc_36744
	neg.w	d1
	cmp.w	d1,d3
	bcc.s	loc_3674A
	move.w	d1,d3
	bra.w	loc_3674A
; ===========================================================================

loc_36744:
	cmp.w	d1,d3
	bls.s	loc_3674A
	move.w	d1,d3

loc_3674A:
	move.w	d2,x_vel(a0)
	move.w	d3,y_vel(a0)
	rts
; ===========================================================================

loc_36754:
	moveq	#0,d0
	move.w	d0,x_vel(a0)
	move.w	d0,y_vel(a0)
	rts
; ===========================================================================

loc_36760:
	move.w	x_pos(a0),d2
	add.w	d0,d2
	move.w	d2,x_pos(a1)
	move.w	y_pos(a0),d3
	add.w	d1,d3
	move.w	d3,y_pos(a1)
	rts
; ===========================================================================

loc_36776:
	move.w	($FFFFF736).w,d0
	add.w	d0,x_pos(a0)
	move.w	($FFFFF738).w,d0
	add.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_36788:
	tst.w	(Two_player_mode).w
	beq.s	loc_36794
	jmp	DisplaySprite
; ===========================================================================

loc_36794:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	bmi.w	JmpTo64_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

loc_367AA:
	move.b	render_flags(a0),d0
	andi.b	#$FC,d0
	move.b	status(a0),d2
	andi.b	#$FC,d2
	move.b	render_flags(a1),d1
	andi.b	#3,d1
	or.b	d1,d0
	or.b	d1,d2
	move.b	d0,render_flags(a0)
	move.b	d2,status(a0)
	rts
; ===========================================================================

loc_367D0:
	jsr	(SingleObjLoad2).l
	bne.s	return_367F6
	move.w	(a2)+,d0
	move.w	a1,(a0,d0.w)
	_move.b	(a2)+,0(a1) ; load obj
	move.b	(a2)+,subtype(a1)
	move.w	a0,objoff_2C(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

return_367F6:
	rts
; ===========================================================================
	; unused/dead code ; a0=object
	bsr.w	loc_366D6
	bclr	#0,render_flags(a0)
	bclr	#0,status(a0)
	tst.w	d0
	beq.s	return_36818
	bset	#0,render_flags(a0)
	bset	#0,status(a0)

return_36818:
	rts
; ===========================================================================

loc_3681A:
	moveq	#0,d1

loc_3681C:
	jsr	(SingleObjLoad2).l
	bne.s	return_3686E
	_move.b	#$98,0(a1) ; load obj98
	move.b	d2,subtype(a1) ; <== ???
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	lea	(ObjectMove).l,a3
	move.l	a3,objoff_2A(a1)
	lea	(a2,d1.w),a3
	move.b	(a3)+,d0
	ext.w	d0
	add.w	d0,x_pos(a1)
	move.b	(a3)+,d0
	ext.w	d0
	add.w	d0,y_pos(a1)
	move.b	(a3)+,x_vel(a1)
	move.b	(a3)+,y_vel(a1)
	move.b	(a3)+,mapping_frame(a1)
	move.b	(a3)+,render_flags(a1)
	addq.w	#6,d1
	dbf	d6,loc_3681C

return_3686E:
	rts
; ===========================================================================

loc_36870:
	moveq	#0,d0
	move.b	anim(a0),d0
	cmp.b	next_anim(a0),d0
	beq.s	loc_3688C
	move.b	d0,next_anim(a0)
	move.b	#0,anim_frame(a0)
	move.b	#0,anim_frame_duration(a0)

loc_3688C:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	loc_368B0
	add.w	d0,d0
	adda.w	(a1,d0.w),a1
	move.b	(a1),anim_frame_duration(a0)
	moveq	#0,d1
	move.b	anim_frame(a0),d1
	move.b	1(a1,d1.w),d0
	bmi.s	loc_368B4

loc_368A8:
	move.b	d0,mapping_frame(a0)
	addq.b	#1,anim_frame(a0)

loc_368B0:
	moveq	#0,d0
	rts
; ===========================================================================

loc_368B4:
	addq.b	#1,d0
	bne.s	loc_368C8
	move.b	#0,anim_frame(a0)
	move.b	1(a1),d0
	bsr.s	loc_368A8
	moveq	#1,d0
	rts
; ===========================================================================

loc_368C8:
	addq.b	#1,d0
	bne.s	loc_368DE
	addq.b	#2,routine(a0)
	move.b	#0,anim_frame_duration(a0)
	addq.b	#1,anim_frame(a0)
	moveq	#1,d0
	rts
; ===========================================================================

loc_368DE:
	addq.b	#1,d0
	bne.s	loc_368EA
	addq.b	#2,routine_secondary(a0)
	moveq	#1,d0
	rts
; ===========================================================================

loc_368EA:
	addq.b	#1,d0
	bne.s	return_368F6
	move.b	#1,anim_frame_duration(a0)
	moveq	#1,d0

return_368F6:
	rts
; ===========================================================================

loc_368F8:
	tst.w	(Two_player_mode).w
	beq.s	loc_36904
	jmp	DisplaySprite
; ===========================================================================

loc_36904:
	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	JmpTo64_DeleteObject
	jmp	DisplaySprite
; ===========================================================================

JmpTo64_DeleteObject 
	jmp	DeleteObject




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8C - Whisp (blowfly badnik) from ARZ
; ----------------------------------------------------------------------------
; Sprite_36924:
Obj8C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj8C_States(pc,d0.w),d1
	jmp	Obj8C_States(pc,d1.w)
; ===========================================================================
; off_36932:
Obj8C_States:
	dc.w loc_3693C - Obj8C_States
	dc.w loc_3694E - Obj8C_States; 1
	dc.w loc_369A8 - Obj8C_States; 2
	dc.w loc_36958 - Obj8C_States; 3
	dc.w loc_36A26 - Obj8C_States; 4
; ===========================================================================

loc_3693C:
	bsr.w	LoadSubObject
	move.b	#$10,objoff_2A(a0)
	move.b	#4,objoff_2B(a0)
	rts
; ===========================================================================

loc_3694E:
	tst.b	render_flags(a0)
	bmi.s	loc_36970
	bra.w	loc_3695E
; ===========================================================================

loc_36958:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_36970

loc_3695E:
	lea	(off_36A48).l,a1
	jsr	AnimateSprite
	jmp	MarkObjGone
; ===========================================================================

loc_36970:
	subq.b	#1,objoff_2B(a0)
	bpl.s	loc_36996
	move.b	#8,routine(a0)
	bclr	#0,status(a0)
	clr.w	y_vel(a0)
	move.w	#-$200,x_vel(a0)
	move.w	#-$200,y_vel(a0)
	bra.w	loc_36A26
; ===========================================================================

loc_36996:
	move.b	#4,routine(a0)
	move.w	#-$100,y_vel(a0)
	move.b	#$60,objoff_2A(a0)

loc_369A8:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_369F8
	bsr.w	loc_366D6
	bclr	#0,status(a0)
	tst.w	d0
	beq.s	loc_369C2
	bset	#0,status(a0)

loc_369C2:
	move.w	word_369F4(pc,d0.w),d2
	add.w	d2,x_vel(a0)
	move.w	word_369F4(pc,d1.w),d2
	add.w	d2,y_vel(a0)
	move.w	#$200,d0
	move.w	d0,d1
	bsr.w	loc_3671A
	jsr	ObjectMove
	lea	(off_36A48).l,a1
	jsr	AnimateSprite
	jmp	MarkObjGone
; ===========================================================================
word_369F4:
	dc.w $FFF0
	dc.w   $10
; ===========================================================================

loc_369F8:
	move.b	#6,routine(a0)
	jsr	(RandomNumber).l
	move.l	(RNG_seed).w,d0
	andi.b	#$1F,d0
	move.b	d0,objoff_2A(a0)
	bsr.w	loc_36754
	lea	(off_36A48).l,a1
	jsr	AnimateSprite
	jmp	MarkObjGone
; ===========================================================================

loc_36A26:
	jsr	ObjectMove
	lea	(off_36A48).l,a1
	jsr	AnimateSprite
	jmp	MarkObjGone
; ===========================================================================
; off_36A3E:
Obj8C_SubObjData:
	dc.l Obj8C_MapUnc_36A4E
	dc.w $A500
	dc.b 4,4,$C,$B
; animation script
off_36A48:
	dc.w byte_36A4A-off_36A48
byte_36A4A:
	dc.b   1,  0,  1,$FF
	even
; ------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------
Obj8C_MapUnc_36A4E:	BINCLUDE "mappings/sprite/obj8C.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8D - Grounder in wall, from ARZ
; ----------------------------------------------------------------------------
; Sprite_36A76:
Obj8D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36A84(pc,d0.w),d1
	jmp	off_36A84(pc,d1.w)
; ===========================================================================
off_36A84:
	dc.w loc_36A90-off_36A84
	dc.w loc_36ADC-off_36A84; 1
	dc.w loc_36B00-off_36A84; 2
	dc.w loc_36B0E-off_36A84; 3
	dc.w loc_36B34-off_36A84; 4
	dc.w loc_36B6A-off_36A84; 5
; ===========================================================================

loc_36A90:
	bsr.w	LoadSubObject
	bclr	#1,render_flags(a0)
	beq.s	loc_36AA8
	bclr	#1,status(a0)
	andi.w	#$7FFF,art_tile(a0)

loc_36AA8:
	move.b	#$14,y_radius(a0)
	move.b	#$10,x_radius(a0)
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_36AC8
	add.w	d1,y_pos(a0)
	move.w	#0,y_vel(a0)

loc_36AC8:
	_move.b	0(a0),d0
	subi.b	#$8D,d0
	beq.w	loc_36C64
	move.b	#6,routine(a0)
	rts
; ===========================================================================

loc_36ADC:
	bsr.w	loc_366D6
	tst.w	d2
	bpl.s	+
	neg.w	d2
+
	cmpi.w	#$60,d2
	bls.s	loc_36AF0
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36AF0:
	addq.b	#2,routine(a0)
	st	objoff_2B(a0)
	bsr.w	loc_36C2C
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36B00:
	lea	(off_36CEA).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36B0E:
	addq.b	#2,routine(a0)
	bsr.w	loc_366D6
	move.w	word_36B30(pc,d0.w),x_vel(a0)
	bclr	#0,status(a0)
	tst.w	d0
	beq.s	BranchTo_JmpTo39_MarkObjGone
	bset	#0,status(a0)

BranchTo_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
word_36B30:
	dc.w $FF00
	dc.w $100	; 1
; ===========================================================================

loc_36B34:
	bsr.w	JmpTo26_ObjectMove
	jsr	(ObjCheckFloorDist).l
	cmpi.w	#-1,d1
	blt.s	loc_36B5C
	cmpi.w	#$C,d1
	bge.s	loc_36B5C
	add.w	d1,y_pos(a0)
	lea	(off_36CE2).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36B5C:
	addq.b	#2,routine(a0)
	move.b	#$3B,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36B6A:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_36B74
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36B74:
	move.b	#8,routine(a0)
	neg.w	x_vel(a0)
	bchg	#0,status(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8F - Wall behind which Grounder hides, from ARZ
; ----------------------------------------------------------------------------
; Sprite_36B88:
Obj8F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36B96(pc,d0.w),d1
	jmp	off_36B96(pc,d1.w)
; ===========================================================================
off_36B96:
	dc.w loc_36B9C-off_36B96
	dc.w loc_36BA6-off_36B96; 1
	dc.w loc_36C1C-off_36B96; 2
; ===========================================================================

loc_36B9C:
	bsr.w	LoadSubObject
	clr.w	art_tile(a0)
	rts
; ===========================================================================

loc_36BA6:
	movea.w	objoff_2C(a0),a1 ; a1=object
	tst.b	objoff_2B(a1)
	bne.s	loc_36BB4
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36BB4:
	addq.b	#2,routine(a0)
	move.w	objoff_2E(a0),d0
	move.b	byte_36BCC(pc,d0.w),x_vel(a0)
	move.b	byte_36BCC+1(pc,d0.w),y_vel(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
byte_36BCC:
	dc.b   1,$FE
	dc.b   1,$FF	; 2
	dc.b $FF,$FE	; 4
	dc.b $FF,$FF	; 6
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 90 - Rocks thrown by Grounder behind wall, from ARZ
; ----------------------------------------------------------------------------
; Sprite_36BD4:
Obj90:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36BE2(pc,d0.w),d1
	jmp	off_36BE2(pc,d1.w)
; ===========================================================================
off_36BE2:
	dc.w loc_36BE6-off_36BE2
	dc.w loc_36C1C-off_36BE2; 1
; ===========================================================================

loc_36BE6:
	bsr.w	LoadSubObject
	move.w	#$4509,art_tile(a0)
	move.w	objoff_2E(a0),d0
	move.b	byte_36C12(pc,d0.w),x_vel(a0)
	move.b	byte_36C12+1(pc,d0.w),y_vel(a0)
	lsr.w	#1,d0
	move.b	byte_36C0C(pc,d0.w),mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
byte_36C0C:
	dc.b   0
	dc.b   2	; 1
	dc.b   0	; 2
	dc.b   1	; 3
	dc.b   0	; 4
	dc.b   0	; 5
byte_36C12:
	dc.b $FF,$FC
	dc.b   4,$FD	; 2
	dc.b   2,  0	; 4
	dc.b $FD,$FF	; 6
	dc.b $FD,$FD	; 8
; ===========================================================================

loc_36C1C:
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	bsr.w	JmpTo8_ObjectMoveAndFall
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36C2C:
	moveq	#0,d1
	moveq	#4,d6

loc_36C30:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_36C3E
	bsr.w	loc_36C40
	dbf	d6,loc_36C30

return_36C3E:
	rts
; ===========================================================================

loc_36C40:
	_move.b	#$90,0(a1) ; load obj90
	move.b	#6,subtype(a1) ; <== Obj90_SubObjData2
	move.w	a0,objoff_2C(a1)
	move.w	d1,objoff_2E(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addq.w	#2,d1
	rts
; ===========================================================================

loc_36C64:
	moveq	#0,d1
	moveq	#3,d6

loc_36C68:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_36C76
	bsr.w	loc_36C78
	dbf	d6,loc_36C68

return_36C76:
	rts
; ===========================================================================

loc_36C78:
	_move.b	#$8F,0(a1) ; load obj8F
	move.b	#4,subtype(a1) ; <== Obj90_SubObjData
	move.w	a0,objoff_2C(a1)
	move.w	d1,objoff_2E(a1)
	move.l	x_pos(a0),d0
	swap	d0
	moveq	#0,d2
	move.b	byte_36CBC(pc,d1.w),d2
	ext.w	d2
	add.w	d2,d0
	swap	d0
	move.l	d0,x_pos(a1)
	move.l	y_pos(a0),d0
	swap	d0
	moveq	#0,d2
	move.b	byte_36CBC+1(pc,d1.w),d2
	ext.w	d2
	add.w	d2,d0
	swap	d0
	move.l	d0,y_pos(a1)
	addq.w	#2,d1
	rts
; ===========================================================================
byte_36CBC:
	dc.b   0,$EC
	dc.b $10,$FC	; 2
	dc.b   0, $C	; 4
	dc.b $F0,$FC	; 6
; off_36CC4:
Obj8D_SubObjData:
	dc.l Obj8D_MapUnc_36CF0
	dc.w $A509
	dc.b 4,5,$10,2
; off_36CCE:
Obj90_SubObjData:
	dc.l Obj90_MapUnc_36D00
	dc.w 0
	dc.w $8404
	dc.w $1000
; off_36CD8:
Obj90_SubObjData2:
	dc.l Obj90_MapUnc_36CFA
	dc.w $A509
	dc.w $8404
	dc.w $800

; animation script
off_36CE2:
	dc.w byte_36CE4-off_36CE2
byte_36CE4:
	dc.b   3,  2,  3,  4,$FF
	even
; animation script
off_36CEA:
	dc.w byte_36CEC-off_36CEA
byte_36CEC:
	dc.b   7,  0,  1,$FC
	even
; -----------------------------------------------------------------------------
; sprite mappings (obj8D)
; -----------------------------------------------------------------------------
Obj8D_MapUnc_36CF0:
	dc.w word_36D02-Obj8D_MapUnc_36CF0
	dc.w word_36D24-Obj8D_MapUnc_36CF0
	dc.w word_36D46-Obj8D_MapUnc_36CF0
	dc.w word_36D58-Obj8D_MapUnc_36CF0
	dc.w word_36D6A-Obj8D_MapUnc_36CF0
; -----------------------------------------------------------------------------
; sprite mappings (obj90)
; -----------------------------------------------------------------------------
Obj90_MapUnc_36CFA:
	dc.w word_36D7C-Obj90_MapUnc_36CFA
	dc.w word_36D86-Obj90_MapUnc_36CFA
	dc.w word_36D90-Obj90_MapUnc_36CFA
; -----------------------------------------------------------------------------
; sprite mappings (obj90)
; -----------------------------------------------------------------------------
Obj90_MapUnc_36D00:
	dc.w word_36D9A-Obj90_MapUnc_36D00
word_36D02:
	dc.w 4
	dc.w $F400,    0,    0,$FFF8
	dc.w $FC06,    1,    0,$FFF0; 4
	dc.w $F400, $800, $800,	   0; 8
	dc.w $FC06, $801, $800,	   0; 12
word_36D24:
	dc.w 4
	dc.w $EC00,    7,    3,$FFF8
	dc.w $F407,    8,    4,$FFF0; 4
	dc.w $EC00, $807, $803,	   0; 8
	dc.w $F407, $808, $804,	   0; 12
word_36D46:
	dc.w 2
	dc.w $EC0F,  $10,    8,$FFF0
	dc.w  $C0C,  $20,  $10,$FFF0; 4
word_36D58:
	dc.w 2
	dc.w $EC0F,  $10,    8,$FFF0
	dc.w  $C0C,  $24,  $12,$FFF0; 4
word_36D6A:
	dc.w 2
word_36D6C:
	dc.w $EC0F,  $10,    8,$FFF0
	dc.w  $C0C,  $28,  $14,$FFF0; 4
word_36D7C:
	dc.w 1
	dc.w $F805,  $2C,  $16,$FFF8
word_36D86:
	dc.w 1
word_36D88:
	dc.w $FC00,  $30,  $18,$FFFC
word_36D90:
	dc.w 1
	dc.w $FC00,  $31,  $18,$FFFC
word_36D9A:
	dc.w 2
	dc.w $F805,$4093,$4049,$FFF0
	dc.w $F805,$4097,$404B,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 91 - Chop Chop (piranha/shark badnik) from ARZ
; ----------------------------------------------------------------------------
; Sprite_36DAC:
Obj91:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36DBA(pc,d0.w),d1
	jmp	off_36DBA(pc,d1.w)
; ===========================================================================
off_36DBA:
	dc.w loc_36DC2-off_36DBA
	dc.w loc_36DE4-off_36DBA; 1
	dc.w loc_36E32-off_36DBA; 2
	dc.w loc_36E66-off_36DBA; 3
; ===========================================================================

loc_36DC2:
	bsr.w	LoadSubObject
	move.w	#$200,objoff_2A(a0)
	move.w	#$50,objoff_2C(a0)
	moveq	#$40,d0
	btst	#0,status(a0)
	bne.s	loc_36DDE
	neg.w	d0

loc_36DDE:
	move.w	d0,x_vel(a0)
	rts
; ===========================================================================

loc_36DE4:
	subq.b	#1,objoff_2C(a0)
	bne.s	loc_36DEE
	bsr.w	loc_36E78

loc_36DEE:
	subq.w	#1,objoff_2A(a0)
	bpl.s	loc_36E0A
	move.w	#$200,objoff_2A(a0)
	bchg	#0,status(a0)
	bchg	#0,render_flags(a0)
	neg.w	x_vel(a0)

loc_36E0A:
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_366D6
	move.w	d2,d4
	move.w	d3,d5
	bsr.w	loc_36EB2
	bne.s	loc_36E20
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36E20:
	addq.b	#2,routine(a0)
	move.b	#$10,objoff_2A(a0)
	clr.w	x_vel(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36E32:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_36E3C
	bra.w	loc_36E6A
; ===========================================================================

loc_36E3C:
	addq.b	#2,routine(a0)
	bsr.w	loc_366D6
	lsr.w	#1,d0
	move.b	byte_36E62(pc,d0.w),x_vel(a0)
	addi.w	#$10,d3
	cmpi.w	#$20,d3
	bcs.s	BranchTo_loc_36E6A
	lsr.w	#1,d1
	move.b	byte_36E64(pc,d1.w),1+y_vel(a0)

BranchTo_loc_36E6A 
	bra.w	loc_36E6A
; ===========================================================================
byte_36E62:
	dc.b  -2
	dc.b   2	; 1
byte_36E64:
	dc.b $80
	dc.b $80	; 1
; ===========================================================================

loc_36E66:
	bsr.w	JmpTo26_ObjectMove

loc_36E6A:
	lea	(off_36EF0).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36E78:
	move.w	#$50,objoff_2C(a0)
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_36EB0
	_move.b	#$A,0(a1) ; load obj
	move.b	#6,subtype(a1) ; <== Obj90_SubObjData2
	move.w	x_pos(a0),x_pos(a1)
	moveq	#$14,d0
	btst	#0,render_flags(a0)
	beq.s	loc_36EA2
	neg.w	d0

loc_36EA2:
	add.w	d0,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addq.w	#6,y_pos(a1)

return_36EB0:
	rts
; ===========================================================================

loc_36EB2:
	addi.w	#$20,d3
	cmpi.w	#$40,d3
	bcc.s	loc_36EDE
	tst.w	d2
	bmi.s	loc_36ECA
	tst.w	x_vel(a0)
	bpl.s	loc_36EDE
	bra.w	loc_36ED2
; ===========================================================================

loc_36ECA:
	tst.w	x_vel(a0)
	bmi.s	loc_36EDE
	neg.w	d2

loc_36ED2:
	cmpi.w	#$20,d2
	bcs.s	loc_36EDE
	cmpi.w	#$A0,d2
	bcs.s	loc_36EE2

loc_36EDE:
	moveq	#0,d2
	rts
; ===========================================================================

loc_36EE2:
	moveq	#1,d2
	rts
; ===========================================================================
; off_36EE6:
Obj91_SubObjData:
	dc.l Obj91_MapUnc_36EF6
	dc.w $253B
	dc.w $404
	dc.w $1002

	; animation script
off_36EF0:
	dc.w byte_36EF2-off_36EF0
byte_36EF2:
	dc.b   4,  0,  1,$FF
	even
; --------------------------------------------------------------------------
; sprite mappings
; --------------------------------------------------------------------------
Obj91_MapUnc_36EF6:	BINCLUDE "mappings/sprite/obj91.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 92 - Spiker (drill badnik) from HTZ
; ----------------------------------------------------------------------------
; Sprite_36F0E:
Obj92:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36F1C(pc,d0.w),d1
	jmp	off_36F1C(pc,d1.w)
; ===========================================================================
off_36F1C:
	dc.w loc_36F24-off_36F1C
	dc.w loc_36F3C-off_36F1C; 1
	dc.w loc_36F68-off_36F1C; 2
	dc.w loc_36F90-off_36F1C; 3
; ===========================================================================

loc_36F24:
	bsr.w	LoadSubObject
	move.b	#$40,objoff_2A(a0)
	move.w	#$80,x_vel(a0)
	bchg	#0,status(a0)
	rts
; ===========================================================================

loc_36F3C:
	bsr.w	loc_3703E
	bne.s	loc_36F48
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_36F5A

loc_36F48:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_37086).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36F5A:
	addq.b	#2,routine(a0)
	move.b	#$10,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36F68:
	bsr.w	loc_3703E
	bne.s	BranchTo2_JmpTo39_MarkObjGone
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_36F78

BranchTo2_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36F78:
	subq.b	#2,routine(a0)
	move.b	#$40,objoff_2A(a0)
	neg.w	x_vel(a0)
	bchg	#0,status(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36F90:
	move.b	objoff_2E(a0),d0
	cmpi.b	#8,d0
	beq.s	loc_36FA4
	subq.b	#1,d0
	move.b	d0,objoff_2E(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_36FA4:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	loc_36FDC
	st	objoff_2B(a0)
	_move.b	#$93,0(a1) ; load obj93
	move.b	subtype(a0),subtype(a1)
	move.w	a0,objoff_2C(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#4,mapping_frame(a1)
	move.b	#2,mapping_frame(a0)
	move.b	#1,anim(a0)

loc_36FDC:
	move.b	objoff_2F(a0),routine(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 93 - Drill thrown by Spiker from HTZ
; ----------------------------------------------------------------------------
; Sprite_36FE6:
Obj93:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_36FF4(pc,d0.w),d1
	jmp	off_36FF4(pc,d1.w)
; ===========================================================================
off_36FF4:
	dc.w loc_36FF8-off_36FF4
	dc.w loc_37028-off_36FF4; 1
; ===========================================================================

loc_36FF8:
	bsr.w	LoadSubObject
	ori.b	#$80,render_flags(a0)
	ori.b	#$80,collision_flags(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	render_flags(a1),d0
	andi.b	#3,d0
	or.b	d0,render_flags(a0)
	moveq	#2,d1
	btst	#1,d0
	bne.s	loc_37022
	neg.w	d1

loc_37022:
	move.b	d1,y_vel(a0)
	rts
; ===========================================================================

loc_37028:
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	bchg	#0,render_flags(a0)
		bsr.w   JmpTo26_ObjectMove
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3703E:
	tst.b	objoff_2B(a0)
	bne.s	loc_37062
	tst.b	render_flags(a0)
	bpl.s	loc_37062
	bsr.w	loc_366D6
	addi.w	#$20,d2
	cmpi.w	#$40,d2
	bcc.s	loc_37062
	addi.w	#$80,d3
	cmpi.w	#$100,d3
	bcs.s	loc_37066

loc_37062:
	moveq	#0,d0
	rts
; ===========================================================================

loc_37066:
	move.b	routine(a0),objoff_2F(a0)
	move.b	#6,routine(a0)
	move.b	#$10,objoff_2E(a0)
	moveq	#1,d0
	rts
; ===========================================================================
; off_3707C:
Obj92_SubObjData:
	dc.l Obj92_Obj93_MapUnc_37092
	dc.w 0
	dc.w $404
	dc.w $1012
; animation script
off_37086:
	dc.w byte_3708A-off_37086
	dc.w byte_3708E-off_37086; 1
byte_3708A:
	dc.b   9,  0,  1,$FF
byte_3708E:
	dc.b   9,  2,  3,$FF
	even
; ---------------------------------------------------------------------------
; sprite mappings
; ---------------------------------------------------------------------------
Obj92_Obj93_MapUnc_37092:	BINCLUDE "mappings/sprite/obj93.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 95 - Sol (fireball-throwing orbit badnik) from HTZ
; ----------------------------------------------------------------------------
; Sprite_370FE:
Obj95:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3710C(pc,d0.w),d1
	jmp	off_3710C(pc,d1.w)
; ===========================================================================
off_3710C:
	dc.w loc_37116-off_3710C
	dc.w loc_371DC-off_3710C; 1
	dc.w loc_37224-off_3710C; 2
	dc.w loc_3723C-off_3710C; 3
	dc.w loc_372B8-off_3710C; 4
; ===========================================================================

loc_37116:
	move.l	#Obj95_MapUnc_372E6,mappings(a0)
	move.w	#0,art_tile(a0)
	bsr.w	JmpTo64_Adjust2PArtPointer
	ori.b	#4,render_flags(a0)
	move.b	#4,priority(a0)
	move.b	#$B,collision_flags(a0)
	move.b	#$C,width_pixels(a0)
	move.w	#-$40,x_vel(a0)
	moveq	#0,d2
	lea	objoff_37(a0),a2
	movea.l	a2,a3
	addq.w	#1,a2
	moveq	#3,d1

loc_37152:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	loc_371AE
	addq.b	#1,(a3)
	move.w	a1,d5
	subi.w	#-$5000,d5
	lsr.w	#6,d5
	andi.w	#$7F,d5
	move.b	d5,(a2)+
	_move.b	0(a0),0(a1) ; load obj95
	move.b	#6,routine(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	ori.b	#4,render_flags(a1)
	move.b	#4,priority(a1)
	move.b	#8,width_pixels(a1)
	move.b	#3,mapping_frame(a1)
	move.b	#$98,collision_flags(a1)
	move.b	d2,angle(a1)
	addi.b	#$40,d2
	move.l	a0,objoff_3C(a1)
	dbf	d1,loc_37152

loc_371AE:
	moveq	#1,d0
	btst	#0,status(a0)
	beq.s	loc_371BA
	neg.w	d0

loc_371BA:
	move.b	d0,objoff_36(a0)
	move.b	subtype(a0),routine(a0)
	addq.b	#2,routine(a0)
	move.w	#-$40,x_vel(a0)
	btst	#0,status(a0)
	beq.s	return_371DA
	neg.w	x_vel(a0)

return_371DA:
	rts
; ===========================================================================

loc_371DC:
	move.w	(MainCharacter+x_pos).w,d0
	sub.w	x_pos(a0),d0
	bcc.s	loc_371E8
	neg.w	d0

loc_371E8:
	cmpi.w	#$A0,d0
	bcc.s	loc_3720C
	move.w	(MainCharacter+y_pos).w,d0
	sub.w	y_pos(a0),d0
	bcc.s	loc_371FA
	neg.w	d0

loc_371FA:
	cmpi.w	#$50,d0
	bcc.s	loc_3720C
	tst.w	(Debug_placement_mode).w
	bne.s	loc_3720C
	move.b	#1,anim(a0)

loc_3720C:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_372D2).l,a1
	bsr.w	JmpTo25_AnimateSprite
	andi.b	#3,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37224:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_372E0).l,a1
	bsr.w	JmpTo25_AnimateSprite
	andi.b	#3,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3723C:
	lea	(off_372E0).l,a1
	bsr.w	JmpTo25_AnimateSprite
	movea.l	objoff_3C(a0),a1 ; a1=object
	_cmpi.b	#$95,0(a1)
	bne.w	JmpTo65_DeleteObject
	cmpi.b	#2,mapping_frame(a1)
	bne.s	loc_3728E
	cmpi.b	#$40,angle(a0)
	bne.s	loc_3728E
	addq.b	#2,routine(a0)
	move.b	#0,anim(a0)
	subq.b	#1,objoff_37(a1)
	bne.s	loc_37278
	addq.b	#2,routine(a1)

loc_37278:
	move.w	#-$200,x_vel(a0)
	btst	#0,status(a1)
	beq.s	BranchTo_JmpTo45_DisplaySprite
	neg.w	x_vel(a0)

BranchTo_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3728E:
	move.b	angle(a0),d0
	jsr	(CalcSine).l
	asr.w	#4,d1
	add.w	x_pos(a1),d1
	move.w	d1,x_pos(a0)
	asr.w	#4,d0
	add.w	y_pos(a1),d0
	move.w	d0,y_pos(a0)
	move.b	objoff_36(a1),d0
	add.b	d0,angle(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_372B8:
	bsr.w	JmpTo26_ObjectMove
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	lea	(off_372E0).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; animation script
off_372D2:
	dc.w byte_372D6-off_372D2
	dc.w byte_372DA-off_372D2; 1
byte_372D6:
	dc.b  $F,  0,$FF,  0
byte_372DA:
	dc.b  $F,  1,  2,$FE,  1
	even
; animation script
off_372E0:
	dc.w byte_372E2-off_372E0
byte_372E2:
	dc.b   5,  3,  4,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj95_MapUnc_372E6:	BINCLUDE "mappings/sprite/obj95.bin"

Invalid_SubObjData:

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 94,96 - Rexon (lava snake badnik), from HTZ
; ----------------------------------------------------------------------------
; Sprite_37322:
Obj94:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_37330(pc,d0.w),d1
	jmp	off_37330(pc,d1.w)
; ===========================================================================
off_37330:
	dc.w loc_37338-off_37330
	dc.w loc_37350-off_37330; 1
	dc.w loc_3739C-off_37330; 2
	dc.w loc_373CA-off_37330; 3
; ===========================================================================

loc_37338:
	bsr.w	LoadSubObject
	move.b	#2,mapping_frame(a0)
	move.w	#-$20,x_vel(a0)
	move.b	#$80,objoff_2A(a0)
	rts
; ===========================================================================

loc_37350:
	bsr.w	loc_366D6
	addi.w	#$60,d2
	cmpi.w	#$100,d2
	bcc.s	loc_37362
	bsr.w	loc_375AC

loc_37362:
	move.w	x_pos(a0),-(sp)
	bsr.w	loc_37380
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#$11,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo27_SolidObject
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37380:
	subq.b	#1,objoff_2A(a0)
	bpl.s	loc_37396
	move.b	#$80,objoff_2A(a0)
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)

loc_37396:
	bsr.w	JmpTo26_ObjectMove
	rts
; ===========================================================================

loc_3739C:
	bsr.w	loc_366D6
	addi.w	#$60,d2
	cmpi.w	#$100,d2
	bcc.s	loc_373AE
	bsr.w	loc_375AC

loc_373AE:
	bsr.w	loc_373B6
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_373B6:
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#8,d3
	move.w	x_pos(a0),d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================

loc_373CA:
	bsr.s	loc_373B6
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 97 - Rexon's head, from HTZ
; ----------------------------------------------------------------------------
; Sprite_373D0:
Obj97:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_373DE(pc,d0.w),d1
	jmp	off_373DE(pc,d1.w)
; ===========================================================================
off_373DE:
	dc.w loc_373E8-off_373DE
	dc.w loc_37454-off_373DE; 1
	dc.w loc_37488-off_373DE; 2
	dc.w loc_374C2-off_373DE; 3
	dc.w loc_374F4-off_373DE; 4
; ===========================================================================

loc_373E8:
	bsr.w	LoadSubObject
	move.b	#8,width_pixels(a0)
	moveq	#$28,d0
	btst	#0,render_flags(a0)
	bne.s	loc_373FE
	moveq	#-$18,d0

loc_373FE:
	add.w	d0,x_pos(a0)
	addi.w	#$10,y_pos(a0)
	move.b	#1,objoff_38(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object
	lea	$2E(a1),a1
	move.b	#$B,collision_flags(a0)
	moveq	#0,d0
	move.w	objoff_2E(a0),d0
	cmpi.w	#8,d0
	beq.s	loc_3743A
	move.b	#1,mapping_frame(a0)
	move.b	#$8B,collision_flags(a0)
	move.w	(a1,d0.w),objoff_30(a0)

loc_3743A:
	move.w	6(a1),objoff_32(a0)
	lsr.w	#1,d0
	move.b	byte_3744E(pc,d0.w),objoff_2A(a0)
	move.b	d0,objoff_39(a0)
	rts
; ===========================================================================
byte_3744E:
	dc.b $1E
	dc.b $18	; 1
	dc.b $12	; 2
	dc.b  $C	; 3
	dc.b   6	; 4
	dc.b   0	; 5
; ===========================================================================

loc_37454:
	bsr.w	loc_3750C
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_37462
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37462:
	addq.b	#2,routine(a0)
	move.w	#-$120,x_vel(a0)
	move.w	#-$200,y_vel(a0)
	move.w	objoff_2E(a0),d0
	subi.w	#8,d0
	neg.w	d0
	lsr.w	#1,d0
	move.b	byte_3744E(pc,d0.w),objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37488:
	bsr.w	loc_3750C
	moveq	#$10,d0
	add.w	d0,x_vel(a0)
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_374A0
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_374A0:
	addq.b	#2,routine(a0)
	bsr.w	loc_36754
	move.b	#$20,objoff_2A(a0)
	move.w	objoff_2E(a0),d0
	lsr.w	#1,d0
	move.b	byte_374BE(pc,d0.w),objoff_2B(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
byte_374BE:
	dc.b $24
	dc.b $20	; 1
	dc.b $1C	; 2
	dc.b $1A	; 3
; ===========================================================================

loc_374C2:
	bsr.w	loc_3750C
	cmpi.w	#8,objoff_2E(a0)
	bne.s	loc_374D8
	subq.b	#1,objoff_2A(a0)
	bpl.s	loc_374D8
	bsr.w	loc_37532

loc_374D8:
	move.b	objoff_39(a0),d0
	addq.b	#1,d0
	move.b	d0,objoff_39(a0)
	andi.b	#3,d0
	bne.s	BranchTo3_JmpTo39_MarkObjGone
	bsr.w	loc_3758A
	bsr.w	loc_37604

BranchTo3_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_374F4:
	move.w	(Camera_Max_Y_pos_now).w,d0
	addi.w	#$E0,d0
	cmp.w	y_pos(a0),d0
	bcs.w	JmpTo65_DeleteObject
	bsr.w	JmpTo8_ObjectMoveAndFall
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3750C:
	movea.w	objoff_32(a0),a1 ; a1=object
	cmpi.b	#$97,(a1)
	beq.s	return_37526
	move.b	#8,routine(a0)
	move.w	objoff_2E(a0),d0
	move.w	word_37528(pc,d0.w),x_vel(a0)

return_37526:
	rts
; ===========================================================================
word_37528:
	dc.w   $80
	dc.w $FF00	; 1
	dc.w  $100	; 2
	dc.w $FF80	; 3
	dc.w   $80	; 4
; ===========================================================================

loc_37532:
	move.b	#$7F,objoff_2A(a0)
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_37588
	_move.b	#$98,0(a1) ; load obj98
	move.b	#3,mapping_frame(a1)
	move.b	#$10,subtype(a1) ; <== Obj94_SubObjData2
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	lea	(ObjectMove).l,a2
	move.l	a2,objoff_2A(a1)
	moveq	#1,d0
	moveq	#$10,d1
	btst	#0,render_flags(a0)
	bne.s	loc_37576
	neg.w	d0
	neg.w	d1

loc_37576:
	move.b	d0,x_vel(a1)
	add.w	d1,x_pos(a1)
	addq.w	#4,y_pos(a1)
	move.b	#$80,1+y_vel(a1)

return_37588:
	rts
; ===========================================================================

loc_3758A:
	move.b	objoff_2B(a0),d0
	move.b	objoff_38(a0),d1
	add.b	d1,d0
	move.b	d0,objoff_2B(a0)
	subi.b	#$18,d0
	beq.s	loc_375A6
	bcs.s	loc_375A6
	cmpi.b	#$10,d0
	bcs.s	return_375AA

loc_375A6:
	neg.b	objoff_38(a0)

return_375AA:
	rts
; ===========================================================================

loc_375AC:
	move.b	#6,routine(a0)
	bclr	#0,render_flags(a0)
	tst.w	d0
	beq.s	loc_375C2
	bset	#0,render_flags(a0)

loc_375C2:
	bsr.w	loc_36754
	lea	objoff_2C(a0),a2
	moveq	#0,d1
	moveq	#4,d6

loc_375CE:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_37602
	_move.b	#$97,0(a1) ; load obj97
	move.b	render_flags(a0),render_flags(a1)
	move.b	subtype(a0),subtype(a1)
	move.w	a0,objoff_2C(a1)
	move.w	a1,(a2)+
	move.w	d1,objoff_2E(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addq.w	#2,d1
	dbf	d6,loc_375CE

return_37602:
	rts
; ===========================================================================

loc_37604:
	move.w	objoff_30(a0),d0
	beq.s	return_37650
	movea.w	d0,a1 ; a1=object
	lea	word_376A8(pc),a2
	moveq	#0,d0
	move.b	objoff_2B(a0),d0
	andi.b	#$7F,d0
	move.w	d0,d1
	andi.w	#$1F,d0
	add.w	d0,d0
	move.b	(a2,d0.w),d2
	ext.w	d2
	move.b	1(a2,d0.w),d3
	ext.w	d3
	lsr.w	#4,d1
	andi.w	#6,d1
	move.w	off_37652(pc,d1.w),d1
	jsr	off_37652(pc,d1.w)
	move.w	x_pos(a0),d4
	add.w	d2,d4
	move.w	d4,x_pos(a1)
	move.b	1+y_pos(a0),d5
	add.b	d3,d5
	move.b	d5,1+y_pos(a1)

return_37650:
	rts
; ===========================================================================
off_37652:
	dc.w return_3765A-off_37652
	dc.w loc_3765C-off_37652; 1
	dc.w loc_37662-off_37652; 2
	dc.w loc_37668-off_37652; 3
; ===========================================================================

return_3765A:
	rts
; ===========================================================================

loc_3765C:
	exg	d2,d3
	neg.w	d3
	rts
; ===========================================================================

loc_37662:
	neg.w	d2
	neg.w	d3
	rts
; ===========================================================================

loc_37668:
	exg	d2,d3
	neg.w	d2
	rts
; ===========================================================================
; off_3766E:
Obj94_SubObjData:
	dc.l Obj94_Obj98_MapUnc_37678
	dc.w $637E
	dc.w $404
	dc.w $1000
; ------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------
Obj94_Obj98_MapUnc_37678:	BINCLUDE "mappings/sprite/obj97.bin"

; seems to be a lookup table for oscillating horizontal position offset
word_376A8:
	dc.w  $F00
	dc.w  $FFF	; 1
	dc.w  $FFF	; 2
	dc.w  $FFE	; 3
	dc.w  $FFD	; 4
	dc.w  $FFC	; 5
	dc.w  $EFC	; 6
	dc.w  $EFB	; 7
	dc.w  $EFA	; 8
	dc.w  $EFA	; 9
	dc.w  $DF9	; 10
	dc.w  $DF8	; 11
	dc.w  $CF8	; 12
	dc.w  $CF7	; 13
	dc.w  $CF6	; 14
	dc.w  $BF6	; 15
	dc.w  $BF5	; 16
	dc.w  $AF5	; 17
	dc.w  $AF4	; 18
	dc.w  $9F4	; 19
	dc.w  $8F4	; 20
	dc.w  $8F3	; 21
	dc.w  $7F3	; 22
	dc.w  $6F2	; 23
	dc.w  $6F2	; 24
	dc.w  $5F2	; 25
	dc.w  $4F2	; 26
	dc.w  $4F1	; 27
	dc.w  $3F1	; 28
	dc.w  $2F1	; 29
	dc.w  $1F1	; 30
	dc.w  $1F1	; 31




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 98 - Projectile with optional gravity (EHZ coconut, CPZ spiny, etc.)
; ----------------------------------------------------------------------------
; Sprite_376E8:
Obj98:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj98_States(pc,d0.w),d1
	jmp	Obj98_States(pc,d1.w)
; ===========================================================================
; off_376F6:
Obj98_States:
	dc.w Obj98_Init - Obj98_States
	dc.w Obj98_Main - Obj98_States; 1
; ===========================================================================
; loc_376FA:
Obj98_Init: ;;
	bra.w	LoadSubObject
; ===========================================================================
; loc_376FE:
Obj98_Main:
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	movea.l	objoff_2A(a0),a1
	jsr	(a1)	; dynamic call! to Obj98_NebulaBombFall, Obj98_TurtloidShotMove, Obj98_CoconutFall, Obj98_CluckerShotMove, Obj98_SpinyShotFall, or Obj98_WallTurretShotMove, assuming the code hasn't been changed
	bra.w	JmpTo39_MarkObjGone

; ===========================================================================
; for obj99
; loc_37710:
Obj98_NebulaBombFall:
	bchg	#5,art_tile(a0) ; bypass the animation system and make it blink
	bra.w	JmpTo8_ObjectMoveAndFall

; ===========================================================================
; for obj9A
; loc_3771A:
Obj98_TurtloidShotMove:
	bsr.w	JmpTo26_ObjectMove
	lea	(TurtloidShotAniData).l,a1
	bra.w	JmpTo25_AnimateSprite

; ===========================================================================
; for obj9D
; loc_37728:
Obj98_CoconutFall:
	addi.w	#$20,y_vel(a0) ; apply gravity (less than normal)
	bsr.w	JmpTo26_ObjectMove
	rts

; ===========================================================================
; for objAE
; loc_37734:
Obj98_CluckerShotMove:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_395A8).l,a1
	bra.w	JmpTo25_AnimateSprite

; ===========================================================================
; for objA6
; loc_37742:
Obj98_SpinyShotFall:
	addi.w	#$20,y_vel(a0) ; apply gravity (less than normal)
	bsr.w	JmpTo26_ObjectMove
	lea	(off_38CC4).l,a1
	bra.w	JmpTo25_AnimateSprite

; ===========================================================================
; for objB8
; loc_37756:
Obj98_WallTurretShotMove:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_3BA40).l,a1
	bra.w	JmpTo25_AnimateSprite

; ===========================================================================
; off_37764:
Obj94_SubObjData2:
	dc.l Obj94_Obj98_MapUnc_37678
	dc.w $237E
	dc.b $84,4,4,$98
; off_3776E:
Obj99_SubObjData:
	dc.l Obj99_Obj98_MapUnc_3789A
	dc.w $A36E
	dc.b $84,4,8,$8B
; off_37778:
Obj9A_SubObjData2:
	dc.l Obj9A_Obj98_MapUnc_37B62
	dc.w $38A
	dc.b $84,4,4,$98
; off_37782:
Obj9D_SubObjData2:
	dc.l Obj9D_Obj98_MapUnc_37D96
	dc.w $3EE
	dc.b $84,4,8,$8B
; off_3778C:
ObjA4_SubObjData2:
	dc.l ObjA4_Obj98_MapUnc_38A96
	dc.w $8368
	dc.b $84,5,4,$98
; off_37796:
ObjA6_SubObjData:
	dc.l ObjA5_ObjA6_Obj98_MapUnc_38CCA
	dc.w $252D
	dc.b $84,5,4,$98
; off_377A0:
ObjA7_SubObjData3:
	dc.l ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A
	dc.w $A500
	dc.b $84,4,4,$98
; off_377AA:
ObjAD_SubObjData3:
	dc.l ObjAD_Obj98_MapUnc_395B4
	dc.w $379
	dc.b $84,5,4,$98
; off_377B4:
ObjAF_SubObjData:
	dc.l ObjAF_Obj98_MapUnc_39E68
	dc.w $2380
	dc.b $84,5,4,$98
; off_377BE:
ObjB8_SubObjData2:
	dc.l ObjB8_Obj98_MapUnc_3BA46
	dc.w $3AB
	dc.b $84,3,4,$98




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 99 - Nebula (bomber badnik) from SCZ
; ----------------------------------------------------------------------------
; Sprite_377C8:
Obj99:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_377D6(pc,d0.w),d1
	jmp	off_377D6(pc,d1.w)
; ===========================================================================
off_377D6:
	dc.w loc_377DC-off_377D6
	dc.w loc_377E8-off_377D6; 1
	dc.w loc_3781C-off_377D6; 2
; ===========================================================================

loc_377DC:
	bsr.w	LoadSubObject
	move.w	#-$C0,x_vel(a0)
	rts
; ===========================================================================

loc_377E8:
	bsr.w	loc_366D6
	tst.w	d0
	bne.s	loc_377FA
	cmpi.w	#$80,d2
	bcc.s	loc_377FA
	bsr.w	loc_37810

loc_377FA:
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	lea	(off_37892).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	loc_36788
; ===========================================================================

loc_37810:
	addq.b	#2,routine(a0)
	move.w	#-$A0,y_vel(a0)
	rts
; ===========================================================================

loc_3781C:
	tst.b	objoff_2A(a0)
	bne.s	loc_37834
	bsr.w	loc_366D6
	addi.w	#8,d2
	cmpi.w	#$10,d2
	bcc.s	loc_37834
	bsr.w	loc_37850

loc_37834:
	addi.w	#1,y_vel(a0)
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	lea	(off_37892).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	loc_36788
; ===========================================================================

loc_37850:
	st	objoff_2A(a0)
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_37886
	_move.b	#$98,0(a1) ; load obj98
	move.b	#4,mapping_frame(a1)
	move.b	#$14,subtype(a1) ; <== Obj99_SubObjData
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$18,y_pos(a1)
	lea	Obj98_NebulaBombFall(pc),a2
	move.l	a2,objoff_2A(a1)

return_37886:
	rts
; ===========================================================================
; off_37888:
Obj99_SubObjData2:
	dc.l Obj99_Obj98_MapUnc_3789A
	dc.w $A36E
	dc.w $404
	dc.w $1006
; animation script
off_37892:
	dc.w byte_37894-off_37892
byte_37894:
	dc.b   3,  0,  1,  2,  3,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj99_Obj98_MapUnc_3789A:	BINCLUDE "mappings/sprite/obj99.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9A - Turtloid (turtle badnik) from Sky Chase Zone
; ----------------------------------------------------------------------------
; Sprite_37936:
Obj9A:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_37944(pc,d0.w),d1
	jmp	off_37944(pc,d1.w)
; ===========================================================================
off_37944:
	dc.w loc_37948-off_37944
	dc.w loc_37964-off_37944; 1
; ===========================================================================

loc_37948:
	bsr.w	LoadSubObject
	move.w	#-$80,x_vel(a0)
	bsr.w	loc_37A4A
	lea	(off_37B56).l,a1
	move.l	a1,objoff_2E(a0)
	bra.w	loc_37ABE
; ===========================================================================

loc_37964:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3797A(pc,d0.w),d1
	jsr	off_3797A(pc,d1.w)
	bsr.w	loc_37982
	bra.w	loc_36788
; ===========================================================================
off_3797A:
	dc.w loc_379A0-off_3797A
	dc.w loc_379CA-off_3797A; 1
	dc.w loc_379EA-off_3797A; 2
	dc.w return_37A04-off_3797A; 3
; ===========================================================================

loc_37982:
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	move.w	#$18,d1
	move.w	#8,d2
	move.w	#$E,d3
	move.w	(sp)+,d4
	bra.w	JmpTo9_PlatformObject
; ===========================================================================

loc_379A0:
	bsr.w	loc_366D6
	tst.w	d0
	bmi.w	return_37A48
	cmpi.w	#$80,d2
	bcc.w	return_37A48
	addq.b	#2,routine_secondary(a0)
	move.w	#0,x_vel(a0)
	move.b	#4,objoff_2A(a0)
	move.b	#1,mapping_frame(a0)
	rts
; ===========================================================================

loc_379CA:
	subq.b	#1,objoff_2A(a0)
	bpl.w	return_37A48
	addq.b	#2,routine_secondary(a0)
	move.b	#8,objoff_2A(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	#3,mapping_frame(a1)
	bra.w	loc_37AF2
; ===========================================================================

loc_379EA:
	subq.b	#1,objoff_2A(a0)
	bpl.s	return_37A02
	addq.b	#2,routine_secondary(a0)
	move.w	#-$80,x_vel(a0)
	clr.b	mapping_frame(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object

return_37A02:
	rts
; ===========================================================================

return_37A04:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9B - Turtloid rider from Sky Chase Zone
; ----------------------------------------------------------------------------
; Sprite_37A06:
Obj9B:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_37A14(pc,d0.w),d1
	jmp	off_37A14(pc,d1.w)
; ===========================================================================
off_37A14:
	dc.w BranchTo_LoadSubObject-off_37A14
	dc.w loc_37A1C-off_37A14; 1
; ===========================================================================

BranchTo_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_37A1C:
	movea.w	objoff_2C(a0),a1 ; a1=object
	lea	word_37A2C(pc),a2
	bsr.w	loc_37A30
	bra.w	loc_36788
; ===========================================================================
word_37A2C:
	dc.w	 4
	dc.w $FFE8	; 1
; ===========================================================================

loc_37A30:
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	move.w	(a2)+,d0
	add.w	d0,x_pos(a0)
	move.w	(a2)+,d0
	add.w	d0,y_pos(a0)

return_37A48:
	rts
; ===========================================================================

loc_37A4A:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_37A80
	_move.b	#$9B,0(a1) ; load obj9B
	move.b	#2,mapping_frame(a1)
	move.b	#$18,subtype(a1) ; <== Obj9B_SubObjData
	move.w	a0,objoff_2C(a1)
	move.w	a1,objoff_2C(a0)
	move.w	x_pos(a0),x_pos(a1)
	addq.w	#4,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	subi.w	#$18,y_pos(a1)

return_37A80:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9C - Balkiry's jet from Sky Chase Zone
; ----------------------------------------------------------------------------
; Sprite_37A82:
Obj9C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_37A90(pc,d0.w),d1
	jmp	off_37A90(pc,d1.w)
; ===========================================================================
off_37A90:
	dc.w BranchTo2_LoadSubObject-off_37A90
	dc.w loc_37A98-off_37A90; 1
; ===========================================================================

BranchTo2_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_37A98:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	objoff_32(a0),d0
	cmp.b	(a1),d0
	bne.w	JmpTo65_DeleteObject
	move.l	x_pos(a1),x_pos(a0)
	move.l	y_pos(a1),y_pos(a0)
	movea.l	objoff_2E(a0),a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	loc_36788
; ===========================================================================

loc_37ABE:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_37AF0
	_move.b	#$9C,0(a1) ; load obj9C
	move.b	#6,mapping_frame(a1)
	move.b	#$1A,subtype(a1) ; <== Obj9C_SubObjData
	move.w	a0,objoff_2C(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.l	objoff_2E(a0),objoff_2E(a1)
	move.b	(a0),objoff_32(a1)

return_37AF0:
	rts

; ===========================================================================
; this code is for Obj9A

loc_37AF2:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_37B30
	_move.b	#$98,0(a1) ; load obj98
	move.b	#6,mapping_frame(a1)
	move.b	#$1C,subtype(a1) ; <== Obj9A_SubObjData2
	move.w	x_pos(a0),x_pos(a1)
	subi.w	#$14,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$A,y_pos(a1)
	move.w	#-$100,x_vel(a1)
	lea	Obj98_TurtloidShotMove(pc),a2
	move.l	a2,objoff_2A(a1)

return_37B30:
	rts
; ===========================================================================
; off_37B32:
Obj9A_SubObjData:
	dc.l Obj9A_Obj98_MapUnc_37B62
	dc.w $38A
	dc.w $405
	dc.w $1800
; off_37B3C:
Obj9B_SubObjData:
	dc.l Obj9A_Obj98_MapUnc_37B62
	dc.w $38A
	dc.w $404
	dc.w $C1A
; off_37B46:
Obj9C_SubObjData:
	dc.l Obj9A_Obj98_MapUnc_37B62
	dc.w $38A
	dc.w $405
	dc.w $800

; animation script
; off_37B50:
TurtloidShotAniData:
	dc.w byte_37B52-TurtloidShotAniData
byte_37B52:
	dc.b   1,  4,  5,$FF
	even

; animation script
off_37B56:
	dc.w byte_37B58-off_37B56
byte_37B58:
	dc.b   1,  6,  7,$FF
	even

; animation script
off_37B5C:
	dc.w byte_37B5E-off_37B5C
byte_37B5E:
	dc.b   1,  8,  9,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj9A_Obj98_MapUnc_37B62:	BINCLUDE "mappings/sprite/obj9C.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9D - Coconuts (monkey badnik) from EHZ
; ----------------------------------------------------------------------------
; Sprite_37BFA:
Obj9D:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_37C08(pc,d0.w),d1
	jmp	off_37C08(pc,d1.w)
; ===========================================================================
off_37C08:
	dc.w loc_37C10-off_37C08; 0
	dc.w loc_37C1C-off_37C08; 2
	dc.w Obj09_Climbing-off_37C08; 4
	dc.w Obj09_Throwing-off_37C08; 6
; ===========================================================================

loc_37C10:
	bsr.w	LoadSubObject
	move.b	#$10,objoff_2A(a0)
	rts
; ===========================================================================

loc_37C1C:
	bsr.w	loc_366D6
	bclr	#0,render_flags(a0)
	bclr	#0,status(a0)
	tst.w	d0
	beq.s	+
	bset	#0,render_flags(a0)
	bset	#0,status(a0)
+
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcc.s	+
	tst.b	objoff_2E(a0)
	beq.s	loc_37C66
	subq.b	#1,objoff_2E(a0)
+
	subq.b	#1,objoff_2A(a0)
	bmi.s	+
	bra.w	JmpTo39_MarkObjGone
; ---------------------------------------------------------------------------
+	addq.b	#2,routine(a0)
	bsr.w	loc_37C82
	bra.w	JmpTo39_MarkObjGone
; ---------------------------------------------------------------------------
loc_37C66:
	move.b	#6,routine(a0)	; Obj09_Throwing
	move.b	#1,mapping_frame(a0)
	move.b	#8,objoff_2A(a0)
	move.b	#$20,objoff_2E(a0)
	bra.w	JmpTo39_MarkObjGone
; ---------------------------------------------------------------------------
loc_37C82:
	move.w	objoff_2C(a0),d0
	cmpi.w	#$C,d0
	bcs.s	+
	moveq	#0,d0
+
	lea	Obj09_ClimbData(pc,d0.w),a1
	addq.w	#2,d0
	move.w	d0,objoff_2C(a0)
	move.b	(a1)+,y_vel(a0) ; climbing speed
	move.b	(a1)+,objoff_2A(a0) ; time to spend moving at this speed
	rts
; ===========================================================================
; byte_37CA2:
Obj09_ClimbData:
	dc.b  -1,$20
	dc.b   1,$18	; 2
	dc.b  -1,$10	; 4
	dc.b   1,$28	; 6
	dc.b  -1,$20	; 8
	dc.b   1,$10	; 10
; ===========================================================================
; loc_37CAE:
Obj09_Climbing:
	subq.b	#1,objoff_2A(a0)
	beq.s	loc_37CC6
	bsr.w	JmpTo26_ObjectMove
	lea	(off_37D88).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37CC6:
	subq.b	#2,routine(a0)
	move.b	#$10,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; loc_37CD4:
Obj09_Throwing:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_37CE6(pc,d0.w),d1
	jsr	off_37CE6(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_37CE6:
	dc.w loc_37CEA-off_37CE6
	dc.w loc_37D06-off_37CE6; 1
; ===========================================================================

loc_37CEA:
	subq.b	#1,objoff_2A(a0)
	bmi.s	+
	rts
; ---------------------------------------------------------------------------
+	addq.b	#2,routine_secondary(a0)
	move.b	#8,objoff_2A(a0)
	move.b	#2,mapping_frame(a0)
	bra.w	loc_37D22
; ===========================================================================

loc_37D06:
	subq.b	#1,objoff_2A(a0)
	bmi.s	+
	rts
; ---------------------------------------------------------------------------
+	clr.b	routine_secondary(a0)
	move.b	#4,routine(a0) ; Obj09_Climbing
	move.b	#8,objoff_2A(a0)
	bra.w	loc_37C82
; ===========================================================================

loc_37D22:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_37D74
	_move.b	#$98,0(a1) ; load obj98
	move.b	#3,mapping_frame(a1)
	move.b	#$20,subtype(a1) ; <== Obj9D_SubObjData2
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#-$D,y_pos(a1)
	moveq	#0,d0
	btst	#0,render_flags(a0)
	bne.s	loc_37D58
	moveq	#4,d0

loc_37D58:
	lea	word_37D76(pc,d0.w),a2
	move.w	(a2)+,d0
	add.w	d0,x_pos(a1)
	move.w	(a2)+,x_vel(a1)
	move.w	#-$100,y_vel(a1)
	lea	Obj98_CoconutFall(pc),a2 ; set the routine used to move the projectile
	move.l	a2,objoff_2A(a1)

return_37D74:
	rts
; ===========================================================================
word_37D76:
	dc.w $FFF5
	dc.w  $100	; 1
	dc.w	$B	; 2
	dc.w $FF00	; 3
; off_37D7E:
Obj9D_SubObjData:
	dc.l Obj9D_Obj98_MapUnc_37D96
	dc.w $3EE
	dc.w $405
	dc.w $C09

; animation script
off_37D88:
	dc.w byte_37D8C-off_37D88
	dc.w byte_37D90-off_37D88; 1
byte_37D8C:
	dc.b   5,  0,  1,$FF
byte_37D90:
	dc.b   9,  1,  2,  1,$FF
	even
; ------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------
Obj9D_Obj98_MapUnc_37D96:	BINCLUDE "mappings/sprite/obj9D.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9E - Crawlton (snake badnik) from MCZ
; ----------------------------------------------------------------------------
; Sprite_37E16:
Obj9E:
	moveq	#0,d0
	move.b	objoff_3B(a0),d0
	move.w	off_37E24(pc,d0.w),d1
	jmp	off_37E24(pc,d1.w)
; ===========================================================================
off_37E24:
	dc.w loc_37E30-off_37E24
	dc.w loc_37E42-off_37E24; 1
	dc.w loc_37E98-off_37E24; 2
	dc.w loc_37EB6-off_37E24; 3
	dc.w loc_37ED4-off_37E24; 4
	dc.w loc_37EFC-off_37E24; 5
; ===========================================================================

loc_37E30:
	bsr.w	LoadSubObject
	move.b	#$80,y_radius(a0)
	addq.b	#2,objoff_3B(a0)
	bra.w	loc_37F74
; ===========================================================================

loc_37E42:
	bsr.w	loc_366D6
	move.w	d2,d4
	move.w	d3,d5
	addi.w	#$80,d2
	cmpi.w	#$100,d2
	bcc.s	BranchTo4_JmpTo39_MarkObjGone
	addi.w	#$80,d3
	cmpi.w	#$100,d3
	bcs.s	loc_37E62

BranchTo4_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37E62:
	addq.b	#2,objoff_3B(a0)
	move.b	#$10,objoff_3A(a0)
	bclr	#0,render_flags(a0)
	tst.w	d0
	beq.s	loc_37E7C
	bset	#0,render_flags(a0)

loc_37E7C:
	neg.w	d4
	lsl.w	#3,d4
	andi.w	#$FF00,d4
	move.w	d4,x_vel(a0)
	neg.w	d5
	lsl.w	#3,d5
	andi.w	#$FF00,d5
	move.w	d5,y_vel(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37E98:
	subq.b	#1,objoff_3A(a0)
	bmi.s	loc_37EA2
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37EA2:
	addq.b	#2,objoff_3B(a0)
	move.b	#8,objoff_39(a0)
	move.b	#$1C,objoff_3A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37EB6:
	subq.b	#1,objoff_3A(a0)
	beq.s	loc_37EC4
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37EC4:
	move.b	objoff_39(a0),objoff_3B(a0)
	move.b	#$20,objoff_3A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37ED4:
	subq.b	#1,objoff_3A(a0)
	beq.s	loc_37EDE
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37EDE:
	move.b	#6,objoff_3B(a0)
	move.b	#2,objoff_39(a0)
	move.b	#$1C,objoff_3A(a0)
	neg.w	x_vel(a0)
	neg.w	y_vel(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_37EFC:
	movea.w	parent(a0),a1 ; a1=object
	cmpi.b	#$9E,(a1)
	bne.w	JmpTo65_DeleteObject
	bclr	#0,render_flags(a0)
	btst	#0,render_flags(a1)
	beq.s	loc_37F1C
	bset	#0,render_flags(a0)

loc_37F1C:
	move.b	#$80,objoff_14(a0)
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	cmpi.b	#6,objoff_3B(a1)
	bne.s	loc_37F6C
	move.w	x_vel(a1),d2
	asr.w	#8,d2
	move.w	y_vel(a1),d3
	asr.w	#8,d3
	lea	$10(a0),a2
	move.b	objoff_3A(a1),d0
	moveq	#$18,d1
	moveq	#6,d6

loc_37F4E:
	move.w	(a2),d4
	move.w	2(a2),d5
	cmp.b	d1,d0
	bcc.s	loc_37F5C
	add.w	d2,d4
	add.w	d3,d5

loc_37F5C:
	move.w	d4,(a2)+
	move.w	d5,(a2)+
	subi.b	#4,d1
	bcs.s	loc_37F6C
	addq.w	#2,a2
	dbf	d6,loc_37F4E

loc_37F6C:
	move.w	#$280,d0
	bra.w	JmpTo5_DisplaySprite3
; ===========================================================================

loc_37F74:
	bsr.w	JmpTo19_SingleObjLoad
	bne.s	return_37FE6
	_move.b	#$9E,0(a1) ; load obj9E
	move.b	render_flags(a0),render_flags(a1)
	bset	#6,render_flags(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#$A,objoff_3B(a1)
	move.b	#0,objoff_B(a1)
	move.b	#$80,objoff_E(a1)
	move.b	#7,objoff_F(a1)
	move.w	a0,parent(a1)
	move.w	x_pos(a0),d2
	move.w	d2,x_pos(a1)
	move.w	y_pos(a0),d3
	move.w	d3,y_pos(a1)
	move.b	#$80,objoff_14(a1)
	bset	#4,render_flags(a1)
	lea	$10(a1),a2
	moveq	#6,d6

loc_37FD6:
	move.w	d2,(a2)+
	move.w	d3,(a2)+
	move.w	#2,(a2)+
	addi.w	#$10,d1
	dbf	d6,loc_37FD6

return_37FE6:
	rts
; ===========================================================================
; off_37FE8:
Obj9E_SubObjData:
	dc.l Obj9E_MapUnc_37FF2
	dc.w $23C0
	dc.w $404
	dc.w $800B
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
Obj9E_MapUnc_37FF2:	BINCLUDE "mappings/sprite/obj9E.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9F - Shellcraker (crab badnik) from MTZ
; ----------------------------------------------------------------------------
; Sprite_3800C:
Obj9F:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3801A(pc,d0.w),d1
	jmp	off_3801A(pc,d1.w)
; ===========================================================================
off_3801A:
	dc.w loc_38022-off_3801A
	dc.w loc_3804E-off_3801A; 1
	dc.w loc_380C4-off_3801A; 2
	dc.w loc_380FC-off_3801A; 3
; ===========================================================================

loc_38022:
	bsr.w	LoadSubObject
	btst	#0,render_flags(a0)
	beq.s	loc_38034
	bset	#0,status(a0)

loc_38034:
	move.w	#-$40,x_vel(a0)
	move.b	#$C,y_radius(a0)
	move.b	#$18,x_radius(a0)
	move.w	#$140,objoff_2A(a0)
	rts
; ===========================================================================

loc_3804E:
	bsr.w	loc_366D6
	tst.w	d0
	beq.s	loc_3805E
	btst	#0,render_flags(a0)
	beq.s	loc_38068

loc_3805E:
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcs.s	loc_380AE

loc_38068:
	bsr.w	JmpTo26_ObjectMove
	jsr	(ObjCheckFloorDist).l
	cmpi.w	#-8,d1
	blt.s	loc_38096
	cmpi.w	#$C,d1
	bge.s	loc_38096
	add.w	d1,y_pos(a0)
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3809A
	lea	(off_38304).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38096:
	neg.w	x_vel(a0)

loc_3809A:
	addq.b	#2,routine(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#$3B,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_380AE:
	move.b	#6,routine(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#8,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_380C4:
	tst.b	render_flags(a0)
	bpl.s	loc_380E4
	bsr.w	loc_366D6
	tst.w	d0
	beq.s	loc_380DA
	btst	#0,render_flags(a0)
	beq.s	loc_380E4

loc_380DA:
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcs.s	loc_380AE

loc_380E4:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_380EE
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_380EE:
	subq.b	#2,routine(a0)
	move.w	#$140,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_380FC:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3810E(pc,d0.w),d1
	jsr	off_3810E(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3810E:
	dc.w loc_38114-off_3810E
	dc.w loc_3812A-off_3810E; 1
	dc.w loc_3813E-off_3810E; 2
; ===========================================================================

loc_38114:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3811C
	rts
; ===========================================================================

loc_3811C:
	addq.b	#2,routine_secondary(a0)
	move.b	#3,mapping_frame(a0)
	bra.w	loc_38292
; ===========================================================================

loc_3812A:
	tst.b	objoff_2C(a0)
	bne.s	loc_38132
	rts
; ===========================================================================

loc_38132:
	addq.b	#2,routine_secondary(a0)
	move.w	#$20,objoff_2A(a0)
	rts
; ===========================================================================

loc_3813E:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_38146
	rts
; ===========================================================================

loc_38146:
	clr.b	routine_secondary(a0)
	clr.b	objoff_2C(a0)
	move.b	#2,routine(a0)
	move.w	#$140,objoff_2A(a0)
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A0 - Shellcracker's claw from MTZ
; ----------------------------------------------------------------------------
; Sprite_3815C:
ObjA0:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3816A(pc,d0.w),d1
	jmp	off_3816A(pc,d1.w)
; ===========================================================================
off_3816A:
	dc.w loc_38170-off_3816A
	dc.w loc_381AC-off_3816A; 1
	dc.w loc_38280-off_3816A; 2
; ===========================================================================

loc_38170:
	bsr.w	LoadSubObject
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	render_flags(a1),d0
	andi.b	#1,d0
	or.b	d0,render_flags(a0)
	move.w	objoff_2E(a0),d0
	beq.s	loc_38198
	move.b	#4,mapping_frame(a0)
	addq.w	#6,x_pos(a0)
	addq.w	#6,y_pos(a0)

loc_38198:
	lsr.w	#1,d0
	move.b	byte_381A4(pc,d0.w),objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
byte_381A4:
	dc.b   0
	dc.b   3	; 1
	dc.b   5	; 2
	dc.b   7	; 3
	dc.b   9	; 4
	dc.b  $B	; 5
	dc.b  $D	; 6
	dc.b  $F	; 7
; ===========================================================================

loc_381AC:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$9F,(a1)
	bne.s	loc_381D0
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_381C8(pc,d0.w),d1
	jsr	off_381C8(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_381C8:
	dc.w loc_381E0-off_381C8
	dc.w loc_3822A-off_381C8; 1
	dc.w loc_38244-off_381C8; 2
	dc.w loc_38258-off_381C8; 3
; ===========================================================================

loc_381D0:
	move.b	#4,routine(a0)
	move.w	#$40,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_381E0:
	subq.b	#1,objoff_2A(a0)
	beq.s	loc_381EA
	bmi.s	loc_381EA
	rts
; ===========================================================================

loc_381EA:
	addq.b	#2,routine_secondary(a0)
	move.w	objoff_2E(a0),d0
	cmpi.w	#$E,d0
	bcc.s	loc_3821A
	move.w	#-$400,d2
	btst	#0,render_flags(a0)
	beq.s	loc_38206
	neg.w	d2

loc_38206:
	move.w	d2,x_vel(a0)
	lsr.w	#1,d0
	move.b	byte_38222(pc,d0.w),d1
	move.b	d1,objoff_2A(a0)
	move.b	d1,objoff_2B(a0)
	rts
; ===========================================================================

loc_3821A:
	move.w	#$B,objoff_2A(a0)
	rts
; ===========================================================================
byte_38222:
	dc.b  $D
	dc.b  $C	; 1
	dc.b  $A	; 2
	dc.b   8	; 3
	dc.b   6	; 4
	dc.b   4	; 5
	dc.b   2	; 6
	dc.b   0	; 7
; ===========================================================================

loc_3822A:
	bsr.w	JmpTo26_ObjectMove
	subq.b	#1,objoff_2A(a0)
	beq.s	loc_38238
	bmi.s	loc_38238
	rts
; ===========================================================================

loc_38238:
	addq.b	#2,routine_secondary(a0)
	move.b	#8,objoff_2A(a0)
	rts
; ===========================================================================

loc_38244:
	subq.b	#1,objoff_2A(a0)
	beq.s	loc_3824E
	bmi.s	loc_3824E
	rts
; ===========================================================================

loc_3824E:
	addq.b	#2,routine_secondary(a0)
	neg.w	x_vel(a0)
	rts
; ===========================================================================

loc_38258:
	bsr.w	JmpTo26_ObjectMove
	subq.b	#1,objoff_2B(a0)
	beq.s	loc_38266
	bmi.s	loc_38266
	rts
; ===========================================================================

loc_38266:
	tst.w	objoff_2E(a0)
	bne.s	loc_3827A
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	#0,mapping_frame(a1)
	st	objoff_2C(a1)

loc_3827A:
	addq.w	#4,sp
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_38280:
	bsr.w	JmpTo8_ObjectMoveAndFall
	subi.w	#1,objoff_2A(a0)
	bmi.w	JmpTo65_DeleteObject
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38292:
	moveq	#0,d1
	moveq	#7,d6

loc_38296:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_382EE
	_move.b	#$A0,0(a1) ; load objA0
	move.b	#$26,subtype(a1) ; <== ObjA0_SubObjData
	move.b	#5,mapping_frame(a1)
	move.b	#4,priority(a1)
	move.w	a0,objoff_2C(a1)
	move.w	d1,objoff_2E(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	#-$14,d2
	btst	#0,render_flags(a0)
	beq.s	loc_382D8
	neg.w	d2
	tst.w	d1
	beq.s	loc_382D8
	subi.w	#$C,d2

loc_382D8:
	add.w	d2,x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	subi.w	#8,y_pos(a1)
	addq.w	#2,d1
	dbf	d6,loc_38296

return_382EE:
	rts
; ===========================================================================
; off_382F0:
Obj9F_SubObjData:
	dc.l Obj9F_MapUnc_38314
	dc.w $31C
	dc.w $405
	dc.w $180A
; off_382FA:
ObjA0_SubObjData:
	dc.l Obj9F_MapUnc_38314
	dc.w $31C
	dc.w $404
	dc.w $C9A
; animation script
off_38304:
	dc.w byte_38308-off_38304
	dc.w byte_3830E-off_38304; 1
byte_38308:
	dc.b  $E,  0,  1,  2,$FF,  0
byte_3830E:
	dc.b  $E,  0,  2,  1,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj9F_MapUnc_38314:	BINCLUDE "mappings/sprite/objA0.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A1 - Slicer (praying mantis dude) from MTZ
; ----------------------------------------------------------------------------
; Sprite_383B4:
ObjA1:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_383C2(pc,d0.w),d1
	jmp	off_383C2(pc,d1.w)
; ===========================================================================
off_383C2:
	dc.w loc_383CC-off_383C2
	dc.w loc_383F0-off_383C2; 1
	dc.w loc_38466-off_383C2; 2
	dc.w loc_38482-off_383C2; 3
	dc.w BranchTo5_JmpTo39_MarkObjGone-off_383C2; 4
; ===========================================================================

loc_383CC:
	bsr.w	LoadSubObject
	move.w	#-$40,d0
	btst	#0,render_flags(a0)
	beq.s	loc_383DE
	neg.w	d0

loc_383DE:
	move.w	d0,x_vel(a0)
	move.b	#$10,y_radius(a0)
	move.b	#$10,x_radius(a0)
	rts
; ===========================================================================

loc_383F0:
	tst.b	render_flags(a0)
	bpl.s	loc_3841C
	bsr.w	loc_366D6
	btst	#0,render_flags(a0)
	beq.s	loc_38404
	subq.w	#2,d0

loc_38404:
	tst.w	d0
	bne.s	loc_3841C
	addi.w	#$80,d2
	cmpi.w	#$100,d2
	bcc.s	loc_3841C
	addi.w	#$40,d3
	cmpi.w	#$80,d3
	bcs.s	loc_38452

loc_3841C:
	bsr.w	JmpTo26_ObjectMove
	jsr	(ObjCheckFloorDist).l
	cmpi.w	#-8,d1
	blt.s	loc_38444
	cmpi.w	#$C,d1
	bge.s	loc_38444
	add.w	d1,y_pos(a0)
	lea	(off_385D4).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38444:
	addq.b	#2,routine(a0)
	move.b	#$3B,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38452:
	addq.b	#4,routine(a0)
	move.b	#3,mapping_frame(a0)
	move.b	#8,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38466:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_38470
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38470:
	subq.b	#2,routine(a0)
	neg.w	x_vel(a0)
	bchg	#0,status(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38482:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_3848C
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3848C:
	addq.b	#2,routine(a0)
	move.b	#4,mapping_frame(a0)
	bsr.w	loc_3853E
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

BranchTo5_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A2 - Slicer's pincers from MTZ
; ----------------------------------------------------------------------------
; Sprite_384A2:
ObjA2:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_384B0(pc,d0.w),d1
	jmp	off_384B0(pc,d1.w)
; ===========================================================================
off_384B0:
	dc.w loc_384B6-off_384B0
	dc.w loc_384BE-off_384B0; 1
	dc.w loc_38524-off_384B0; 2
; ===========================================================================

loc_384B6:
	bsr.w	LoadSubObject
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_384BE:
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3851A
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$A1,(a1)
	bne.s	loc_3851A
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_384F6(pc,d0.w),d1
	jsr	off_384F6(pc,d1.w)
	bsr.w	JmpTo26_ObjectMove
	lea	(off_385DA).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_384F6:
	dc.w loc_384F8-off_384F6
; ===========================================================================

loc_384F8:
	bsr.w	loc_366D6
	move.w	word_38516(pc,d0.w),d2
	add.w	d2,x_vel(a0)
	move.w	word_38516(pc,d1.w),d2
	add.w	d2,y_vel(a0)
	move.w	#$200,d0
	move.w	d0,d1
	bra.w	loc_3671A
; ===========================================================================
word_38516:
	dc.w $FFF0
	dc.w   $10	; 1
; ===========================================================================

loc_3851A:
	addq.b	#2,routine(a0)
	move.w	#$60,objoff_2A(a0)

loc_38524:
	subq.w	#1,objoff_2A(a0)
	bmi.w	JmpTo65_DeleteObject
	bsr.w	JmpTo8_ObjectMoveAndFall
	lea	(off_385DA).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3853E:
	lea	objoff_3C(a0),a2 ; a2=object
	moveq	#0,d1
	moveq	#1,d6

loc_38546:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_385BA
	_move.b	#$A2,0(a1) ; load objA2
	move.b	#$2A,subtype(a1) ; <== ObjA2_SubObjData
	move.b	render_flags(a0),render_flags(a1)
	move.b	#5,mapping_frame(a1)
	move.b	#4,priority(a1)
	move.w	#$78,objoff_2A(a1)
	move.w	a0,objoff_2C(a1)
	move.w	a1,(a2)+
	move.w	#-$200,d0
	btst	#0,render_flags(a1)
	beq.s	loc_3858A
	neg.w	d0
	bset	#0,status(a1)

loc_3858A:
	move.w	d0,x_vel(a1)
	lea	byte_385BC(pc,d1.w),a3
	move.b	(a3)+,d0
	ext.w	d0
	btst	#0,render_flags(a1)
	beq.s	loc_385A0
	neg.w	d0

loc_385A0:
	add.w	x_pos(a0),d0
	move.w	d0,x_pos(a1)
	move.b	(a3)+,d0
	ext.w	d0
	add.w	y_pos(a0),d0
	move.w	d0,y_pos(a1)
	addq.w	#2,d1
	dbf	d6,loc_38546

return_385BA:
	rts
; ===========================================================================
byte_385BC:
	dc.b   6
	dc.b   0	; 1
	dc.b $F0	; 2
	dc.b   0	; 3
; off_385C0
ObjA1_SubObjData:
	dc.l ObjA1_MapUnc_385E2
	dc.w $243C
	dc.w $405
	dc.w $1006
; off_385CA:
ObjA2_SubObjData:
	dc.l ObjA1_MapUnc_385E2
	dc.w $243C
	dc.w $404
	dc.w $109A
; animation script
off_385D4:
	dc.w byte_385D6-off_385D4
byte_385D6:
	dc.b $13,  0,  2,$FF
	even
; animation script
off_385DA:
	dc.w byte_385DC-off_385DA
byte_385DC:
	dc.b   3,  5,  6,  7,  8,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjA1_MapUnc_385E2:	BINCLUDE "mappings/sprite/objA2.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object A3 - Flasher (firefly/glowbug badnik) from MCZ
; ----------------------------------------------------------------------------
; Sprite_3873E:
ObjA3:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3874C(pc,d0.w),d1
	jmp	off_3874C(pc,d1.w)
; ===========================================================================
off_3874C:
	dc.w loc_3875A-off_3874C
	dc.w loc_38766-off_3874C; 1
	dc.w loc_38794-off_3874C; 2
	dc.w loc_38832-off_3874C; 3
	dc.w loc_3885C-off_3874C; 4
	dc.w loc_38880-off_3874C; 5
	dc.w loc_3888E-off_3874C; 6
; ===========================================================================

loc_3875A:
	bsr.w	LoadSubObject
	move.w	#$40,objoff_2A(a0)
	rts
; ===========================================================================

loc_38766:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_38770
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_38770:
	addq.b	#2,routine(a0)
	move.w	#-$100,x_vel(a0)
	move.w	#$40,y_vel(a0)
	move.w	#2,objoff_2E(a0)
	clr.w	objoff_2A(a0)
	move.w	#$80,objoff_30(a0)
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_38794:
	subq.w	#1,objoff_30(a0)
	bmi.s	loc_387FC
	move.w	objoff_2A(a0),d0
	bmi.w	JmpTo65_DeleteObject
	bclr	#0,render_flags(a0)
	bclr	#0,status(a0)
	tst.w	x_vel(a0)
	bmi.s	loc_387C0
	bset	#0,render_flags(a0)
	bset	#0,status(a0)

loc_387C0:
	addq.w	#1,d0
	move.w	d0,objoff_2A(a0)
	move.w	objoff_2C(a0),d1
	move.w	word_38810(pc,d1.w),d2
	cmp.w	d2,d0
	bcs.s	loc_387EC
	addq.w	#2,d1
	move.w	d1,objoff_2C(a0)
	lea	byte_38820(pc,d1.w),a1
	tst.b	(a1)+
	beq.s	loc_387E4
	neg.w	objoff_2E(a0)

loc_387E4:
	tst.b	(a1)+
	beq.s	loc_387EC
	neg.w	y_vel(a0)

loc_387EC:
	move.w	objoff_2E(a0),d0
	add.w	d0,x_vel(a0)

loc_387F4:
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_387FC:
	addq.b	#2,routine(a0)
	move.w	#$80,objoff_30(a0)
	ori.b	#$80,collision_flags(a0)
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================
word_38810:
	dc.w  $100
	dc.w  $1A0	; 1
	dc.w  $208	; 2
	dc.w  $285	; 3
	dc.w  $300	; 4
	dc.w  $340	; 5
	dc.w  $390	; 6
	dc.w  $440	; 7
byte_38820:
	dc.b $F0
	dc.b   0	; 1
	dc.b   1	; 2
	dc.b   1	; 3
	dc.b   0	; 4
	dc.b   1	; 5
	dc.b   1	; 6
	dc.b   1	; 7
	dc.b   0	; 8
	dc.b   1	; 9
	dc.b   0	; 10
	dc.b   1	; 11
	dc.b   1	; 12
	dc.b   0	; 13
	dc.b   0	; 14
	dc.b   1	; 15
	dc.b   0	; 16
	dc.b   1	; 17
; ===========================================================================

loc_38832:
	move.b	routine(a0),d2
	lea	(off_388B6).l,a1
	bsr.w	JmpTo25_AnimateSprite
	cmp.b	routine(a0),d2
	bne.s	loc_3884A
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_3884A:
	clr.l	mapping_frame(a0)
	clr.w	anim_frame_duration(a0)
	move.b	#3,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3885C:
	subq.w	#1,objoff_30(a0)
	bmi.s	loc_38870
	lea	(off_388DA).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_38870:
	addq.b	#2,routine(a0)
	clr.l	mapping_frame(a0)
	clr.w	anim_frame_duration(a0)
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_38880:
	lea	(off_388E6).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================

loc_3888E:
	move.b	#4,routine(a0)
	move.w	#$80,objoff_30(a0)
	andi.b	#$7F,collision_flags(a0)
	clr.l	mapping_frame(a0)
	clr.w	anim_frame_duration(a0)
	bra.w	JmpTo2_MarkObjGone_P1
; ===========================================================================
; off_388AC:
ObjA3_SubObjData:
	dc.l ObjA3_MapUnc_388F0
	dc.w $83A8
	dc.w $404
	dc.w $1006

; animation script
off_388B6:
	dc.w byte_388B8-off_388B6
byte_388B8:
	dc.b   0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1
	dc.b   0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  2,  3,  4, $FC
	even
; animation script
off_388DA:
	dc.w byte_388DC-off_388DA
byte_388DC:
	dc.b   0,  2,  0,  3,  0,  4,  0,  3,  0,$FF
	even
; animation script
off_388E6:
	dc.w byte_388E8-off_388E6
byte_388E8:
	dc.b   3,  4,  3,  2,  1,  0,$FC
	even
; -------------------------------------------------------------------------------
; sprite mappings
; -------------------------------------------------------------------------------
ObjA3_MapUnc_388F0:	BINCLUDE "mappings/sprite/objA3.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object A4 - Asteron (exploding starfish badnik) from MTZ
; ----------------------------------------------------------------------------
; Sprite_3899C:
ObjA4:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_389AA(pc,d0.w),d1
	jmp	off_389AA(pc,d1.w)
; ===========================================================================
off_389AA:
	dc.w BranchTo3_LoadSubObject-off_389AA
	dc.w loc_389B6-off_389AA; 1
	dc.w loc_389DA-off_389AA; 2
	dc.w loc_38A2C-off_389AA; 3
; ===========================================================================

BranchTo3_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_389B6:
	bsr.w	loc_366D6
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcc.s	BranchTo6_JmpTo39_MarkObjGone
	addi.w	#$40,d3
	cmpi.w	#$80,d3
	bcs.s	loc_389D2

BranchTo6_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_389D2:
	addq.b	#2,routine(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_389DA:
	bsr.w	loc_366D6
	tst.w	d2
	bpl.s	loc_389E4
	neg.w	d2

loc_389E4:
	cmpi.w	#$10,d2
	bcs.s	loc_389FA
	cmpi.w	#$60,d2
	bcc.s	loc_389FA
	move.w	word_38A1A(pc,d0.w),x_vel(a0)
	bsr.w	loc_38A1E

loc_389FA:
	tst.w	d3
	bpl.s	loc_38A00
	neg.w	d3

loc_38A00:
	cmpi.w	#$10,d3
	bcs.s	BranchTo7_JmpTo39_MarkObjGone
	cmpi.w	#$60,d3
	bcc.s	BranchTo7_JmpTo39_MarkObjGone
	move.w	word_38A1A(pc,d1.w),y_vel(a0)
	bsr.w	loc_38A1E

BranchTo7_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
word_38A1A:
	dc.w $FFC0
	dc.w   $40	; 1
; ===========================================================================

loc_38A1E:
	move.b	#6,routine(a0)
	move.b	#$40,objoff_2A(a0)
	rts
; ===========================================================================

loc_38A2C:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_38A44
	bsr.w	JmpTo26_ObjectMove
	lea	(off_38A90).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38A44:
	_move.b	#$27,0(a0) ; load 0bj27
	move.b	#2,routine(a0)
	bsr.w	loc_38A58
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38A58:
	move.b	#$30,d2
	moveq	#4,d6
	lea	(word_38A68).l,a2
	bra.w	loc_3681A
; ===========================================================================
word_38A68:
	dc.w $F8
	dc.w $FC
	dc.w $200
	dc.w $8FC
	dc.w $3FF
	dc.w $301
	dc.w $808
	dc.w $303
	dc.w $401
	dc.w $F808
	dc.w $FD03
	dc.w $400
	dc.w $F8FC
	dc.w $FDFF
	dc.w $300
; off_38A86:
ObjA4_SubObjData:
	dc.l ObjA4_Obj98_MapUnc_38A96
	dc.w $8368
	dc.w $404
	dc.w $100B
; animation script
off_38A90:
	dc.w byte_38A92-off_38A90
byte_38A92:
	dc.b   1,  0,  1,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjA4_Obj98_MapUnc_38A96:	BINCLUDE "mappings/sprite/objA4.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object A5 - Spiny (crawling badnik) from CPZ
; ----------------------------------------------------------------------------
; Sprite_38AEA:
ObjA5:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_38AF8(pc,d0.w),d1
	jmp	off_38AF8(pc,d1.w)
; ===========================================================================
off_38AF8:
	dc.w loc_38AFE-off_38AF8
	dc.w loc_38B10-off_38AF8; 1
	dc.w loc_38B62-off_38AF8; 2
; ===========================================================================

loc_38AFE:
	bsr.w	LoadSubObject
	move.w	#-$40,x_vel(a0)
	move.w	#$80,objoff_2A(a0)
	rts
; ===========================================================================

loc_38B10:
	tst.b	objoff_2B(a0)
	beq.s	loc_38B1E
	subq.b	#1,objoff_2B(a0)
	bra.w	loc_38B2C
; ===========================================================================

loc_38B1E:
	bsr.w	loc_366D6
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcs.s	loc_38B4E

loc_38B2C:
	subq.b	#1,objoff_2A(a0)
	bne.s	loc_38B3C
	move.w	#$80,objoff_2A(a0)
	neg.w	x_vel(a0)

loc_38B3C:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_38CB8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38B4E:
	addq.b	#2,routine(a0)
	move.b	#$28,objoff_2B(a0)
	move.b	#2,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38B62:
	subq.b	#1,objoff_2B(a0)
	bmi.s	loc_38B78
	cmpi.b	#$14,objoff_2B(a0)
	bne.s	BranchTo8_JmpTo39_MarkObjGone
	bsr.w	loc_38C22

BranchTo8_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38B78:
	subq.b	#2,routine(a0)
	move.b	#$40,objoff_2B(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A6 - Spiny (on wall) from CPZ
; ----------------------------------------------------------------------------
; Sprite_38B86:
ObjA6:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_38B94(pc,d0.w),d1
	jmp	off_38B94(pc,d1.w)
; ===========================================================================
off_38B94:
	dc.w loc_38B9A-off_38B94
	dc.w loc_38BAC-off_38B94; 1
	dc.w loc_38BFE-off_38B94; 2
; ===========================================================================

loc_38B9A:
	bsr.w	LoadSubObject
	move.w	#-$40,y_vel(a0)
	move.w	#$80,objoff_2A(a0)
	rts
; ===========================================================================

loc_38BAC:
	tst.b	objoff_2B(a0)
	beq.s	loc_38BBA
	subq.b	#1,objoff_2B(a0)
	bra.w	loc_38BC8
; ===========================================================================

loc_38BBA:
	bsr.w	loc_366D6
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcs.s	loc_38BEA

loc_38BC8:
	subq.b	#1,objoff_2A(a0)
	bne.s	loc_38BD8
	move.w	#$80,objoff_2A(a0)
	neg.w	y_vel(a0)

loc_38BD8:
	bsr.w	JmpTo26_ObjectMove
	lea	(off_38CBE).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38BEA:
	addq.b	#2,routine(a0)
	move.b	#$28,objoff_2B(a0)
	move.b	#5,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38BFE:
	subq.b	#1,objoff_2B(a0)
	bmi.s	loc_38C14
	cmpi.b	#$14,objoff_2B(a0)
	bne.s	BranchTo9_JmpTo39_MarkObjGone
	bsr.w	loc_38C6E

BranchTo9_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38C14:
	subq.b	#2,routine(a0)
	move.b	#$40,objoff_2B(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_38C22:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_38C6C
	_move.b	#$98,0(a1) ; load obj98
	move.b	#6,mapping_frame(a1)
	move.b	#$34,subtype(a1) ; <== ObjA6_SubObjData
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#-$300,y_vel(a1)
	move.w	#$100,d1
	lea	(MainCharacter).w,a2 ; a2=character
	move.w	x_pos(a0),d0
	cmp.w	x_pos(a2),d0
	bcs.s	loc_38C60
	neg.w	d1

loc_38C60:
	move.w	d1,x_vel(a1)
	lea	Obj98_SpinyShotFall(pc),a2
	move.l	a2,objoff_2A(a1)

return_38C6C:
	rts
; ===========================================================================

loc_38C6E:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_38CAC
	_move.b	#$98,0(a1) ; load obj98
	move.b	#6,mapping_frame(a1)
	move.b	#$34,subtype(a1) ; <== ObjA6_SubObjData
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	#$300,d1
	btst	#0,render_flags(a0)
	beq.s	loc_38CA0
	neg.w	d1

loc_38CA0:
	move.w	d1,x_vel(a1)
	lea	Obj98_SpinyShotFall(pc),a2
	move.l	a2,objoff_2A(a1)

return_38CAC:
	rts
; ===========================================================================
; off_38CAE:
ObjA5_SubObjData:
	dc.l ObjA5_ObjA6_Obj98_MapUnc_38CCA
	dc.w $252D
	dc.w $404
	dc.w $80B
; animation scripts
off_38CB8:	dc.w byte_38CBA-off_38CB8
byte_38CBA:	dc.b   9,  0,  1,$FF
	even
off_38CBE:	dc.w byte_38CC0-off_38CBE
byte_38CC0:	dc.b   9,  3,  4,$FF
	even
off_38CC4:	dc.w byte_38CC6-off_38CC4
byte_38CC6:	dc.b   3,  6,  7,$FF
	even
; ------------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------------
ObjA5_ObjA6_Obj98_MapUnc_38CCA:	BINCLUDE "mappings/sprite/objA6.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A7 - Grabber (spider badnik) from CPZ
; ----------------------------------------------------------------------------
; Sprite_38DBA:
ObjA7:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_38DC8(pc,d0.w),d1
	jmp	off_38DC8(pc,d1.w)
; ===========================================================================
off_38DC8:
	dc.w loc_38DCC-off_38DC8
	dc.w loc_38E0C-off_38DC8; 1
; ===========================================================================

loc_38DCC:
	bsr.w	LoadSubObject
	move.w	#-$40,d0
	btst	#0,render_flags(a0)
	beq.s	loc_38DDE
	neg.w	d0

loc_38DDE:
	move.w	d0,x_vel(a0)
	move.w	#$FF,objoff_2A(a0)
	move.b	#2,objoff_2D(a0)
	lea	(byte_391E0).l,a2
	bsr.w	loc_367D0
	lea	(byte_391E4).l,a2
	bsr.w	loc_367D0
	lea	(byte_391E8).l,a2
	bra.w	loc_367D0
; ===========================================================================

loc_38E0C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_38E46(pc,d0.w),d1
	jsr	off_38E46(pc,d1.w)
	bsr.w	JmpTo26_ObjectMove
	moveq	#0,d0
	moveq	#$10,d1
	movea.w	objoff_3C(a0),a1 ; a1=object
	bsr.w	loc_36760
	movea.w	parent(a0),a1 ; a1=object
	move.w	x_pos(a0),x_pos(a1)
	movea.w	objoff_3A(a0),a1 ; a1=object
	move.w	x_pos(a0),x_pos(a1)
	lea	objoff_3A(a0),a2 ; a2=object
	bra.w	loc_39182
; ===========================================================================
off_38E46:
	dc.w loc_38E52-off_38E46
	dc.w loc_38E9A-off_38E46; 1
	dc.w loc_38EB4-off_38E46; 2
	dc.w loc_38F3E-off_38E46; 3
	dc.w loc_38F58-off_38E46; 4
	dc.w BranchTo_ObjA7_CheckExplode-off_38E46; 5
; ===========================================================================

loc_38E52:
	bsr.w	loc_366D6
	addi.w	#$40,d2
	cmpi.w	#$80,d2
	bcc.s	loc_38E66
	cmpi.w	#-$80,d3
	bhi.s	loc_38E84

loc_38E66:
	subq.w	#1,objoff_2A(a0)
	bpl.s	return_38E82
	move.w	#$FF,objoff_2A(a0)
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)
	bchg	#0,status(a0)

return_38E82:
	rts
; ===========================================================================

loc_38E84:
	addq.b	#2,routine_secondary(a0)
	move.w	x_vel(a0),objoff_2E(a0)
	clr.w	x_vel(a0)
	move.b	#$10,objoff_2C(a0)
	rts
; ===========================================================================

loc_38E9A:
	subq.b	#1,objoff_2C(a0)
	bmi.s	loc_38EA2
	rts
; ===========================================================================

loc_38EA2:
	addq.b	#2,routine_secondary(a0)
	move.w	#$200,y_vel(a0)
	move.b	#$40,objoff_2C(a0)
	rts
; ===========================================================================

loc_38EB4:
	tst.b	objoff_30(a0)
	bne.s	loc_38EEE
	subq.b	#1,objoff_2C(a0)
	beq.s	loc_38ED6
	cmpi.b	#$20,objoff_2C(a0)
	bne.s	loc_38ECC
	neg.w	y_vel(a0)

loc_38ECC:
	lea	(off_39214).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_38ED6:
	move.b	#0,routine_secondary(a0)
	clr.w	y_vel(a0)
	move.w	objoff_2E(a0),x_vel(a0)
	move.b	#0,mapping_frame(a0)
	rts
; ===========================================================================

loc_38EEE:
	addq.b	#2,routine_secondary(a0)
	movea.w	objoff_32(a0),a1
	move.b	#$81,$2A(a1)
	clr.w	$10(a1)
	clr.w	$12(a1)
	move.b	#$E,$1C(a1)
	move.b	#1,mapping_frame(a0)
	tst.w	y_vel(a0)
	bmi.s	loc_38F2A
	neg.w	y_vel(a0)
	move.b	objoff_2C(a0),d0
	subi.b	#$40,d0
	neg.w	d0
	addq.b	#1,d0
	move.b	d0,objoff_2C(a0)

loc_38F2A:
	move.b	#1,objoff_2A(a0)
	move.b	#$10,objoff_2B(a0)
	move.b	#$20,objoff_37(a0)
	rts
; ===========================================================================

loc_38F3E:
	bsr.w	ObjA7_CheckExplode
	bsr.w	loc_390BC
	subq.b	#1,objoff_2C(a0)
	beq.s	loc_38F4E
	rts
; ===========================================================================

loc_38F4E:
	addq.b	#2,routine_secondary(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_38F58:
	bsr.w	ObjA7_CheckExplode
	bra.w	loc_390BC
; ===========================================================================
	rts
; ===========================================================================

BranchTo_ObjA7_CheckExplode 
	bra.w	ObjA7_CheckExplode
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A8 - Grabber's legs from CPZ
; ----------------------------------------------------------------------------
; Sprite_38F66:
ObjA8:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_38F74(pc,d0.w),d1
	jmp	off_38F74(pc,d1.w)
; ===========================================================================
off_38F74:
	dc.w loc_38F7C-off_38F74
	dc.w loc_38F88-off_38F74; 1
	dc.w loc_38FE8-off_38F74; 2
	dc.w loc_39022-off_38F74; 3
; ===========================================================================

loc_38F7C:
	bsr.w	LoadSubObject
	move.b	#3,mapping_frame(a0)
	rts
; ===========================================================================

loc_38F88:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$A7,(a1)
	bne.w	JmpTo65_DeleteObject
	bsr.w	loc_367AA
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.b	mapping_frame(a1),d0
	addq.b	#3,d0
	move.b	d0,mapping_frame(a0)
	move.b	collision_property(a0),d0
	beq.s	BranchTo2_JmpTo45_DisplaySprite
	clr.b	collision_property(a0)
	cmpi.b	#4,routine_secondary(a1)
	bne.s	BranchTo2_JmpTo45_DisplaySprite
	andi.b	#3,d0
	beq.s	BranchTo2_JmpTo45_DisplaySprite
	clr.b	collision_flags(a0)
	addq.b	#2,routine(a0)
	add.w	d0,d0
	st	objoff_30(a1)
	move.w	word_38FE0-6(pc,d0.w),objoff_32(a1)
	move.w	word_38FE0(pc,d0.w),objoff_34(a1)

BranchTo2_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
		dc.w $B000	; -2
		dc.w $B040	; -1
word_38FE0:	dc.w $B000	; 0
		dc.w $F604	; 1
		dc.w $F606	; 2
		dc.w $F604	; 3
; ===========================================================================

loc_38FE8:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	objoff_32(a1),d0
	beq.s	loc_3901A
	movea.w	d0,a2 ; a2=object
	cmpi.b	#$A7,(a1)
	bne.s	loc_3900A
	move.w	x_pos(a0),x_pos(a2)
	move.w	y_pos(a0),y_pos(a2)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3900A:
	move.b	#0,objoff_2A(a2)
	bset	#1,status(a2)
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3901A:
	addq.b	#2,routine(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39022:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$A7,(a1) ; compare to objA7
	bne.w	JmpTo65_DeleteObject
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A9 - The little hanger box thing a Grabber's string comes out of
; ----------------------------------------------------------------------------
; Sprite_39032:
ObjA9:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_39040(pc,d0.w),d1
	jmp	off_39040(pc,d1.w)
; ===========================================================================
off_39040:
	dc.w loc_39044-off_39040
	dc.w loc_39056-off_39040
; ===========================================================================

loc_39044:
	bsr.w	LoadSubObject
	move.b	#2,mapping_frame(a0)
	subi.w	#$C,y_pos(a0)
	rts
; ===========================================================================

loc_39056:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$A7,(a1) ; compare to objA7 (grabber badnik)
	bne.w	JmpTo65_DeleteObject
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AA - The thin white string a Grabber hangs from
; ----------------------------------------------------------------------------
; Sprite_39066:
ObjAA:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_39074(pc,d0.w),d1
	jmp	off_39074(pc,d1.w)
; ===========================================================================
off_39074:
	dc.w loc_39078-off_39074
	dc.w loc_39082-off_39074
; ===========================================================================

loc_39078:
	bsr.w	LoadSubObject
	subq.w	#8,y_pos(a0)
	rts
; ===========================================================================

loc_39082:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$A7,(a1) ; compare to objA7 (grabber badnik)
	bne.w	JmpTo65_DeleteObject
	move.w	y_pos(a1),d0
	sub.w	y_pos(a0),d0
	bmi.s	+
	lsr.w	#4,d0
	move.b	d0,mapping_frame(a0)
+
	bra.w	JmpTo45_DisplaySprite

; ===========================================================================
; ----------------------------------------------------------------------------
; Object AB - Unknown (maybe unused?)
; ----------------------------------------------------------------------------
; Sprite_390A2:
ObjAB:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_390B0(pc,d0.w),d1
	jmp	off_390B0(pc,d1.w)
; ===========================================================================
off_390B0:
	dc.w BranchTo4_LoadSubObject-off_390B0
	dc.w BranchTo10_JmpTo39_MarkObjGone-off_390B0
; ===========================================================================

BranchTo4_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

BranchTo10_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; END OF OBJECT AB


; ---------------------------------------------------------------------------
; Some subroutine for the Grabber badnik
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

loc_390BC:
	movea.w	objoff_34(a0),a1 ; a1=object
	move.w	(a1),d0
	tst.b	objoff_31(a0)
	beq.s	loc_390E6
	subq.b	#1,objoff_37(a0)
	beq.s	loc_390FA
	move.b	objoff_36(a0),d1
	andi.b	#$C,d0
	beq.s	return_390E4
	cmp.b	d1,d0
	beq.s	return_390E4
	move.b	d0,objoff_36(a0)
	addq.b	#1,objoff_38(a0)

return_390E4:
	rts
; ---------------------------------------------------------------------------
loc_390E6:
	andi.b	#$C,d0
	beq.s	return_390E4
	nop
	st	objoff_31(a0)
	move.b	d0,objoff_36(a0)
	nop
	rts
; ---------------------------------------------------------------------------
loc_390FA:
	cmpi.b	#4,objoff_38(a0)
	bcs.s	loc_3912A
	move.b	#$A,routine_secondary(a0)
	clr.w	y_vel(a0)
	clr.b	collision_flags(a0)
	movea.w	objoff_32(a0),a2 ; a2=object
	move.b	#0,objoff_2A(a2)
	bset	#1,status(a2)
	move.b	#0,anim(a2)
	clr.w	objoff_32(a0)

loc_3912A:
	move.b	#$20,objoff_37(a0)
	clr.b	objoff_31(a0)
	clr.b	objoff_38(a0)
	rts
; End of subroutine loc_390BC

; ---------------------------------------------------------------------------
; Grabber death check subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_3913A:
ObjA7_CheckExplode:
	subq.b	#1,objoff_2A(a0)
	bne.s	return_39152
	move.b	objoff_2B(a0),objoff_2A(a0)
	subq.b	#1,objoff_2B(a0)
	beq.s	ObjA7_Poof
	bchg	#5,art_tile(a0)

return_39152:
	rts
; ---------------------------------------------------------------------------
; loc_39154:
ObjA7_Poof:
	_move.b	#$27,0(a0) ; load 0bj27 (transform into explosion)
	move.b	#2,routine(a0)
	bset	#5,art_tile(a0)
	move.w	objoff_32(a0),d0
	beq.s	return_39180
	movea.w	d0,a2 ; a2=object
	move.b	#0,objoff_2A(a2)
	bset	#1,status(a2)
	move.b	#$B,collision_flags(a0)

return_39180:
	rts
; End of subroutine ObjA7_CheckExplode
; ===========================================================================

; ---------------------------------------------------------------------------
; Yet another subroutine for the Grabber badnik
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

loc_39182:
	tst.w	(Two_player_mode).w
	beq.s	+
	bra.w	JmpTo45_DisplaySprite
; ---------------------------------------------------------------------------
+	move.w	x_pos(a0),d0
	andi.w	#$FF80,d0
	sub.w	(Camera_X_pos_coarse).w,d0
	cmpi.w	#$280,d0
	bhi.w	+
	bra.w	JmpTo45_DisplaySprite
; ---------------------------------------------------------------------------
+	lea	(Object_Respawn_Table).w,a3
	moveq	#0,d0
	move.b	respawn_index(a0),d0
	beq.s	+
	bclr	#7,2(a3,d0.w)
+
	tst.b	objoff_30(a0)
	beq.s	+
	movea.w	objoff_32(a0),a3
	move.b	#0,$2A(a3)
	bset	#1,$22(a3)
+
	moveq	#0,d6
	move.b	objoff_2D(a0),d6

-	movea.w	(a2)+,a1
	bsr.w	JmpTo6_DeleteObject2
	dbf	d6,-

	bra.w	JmpTo65_DeleteObject
; End of subroutine loc_39182

; ===========================================================================
byte_391E0:
	dc.b   0
	dc.b $3E	; 1
	dc.b $A9	; 2
	dc.b $3A	; 3
byte_391E4:
	dc.b   0
	dc.b $3C	; 1
	dc.b $A8	; 2
	dc.b $38	; 3
byte_391E8:
	dc.b   0
	dc.b $3A	; 1
	dc.b $AA	; 2
	dc.b $3C	; 3
; off_391EC:
ObjA7_SubObjData:
	dc.l ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A
	dc.w $A500
	dc.b 4,4,$10,$B
; off_391F6:
ObjA7_SubObjData2:
	dc.l ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A
	dc.w $A500
	dc.b 4,1,$10,$D7
; off_39200:
ObjA8_SubObjData:
	dc.l ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A
	dc.w $A500
	dc.b 4,4,4,0
; off_3920A:
ObjA8_SubObjData2:
	dc.l ObjAA_MapUnc_39228
	dc.w $A500
	dc.b 4,5,4,0
; animation script
off_39214:
	dc.w byte_39216-off_39214
byte_39216:
	dc.b   7,  0,  1,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings - objA7,objA8,objA9
; ----------------------------------------------------------------------------
ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A:
	dc.w word_3923A - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 0
	dc.w word_39254 - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 1
	dc.w word_3926E - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 2
	dc.w word_39278 - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 3
	dc.w word_39282 - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 4
	dc.w word_3928C - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 5
	dc.w word_39296 - ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A; 6
; -------------------------------------------------------------------------------
; sprite mappings - objAA (string of various lengths)
; -------------------------------------------------------------------------------
ObjAA_MapUnc_39228:
	dc.w word_392A0 - ObjAA_MapUnc_39228; 0
	dc.w word_392AA - ObjAA_MapUnc_39228; 1
	dc.w word_392B4 - ObjAA_MapUnc_39228; 2
	dc.w word_392C6 - ObjAA_MapUnc_39228; 3
	dc.w word_392D8 - ObjAA_MapUnc_39228; 4
	dc.w word_3930C - ObjAA_MapUnc_39228; 5
	dc.w word_392F2 - ObjAA_MapUnc_39228; 6
	dc.w word_3932E - ObjAA_MapUnc_39228; 7
	dc.w word_3932E - ObjAA_MapUnc_39228; 8
word_3923A:
	dc.w 3
	dc.w $F801,    0,    0,$FFE5
	dc.w $F80D,    2,    1,$FFED; 4
	dc.w  $809,  $1D,   $E,$FFF1; 8
word_39254:
	dc.w 3
	dc.w $F801,    0,    0,$FFE5
	dc.w $F80D,    2,    1,$FFED; 4
	dc.w  $80D,  $23,  $11,$FFF1; 8
word_3926E:
	dc.w 1
	dc.w $FC00,   $A,    5,$FFFC
word_39278:
	dc.w 1
	dc.w $F809,   $F,    7,$FFF9
word_39282:
	dc.w 1
	dc.w $F80D,  $15,   $A,$FFF9
word_3928C:
	dc.w 1
	dc.w $FC00,  $2B,  $15,$FFFC
word_39296:
	dc.w 1
	dc.w $FC00,  $2C,  $16,$FFFC
word_392A0:
	dc.w 1
	dc.w	 1,   $B,    5,$FFFC
word_392AA:
	dc.w 1
	dc.w	 3,   $B,    5,$FFFC
word_392B4:
	dc.w 2
	dc.w	 1,   $B,    5,$FFFC
	dc.w $1003,   $B,    5,$FFFC; 4
word_392C6:
	dc.w 2
	dc.w	 3,   $B,    5,$FFFC
	dc.w $2003,   $B,    5,$FFFC; 4
word_392D8:
	dc.w 3
	dc.w	 1,   $B,    5,$FFFC
	dc.w $1003,   $B,    5,$FFFC; 4
	dc.w $3003,   $B,    5,$FFFC; 8
word_392F2:
	dc.w 3
	dc.w	 3,   $B,    5,$FFFC
	dc.w $2003,   $B,    5,$FFFC; 4
	dc.w $4003,   $B,    5,$FFFC; 8
word_3930C:
	dc.w 4
	dc.w	 1,   $B,    5,$FFFC
	dc.w $1003,   $B,    5,$FFFC; 4
	dc.w $3003,   $B,    5,$FFFC; 8
	dc.w $5003,   $B,    5,$FFFC; 12
word_3932E:
	dc.w 4
	dc.w	 3,   $B,    5,$FFFC
	dc.w $2003,   $B,    5,$FFFC; 4
	dc.w $4003,   $B,    5,$FFFC; 8
	dc.w $6003,   $B,    5,$FFFC; 12
	dc.w 5
	dc.w	 1,   $B,    5,$FFFC
	dc.w $1003,   $B,    5,$FFFC; 4
	dc.w $3003,   $B,    5,$FFFC; 8
	dc.w $5003,   $B,    5,$FFFC; 12
	dc.w $7003,   $B,    5,$FFFC; 16




; ===========================================================================
; ----------------------------------------------------------------------------
; Object AC - Balkiry (jet badnik) from SCZ
; ----------------------------------------------------------------------------
; Sprite_3937A:
ObjAC:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_39388(pc,d0.w),d1
	jmp	off_39388(pc,d1.w)
; ===========================================================================
off_39388:
	dc.w loc_3938C-off_39388
	dc.w loc_393B6-off_39388; 1
; ===========================================================================

loc_3938C:
	bsr.w	LoadSubObject
	move.b	#1,mapping_frame(a0)
	move.w	#-$300,x_vel(a0)
	bclr	#1,render_flags(a0)
	beq.s	loc_393AA
	move.w	#-$500,x_vel(a0)

loc_393AA:
	lea	off_37B5C(pc),a1
	move.l	a1,objoff_2E(a0)
	bra.w	loc_37ABE
; ===========================================================================

loc_393B6:
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	bra.w	loc_36788
; ===========================================================================
; off_393C2:
ObjAC_SubObjData:
	dc.l ObjAC_MapUnc_393CC
	dc.w $565
	dc.b 4,4,$20,8
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjAC_MapUnc_393CC:	BINCLUDE "mappings/sprite/objAC.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object AD - Clucker's base from WFZ
; ----------------------------------------------------------------------------
; Sprite_3941C:
ObjAD:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3942A(pc,d0.w),d1
	jmp	off_3942A(pc,d1.w)
; ===========================================================================
off_3942A:
	dc.w loc_3942E-off_3942A
	dc.w loc_3943A-off_3942A; 1
; ===========================================================================

loc_3942E:
	bsr.w	LoadSubObject
	move.b	#$C,mapping_frame(a0)
	rts
; ===========================================================================

loc_3943A:
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#8,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo27_SolidObject
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AE - Clucker (chicken badnik) from WFZ
; ----------------------------------------------------------------------------
; Sprite_39452:
ObjAE:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_39460(pc,d0.w),d1
	jmp	off_39460(pc,d1.w)
; ===========================================================================
off_39460:
	dc.w loc_3946E-off_39460
	dc.w loc_39488-off_39460; 1
	dc.w loc_394A2-off_39460; 2
	dc.w loc_394D2-off_39460; 3
	dc.w loc_394E0-off_39460; 4
	dc.w loc_39508-off_39460; 5
	dc.w loc_39516-off_39460; 6
; ===========================================================================

loc_3946E:
	bsr.w	LoadSubObject
	move.b	#$15,mapping_frame(a0)
	btst	#0,render_flags(a0)
	beq.s	return_39486
	bset	#0,status(a0)

return_39486:
	rts
; ===========================================================================

loc_39488:
	bsr.w	loc_366D6
	addi.w	#$80,d2
	cmpi.w	#$100,d2
	bcs.s	loc_3949A
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3949A:
	addq.b	#2,routine(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_394A2:
	move.b	routine(a0),d2
	lea	(off_3958A).l,a1
	bsr.w	JmpTo25_AnimateSprite
	cmp.b	routine(a0),d2
	bne.s	loc_394BA
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_394BA:
	lea	mapping_frame(a0),a1
	clr.l	(a1)
	clr.w	4(a1)
	move.b	#8,(a1)
	move.b	#6,collision_flags(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_394D2:
	lea	(off_39596).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_394E0:
	tst.b	objoff_2A(a0)
	beq.s	loc_394EE
	subq.b	#1,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_394EE:
	addq.b	#2,routine(a0)
	lea	mapping_frame(a0),a1
	clr.l	(a1)
	clr.w	4(a1)
	move.b	#$B,(a1)
	bsr.w	loc_39526
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_39508:
	lea	(off_395A2).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_39516:
	move.b	#8,routine(a0)
	move.b	#$40,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_39526:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_39574
	_move.b	#$98,0(a1) ; load obj98
	move.b	#$D,mapping_frame(a1)
	move.b	#$46,subtype(a1) ; <==  ObjAD_SubObjData3
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	addi.w	#$B,y_pos(a1)
	move.w	#-$200,d0
	move.w	#-8,d1
	btst	#0,render_flags(a0)
	beq.s	loc_39564
	neg.w	d0
	neg.w	d1

loc_39564:
	move.w	d0,x_vel(a1)
	add.w	d1,x_pos(a1)
	lea	Obj98_CluckerShotMove(pc),a2
	move.l	a2,objoff_2A(a1)

return_39574:
	rts
; ===========================================================================
ObjAD_SubObjData:
	dc.l ObjAD_Obj98_MapUnc_395B4
	dc.w $379
	dc.w $404
	dc.w $1800
ObjAD_SubObjData2:
	dc.l ObjAD_Obj98_MapUnc_395B4
	dc.w $379
	dc.w $405
	dc.w $1000

	; animation script
off_3958A:	dc.w byte_3958C-off_3958A
byte_3958C:	dc.b   1,  0,  1,  2,  3,  4,  5,  6,  7,$FC
	even
	; animation script
off_39596:	dc.w byte_39598-off_39596
byte_39598:	dc.b   1,  8,  9, $A, $B, $B, $B, $B,$FC
	even
	; animation script
off_395A2:	dc.w byte_395A4-off_395A2
byte_395A4:	dc.b   3, $A, $B,$FC
	even
	; animation script
off_395A8:	dc.w byte_395AA-off_395A8
byte_395AA:	dc.b   3, $D, $E, $F,$10,$11,$12,$13,$14,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjAD_Obj98_MapUnc_395B4:	BINCLUDE "mappings/sprite/objAE.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object AF - Mecha Sonic / Silver Sonic from DEZ
; (also handles Eggman's remote-control window)
; ----------------------------------------------------------------------------
; Sprite_3972C:
ObjAF:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3973A(pc,d0.w),d1
	jmp	off_3973A(pc,d1.w)
; ===========================================================================
off_3973A:
	dc.w loc_3975E-off_3973A
	dc.w loc_397AC-off_3973A; 1
	dc.w loc_397E6-off_3973A; 2
	dc.w loc_397FE-off_3973A; 3
	dc.w loc_3984A-off_3973A; 4
	dc.w loc_398C0-off_3973A; 5
	dc.w loc_39B92-off_3973A; 6
	dc.w loc_39BBA-off_3973A; 7
	dc.w loc_39BCC-off_3973A; 8
	dc.w loc_39BE2-off_3973A; 9
	dc.w loc_39BEA-off_3973A; 10
	dc.w loc_39C02-off_3973A; 11
	dc.w loc_39C0A-off_3973A; 12
	dc.w loc_39C12-off_3973A; 13
	dc.w loc_39C2A-off_3973A; 14
	dc.w loc_39C42-off_3973A; 15
	dc.w loc_39C50-off_3973A; 16
	dc.w loc_39CA0-off_3973A; 17
; ===========================================================================

loc_3975E:
	bsr.w	LoadSubObject
	move.b	#$1B,y_radius(a0)
	move.b	#$10,x_radius(a0)
	move.b	#0,collision_flags(a0)
	move.b	#8,collision_property(a0)
	lea	(byte_39DC2).l,a2
	bsr.w	loc_367D0
	move.b	#$E,routine(a1)
	lea	(byte_39DC6).l,a2
	bsr.w	loc_367D0
	move.b	#$14,routine(a1)
	lea	(byte_39DCA).l,a2
	bsr.w	loc_367D0
	move.b	#$1A,routine(a1)
	rts
; ===========================================================================

loc_397AC:
	move.w	(Camera_X_pos).w,d0
	cmpi.w	#$224,d0
	bcc.s	loc_397BA
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_397BA:
	addq.b	#2,routine(a0)
	move.w	#$3C,objoff_2A(a0)
	move.w	#$100,y_vel(a0)
	move.w	#$224,d0
	move.w	d0,(Camera_Min_X_pos).w
	move.w	d0,(Camera_Max_X_pos).w
	move.b	#9,(Current_Boss_ID).w
	moveq	#-7,d0
	bsr.w	JmpTo12_PlaySound
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_397E6:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_397F0
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_397F0:
	addq.b	#2,routine(a0)
	moveq	#-$6D,d0
	bsr.w	JmpTo5_PlayMusic
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_397FE:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_3980E
	moveq	#-$24,d0
	bsr.w	JmpTo12_PlaySound

loc_3980E:
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bmi.s	loc_39830
	bsr.w	JmpTo26_ObjectMove
	moveq	#0,d0
	moveq	#0,d1
	movea.w	parent(a0),a1 ; a1=object
	bsr.w	loc_36760
	bsr.w	loc_39D4A
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39830:
	add.w	d1,y_pos(a0)
	move.w	#0,y_vel(a0)
	move.b	#$1A,collision_flags(a0)
	bset	#1,status(a0)
	bra.w	loc_399D6
; ===========================================================================

loc_3984A:
	bsr.w	loc_39CAE
	bsr.w	loc_39D1C
	subq.b	#1,objoff_2A(a0)
	beq.s	loc_39886
	cmpi.b	#$32,objoff_2A(a0)
	bne.s	loc_3986A
	moveq	#-$12,d0
	bsr.w	JmpTo12_PlaySound
	bsr.w	JmpTo45_DisplaySprite

loc_3986A:
	jsr	(ObjCheckFloorDist).l
	add.w	d1,y_pos(a0)
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	bsr.w	loc_39D4A
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39886:
	addq.b	#2,routine(a0)
	moveq	#0,d0
	move.b	objoff_2F(a0),d0
	andi.b	#$F,d0
	move.b	byte_398B0(pc,d0.w),routine_secondary(a0)
	addq.b	#1,objoff_2F(a0)
	clr.b	objoff_2E(a0)
	movea.w	objoff_3C(a0),a1 ; a1=object
	move.b	#$16,routine(a1)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
byte_398B0:
	dc.b   6
	dc.b   0	; 1
	dc.b $10	; 2
	dc.b   6	; 3
	dc.b   6	; 4
	dc.b $1E	; 5
	dc.b   0	; 6
	dc.b $10	; 7
	dc.b   6	; 8
	dc.b   6	; 9
	dc.b $10	; 10
	dc.b   6	; 11
	dc.b   0	; 12
	dc.b   6	; 13
	dc.b $10	; 14
	dc.b $1E	; 15
; ===========================================================================

loc_398C0:
	bsr.w	loc_39CAE
	bsr.w	loc_39D1C
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_398F2(pc,d0.w),d1
	jsr	off_398F2(pc,d1.w)
	moveq	#0,d0
	moveq	#0,d1
	movea.w	parent(a0),a1 ; a1=object
	bsr.w	loc_36760
	bsr.w	loc_39D4A
	bsr.w	loc_36760
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_398F2:
	dc.w loc_3991E-off_398F2
	dc.w loc_39946-off_398F2; 1
	dc.w loc_39976-off_398F2; 2
	dc.w loc_39A0A-off_398F2; 3
	dc.w loc_39A1C-off_398F2; 4
	dc.w loc_39A44-off_398F2; 5
	dc.w loc_39A68-off_398F2; 6
	dc.w loc_39A96-off_398F2; 7
	dc.w loc_39A0A-off_398F2; 8
	dc.w loc_39A1C-off_398F2; 9
	dc.w loc_39AAA-off_398F2; 10
	dc.w loc_39ACE-off_398F2; 11
	dc.w loc_39AF4-off_398F2; 12
	dc.w loc_39B28-off_398F2; 13
	dc.w loc_39A96-off_398F2; 14
	dc.w loc_39A0A-off_398F2; 15
	dc.w loc_39A1C-off_398F2; 16
	dc.w loc_39AAA-off_398F2; 17
	dc.w loc_39ACE-off_398F2; 18
	dc.w loc_39B44-off_398F2; 19
	dc.w loc_39B28-off_398F2; 20
	dc.w loc_39A96-off_398F2; 21
; ===========================================================================

loc_3991E:
	addq.b	#2,routine_secondary(a0)
	move.b	#3,mapping_frame(a0)
	move.b	#2,objoff_2C(a0)

loc_3992E:
	move.b	#$20,objoff_2A(a0)
	movea.w	parent(a0),a1 ; a1=object
	move.b	#$10,routine(a1)
	move.b	#1,anim(a1)
	rts
; ===========================================================================

loc_39946:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_3994E
	rts
; ===========================================================================

loc_3994E:
	addq.b	#2,routine_secondary(a0)
	move.b	#$40,objoff_2A(a0)
	move.b	#1,anim(a0)
	move.w	#$800,d0
	bsr.w	loc_39D60
	movea.w	parent(a0),a1 ; a1=object
	move.b	#2,anim(a1)
	moveq	#-$44,d0
	bra.w	JmpTo12_PlaySound
; ===========================================================================

loc_39976:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_399C2
	cmpi.b	#$20,objoff_2A(a0)
	bne.s	loc_39994
	move.b	#2,anim(a0)
	movea.w	parent(a0),a1 ; a1=object
	move.b	#$12,routine(a1)

loc_39994:
	bsr.w	loc_39D72
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	cmpi.b	#2,anim(a0)
	bne.s	return_399C0
	cmpi.b	#2,anim_frame(a0)
	bne.s	return_399C0
	cmpi.b	#3,anim_frame_duration(a0)
	bne.s	return_399C0
	bchg	#0,render_flags(a0)

return_399C0:
	rts
; ===========================================================================

loc_399C2:
	subq.b	#1,objoff_2C(a0)
	beq.s	loc_399D6
	move.b	#2,routine_secondary(a0)
	clr.w	x_vel(a0)
	bra.w	loc_3992E
; ===========================================================================

loc_399D6:
	move.b	#8,routine(a0)
	move.b	#0,anim(a0)
	move.b	#$64,objoff_2A(a0)
	clr.w	x_vel(a0)
	movea.w	parent(a0),a1 ; a1=object
	move.b	#$12,routine(a1)
	movea.w	objoff_3C(a0),a1 ; a1=object
	move.b	#$18,routine(a1)
	moveq	#-$12,d0
	bsr.w	JmpTo12_PlaySound
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39A0A:
	addq.b	#2,routine_secondary(a0)
	move.b	#3,mapping_frame(a0)
	move.b	#3,anim(a0)
	rts
; ===========================================================================

loc_39A1C:
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	bne.s	loc_39A2A
	rts
; ===========================================================================

loc_39A2A:
	addq.b	#2,routine_secondary(a0)
	move.b	#$20,objoff_2A(a0)
	move.b	#4,anim(a0)
	moveq	#-$50,d0
	bsr.w	JmpTo12_PlaySound
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39A44:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_39A56
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	rts
; ===========================================================================

loc_39A56:
	addq.b	#2,routine_secondary(a0)
	move.b	#$40,objoff_2A(a0)
	move.w	#$800,d0
	bra.w	loc_39D60
; ===========================================================================

loc_39A68:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_39A7C
	bsr.w	loc_39D72
	lea	(off_39DE2).l,a1
	bra.w	loc_36870
; ===========================================================================

loc_39A7C:
	addq.b	#2,routine_secondary(a0)
	move.b	#5,anim(a0)
	bchg	#0,render_flags(a0)
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_39A96:
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	bne.w	BranchTo_loc_399D6
	rts
; ===========================================================================

BranchTo_loc_399D6 
	bra.w	loc_399D6
; ===========================================================================

loc_39AAA:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_39ABC
	lea	(off_39DE2).l,a1
	bsr.w	loc_36870
	rts
; ===========================================================================

loc_39ABC:
	addq.b	#2,routine_secondary(a0)
	move.b	#$40,objoff_2A(a0)
	move.w	#$400,d0
	bra.w	loc_39D60
; ===========================================================================

loc_39ACE:
	subq.b	#1,objoff_2A(a0)
	cmpi.b	#$3C,objoff_2A(a0)
	bne.s	loc_39ADE
	bsr.w	loc_39AE8

loc_39ADE:
	lea	(off_39DE2).l,a1
	bra.w	loc_36870
; ===========================================================================

loc_39AE8:
	addq.b	#2,routine_secondary(a0)
	move.w	#-$600,y_vel(a0)
	rts
; ===========================================================================

loc_39AF4:
	subq.b	#1,objoff_2A(a0)
	bmi.w	loc_39A7C
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_39B0A
	bsr.w	loc_39B1A

loc_39B0A:
	addi.w	#$38,y_vel(a0)
	lea	(off_39DE2).l,a1
	bra.w	loc_36870
; ===========================================================================

loc_39B1A:
	addq.b	#2,routine_secondary(a0)
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_39B28:
	subq.b	#1,objoff_2A(a0)
	bmi.w	loc_39A7C
	jsr	(ObjCheckFloorDist).l
	add.w	d1,y_pos(a0)
	lea	(off_39DE2).l,a1
	bra.w	loc_36870
; ===========================================================================

loc_39B44:
	subq.b	#1,objoff_2A(a0)
	bmi.w	loc_39A7C
	tst.b	objoff_2E(a0)
	bne.s	loc_39B66
	tst.w	y_vel(a0)
	bmi.s	loc_39B66
	st	objoff_2E(a0)
	bsr.w	loc_39D82
	moveq	#-$5E,d0
	bsr.w	JmpTo12_PlaySound

loc_39B66:
	jsr	(ObjCheckFloorDist).l
	tst.w	d1
	bpl.s	loc_39B74
	bsr.w	loc_39B84

loc_39B74:
	addi.w	#$38,y_vel(a0)
	lea	(off_39DE2).l,a1
	bra.w	loc_36870
; ===========================================================================

loc_39B84:
	addq.b	#2,routine_secondary(a0)
	add.w	d1,y_pos(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_39B92:
	clr.b	collision_flags(a0)
	subq.w	#1,objoff_32(a0)
	bmi.s	loc_39BA4
	bsr.w	JmpTo_loc_2D6CC
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39BA4:
	move.w	#$1000,(Camera_Max_X_pos).w
	addq.b	#2,(Dynamic_Resize_Routine).w
	move.b	(Level_Music).w,d0
	bsr.w	JmpTo5_PlayMusic
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_39BBA:
	bsr.w	LoadSubObject
	move.b	#8,width_pixels(a0)
	move.b	#0,collision_flags(a0)
	rts
; ===========================================================================

loc_39BCC:
	movea.w	objoff_2C(a0),a1 ; a1=object
	bsr.w	loc_367AA
	lea	(off_39E30).l,a1
	bsr.w	loc_36870
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39BE2:
	andi.b	#$7F,render_flags(a0)
	rts
; ===========================================================================

loc_39BEA:
	bsr.w	LoadSubObject
	move.b	#8,width_pixels(a0)
	move.b	#$B,mapping_frame(a0)
	move.b	#3,priority(a0)
	rts
; ===========================================================================

loc_39C02:
	move.b	#0,collision_flags(a0)
	rts
; ===========================================================================

loc_39C0A:
	move.b	#$98,collision_flags(a0)
	rts
; ===========================================================================

loc_39C12:
	bsr.w	LoadSubObject
	move.b	#4,mapping_frame(a0)
	move.w	#$2C0,x_pos(a0)
	move.w	#$139,y_pos(a0)
	rts
; ===========================================================================

loc_39C2A:
	movea.w	objoff_2C(a0),a1 ; a1=object
	bclr	#1,status(a1)
	bne.s	loc_39C3A
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39C3A:
	addq.b	#2,routine(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39C42:
	lea	(off_39E42).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39C50:
	movea.w	objoff_2C(a0),a1 ; a1=object
	lea	(MainCharacter).w,a2 ; a2=character
	btst	#2,status(a1)
	bne.s	loc_39C92
	move.b	#2,anim(a0)
	cmpi.b	#4,routine(a2)
	bne.s	loc_39C78
	move.b	#3,anim(a0)
	bra.w	loc_39C84
; ===========================================================================

loc_39C78:
	tst.b	collision_flags(a1)
	bne.s	loc_39C84
	move.b	#4,anim(a0)

loc_39C84:
	lea	(off_39E42).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39C92:
	addq.b	#2,routine(a0)
	move.b	#1,anim(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_39CA0:
	lea	(off_39E42).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_39CAE:
	tst.b	collision_property(a0)
	beq.s	loc_39CF0
	tst.b	collision_flags(a0)
	bne.s	return_39CEE
	tst.b	objoff_30(a0)
	bne.s	loc_39CD0
	move.b	#$20,objoff_30(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_39CD0:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_39CDE
	move.w	#$EEE,d0

loc_39CDE:
	move.w	d0,(a1)
	subq.b	#1,objoff_30(a0)
	bne.s	return_39CEE
	clr.w	(Normal_palette_line2+2).w
	bsr.w	loc_39D24

return_39CEE:
	rts
; ===========================================================================

loc_39CF0:
	moveq	#$64,d0
	bsr.w	AddPoints
	move.w	#$FF,objoff_32(a0)
	move.b	#$C,routine(a0)
	clr.b	collision_flags(a0)
	bset	#2,status(a0)
	movea.w	objoff_3C(a0),a1 ; a1=object
	bsr.w	JmpTo6_DeleteObject2
	movea.w	parent(a0),a1 ; a1=object
	bra.w	JmpTo6_DeleteObject2
; ===========================================================================

loc_39D1C:
	tst.b	collision_flags(a0)
	beq.w	return_37A48

loc_39D24:
	move.b	mapping_frame(a0),d0
	cmpi.b	#6,d0
	beq.s	loc_39D42
	cmpi.b	#7,d0
	beq.s	loc_39D42
	cmpi.b	#8,d0
	beq.s	loc_39D42
	move.b	#$1A,collision_flags(a0)
	rts
; ===========================================================================

loc_39D42:
	move.b	#$9A,collision_flags(a0)
	rts
; ===========================================================================

loc_39D4A:
	moveq	#$C,d0
	moveq	#-$C,d1
	btst	#0,render_flags(a0)
	beq.s	loc_39D58
	neg.w	d0

loc_39D58:
	movea.w	objoff_3C(a0),a1 ; a1=object
	bra.w	loc_36760
; ===========================================================================

loc_39D60:
	tst.b	objoff_2D(a0)
	bne.s	loc_39D68
	neg.w	d0

loc_39D68:
	not.b	objoff_2D(a0)
	move.w	d0,x_vel(a0)
	rts
; ===========================================================================

loc_39D72:
	moveq	#$20,d0
	tst.w	x_vel(a0)
	bmi.s	loc_39D7C
	neg.w	d0

loc_39D7C:
	add.w	d0,x_vel(a0)
	rts
; ===========================================================================

loc_39D82:
	move.b	#$4A,d2
	moveq	#7,d6
	lea	(byte_39D92).l,a2
	bra.w	loc_3681A
; ===========================================================================
byte_39D92:
	dc.b   0,$E8,  0,$FD, $F,  0,$F0,$F0,$FE,$FE,$10,  0,$E8,  0,$FD,  0
	dc.b $11,  0,$F0,$10,$FE,  2,$12,  0,  0,$18,  0,  3,$13,  0,$10,$10; 16
	dc.b   2,  2,$14,  0,$18,  0,  3,  0,$15,  0,$10,$F0,  2,$FE,$16,  0; 32
byte_39DC2:
	dc.b   0
	dc.b $3E	; 1
	dc.b $AF	; 2
	dc.b $48	; 3
byte_39DC6:
	dc.b   0
	dc.b $3C	; 1
	dc.b $AF	; 2
	dc.b $48	; 3
byte_39DCA:
	dc.b   0
	dc.b $3A	; 1
	dc.b $AF	; 2
	dc.b $A4	; 3
; off_39DCE:
ObjAF_SubObjData2:
	dc.l ObjAF_Obj98_MapUnc_39E68
	dc.w $2380
	dc.w $404
	dc.w $101A
; off_39DD8:
ObjAF_SubObjData3:
	dc.l ObjAF_MapUnc_3A08C
	dc.w $378
	dc.w $406
	dc.w $1000

; animation script
off_39DE2:
	dc.w byte_39DEE-off_39DE2
	dc.w byte_39DF4-off_39DE2; 1
	dc.w byte_39DF8-off_39DE2; 2
	dc.w byte_39DFE-off_39DE2; 3
	dc.w byte_39E14-off_39DE2; 4
	dc.w byte_39E1A-off_39DE2; 5
byte_39DEE:
	dc.b   2,  0,  1,  2,$FF,  0
byte_39DF4:
	dc.b $45,  3,$FD,  0
byte_39DF8:
	dc.b   3,  4,  5,  4,  3,$FC
byte_39DFE:
	dc.b   3,  3,  3,  6,  6,  6,  7,  7,  7,  8,  8,  8,  6,  6,  7,  7
	dc.b   8,  8,  6,  7,  8,$FC; 16
byte_39E14:
	dc.b   2,  6,  7,  8,$FF,  0
byte_39E1A:
	dc.b   3,  8,  7,  6,  8,  8,  7,  7,  6,  6,  8,  8,  8,  7,  7,  7
	dc.b   6,  6,  6,  3,  3,$FC; 16
	even

; animation script
off_39E30:
	dc.w byte_39E36-off_39E30
	dc.w byte_39E3A-off_39E30; 1
	dc.w byte_39E3E-off_39E30; 2
byte_39E36:
	dc.b   1, $B, $C,$FF
byte_39E3A:
	dc.b   1, $D, $E,$FF
byte_39E3E:
	dc.b   1,  9, $A,$FF
	even

; animation script
off_39E42:
	dc.w byte_39E4C-off_39E42
	dc.w byte_39E54-off_39E42; 1
	dc.w byte_39E5C-off_39E42; 2
	dc.w byte_39E60-off_39E42; 3
	dc.w byte_39E64-off_39E42; 4
byte_39E4C:	dc.b   3,  4,  3,  2,  1,  0,$FC,  0
byte_39E54:	dc.b   3,  0,  1,  2,  3,  4,$FA,  0
byte_39E5C:	dc.b   3,  5,  5,$FF
byte_39E60:	dc.b   3,  5,  6,$FF
byte_39E64:	dc.b   3,  7,  7,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjAF_Obj98_MapUnc_39E68:	BINCLUDE "mappings/sprite/objAF_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjAF_MapUnc_3A08C:	BINCLUDE "mappings/sprite/objAF_b.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object B0 - SEGA screen? (Unknown)
; ----------------------------------------------------------------------------
; Sprite_3A1DC:
ObjB0:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3A1EA(pc,d0.w),d1
	jmp	off_3A1EA(pc,d1.w)
; ===========================================================================
off_3A1EA:
	dc.w loc_3A1F6-off_3A1EA
	dc.w loc_3A2F4-off_3A1EA; 1
	dc.w loc_3A32C-off_3A1EA; 2
	dc.w loc_3A396-off_3A1EA; 3
	dc.w loc_3A3CC-off_3A1EA; 4
	dc.w return_3A3F6-off_3A1EA; 5
; ===========================================================================

loc_3A1F6:
	bsr.w	LoadSubObject
	move.w	#$1E8,x_pos(a0)
	move.w	#$F0,objoff_A(a0)
	move.w	#$B,objoff_2A(a0)
	move.w	#2,($FFFFF662).w
	bset	#0,render_flags(a0)
	bset	#0,status(a0)
	lea	($FFFFE138).w,a1
	lea	byte_3A76C(pc),a2
	moveq	#0,d0
	moveq	#$22,d6

loc_3A22A:
	move.b	(a2)+,d0
	add.w	d0,(a1)
	addq.w	#8,a1
	dbf	d6,loc_3A22A
	lea	off_3A294(pc),a1
	lea	(ArtUnc_Sonic).l,a3
	lea	(Metablock_Table).l,a5
	moveq	#3,d5

loc_3A246:
	movea.l	(a1)+,a2
	move.w	(a2)+,d6
	subq.w	#1,d6

loc_3A24C:
	move.w	(a2)+,d0
	move.w	d0,d1
	andi.w	#$FFF,d0
	lsl.w	#5,d0
	lea	(a3,d0.w),a4
	andi.w	#$F000,d1
	rol.w	#4,d1
	addq.w	#1,d1
	lsl.w	#3,d1
	subq.w	#1,d1

loc_3A266:
	move.l	(a4)+,(a5)+
	dbf	d1,loc_3A266
	dbf	d6,loc_3A24C
	dbf	d5,loc_3A246
	move.w	d7,-(sp)
	moveq	#0,d0
	moveq	#0,d1
	lea	word_3A2A4(pc),a6
	moveq	#7,d7

loc_3A280:
	movea.l	(a6)+,a1
	movea.l	(a6)+,a2
	move.b	(a6)+,d0
	move.b	(a6)+,d1
	bsr.w	loc_3E89E
	dbf	d7,loc_3A280
	move.w	(sp)+,d7
	rts
; ===========================================================================
	; These next four things are pointers to Sonic's dereferenced
	; DPLC entries of his "running animation" frames for the SEGA screen.
	; I want that DPLC data split into a binary file for use with editors,
	; but unfortunately there's no way to refer to BINCLUDE'd bytes
	; from within AS, so I put an educated guess (default) here and
	; run an external program (fixpointer.exe) to fix it later.
; WARNING: the build script needs editing if you rename this label
off_3A294:
	dc.l (MapRUnc_Sonic+$33A)	;dc.l word_7181A
	dc.l (MapRUnc_Sonic+$340)	;dc.l word_71820
	dc.l (MapRUnc_Sonic+$346)	;dc.l word_71826
	dc.l (MapRUnc_Sonic+$34C)	;dc.l word_7182C
word_3A2A4:
	dc.w $FFFF,    0,$FFFF,	$B00, $201
	dc.w $FFFF,  $C0,$FFFF,	$E00, $303; 5
	dc.w $FFFF, $2C0,$FFFF,$1600, $201; 10
	dc.w $FFFF, $380,$FFFF,$1900, $303; 15
	dc.w $FFFF, $580,$FFFF,$2100, $201; 20
	dc.w $FFFF, $640,$FFFF,$2400, $303; 25
	dc.w $FFFF, $840,$FFFF,$2C00, $201; 30
	dc.w $FFFF, $900,$FFFF,$2F00, $303; 35
; ===========================================================================

loc_3A2F4:
	subi.w	#$20,x_pos(a0)
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3A312
	bsr.w	loc_3A426
	lea	(off_3A59E).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A312:
	addq.b	#2,routine(a0)
	move.w	#$C,objoff_2A(a0)
	move.b	#1,objoff_2C(a0)
	move.b	#-1,objoff_2D(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A32C:
	tst.w	objoff_2A(a0)
	beq.s	loc_3A33A
	subq.w	#1,objoff_2A(a0)
	bsr.w	loc_3A426

loc_3A33A:
	lea	word_3A49E(pc),a1
	bsr.w	loc_3A44E
	bne.s	loc_3A346
	rts
; ===========================================================================

loc_3A346:
	addq.b	#2,routine(a0)
	bchg	#0,render_flags(a0)
	move.w	#$B,objoff_2A(a0)
	move.w	#4,($FFFFF662).w
	subi.w	#$28,x_pos(a0)
	bchg	#0,render_flags(a0)
	bchg	#0,status(a0)

	clearRAM Horiz_Scroll_Buf,$1004

	lea	($FFFFE13C).w,a1
	lea	byte_3A76C(pc),a2
	moveq	#0,d0
	moveq	#$22,d6

loc_3A38A:
	move.b	(a2)+,d0
	sub.w	d0,(a1)
	addq.w	#8,a1
	dbf	d6,loc_3A38A
	rts
; ===========================================================================

loc_3A396:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3A3B4
	addi.w	#$20,x_pos(a0)
	bsr.w	loc_3A43A
	lea	(off_3A59E).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A3B4:
	addq.b	#2,routine(a0)
	move.w	#$C,objoff_2A(a0)
	move.b	#1,objoff_2C(a0)
	move.b	#-1,objoff_2D(a0)
	rts
; ===========================================================================

loc_3A3CC:
	tst.w	objoff_2A(a0)
	beq.s	loc_3A3DA
	subq.w	#1,objoff_2A(a0)
	bsr.w	loc_3A43A

loc_3A3DA:
	lea	word_3A514(pc),a1
	bsr.w	loc_3A44E
	bne.s	loc_3A3E6
	rts
; ===========================================================================

loc_3A3E6:
	addq.b	#2,routine(a0)
	st	($FFFFF660).w
	move.b	#-6,d0
	bsr.w	JmpTo12_PlaySound

return_3A3F6:
	rts
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B1 - Sonic on the Sega screen
; ----------------------------------------------------------------------------
; Sprite_3A3F8:
ObjB1:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3A406(pc,d0.w),d1
	jmp	off_3A406(pc,d1.w)
; ===========================================================================
off_3A406:
	dc.w loc_3A40A-off_3A406
	dc.w BranchTo4_JmpTo45_DisplaySprite-off_3A406; 1
; ===========================================================================

loc_3A40A:
	bsr.w	LoadSubObject
	move.b	#4,mapping_frame(a0)
	move.w	#$174,x_pos(a0)
	move.w	#$D8,objoff_A(a0)
	rts
; ===========================================================================

BranchTo4_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A426:
	lea	($FFFFE138).w,a1
	move.w	#$22,d6

loc_3A42E:
	subi.w	#$20,(a1)
	addq.w	#8,a1 ; vertical distance between streaks Sonic leaves going left
	dbf	d6,loc_3A42E
	rts
; ===========================================================================

loc_3A43A:
	lea	($FFFFE13C).w,a1
	move.w	#$22,d6

loc_3A442:
	addi.w	#$20,(a1)
	addq.w	#8,a1 ; vertical distance between streaks Sonic leaves going right
	dbf	d6,loc_3A442
	rts
; ===========================================================================

loc_3A44E:
	subq.b	#1,objoff_2C(a0)
	bne.s	loc_3A496
	moveq	#0,d0
	move.b	objoff_2D(a0),d0
	addq.b	#1,d0
	cmp.b	1(a1),d0
	bcs.s	loc_3A468
	tst.b	3(a1)
	bne.s	loc_3A49A

loc_3A468:
	move.b	d0,objoff_2D(a0)
	_move.b	0(a1),objoff_2C(a0)
	lea	6(a1),a2
	moveq	#0,d1
	move.b	2(a1),d1
	move.w	d1,d2
	tst.w	d0
	beq.s	loc_3A48C

loc_3A482:
	subq.b	#1,d0
	beq.s	loc_3A48A
	add.w	d2,d1
	bra.s	loc_3A482
; ===========================================================================

loc_3A48A:
	adda.w	d1,a2

loc_3A48C:
	movea.w	4(a1),a3

loc_3A490:
	move.w	(a2)+,(a3)+
	subq.w	#2,d2
	bne.s	loc_3A490

loc_3A496:
	moveq	#0,d0
	rts
; ===========================================================================

loc_3A49A:
	moveq	#1,d0
	rts
; ===========================================================================

; probably some sort of description of how to use the following palette
word_3A49E:
	dc.w  $407
	dc.w $10FF	; 1
	dc.w $FB10	; 2

; Palette for the SEGA screen (background and pre-wipe foreground) (7 frames)
;pal_3A4A4:
	BINCLUDE	"art/palettes/Sega Screen 2.bin"


; probably some sort of description of how to use the following palette
word_3A514:
	dc.w  $407
	dc.w $10FF	; 1
	dc.w $FB00	; 2

; Palette for the SEGA screen (wiping and post-wipe foreground) (7 frames)
;pal_3A51A:
	BINCLUDE	"art/palettes/Sega Screen 3.bin"

; off_3A58A:
ObjB0_SubObjData:
	dc.l ObjB1_MapUnc_3A5A6
	dc.w $C088
	dc.w 1
	dc.w $1000

; off_3A594:
ObjB1_SubObjData:
	dc.l ObjB1_MapUnc_3A5A6
	dc.w 3
	dc.w 2
	dc.w $800

; animation script
off_3A59E:
	dc.w byte_3A5A0-off_3A59E
byte_3A5A0:
	dc.b   0,  0,  1,  2,  3,$FF
	even
	
; ------------------------------------------------------------------------------
; sprite mappings
; Gigantic Sonic (2x size) mappings for the SEGA screen
; ------------------------------------------------------------------------------
ObjB1_MapUnc_3A5A6:	BINCLUDE "mappings/sprite/objB1.bin"
; ===========================================================================

loc_3A68A:
	move.w	($FFFFF662).w,d0
	beq.w	return_37A48
	clr.w	($FFFFF662).w
	move.w	off_3A69E-2(pc,d0.w),d0
	jmp	off_3A69E(pc,d0.w)
; ===========================================================================
off_3A69E:
	dc.w loc_3A6A2-off_3A69E
	dc.w loc_3A6D4-off_3A69E
; ===========================================================================

loc_3A6A2:
	dma68kToVDP $FFFF0B00,$1100,$2C00,VRAM

	lea	byte_3A74C(pc),a1
	move.l	#$49500003,d0
	bra.w	loc_3A710
; ===========================================================================

loc_3A6D4:
	dmaFillVRAM 0,$C000,$2000 ; clear Plane A pattern name table and common graphics

	lea	byte_3A75C(pc),a1
	move.l	#$49A00003,d0
	bra.w	loc_3A710
loc_3A710:
	lea	(VDP_data_port).l,a6
	move.l	#$1000000,d6
	moveq	#7,d1
	moveq	#9,d2

loc_3A720:
	move.l	d0,4(a6)
	move.w	d1,d3
	movea.l	a1,a2

loc_3A728:
	move.w	(a2)+,d4
	bclr	#$A,d4
	beq.s	loc_3A734
	bsr.w	loc_3A742

loc_3A734:
	move.w	d4,(a6)
	dbf	d3,loc_3A728
	add.l	d6,d0
	dbf	d2,loc_3A720
	rts
; ===========================================================================

loc_3A742:
	moveq	#$28,d5

loc_3A744:
	move.w	d4,(a6)
	dbf	d5,loc_3A744
	rts
; ===========================================================================
byte_3A74C:
	dc.b $A0,$80
	dc.b $A0,$81	; 2
	dc.b $A0,$82	; 4
	dc.b $A0,$83	; 6
	dc.b $A0,$84	; 8
	dc.b $A0,$85	; 10
	dc.b $A0,$86	; 12
	dc.b $A4,$87	; 14
byte_3A75C:
	dc.b $A4,$87
	dc.b $A0,$86	; 2
	dc.b $A0,$85	; 4
	dc.b $A0,$84	; 6
	dc.b $A0,$83	; 8
	dc.b $A0,$82	; 10
	dc.b $A0,$81	; 12
	dc.b $A0,$80	; 14
byte_3A76C:
	dc.b $12
	dc.b   4	; 1
	dc.b   4	; 2
	dc.b   2	; 3
	dc.b   2	; 4
	dc.b   2	; 5
	dc.b   2	; 6
	dc.b   0	; 7
	dc.b   0	; 8
	dc.b   0	; 9
	dc.b   0	; 10
	dc.b   0	; 11
	dc.b   0	; 12
	dc.b   0	; 13
	dc.b   0	; 14
	dc.b   4	; 15
	dc.b   4	; 16
	dc.b   6	; 17
	dc.b  $A	; 18
	dc.b   8	; 19
	dc.b   6	; 20
	dc.b   4	; 21
	dc.b   4	; 22
	dc.b   4	; 23
	dc.b   4	; 24
	dc.b   6	; 25
	dc.b   6	; 26
	dc.b   8	; 27
	dc.b   8	; 28
	dc.b  $A	; 29
	dc.b  $A	; 30
	dc.b  $C	; 31
	dc.b  $E	; 32
	dc.b $10	; 33
	dc.b $16	; 34
	dc.b   0	; 35




; ===========================================================================
; ----------------------------------------------------------------------------
; Object B2 - The Tornado (Tails' plane)
; ----------------------------------------------------------------------------
; Sprite_3A790:
ObjB2:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3A79E(pc,d0.w),d1
	jmp	off_3A79E(pc,d1.w)
; ===========================================================================
off_3A79E:
	dc.w loc_3A7AE-off_3A79E
	dc.w loc_3A7DE-off_3A79E; 1
	dc.w loc_3A89A-off_3A79E; 2
	dc.w loc_3A954-off_3A79E; 3
	dc.w loc_3AC6A-off_3A79E; 4
	dc.w loc_3AD0C-off_3A79E; 5
	dc.w loc_3AD2A-off_3A79E; 6
	dc.w loc_3AD42-off_3A79E; 7
; ===========================================================================

loc_3A7AE:
	bsr.w	LoadSubObject
	moveq	#0,d0
	move.b	subtype(a0),d0
	subi.b	#$4E,d0
	move.b	d0,routine(a0)
	cmpi.w	#2,(Player_mode).w
	bne.s	BranchTo5_JmpTo45_DisplaySprite
	cmpi.b	#8,d0
	bcc.s	BranchTo5_JmpTo45_DisplaySprite
	move.b	#4,mapping_frame(a0)
	move.b	#1,anim(a0)

BranchTo5_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A7DE:
	bsr.w	loc_3AF58
	tst.w	(Debug_placement_mode).w
	bne.w	loc_3A880
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	art_tile(a1),d0
	andi.w	#$8000,d0
	move.w	art_tile(a0),d1
	andi.w	#$7FFF,d1
	or.w	d0,d1
	move.w	d1,art_tile(a0)
	move.w	x_pos(a0),-(sp)
	bsr.w	loc_3ADAA
	move.b	status(a0),objoff_2E(a0)
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo27_SolidObject
	bsr.w	loc_3AE3A
	move.b	objoff_2E(a0),d0
	move.b	status(a0),d1
	andi.b	#8,d0
	andi.b	#8,d1
	eor.b	d0,d1
	move.b	d1,objoff_2E(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),d1
	move.w	(Camera_X_pos).w,d0
	move.w	d0,(Camera_Min_X_pos).w
	move.w	d0,d2
	addi.w	#$11,d2
	cmp.w	d2,d1
	bhi.s	loc_3A85E
	addq.w	#1,d1
	move.w	d1,x_pos(a1)

loc_3A85E:
	cmpi.w	#$1400,d0
	bcs.s	loc_3A878
	cmpi.w	#$1568,d1
	bcc.s	loc_3A88E
	st	(Control_Locked).w
	move.w	#$808,(Ctrl_1_Logical).w
	bra.w	loc_3A87C
; ===========================================================================

loc_3A878:
	subi.w	#$40,d0

loc_3A87C:
	move.w	d0,(Camera_Max_X_pos).w

loc_3A880:
	lea	(off_3AFDC).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3A88E:
	bsr.w	loc_3AC46
	move.w	#$600,(Current_ZoneAndAct).w
	bra.s	loc_3A880
; ===========================================================================

loc_3A89A:
	bsr.w	loc_3AF58
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3A8BA(pc,d0.w),d1
	jsr	off_3A8BA(pc,d1.w)
	lea	(off_3AFDC).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	loc_368F8
; ===========================================================================
off_3A8BA:
	dc.w loc_3A8C2-off_3A8BA
	dc.w loc_3A8D4-off_3A8BA; 1
	dc.w loc_3A91A-off_3A8BA; 2
	dc.w loc_3A94E-off_3A8BA; 3
; ===========================================================================

loc_3A8C2:
	addq.b	#2,routine_secondary(a0)
	move.w	#$C0,objoff_32(a0)
	move.w	#$100,x_vel(a0)
	rts
; ===========================================================================

loc_3A8D4:
	subq.w	#1,objoff_32(a0)
	bmi.s	loc_3A8FC
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo27_SolidObject
	bra.w	loc_3AEEC
; ===========================================================================

loc_3A8FC:
	addq.b	#2,routine_secondary(a0)
	move.w	#$60,objoff_2A(a0)
	move.w	#1,objoff_32(a0)
	move.w	#$100,x_vel(a0)
	move.w	#$100,y_vel(a0)
	rts
; ===========================================================================

loc_3A91A:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_3A92A
	moveq	#-$15,d0
	bsr.w	JmpTo12_PlaySound

loc_3A92A:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3A946

loc_3A930:
	bsr.w	loc_3AD8C
	subq.w	#1,objoff_32(a0)
	bne.w	return_37A48
	move.w	#$E,objoff_32(a0)
	bra.w	loc_3AF34
; ===========================================================================

loc_3A946:
	addq.b	#2,routine_secondary(a0)
	bra.w	loc_3B7BC
; ===========================================================================

loc_3A94E:
	bsr.w	JmpTo26_ObjectMove
	bra.s	loc_3A930
; ===========================================================================

loc_3A954:
	bsr.w	loc_3AF58
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3A970(pc,d0.w),d1
	jsr	off_3A970(pc,d1.w)
	lea	(off_3AFDC).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================
off_3A970:
	dc.w loc_3A982-off_3A970
	dc.w loc_3AA0E-off_3A970; 1
	dc.w loc_3AA4C-off_3A970; 2
	dc.w loc_3AA74-off_3A970; 3
	dc.w loc_3AAA8-off_3A970; 4
	dc.w loc_3AAFE-off_3A970; 5
	dc.w loc_3AB68-off_3A970; 6
	dc.w loc_3AB7C-off_3A970; 7
	dc.w loc_3ABDE-off_3A970; 8
; ===========================================================================

loc_3A982:
	lea	(MainCharacter).w,a1 ; a1=character
	cmpi.w	#$5EC,y_pos(a1)
	bcs.s	return_3A99E
	clr.w	(Ctrl_1_Logical).w
	addq.w	#1,objoff_2E(a0)
	cmpi.w	#$40,objoff_2E(a0)
	bcc.s	loc_3A9A0

return_3A99E:
	rts
; ===========================================================================

loc_3A9A0:
	addq.b	#2,routine_secondary(a0)
	move.w	#$2E58,x_pos(a0)
	move.w	#$66C,y_pos(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.w	loc_3AC56
	lea	(word_3AFBC).l,a2
	bsr.w	loc_367D0
	move.w	#$3118,x_pos(a1)
	move.w	#$3F0,y_pos(a1)
	lea	(word_3AFB8).l,a2
	bsr.w	loc_367D0
	move.w	#$3070,x_pos(a1)
	move.w	#$3B0,y_pos(a1)
	lea	(word_3AFB8).l,a2
	bsr.w	loc_367D0
	move.w	#$3070,x_pos(a1)
	move.w	#$430,y_pos(a1)
	lea	(word_3AFC0).l,a2
	bsr.w	loc_367D0
	clr.w	x_pos(a1)
	clr.w	y_pos(a1)
	rts
; ===========================================================================

loc_3AA0E:
	lea	(MainCharacter).w,a1 ; a1=character
	cmpi.w	#$2E30,x_pos(a1)
	bcc.s	loc_3AA22
	move.w	#$808,(Ctrl_1_Logical).w
	rts
; ===========================================================================

loc_3AA22:
	addq.b	#2,routine_secondary(a0)
	clr.w	(Ctrl_1_Logical).w
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	move.w	#$600,(Sonic_top_speed).w
	move.w	#$C,(Sonic_acceleration).w
	move.w	#$80,(Sonic_deceleration).w
	bra.w	loc_3AC56
; ===========================================================================

loc_3AA4C:
	cmpi.w	#$380,($FFFFEEE2).w
	bcc.s	loc_3AA5C
	clr.w	(Ctrl_1_Logical).w
	bra.w	loc_3AC56
; ===========================================================================

loc_3AA5C:
	addq.b	#2,routine_secondary(a0)
	move.w	#$100,x_vel(a0)
	move.w	#-$100,y_vel(a0)
	clr.w	objoff_2A(a0)
	bra.w	loc_3AC56
; ===========================================================================

loc_3AA74:
	bsr.w	loc_3AC56
	addq.w	#1,objoff_2A(a0)
	cmpi.w	#$30,objoff_2A(a0)
	bne.s	loc_3AAA0
	addq.b	#2,routine_secondary(a0)
	move.w	#$4040,(Ctrl_1_Logical).w
	move.w	#$38,objoff_2E(a0)
	tst.b	(Super_Sonic_flag).w
	beq.s	loc_3AAA0
	move.w	#$28,objoff_2E(a0)

loc_3AAA0:
	bsr.w	loc_3AD8C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AAA8:
	clr.w	(Ctrl_1_Logical).w
	addq.w	#1,objoff_2A(a0)
	subq.w	#1,objoff_2E(a0)
	bmi.s	loc_3AABC
	move.w	#$4848,(Ctrl_1_Logical).w

loc_3AABC:
	bsr.w	loc_3AD8C
	btst	#3,status(a0)
	beq.s	BranchTo6_JmpTo45_DisplaySprite
	addq.b	#2,routine_secondary(a0)
	move.w	#$20,objoff_2E(a0)
	lea	($FFFF80D2).w,a1
	move.l	#$501F0025,(a1)+
	lea	($FFFF81D2).w,a1
	move.l	#$25001F50,(a1)+
	lea	($FFFF8BD6).w,a1
	move.l	#$501F0025,(a1)+
	lea	($FFFF8CD6).w,a1
	move.l	#$25001F50,(a1)+

BranchTo6_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AAFE:
	addq.w	#1,objoff_2A(a0)
	cmpi.w	#$100,objoff_2A(a0)
	bcs.s	loc_3AB18
	addq.b	#2,routine_secondary(a0)
	movea.w	objoff_3A(a0),a1 ; a1=object ??
	move.b	#2,routine_secondary(a1)

loc_3AB18:
	clr.w	(Ctrl_1_Logical).w
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a0),x_pos(a1)
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	clr.w	inertia(a1)
	bclr	#1,status(a1)
	bclr	#2,status(a1)
	move.l	#$1000505,mapping_frame(a1)
	move.w	#$100,anim_frame_duration(a1)
	move.b	#$13,y_radius(a1)
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_3AB60
	move.b	#$F,y_radius(a1)

loc_3AB60:
	bsr.w	loc_3AD8C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AB68:
	clr.w	(Ctrl_1_Logical).w
	bsr.w	loc_3AC56
	cmpi.w	#$437,objoff_2A(a0)
	bcs.s	loc_3AB8A
	addq.b	#2,routine_secondary(a0)

loc_3AB7C:
	cmpi.w	#$447,objoff_2A(a0)
	bcc.s	loc_3AB8A
	move.w	#$4040,(Ctrl_1_Logical).w

loc_3AB8A:
	cmpi.w	#$460,objoff_2A(a0)
	bcs.s	loc_3ABDE
	move.b	#6,(Dynamic_Resize_Routine).w
	addq.b	#2,routine_secondary(a0)
	lea	(word_3AFB8).l,a2
	bsr.w	loc_367D0
	move.w	#$3090,x_pos(a1)
	move.w	#$3D0,y_pos(a1)
	lea	(word_3AFB8).l,a2
	bsr.w	loc_367D0
	move.w	#$30C0,x_pos(a1)
	move.w	#$3F0,y_pos(a1)
	lea	(word_3AFB8).l,a2
	bsr.w	loc_367D0
	move.w	#$3090,x_pos(a1)
	move.w	#$410,y_pos(a1)

loc_3ABDE:

	cmpi.w	#$9C0,objoff_2A(a0)
	bcc.s	loc_3AC40
	move.w	objoff_2A(a0),d0
	addq.w	#1,d0
	move.w	d0,objoff_2A(a0)
	move.w	objoff_34(a0),d1
	move.w	word_3AC16(pc,d1.w),d2
	cmp.w	d2,d0
	bcs.s	loc_3AC0E
	addq.w	#2,d1
	move.w	d1,objoff_34(a0)
	lea	byte_3AC2A(pc,d1.w),a1
	move.b	(a1)+,x_vel(a0)
	move.b	(a1)+,y_vel(a0)

loc_3AC0E:
	bsr.w	loc_3AD8C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
word_3AC16:
	dc.w  $1E0
	dc.w  $260	; 1
	dc.w  $2A0	; 2
	dc.w  $2C0	; 3
	dc.w  $300	; 4
	dc.w  $3A0	; 5
	dc.w  $3F0	; 6
	dc.w  $460	; 7
	dc.w  $4A0	; 8
	dc.w  $580	; 9
byte_3AC2A:
	dc.b $FF
	dc.b $FF	; 1
	dc.b   1	; 2
	dc.b   0	; 3
	dc.b   0	; 4
	dc.b   1	; 5
	dc.b   1	; 6
	dc.b $FF	; 7
	dc.b   1	; 8
	dc.b   1	; 9
	dc.b   1	; 10
	dc.b $FF	; 11
	dc.b $FF	; 12
	dc.b   1	; 13
	dc.b $FF	; 14
	dc.b $FF	; 15
	dc.b $FF	; 16
	dc.b   1	; 17
	dc.b $FE	; 18
	dc.b   0	; 19
	dc.b   0	; 20
	dc.b   0	; 21
; ===========================================================================

loc_3AC40:
	move.w	#$E00,(Current_ZoneAndAct).w

loc_3AC46:
	move.w	#1,(Level_Inactive_flag).w
	clr.b	(Last_star_pole_hit).w
	clr.b	(Last_star_pole_hit_2P).w
	rts
; ===========================================================================

loc_3AC56:
	lea	(MainCharacter).w,a1 ; a1=character
	move.l	#$1000505,mapping_frame(a1)
	move.w	#$100,anim_frame_duration(a1)
	rts
; ===========================================================================

loc_3AC6A:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3AC78(pc,d0.w),d1
	jmp	off_3AC78(pc,d1.w)
; ===========================================================================
off_3AC78:
	dc.w loc_3AC7E-off_3AC78
	dc.w loc_3AC84-off_3AC78; 1
	dc.w loc_3ACF2-off_3AC78; 2
; ===========================================================================

loc_3AC7E:
	move.b	#$C7,collision_flags(a0)

loc_3AC84:
	tst.b	collision_property(a0)
	beq.s	return_3ACF0
	addq.b	#2,routine_secondary(a0)
	clr.b	collision_flags(a0)
	move.w	#$78,(Camera_Y_pos_bias).w
	movea.w	objoff_2C(a0),a1 ; a1=object
	bset	#6,status(a1)
	lea	(MainCharacter).w,a1 ; a1=character
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	move.w	x_pos(a0),d0
	subi.w	#$10,d0
	move.w	d0,x_pos(a1)
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_3ACC8
	subi.w	#$10,y_pos(a1)

loc_3ACC8:
	bset	#0,status(a1)
	bclr	#1,status(a1)
	bclr	#2,status(a1)
	move.b	#$11,anim(a1)
	move.b	#1,(MainCharacter+obj_control).w
	move.b	#1,($FFFFF7C9).w
	clr.w	(Ctrl_1_Logical).w

return_3ACF0:
	rts
; ===========================================================================

loc_3ACF2:
	lea	(MainCharacter).w,a1 ; a1=character
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	move.w	x_pos(a0),d0
	subi.w	#$10,d0
	move.w	d0,x_pos(a1)
	rts
; ===========================================================================

loc_3AD0C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3AD1A(pc,d0.w),d1
	jmp	off_3AD1A(pc,d1.w)
; ===========================================================================
off_3AD1A:
	dc.w loc_3AD1C-off_3AD1A
; ===========================================================================

loc_3AD1C:
	bchg	#2,status(a0)
	bne.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD2A:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3AD38(pc,d0.w),d1
	jmp	off_3AD38(pc,d1.w)
; ===========================================================================
off_3AD38:
	dc.w loc_3AD3A-off_3AD38
; ===========================================================================

loc_3AD3A:
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3AD42:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3AD50(pc,d0.w),d1
	jmp	off_3AD50(pc,d1.w)
; ===========================================================================
off_3AD50:
	dc.w loc_3AD54-off_3AD50
	dc.w loc_3AD5C-off_3AD50; 1
; ===========================================================================

loc_3AD54:
	bsr.w	loc_3AD6E
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD5C:
	bsr.w	loc_3AD6E
	lea	(off_3AFEC).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD6E:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	x_pos(a1),d0
	subi.w	#$C,d0
	move.w	d0,x_pos(a0)
	move.w	y_pos(a1),d0
	addi.w	#$28,d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_3AD8C:
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_36776
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	(sp)+,d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================

loc_3ADAA:
	lea	(MainCharacter).w,a1 ; a1=character
	btst	#3,status(a1)
	beq.s	loc_3ADC6
	bsr.w	loc_3ADF6
	bsr.w	loc_3AF0C
	bsr.w	JmpTo26_ObjectMove
	bra.w	loc_36776
; ===========================================================================

loc_3ADC6:
	tst.b	objoff_2E(a0)
	beq.s	loc_3ADD4
	bsr.w	loc_366D6
	move.w	d2,objoff_38(a0)

loc_3ADD4:
	move.w	#1,d0
	move.w	objoff_38(a0),d3
	beq.s	loc_3ADE8
	bmi.s	loc_3ADE2
	neg.w	d0

loc_3ADE2:
	add.w	d0,d3
	move.w	d3,objoff_38(a0)

loc_3ADE8:
	move.w	x_pos(a1),d1
	add.w	d3,d1
	move.w	d1,x_pos(a0)
	bra.w	loc_36776
; ===========================================================================

loc_3ADF6:
	tst.b	objoff_2F(a0)
	bne.s	loc_3AE16
	tst.b	objoff_2E(a0)
	beq.s	return_3AE38
	st	objoff_2F(a0)
	clr.b	objoff_30(a0)
	move.w	#$200,y_vel(a0)
	move.b	#$14,objoff_31(a0)

loc_3AE16:
	subq.b	#1,objoff_31(a0)
	bpl.s	loc_3AE26
	clr.b	objoff_2F(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_3AE26:
	move.w	y_vel(a0),d0
	cmpi.w	#-$100,d0
	ble.s	loc_3AE34
	addi.w	#-$20,d0

loc_3AE34:
	move.w	d0,y_vel(a0)

return_3AE38:
	rts
; ===========================================================================

loc_3AE3A:
	lea	(MainCharacter).w,a1 ; a1=character
	btst	#3,status(a1)
	beq.s	loc_3AEA0
	tst.b	objoff_2F(a0)
	bne.s	loc_3AE72
	clr.w	y_vel(a0)
	move.w	(Ctrl_1).w,d2
	move.w	#$80,d3
	andi.w	#$300,d2
	beq.s	loc_3AE72
	andi.w	#$200,d2
	bne.s	loc_3AE66
	neg.w	d3

loc_3AE66:
	move.w	d3,y_vel(a0)
	bsr.w	loc_3AF0C
	bsr.w	JmpTo26_ObjectMove

loc_3AE72:
	bsr.w	loc_366D6
	moveq	#$10,d3
	add.w	d3,d2
	cmpi.w	#$20,d2
	bcs.s	return_3AE9E
	move.w	inertia(a1),d2
	bpl.s	loc_3AE88
	neg.w	d2

loc_3AE88:
	cmpi.w	#$900,d2
	bcc.s	return_3AE9E
	tst.w	d0
	beq.s	loc_3AE94
	neg.w	d3

loc_3AE94:
	move.w	x_pos(a1),d1
	add.w	d3,d1
	move.w	d1,x_pos(a0)

return_3AE9E:
	rts
; ===========================================================================

loc_3AEA0:
	tst.b	objoff_30(a0)
	bne.s	loc_3AEC0
	tst.b	objoff_2E(a0)
	beq.s	return_3AE9E
	st	objoff_30(a0)
	clr.b	objoff_2F(a0)
	move.w	#$200,y_vel(a0)
	move.b	#$2B,objoff_31(a0)

loc_3AEC0:
	subq.b	#1,objoff_31(a0)
	bpl.s	loc_3AED0
	clr.b	objoff_30(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_3AED0:
	move.w	y_vel(a0),d0
	cmpi.w	#-$100,d0
	ble.s	loc_3AEDE
	addi.w	#-$20,d0

loc_3AEDE:
	move.w	d0,y_vel(a0)
	bsr.w	loc_3AF0C
	bsr.w	JmpTo26_ObjectMove
	rts
; ===========================================================================

loc_3AEEC:
	bsr.w	loc_366D6
	moveq	#$10,d3
	add.w	d3,d2
	cmpi.w	#$20,d2
	bcs.s	return_3AF0A
	tst.w	d0
	beq.s	loc_3AF00
	neg.w	d3

loc_3AF00:
	move.w	x_pos(a0),d1
	sub.w	d3,d1
	move.w	d1,x_pos(a1)

return_3AF0A:
	rts
; ===========================================================================

loc_3AF0C:
	move.w	(Camera_Y_pos).w,d0
	move.w	y_pos(a0),d1
	move.w	y_vel(a0),d2
	beq.s	return_3AF32
	bpl.s	loc_3AF26
	addi.w	#$34,d0
	cmp.w	d0,d1
	bcs.s	loc_3AF2E
	rts
; ===========================================================================

loc_3AF26:
	addi.w	#$A8,d0
	cmp.w	d0,d1
	bcs.s	return_3AF32

loc_3AF2E:
	clr.w	y_vel(a0)

return_3AF32:
	rts
; ===========================================================================

loc_3AF34:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_3AF56
	_move.b	#$C4,0(a1) ; load objC3
	move.b	#$90,subtype(a1) ; <== ObjC3_SubObjData
	move.w	a0,objoff_2C(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

return_3AF56:
	rts
; ===========================================================================

loc_3AF58:
	subq.b	#1,objoff_37(a0)
	bmi.s	loc_3AF60
	rts
; ===========================================================================

loc_3AF60:
	move.b	#8,objoff_37(a0)
	moveq	#0,d0
	move.b	objoff_36(a0),d0
	moveq	#$18,d1
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_3AF78
	moveq	#4,d1

loc_3AF78:
	addq.b	#1,d0
	cmp.w	d1,d0
	bcs.s	loc_3AF80
	moveq	#0,d0

loc_3AF80:
	move.b	d0,objoff_36(a0)
	cmpi.w	#2,(Player_mode).w
	bne.s	loc_3AF94
	move.b	byte_3AF9C(pc,d0.w),d0
	bra.w	JmpTo_LoadSonicDynPLC_Part2
; ===========================================================================

loc_3AF94:
	move.b	byte_3AFA0(pc,d0.w),d0
	bra.w	JmpTo_LoadTailsDynPLC_Part2
; ===========================================================================
byte_3AF9C:
	dc.b $2D
	dc.b $2E	; 1
	dc.b $2F	; 2
	dc.b $30	; 3
byte_3AFA0:
	dc.b $10
	dc.b $10	; 1
	dc.b $10	; 2
	dc.b $10	; 3
	dc.b   1	; 4
	dc.b   2	; 5
	dc.b   3	; 6
	dc.b   2	; 7
	dc.b   1	; 8
	dc.b   1	; 9
	dc.b $10	; 10
	dc.b $10	; 11
	dc.b $10	; 12
	dc.b $10	; 13
	dc.b   1	; 14
	dc.b   2	; 15
	dc.b   3	; 16
	dc.b   2	; 17
	dc.b   1	; 18
	dc.b   1	; 19
	dc.b   4	; 20
	dc.b   4	; 21
	dc.b   1	; 22
	dc.b   1	; 23
word_3AFB8:
	dc.w   $3E
	dc.w $B258	; 1
word_3AFBC:
	dc.w   $3C
	dc.w $B256	; 1
word_3AFC0:
	dc.w   $3A
	dc.w $B25C	; 1
	dc.w   $3E
	dc.w $B25A	; 1
; off_3AFC8:
ObjB2_SubObjData:
	dc.l ObjB2_MapUnc_3AFF2
	dc.w $8500
	dc.w $404
	dc.w $6000
; off_3AFD2:
ObjB2_SubObjData2:
	dc.l ObjB2_MapUnc_3B292
	dc.w $561
	dc.w $403
	dc.w $4000
; animation script
off_3AFDC:
	dc.w byte_3AFE0-off_3AFDC
	dc.w byte_3AFE6-off_3AFDC; 1
byte_3AFE0:
	dc.b   0,  0,  1,  2,  3,$FF
byte_3AFE6:
	dc.b   0,  4,  5,  6,  7,$FF
	even
; animation script
off_3AFEC:
	dc.w byte_3AFEE-off_3AFEC
byte_3AFEE:
	dc.b   0,  1,  2,$FF
	even
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjB2_MapUnc_3AFF2:	BINCLUDE "mappings/sprite/objB2_a.bin"
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjB2_MapUnc_3B292:	BINCLUDE "mappings/sprite/objB2_b.bin"


; ===========================================================================
; ----------------------------------------------------------------------------
; Object B3 - Clouds (placeable object) from SCZ
; ----------------------------------------------------------------------------
; Sprite_3B2DE:
ObjB3:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B2EC(pc,d0.w),d1
	jmp	off_3B2EC(pc,d1.w)
; ===========================================================================
off_3B2EC:
	dc.w loc_3B2F0-off_3B2EC
	dc.w loc_3B312-off_3B2EC; 1
; ===========================================================================

loc_3B2F0:
	bsr.w	LoadSubObject
	moveq	#0,d0
	move.b	subtype(a0),d0
	subi.b	#$5E,d0
	move.w	word_3B30C(pc,d0.w),x_vel(a0)
	lsr.w	#1,d0
	move.b	d0,mapping_frame(a0)
	rts
; ===========================================================================
word_3B30C:
	dc.w $FF80
	dc.w $FFC0	; 1
	dc.w $FFE0	; 2
; ===========================================================================

loc_3B312:
	bsr.w	JmpTo26_ObjectMove
	move.w	($FFFFF736).w,d0
	add.w	d0,x_pos(a0)
	bra.w	loc_36788
; ===========================================================================
; off_3B322:
ObjB3_SubObjData:
	dc.l ObjB3_MapUnc_3B32C
	dc.w $454F
	dc.w $406
	dc.w $3000

; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjB3_MapUnc_3B32C:	BINCLUDE "mappings/sprite/objB3.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object B4 - Vertical propeller from WFZ
; ----------------------------------------------------------------------------
; Sprite_3B36A:
ObjB4:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B378(pc,d0.w),d1
	jmp	off_3B378(pc,d1.w)
; ===========================================================================
off_3B378:
	dc.w loc_3B37C-off_3B378
	dc.w loc_3B38E-off_3B378; 1
; ===========================================================================

loc_3B37C:
	bsr.w	LoadSubObject
	bclr	#1,render_flags(a0)
	beq.s	return_3B38C
	clr.b	collision_flags(a0)

return_3B38C:
	rts
; ===========================================================================

loc_3B38E:
	lea	(off_3B3B6).l,a1
	bsr.w	JmpTo25_AnimateSprite
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	BranchTo11_JmpTo39_MarkObjGone
	moveq	#-$22,d0
	bsr.w	JmpTo_PlaySoundLocal

BranchTo11_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3B3AC:
ObjB4_SubObjData:
	dc.l ObjB4_MapUnc_3B3BE
	dc.w $A561
	dc.w $404
	dc.w $4A8
off_3B3B6:
	dc.w byte_3B3B8-off_3B3B6
byte_3B3B8:
	dc.b   1,  0,  1,  2,$FF,  0
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjB4_MapUnc_3B3BE:	BINCLUDE "mappings/sprite/objB4.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B5 - Horizontal propeller from WFZ
; ----------------------------------------------------------------------------
; Sprite_3B3FA:
ObjB5:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B408(pc,d0.w),d1
	jmp	off_3B408(pc,d1.w)
; ===========================================================================
off_3B408:
	dc.w loc_3B40E-off_3B408
	dc.w loc_3B426-off_3B408; 1
	dc.w loc_3B448-off_3B408; 2
; ===========================================================================

loc_3B40E:
	bsr.w	LoadSubObject
	move.b	#4,anim(a0)
	move.b	subtype(a0),d0
	subi.b	#$64,d0
	move.b	d0,routine(a0)
	rts
; ===========================================================================

loc_3B426:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3B442(pc,d0.w),d1
	jsr	off_3B442(pc,d1.w)
	lea	(off_3B4E8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3B442:
	dc.w BranchTo_loc_3B456-off_3B442
; ===========================================================================

BranchTo_loc_3B456 
	bra.w	loc_3B456
; ===========================================================================

loc_3B448:
	lea	(off_3B4E8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3B456:
	cmpi.b	#4,anim(a0)
	bne.s	return_3B4DC
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.w	loc_3B46A
	lea	(Sidekick).w,a1 ; a1=character

loc_3B46A:
	move.w	x_pos(a1),d0
	sub.w	x_pos(a0),d0
	addi.w	#$40,d0
	cmpi.w	#$80,d0
	bcc.s	return_3B4DC
	moveq	#0,d1
	move.b	($FFFFFE74).w,d1
	add.w	y_pos(a1),d1
	addi.w	#$60,d1
	sub.w	y_pos(a0),d1
	bcs.s	return_3B4DC
	cmpi.w	#$90,d1
	bcc.s	return_3B4DC
	subi.w	#$60,d1
	bcs.s	loc_3B4A0
	not.w	d1
	add.w	d1,d1

loc_3B4A0:
	addi.w	#$60,d1
	neg.w	d1
	asr.w	#4,d1
	add.w	d1,y_pos(a1)
	bset	#1,status(a1)
	move.w	#0,y_vel(a1)
	move.w	#1,inertia(a1)
	tst.b	flip_angle(a1)
	bne.s	return_3B4DC
	move.b	#1,flip_angle(a1)
	move.b	#$F,anim(a1)
	move.b	#$7F,flips_remaining(a1)
	move.b	#8,flip_speed(a1)

return_3B4DC:
	rts
; ===========================================================================
; off_3B4DE:
ObjB5_SubObjData:
	dc.l ObjB5_MapUnc_3B548
	dc.w $A3CD
	dc.b 4,4,$40,0

; animation script
off_3B4E8:
	dc.w byte_3B4FC-off_3B4E8
	dc.w byte_3B506-off_3B4E8; 1
	dc.w byte_3B50E-off_3B4E8; 2
	dc.w byte_3B516-off_3B4E8; 3
	dc.w byte_3B51C-off_3B4E8; 4
	dc.w byte_3B524-off_3B4E8; 5
	dc.w byte_3B52A-off_3B4E8; 6
	dc.w byte_3B532-off_3B4E8; 7
	dc.w byte_3B53A-off_3B4E8; 8
	dc.w byte_3B544-off_3B4E8; 9
byte_3B4FC:	dc.b   7,  0,  1,  2,  3,  4,  5,$FD,  1,  0
byte_3B506:	dc.b   4,  0,  1,  2,  3,  4,$FD,  2
byte_3B50E:	dc.b   3,  5,  0,  1,  2,$FD,  3,  0
byte_3B516:	dc.b   2,  3,  4,  5,$FD,  4
byte_3B51C:	dc.b   1,  0,  1,  2,  3,  4,  5,$FF
byte_3B524:	dc.b   2,  5,  4,  3,$FD,  6
byte_3B52A:	dc.b   3,  2,  1,  0,  5,$FD,  7,  0
byte_3B532:	dc.b   4,  4,  3,  2,  1,  0,$FD,  8
byte_3B53A:	dc.b   7,  5,  4,  3,  2,  1,  0,$FD,  9,  0
byte_3B544:	dc.b $7E,  0,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjB5_MapUnc_3B548:	BINCLUDE "mappings/sprite/objB5.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B6 - Tilting platform from WFZ
; ----------------------------------------------------------------------------
; Sprite_3B5D0:
ObjB6:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B5DE(pc,d0.w),d1
	jmp	off_3B5DE(pc,d1.w)
; ===========================================================================
off_3B5DE:
	dc.w loc_3B5E8-off_3B5DE
	dc.w loc_3B602-off_3B5DE; 1
	dc.w loc_3B65C-off_3B5DE; 2
	dc.w loc_3B6C8-off_3B5DE; 3
	dc.w loc_3B73C-off_3B5DE; 4
; ===========================================================================

loc_3B5E8:
	moveq	#0,d0
	move.b	#($35<<1),d0
	bsr.w	LoadSubObject_Part2
	move.b	subtype(a0),d0
	andi.b	#6,d0
	addq.b	#2,d0
	move.b	d0,routine(a0)
	rts
; ===========================================================================

loc_3B602:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3B614(pc,d0.w),d1
	jsr	off_3B614(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3B614:
	dc.w loc_3B61C-off_3B614
	dc.w loc_3B624-off_3B614; 1
	dc.w loc_3B644-off_3B614; 2
	dc.w loc_3B64E-off_3B614; 3
; ===========================================================================

loc_3B61C:
	addq.b	#2,routine_secondary(a0)
	bra.w	loc_3B77E
; ===========================================================================

loc_3B624:
	bsr.w	loc_3B790
	move.b	($FFFFFE0F).w,d0
	andi.b	#$F0,d0
	cmp.b	subtype(a0),d0
	beq.s	loc_3B638
	rts
; ===========================================================================

loc_3B638:
	addq.b	#2,routine_secondary(a0)
	clr.b	anim(a0)
	bra.w	loc_3B7BC
; ===========================================================================

loc_3B644:
	lea	(off_3B822).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_3B64E:
	move.b	#2,routine_secondary(a0)
	move.w	#$C0,objoff_2A(a0)
	rts
; ===========================================================================

loc_3B65C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	word_3B66E(pc,d0.w),d1
	jsr	word_3B66E(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
word_3B66E:
	dc.w loc_3B61C-word_3B66E
	dc.w loc_3B674-word_3B66E
	dc.w loc_3B6A6-word_3B66E
; ===========================================================================

loc_3B674:
	bsr.w	loc_3B790
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3B680
	rts
; ===========================================================================

loc_3B680:
	addq.b	#2,routine_secondary(a0)
	move.b	#$20,objoff_2A(a0)
	move.b	#3,anim(a0)
	clr.b	anim_frame(a0)
	clr.b	anim_frame_duration(a0)
	bsr.w	loc_3B7BC
	bsr.w	loc_3B7F8
	moveq	#$5C+$80,d0
	bra.w	JmpTo12_PlaySound
; ===========================================================================

loc_3B6A6:
	subq.b	#1,objoff_2A(a0)
	bmi.s	loc_3B6B6
	lea	(off_3B822).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_3B6B6:
	move.b	#2,routine_secondary(a0)
	clr.b	mapping_frame(a0)
	move.w	#$C0,objoff_2A(a0)
	rts
; ===========================================================================

loc_3B6C8:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3B6DA(pc,d0.w),d1
	jsr	off_3B6DA(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3B6DA:
	dc.w loc_3B6E2-off_3B6DA
	dc.w loc_3B6FE-off_3B6DA; 1
	dc.w loc_3B72C-off_3B6DA; 2
	dc.w loc_3B736-off_3B6DA; 3
; ===========================================================================

loc_3B6E2:
	bsr.w	loc_3B790
	move.b	status(a0),d0
	andi.b	#$18,d0
	bne.s	loc_3B6F2
	rts
; ===========================================================================

loc_3B6F2:
	addq.b	#2,routine_secondary(a0)
	move.w	#$10,objoff_2A(a0)
	rts
; ===========================================================================

loc_3B6FE:
	bsr.w	loc_3B790
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3B70A
	rts
; ===========================================================================

loc_3B70A:
	addq.b	#2,routine_secondary(a0)
	move.b	#0,anim(a0)
	bsr.w	loc_366D6
	bclr	#0,status(a0)
	tst.w	d0
	bne.s	BranchTo_loc_3B7BC
	bset	#0,status(a0)

BranchTo_loc_3B7BC 
	bra.w	loc_3B7BC
; ===========================================================================

loc_3B72C:
	lea	(off_3B822).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_3B736:
	clr.b	routine_secondary(a0)
	rts
; ===========================================================================

loc_3B73C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3B74E(pc,d0.w),d1
	jsr	off_3B74E(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3B74E:
	dc.w loc_3B756-off_3B74E
	dc.w loc_3B764-off_3B74E
	dc.w loc_3B644-off_3B74E
	dc.w loc_3B64E-off_3B74E
; ===========================================================================

loc_3B756:
	addq.b	#2,routine_secondary(a0)
	move.b	#2,mapping_frame(a0)
	bra.w	loc_3B77E
; ===========================================================================

loc_3B764:
	bsr.w	loc_3B7A6
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3B770
	rts
; ===========================================================================

loc_3B770:
	addq.b	#2,routine_secondary(a0)
	move.b	#4,anim(a0)
	bra.w	loc_3B7BC
; ===========================================================================

loc_3B77E:
	move.b	subtype(a0),d0
	andi.w	#$F0,d0
	move.b	d0,subtype(a0)
	move.w	d0,objoff_2A(a0)
	rts
; ===========================================================================

loc_3B790:
	move.w	x_pos(a0),-(sp)
	move.w	#$23,d1
	move.w	#4,d2
	move.w	#4,d3
	move.w	(sp)+,d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================

loc_3B7A6:
	move.w	x_pos(a0),-(sp)
	move.w	#$F,d1
	move.w	#$18,d2
	move.w	#$18,d3
	move.w	(sp)+,d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================

loc_3B7BC:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_3B7F6
	bclr	#3,status(a0)
	beq.s	loc_3B7DE
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#3,status(a1)
	bset	#1,status(a1)

loc_3B7DE:
	bclr	#4,status(a0)
	beq.s	return_3B7F6
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#4,status(a1)
	bset	#1,status(a1)

return_3B7F6:
	rts
; ===========================================================================

loc_3B7F8:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_3B816
	_move.b	#$B7,0(a1) ; load objB7 (huge unused vertical laser!)
	move.b	#$72,subtype(a1) ; <== ObjB7_SubObjData
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)

return_3B816:
	rts
; ===========================================================================
; off_3B818:
ObjB6_SubObjData:
	dc.l ObjB6_MapUnc_3B856
	dc.w $A393
	dc.b 4,4,$10,0

; animation script
off_3B822:
	dc.w byte_3B830-off_3B822
	dc.w byte_3B836-off_3B822; 1
	dc.w byte_3B83A-off_3B822; 2
	dc.w byte_3B840-off_3B822; 3
	dc.w byte_3B846-off_3B822; 4
	dc.w byte_3B84C-off_3B822; 5
	dc.w byte_3B850-off_3B822; 6
byte_3B830:	dc.b   3,  1,  2,$FD,  1,  0
byte_3B836:	dc.b $3F,  2,$FD,  2
byte_3B83A:	dc.b   3,  2,  1,  0,$FA,  0
byte_3B840:	dc.b   1,  0,  1,  2,  3,$FF
byte_3B846:	dc.b   3,  1,  0,$FD,  5,  0
byte_3B84C:	dc.b $3F,  0,$FD,  6
byte_3B850:	dc.b   3,  0,  1,  2,$FA,  0
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjB6_MapUnc_3B856:	BINCLUDE "mappings/sprite/objB6.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B7 - Unused huge vertical laser from WFZ
; ----------------------------------------------------------------------------
; Sprite_3B8A6:
ObjB7:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B8B4(pc,d0.w),d1
	jmp	off_3B8B4(pc,d1.w)
; ===========================================================================
off_3B8B4:
	dc.w loc_3B8B8-off_3B8B4
	dc.w loc_3B8C4-off_3B8B4; 1
; ===========================================================================

loc_3B8B8:
	bsr.w	LoadSubObject
	move.b	#$20,objoff_2A(a0)
	rts
; ===========================================================================

loc_3B8C4:
	subq.b	#1,objoff_2A(a0)
	beq.w	JmpTo65_DeleteObject
	bchg	#0,objoff_2B(a0)
	beq.w	return_37A48
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3B8DA:
ObjB7_SubObjData:
	dc.l ObjB7_MapUnc_3B8E4
	dc.w $C39F
	dc.w $404
	dc.w $18A9
ObjB7_MapUnc_3B8E4:	BINCLUDE "mappings/sprite/objB7.bin"

; ===========================================================================
; ----------------------------------------------------------------------------
; Object B8 - Wall turret from WFZ
; ----------------------------------------------------------------------------
; Sprite_3B968:
ObjB8:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3B976(pc,d0.w),d1
	jmp	off_3B976(pc,d1.w)
; ===========================================================================
off_3B976:
	dc.w BranchTo5_LoadSubObject-off_3B976
	dc.w loc_3B980-off_3B976; 1
	dc.w loc_3B9AA-off_3B976; 2
; ===========================================================================

BranchTo5_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_3B980:
	tst.b	render_flags(a0)
	bpl.s	BranchTo12_JmpTo39_MarkObjGone
	bsr.w	loc_366D6
	tst.w	d1
	beq.s	BranchTo12_JmpTo39_MarkObjGone
	addi.w	#$60,d2
	cmpi.w	#$C0,d2
	bcs.s	loc_3B99C

BranchTo12_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3B99C:
	addq.b	#2,routine(a0)
	move.w	#2,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3B9AA:
	bsr.w	loc_366D6
	moveq	#0,d6
	addi.w	#$20,d2
	cmpi.w	#$40,d2
	bcs.s	loc_3B9C0
	move.w	d0,d6
	lsr.w	#1,d6
	addq.w	#1,d6

loc_3B9C0:
	move.b	d6,mapping_frame(a0)
	subq.w	#1,objoff_2A(a0)
	bne.s	BranchTo13_JmpTo39_MarkObjGone
	move.w	#$60,objoff_2A(a0)
	bsr.w	loc_3B9D8

BranchTo13_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3B9D8:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_3BA28
	_move.b	#$98,0(a1) ; load obj98
	move.b	#3,mapping_frame(a1)
	move.b	#$8E,subtype(a1) ; <== ObjB8_SubObjData2
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	lea	Obj98_WallTurretShotMove(pc),a2
	move.l	a2,objoff_2A(a1)
	moveq	#0,d0
	move.b	mapping_frame(a0),d0
	lsl.w	#2,d0
	lea	byte_3BA2A(pc,d0.w),a2
	move.b	(a2)+,d0
	ext.w	d0
	add.w	d0,x_pos(a1)
	move.b	(a2)+,d0
	ext.w	d0
	add.w	d0,y_pos(a1)
	move.b	(a2)+,x_vel(a1)
	move.b	(a2)+,y_vel(a1)

return_3BA28:
	rts
; ===========================================================================
byte_3BA2A:
	dc.b   0
	dc.b $18	; 1
	dc.b   0	; 2
	dc.b   1	; 3
	dc.b $EF	; 4
	dc.b $10	; 5
	dc.b $FF	; 6
	dc.b   1	; 7
	dc.b $11	; 8
	dc.b $10	; 9
	dc.b   1	; 10
	dc.b   1	; 11
; off_3BA36:
ObjB8_SubObjData:
	dc.l ObjB8_Obj98_MapUnc_3BA46
	dc.w $3AB
	dc.w $404
	dc.w $1000
; animation script
off_3BA40:
	dc.w byte_3BA42-off_3BA40
byte_3BA42:
	dc.b   2,  3,  4,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjB8_Obj98_MapUnc_3BA46:	BINCLUDE "mappings/sprite/objB8.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B9 - Laser from WFZ that shoots down the Tornado
; ----------------------------------------------------------------------------
; Sprite_3BABA:
ObjB9:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BAC8(pc,d0.w),d1
	jmp	off_3BAC8(pc,d1.w)
; ===========================================================================
off_3BAC8:
	dc.w BranchTo6_LoadSubObject-off_3BAC8
	dc.w loc_3BAD2-off_3BAC8; 1
	dc.w loc_3BAF0-off_3BAC8; 2
; ===========================================================================

BranchTo6_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_3BAD2:
	tst.b	render_flags(a0)
	bmi.s	loc_3BADC
	bra.w	loc_3BAF8
; ===========================================================================

loc_3BADC:
	addq.b	#2,routine(a0)
	move.w	#-$1000,x_vel(a0)
	moveq	#-$11,d0
	bsr.w	JmpTo12_PlaySound
	bra.w	loc_3BAF8
; ===========================================================================

loc_3BAF0:
	bsr.w	JmpTo26_ObjectMove
	bra.w	loc_3BAF8
loc_3BAF8:
	move.w	x_pos(a0),d0
	move.w	(Camera_X_pos).w,d1
	subi.w	#$40,d1
	cmp.w	d1,d0
	blt.w	JmpTo65_DeleteObject
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; off_3BB0E:
ObjB9_SubObjData:
	dc.l ObjB9_MapUnc_3BB18
	dc.w $C3C3
	dc.b 4,1,$60,0
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjB9_MapUnc_3BB18:	BINCLUDE "mappings/sprite/objB9.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BA - Wheel from WFZ
; ----------------------------------------------------------------------------
; Sprite_3BB4C:
ObjBA:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BB5A(pc,d0.w),d1
	jmp	off_3BB5A(pc,d1.w)
; ===========================================================================
off_3BB5A:
	dc.w BranchTo7_LoadSubObject-off_3BB5A
	dc.w BranchTo14_JmpTo39_MarkObjGone-off_3BB5A; 1
; ===========================================================================

BranchTo7_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

BranchTo14_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3BB66:
ObjBA_SubObjData:
	dc.l ObjBA_MapUnc_3BB70
	dc.w $C3EA
	dc.w $404
	dc.w $1000
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBA_MapUnc_3BB70:	BINCLUDE "mappings/sprite/objBA.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BB - Unknown
; ----------------------------------------------------------------------------
; Sprite_3BB7C:
ObjBB:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BB8A(pc,d0.w),d1
	jmp	off_3BB8A(pc,d1.w)
; ===========================================================================
off_3BB8A:
	dc.w BranchTo8_LoadSubObject-off_3BB8A
	dc.w BranchTo15_JmpTo39_MarkObjGone-off_3BB8A; 1
; ===========================================================================

BranchTo8_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

BranchTo15_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3BB96:
ObjBB_SubObjData:
	dc.l ObjBB_MapUnc_3BBA0
	dc.w $23FA
	dc.w $404
	dc.w $C09
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBB_MapUnc_3BBA0:	BINCLUDE "mappings/sprite/objBB.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BC - Fire coming out of Robotnik's ship in WFZ
; ----------------------------------------------------------------------------
; Sprite_3BBBC:
ObjBC:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BBCA(pc,d0.w),d1
	jmp	off_3BBCA(pc,d1.w)
; ===========================================================================
off_3BBCA:
	dc.w loc_3BBCE-off_3BBCA
	dc.w loc_3BBDA-off_3BBCA; 1
; ===========================================================================

loc_3BBCE:
	bsr.w	LoadSubObject
	move.w	x_pos(a0),objoff_2C(a0)
	rts
; ===========================================================================

loc_3BBDA:
	move.w	objoff_2C(a0),d0
	move.w	($FFFFEEE2).w,d1
	cmpi.w	#$380,d1
	bcc.w	JmpTo65_DeleteObject
	add.w	d1,d0
	move.w	d0,x_pos(a0)
	bchg	#0,objoff_2A(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; off_3BBFE:
ObjBC_SubObjData2:
	dc.l ObjBC_MapUnc_3BC08
	dc.w $4465
	dc.w $404
	dc.w $1000
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBC_MapUnc_3BC08:	BINCLUDE "mappings/sprite/objBC.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BD - Ascending/descending metal platforms from WFZ
; ----------------------------------------------------------------------------
; Sprite_3BC1C:
ObjBD:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BC2A(pc,d0.w),d1
	jmp	off_3BC2A(pc,d1.w)
; ===========================================================================
off_3BC2A:
	dc.w loc_3BC30-off_3BC2A
	dc.w loc_3BC3C-off_3BC2A; 1
	dc.w loc_3BC50-off_3BC2A; 2
; ===========================================================================

loc_3BC30:
	addq.b	#2,routine(a0)
	move.w	#1,objoff_2A(a0)
	rts
; ===========================================================================

loc_3BC3C:
	subq.w	#1,objoff_2A(a0)
	bne.s	BranchTo_JmpTo8_MarkObjGone3
	move.w	#$40,objoff_2A(a0)
	bsr.w	loc_3BCF8

BranchTo_JmpTo8_MarkObjGone3 
	bra.w	JmpTo8_MarkObjGone3
; ===========================================================================

loc_3BC50:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3BC62(pc,d0.w),d1
	jsr	off_3BC62(pc,d1.w)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3BC62:
	dc.w loc_3BC6C-off_3BC62
	dc.w loc_3BCAC-off_3BC62; 1
	dc.w loc_3BCB6-off_3BC62; 2
	dc.w loc_3BCCC-off_3BC62; 3
	dc.w loc_3BCD6-off_3BC62; 4
; ===========================================================================

loc_3BC6C:
	bsr.w	LoadSubObject
	move.b	#2,mapping_frame(a0)
	subq.b	#2,routine(a0)
	addq.b	#2,routine_secondary(a0)
	move.w	#$C7,objoff_2A(a0)
	btst	#0,render_flags(a0)
	beq.s	loc_3BC92
	move.w	#$1C7,objoff_2A(a0)

loc_3BC92:
	moveq	#0,d0
	move.b	subtype(a0),d0
	subi.b	#$7E,d0
	move.b	d0,subtype(a0)
	move.w	word_3BCA8(pc,d0.w),y_vel(a0)
	rts
; ===========================================================================
word_3BCA8:
	dc.w $FF00
	dc.w  $100	; 1
; ===========================================================================

loc_3BCAC:
	lea	(off_3BD2E).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_3BCB6:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3BCC0
	bra.w	loc_3BCDE
; ===========================================================================

loc_3BCC0:
	addq.b	#2,routine_secondary(a0)
	move.b	#1,anim(a0)
	rts
; ===========================================================================

loc_3BCCC:
	lea	(off_3BD2E).l,a1
	bra.w	JmpTo25_AnimateSprite
; ===========================================================================

loc_3BCD6:
	bsr.w	loc_3B7BC
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3BCDE:
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	move.w	#$23,d1
	move.w	#4,d2
	move.w	#5,d3
	move.w	(sp)+,d4
	bra.w	JmpTo9_PlatformObject
; ===========================================================================

loc_3BCF8:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	return_3BD22
	_move.b	#$BD,0(a1) ; load objBD
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#4,routine(a1)
	move.b	subtype(a0),subtype(a1)
	move.b	render_flags(a0),render_flags(a1)

return_3BD22:
	rts
; ===========================================================================
; off_3BD24:
ObjBD_SubObjData:
	dc.l ObjBD_MapUnc_3BD3E
	dc.w $E40E
	dc.b 4,4,$18,0
; animation script
off_3BD2E:
	dc.w byte_3BD32-off_3BD2E
	dc.w byte_3BD38-off_3BD2E; 1
byte_3BD32:
	dc.b   3,  2,  1,  0,$FA,  0
byte_3BD38:
	dc.b   1,  0,  1,  2,$FA
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBD_MapUnc_3BD3E:	BINCLUDE "mappings/sprite/objBD.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BE - Lateral cannon (temporary platform that pops in/out) from WFZ
; ----------------------------------------------------------------------------
; Sprite_3BD7A:
ObjBE:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BD88(pc,d0.w),d1
	jmp	off_3BD88(pc,d1.w)
; ===========================================================================
off_3BD88:
	dc.w loc_3BD94-off_3BD88
	dc.w loc_3BDA2-off_3BD88; 1
	dc.w loc_3BDC6-off_3BD88; 2
	dc.w loc_3BDD4-off_3BD88; 3
	dc.w loc_3BDC6-off_3BD88; 4
	dc.w loc_3BDF4-off_3BD88; 5
; ===========================================================================

loc_3BD94:
	moveq	#0,d0
	move.b	#($41<<1),d0
	bsr.w	LoadSubObject_Part2
	bra.w	loc_3B77E
; ===========================================================================

loc_3BDA2:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$F0,d0
	cmp.b	subtype(a0),d0
	beq.s	loc_3BDB4
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BDB4:
	addq.b	#2,routine(a0)
	clr.b	anim(a0)
	move.w	#$A0,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BDC6:
	lea	(off_3BE36).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BDD4:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3BDE2
	bsr.w	loc_3BE04
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BDE2:
	addq.b	#2,routine(a0)
	move.b	#1,anim(a0)
	bsr.w	loc_3B7BC
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BDF4:
	move.b	#2,routine(a0)
	move.w	#$40,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3BE04:
	move.b	mapping_frame(a0),d0
	cmpi.b	#3,d0
	beq.s	loc_3BE16
	cmpi.b	#4,d0
	bne.w	loc_3B7BC

loc_3BE16:
	move.w	x_pos(a0),-(sp)
	move.w	#$23,d1
	move.w	#$18,d2
	move.w	#$19,d3
	move.w	(sp)+,d4
	bra.w	JmpTo9_PlatformObject
; ===========================================================================
; off_3BE2C:
ObjBE_SubObjData:
	dc.l ObjBE_MapUnc_3BE46
	dc.w $E41A
	dc.w $404
	dc.w $1800
; animation script
off_3BE36:
	dc.w byte_3BE3A-off_3BE36
	dc.w byte_3BE40-off_3BE36; 1
byte_3BE3A:
	dc.b   5,  0,  1,  2,  3,$FC
byte_3BE40:
	dc.b   5,  3,  2,  1,  0,$FC
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBE_MapUnc_3BE46:	BINCLUDE "mappings/sprite/objBE.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BF - Rotaty-stick badnik from WFZ
; ----------------------------------------------------------------------------
; Sprite_3BEAA:
ObjBF:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BEB8(pc,d0.w),d1
	jmp	off_3BEB8(pc,d1.w)
; ===========================================================================
off_3BEB8:
	dc.w BranchTo9_LoadSubObject-off_3BEB8
	dc.w loc_3BEC0-off_3BEB8; 1
; ===========================================================================

BranchTo9_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_3BEC0:
	lea	(off_3BED8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3BECE:
ObjBE_SubObjData2:
	dc.l ObjBF_MapUnc_3BEE0
	dc.w $E450
	dc.w $404
	dc.w $404
; animation script
off_3BED8:
	dc.w byte_3BEDA-off_3BED8
byte_3BEDA:
	dc.b   1,  0,  1,  2,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjBF_MapUnc_3BEE0:	BINCLUDE "mappings/sprite/objBF.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C0 - Speed launcher from WFZ
; ----------------------------------------------------------------------------
; Sprite_3BF04:
ObjC0:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3BF12(pc,d0.w),d1
	jmp	off_3BF12(pc,d1.w)
; ===========================================================================
off_3BF12:
	dc.w loc_3BF16-off_3BF12
	dc.w loc_3BF3E-off_3BF12; 1
; ===========================================================================

loc_3BF16:
	move.w	#($43<<1),d0
	bsr.w	LoadSubObject_Part2
	moveq	#0,d0
	move.b	subtype(a0),d0
	lsl.w	#4,d0
	btst	#0,status(a0)
	bne.s	loc_3BF30
	neg.w	d0

loc_3BF30:
	move.w	x_pos(a0),d1
	move.w	d1,objoff_34(a0)
	add.w	d1,d0
	move.w	d0,objoff_32(a0)

loc_3BF3E:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3BF60(pc,d0.w),d1
	jsr	off_3BF60(pc,d1.w)
	move.w	#$10,d1
	move.w	#$11,d3
	move.w	x_pos(a0),d4
	bsr.w	JmpTo9_PlatformObject
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
off_3BF60:
	dc.w loc_3BF66-off_3BF60
	dc.w loc_3BFD8-off_3BF60; 1
	dc.w loc_3C062-off_3BF60; 2
; ===========================================================================

loc_3BF66:
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_3BFB2
	addq.b	#2,routine_secondary(a0)
	move.w	#$C00,x_vel(a0)
	move.w	#$80,objoff_30(a0)
	btst	#0,status(a0)
	bne.s	loc_3BF90
	neg.w	x_vel(a0)
	neg.w	objoff_30(a0)

loc_3BF90:
	bsr.w	JmpTo26_ObjectMove
	move.b	status(a0),d0
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_3BFA6
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_3BFB4

loc_3BFA6:
	andi.b	#$10,d0
	beq.s	return_3BFB2
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_3BFB4

return_3BFB2:
	rts
; ===========================================================================

loc_3BFB4:
	clr.w	inertia(a1)
	clr.w	x_vel(a1)
	move.w	x_pos(a0),x_pos(a1)
	bclr	#0,status(a1)
	btst	#0,status(a0)
	bne.s	return_3BFD6
	bset	#0,status(a1)

return_3BFD6:
	rts
; ===========================================================================

loc_3BFD8:
	move.w	objoff_30(a0),d0
	add.w	d0,x_vel(a0)
	bsr.w	JmpTo26_ObjectMove
	move.w	objoff_32(a0),d0
	sub.w	x_pos(a0),d0
	btst	#0,status(a0)
	beq.s	loc_3BFF6
	neg.w	d0

loc_3BFF6:
	tst.w	d0
	bpl.s	loc_3C034
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	return_3C01E
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_3C012
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_3BFB4

loc_3C012:
	andi.b	#$10,d0
	beq.s	return_3C01E
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_3BFB4

return_3C01E:
	rts
; ===========================================================================

loc_3C020:
	move.w	x_vel(a0),x_vel(a1)
	move.w	#-$400,y_vel(a1)
	bset	#1,status(a1)
	rts
; ===========================================================================

loc_3C034:
	addq.b	#2,routine_secondary(a0)
	move.w	objoff_32(a0),x_pos(a0)
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	loc_3C062
	move.b	d0,d1
	andi.b	#8,d1
	beq.s	loc_3C056
	lea	(MainCharacter).w,a1 ; a1=character
	bsr.s	loc_3C020

loc_3C056:
	andi.b	#$10,d0
	beq.s	loc_3C062
	lea	(Sidekick).w,a1 ; a1=character
	bsr.s	loc_3C020

loc_3C062:

	move.w	x_pos(a0),d0
	moveq	#4,d1
	tst.w	objoff_30(a0)	; if objoff_30(a0) is > 0,
	spl	d2		; then set d2 to $FF, else set d2 to $00
	bmi.s	loc_3C072
	neg.w	d1

loc_3C072:
	add.w	d1,d0
	cmp.w	objoff_34(a0),d0
	bcc.s	loc_3C07C
	not.b	d2

loc_3C07C:
	tst.b	d2
	bne.s	loc_3C088
	clr.b	routine_secondary(a0)
	move.w	objoff_34(a0),d0

loc_3C088:
	move.w	d0,x_pos(a0)
	rts
; ===========================================================================
; off_3C08E:
ObjC0_SubObjData:
	dc.l ObjC0_MapUnc_3C098
	dc.w $245C
	dc.w $404
	dc.w $1000
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC0_MapUnc_3C098:	BINCLUDE "mappings/sprite/objC0.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C1 - Breakable plating from WFZ
; (and what sonic hangs onto on the back of Robotnic's getaway ship)
; ----------------------------------------------------------------------------
; Sprite_3C0AC:
ObjC1:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3C0BA(pc,d0.w),d1
	jmp	off_3C0BA(pc,d1.w)
; ===========================================================================
off_3C0BA:
	dc.w loc_3C0C0-off_3C0BA
	dc.w loc_3C0D6-off_3C0BA; 1
	dc.w loc_3C1AA-off_3C0BA; 2
; ===========================================================================

loc_3C0C0:
	move.w	#($44<<1),d0
	bsr.w	LoadSubObject_Part2
	moveq	#0,d0
	move.b	subtype(a0),d0
	mulu.w	#$3C,d0
	move.w	d0,objoff_30(a0)

loc_3C0D6:
	tst.b	objoff_32(a0)
	beq.s	TitleScreen_Loop0
	tst.w	objoff_30(a0)
	beq.s	loc_3C0E8
	subq.w	#1,objoff_30(a0)
	beq.s	loc_3C12E

loc_3C0E8:
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	y_pos(a0),d0
	subi.w	#$18,d0
	btst	#0,(Ctrl_1_Held).w
	beq.s	loc_3C10A
	subq.w	#1,y_pos(a1)
	cmp.w	y_pos(a1),d0
	bcs.s	loc_3C10A
	move.w	d0,y_pos(a1)

loc_3C10A:
	addi.w	#$30,d0
	btst	#1,(Ctrl_1_Held).w
	beq.s	loc_3C124
	addq.w	#1,y_pos(a1)
	cmp.w	y_pos(a1),d0
	bcc.s	loc_3C124
	move.w	d0,y_pos(a1)

loc_3C124:
	move.b	(Ctrl_1_Press_Logical).w,d0
	andi.w	#$70,d0
	beq.s	BranchTo16_JmpTo39_MarkObjGone

loc_3C12E:
	clr.b	collision_flags(a0)
	clr.b	(MainCharacter+obj_control).w
	clr.b	($FFFFF7C9).w
	clr.b	objoff_32(a0)
	bra.s	loc_3C19A
; ===========================================================================

TitleScreen_Loop0:
	tst.b	collision_property(a0)
	beq.s	BranchTo16_JmpTo39_MarkObjGone
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a0),d0
	subi.w	#$14,d0
	cmp.w	x_pos(a1),d0
	bcc.s	BranchTo16_JmpTo39_MarkObjGone
	clr.b	collision_property(a0)
	cmpi.b	#4,routine(a1)
	bcc.s	BranchTo16_JmpTo39_MarkObjGone
	clr.w	x_vel(a1)
	clr.w	y_vel(a1)
	move.w	x_pos(a0),d0
	subi.w	#$14,d0
	move.w	d0,x_pos(a1)
	bset	#0,status(a1)
	move.b	#$11,anim(a1)
	move.b	#1,(MainCharacter+obj_control).w
	move.b	#1,($FFFFF7C9).w
	move.b	#1,objoff_32(a0)

BranchTo16_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3C19A:
	lea	(byte_3C1E4).l,a4
	lea	(byte_3C1E0).l,a2
	bsr.w	loc_3C1F4

loc_3C1AA:
	tst.b	objoff_3F(a0)
	beq.s	loc_3C1B6
	subq.b	#1,objoff_3F(a0)
	bra.s	loc_3C1CA
; ===========================================================================

loc_3C1B6:
	bsr.w	JmpTo26_ObjectMove
	addi.w	#8,y_vel(a0)
	lea	(off_3C1D6).l,a1
	bsr.w	JmpTo25_AnimateSprite

loc_3C1CA:
	tst.b	render_flags(a0)
	bpl.w	JmpTo65_DeleteObject
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; animation script
off_3C1D6:
	dc.w byte_3C1D8-off_3C1D6
byte_3C1D8:
	dc.b   3,  2,  3,  4,  5,  1,$FF
	even

; unknown
byte_3C1E0:
	dc.b   0
	dc.b   4	; 1
	dc.b $18	; 2
	dc.b $20	; 3
byte_3C1E4:
	dc.b $FF,$F0
	dc.b $FF,$F0	; 2
	dc.b $FF,$F0	; 4
	dc.b   0,$10	; 6
	dc.b $FF,$D0	; 8
	dc.b $FF,$F0	; 10
	dc.b $FF,$D0	; 12
	dc.b   0,$10	; 14
; ===========================================================================

loc_3C1F4:
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	move.b	priority(a0),d4
	subq.b	#1,d4
	moveq	#3,d1
	movea.l	a0,a1
	bra.s	loc_3C20E
; ===========================================================================

loc_3C208:
	bsr.w	JmpTo25_SingleObjLoad2
	bne.s	loc_3C26C

loc_3C20E:
	move.b	#4,routine(a1)
	_move.b	0(a0),0(a1) ; load obj
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	#$84,render_flags(a1)
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	(a4)+,d0
	add.w	d2,d0
	move.w	d0,x_pos(a1)
	move.w	(a4)+,d0
	add.w	d3,d0
	move.w	d0,y_pos(a1)
	move.b	d4,priority(a1)
	move.b	#$10,width_pixels(a1)
	move.b	#1,mapping_frame(a1)
	move.w	#-$400,x_vel(a1)
	move.w	#0,y_vel(a1)
	move.b	(a2)+,objoff_3F(a1)
	dbf	d1,loc_3C208

loc_3C26C:
	move.w	#$CB,d0
	jmp	(PlaySound).l
; ===========================================================================
; off_3C276:
ObjC1_SubObjData:
	dc.l ObjC1_MapUnc_3C280
	dc.w $E48C
	dc.w $404
	dc.w $40E1
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC1_MapUnc_3C280:	BINCLUDE "mappings/sprite/objC1.bin"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C2 - Rivet thing you bust to get into ship at the end of WFZ
; ----------------------------------------------------------------------------
; Sprite_3C328:
ObjC2:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3C336(pc,d0.w),d1
	jmp	off_3C336(pc,d1.w)
; ===========================================================================
off_3C336:
	dc.w BranchTo10_LoadSubObject-off_3C336
	dc.w loc_3C33E-off_3C336; 1
; ===========================================================================

BranchTo10_LoadSubObject 
	bra.w	LoadSubObject
; ===========================================================================

loc_3C33E:
	move.b	(MainCharacter+anim).w,objoff_30(a0)
	move.w	x_pos(a0),-(sp)
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#9,d3
	move.w	(sp)+,d4
	bsr.w	JmpTo27_SolidObject
	btst	#3,status(a0)
	bne.s	loc_3C366
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3C366:
	cmpi.b	#2,objoff_30(a0)
	bne.s	BranchTo17_JmpTo39_MarkObjGone
	move.w	#$2880,(Camera_Min_X_pos).w
	bclr	#3,status(a0)
	_move.b	#$27,0(a0) ; load 0bj27 (transform into explosion)
	move.b	#2,routine(a0)
	bset	#1,(MainCharacter+status).w
	bclr	#3,(MainCharacter+status).w
	lea	($FFFF8850).w,a1
	move.l	#$8A707172,(a1)+
	move.w	#$7374,(a1)+
	lea	($FFFF8950).w,a1
	move.l	#$6E787978,(a1)+
	move.w	#$787A,(a1)+
	move.b	#1,(Dirty_flag).w

BranchTo17_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3C3B8:
ObjC2_SubObjData:
	dc.l ObjC2_MapUnc_3C3C2
	dc.w $A461
	dc.w $404
	dc.w $1000
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC2_MapUnc_3C3C2:	BINCLUDE "mappings/sprite/objC2.bin"

Invalid_SubObjData2:

; ===========================================================================
; ----------------------------------------------------------------------------
; Object C3,C4 - Plane's smoke from WFZ
; ----------------------------------------------------------------------------
; Sprite_3C3D6:
ObjC3:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3C3E4(pc,d0.w),d1
	jmp	off_3C3E4(pc,d1.w)
; ===========================================================================
off_3C3E4:
	dc.w loc_3C3E8-off_3C3E4
	dc.w loc_3C416-off_3C3E4; 1
; ===========================================================================

loc_3C3E8:
	bsr.w	LoadSubObject
	move.b	#7,anim_frame_duration(a0)
	bsr.w	JmpTo6_RandomNumber
	move.w	(RNG_seed).w,d0
	andi.w	#$1C,d0
	sub.w	d0,x_pos(a0)
	addi.w	#$10,y_pos(a0)
	move.w	#-$100,y_vel(a0)
	move.w	#-$100,x_vel(a0)
	rts
; ===========================================================================

loc_3C416:
	bsr.w	JmpTo26_ObjectMove
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo7_JmpTo45_DisplaySprite
	move.b	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#5,mapping_frame(a0)
	beq.w	JmpTo65_DeleteObject

BranchTo7_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; off_3C438:
ObjC3_SubObjData:
	dc.l Obj27_MapUnc_21120
	dc.w $5A4
	dc.w $405
	dc.w $C00
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C5 - WFZ boss
; ----------------------------------------------------------------------------
; Sprite_3C442:
ObjC5:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3C450(pc,d0.w),d1
	jmp	off_3C450(pc,d1.w)
; ===========================================================================
off_3C450:
	dc.w loc_3C464-off_3C450
	dc.w loc_3C476-off_3C450; 1
	dc.w loc_3C748-off_3C450; 2
	dc.w loc_3C7EE-off_3C450; 3
	dc.w loc_3C8C8-off_3C450; 4
	dc.w loc_3C9AA-off_3C450; 5
	dc.w loc_3C9EA-off_3C450; 6
	dc.w loc_3CA3C-off_3C450; 7
	dc.w loc_3CB3E-off_3C450; 8
	dc.w loc_3CBBE-off_3C450; 9
; ===========================================================================

loc_3C464:
	bsr.w	LoadSubObject
	move.b	subtype(a0),d0
	subi.b	#$90,d0
	move.b	d0,routine(a0)
	rts
; ===========================================================================

loc_3C476:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3C488(pc,d0.w),d1
	jsr	off_3C488(pc,d1.w)
	bra.w	loc_3CBEC
; ===========================================================================
off_3C488:
	dc.w loc_3C4A8-off_3C488
	dc.w loc_3C4DC-off_3C488; 1
	dc.w loc_3C552-off_3C488; 2
	dc.w loc_3C570-off_3C488; 3
	dc.w loc_3C58A-off_3C488; 4
	dc.w loc_3C5B0-off_3C488; 5
	dc.w loc_3C5E8-off_3C488; 6
	dc.w loc_3C5F6-off_3C488; 7
	dc.w loc_3C60E-off_3C488; 8
	dc.w loc_3C640-off_3C488; 9
	dc.w loc_3C65C-off_3C488; 10
	dc.w loc_3C68C-off_3C488; 11
	dc.w loc_3C6E4-off_3C488; 12
	dc.w loc_3C5E8-off_3C488; 13
	dc.w loc_3C704-off_3C488; 14
	dc.w loc_3C712-off_3C488; 15
; ===========================================================================

loc_3C4A8:
	addq.b	#2,routine_secondary(a0)
	move.b	#0,collision_flags(a0)
	move.b	#8,collision_property(a0)
	move.w	#$442,d0
	move.w	d0,(Camera_Max_Y_pos_now).w
	move.w	d0,(Camera_Max_Y_pos).w
	move.w	x_pos(a0),d0
	subi.w	#$60,d0
	move.w	d0,objoff_34(a0)
	addi.w	#$C0,d0
	move.w	d0,objoff_36(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C4DC:
	bsr.w	loc_366D6
	addi.w	#$20,d2
	cmpi.w	#$40,d2
	bcs.s	loc_3C4EE
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C4EE:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,y_vel(a0)
	lea	(byte_3CC60).l,a2
	bsr.w	loc_367D0
	subi.w	#$88,x_pos(a1)
	addi.w	#$60,y_pos(a1)
	lea	(byte_3CC60).l,a2
	bsr.w	loc_367D0
	addi.w	#$88,x_pos(a1)
	addi.w	#$60,y_pos(a1)
	lea	(byte_3CC6C).l,a2
	bsr.w	loc_367D0
	lea	(byte_3CC70).l,a2
	bsr.w	loc_367D0
	lea	(byte_3CC78).l,a2
	bsr.w	loc_367D0
	move.w	#$5A,objoff_2A(a0)
	moveq	#-7,d0
	bsr.w	JmpTo12_PlaySound
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C552:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3C55C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C55C:
	addq.b	#2,routine_secondary(a0)
	move.w	#$60,objoff_2A(a0)
	moveq	#-$6D,d0
	bsr.w	JmpTo5_PlayMusic
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C570:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3C57E
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C57E:
	addq.b	#2,routine_secondary(a0)
	clr.w	y_vel(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C58A:

	addq.b	#2,routine_secondary(a0)
	bsr.w	loc_366D6
	move.w	#$100,d1
	tst.w	d0
	bne.s	loc_3C59C
	neg.w	d1

loc_3C59C:
	move.w	d1,x_vel(a0)
	bset	#2,status(a0)
	move.w	#$70,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5B0:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3C5DC
	move.w	x_pos(a0),d0
	tst.w	x_vel(a0)
	bmi.s	loc_3C5CA
	cmp.w	objoff_36(a0),d0
	bcc.s	loc_3C5D0
	bra.w	loc_3C5D4
; ===========================================================================

loc_3C5CA:
	cmp.w	objoff_34(a0),d0
	bcc.s	loc_3C5D4

loc_3C5D0:
	neg.w	x_vel(a0)

loc_3C5D4:
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5DC:
	addq.b	#2,routine_secondary(a0)
	clr.b	anim(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5E8:
	lea	(off_3CCB2).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5F6:
	addq.b	#2,routine_secondary(a0)
	move.w	#$E,objoff_2A(a0)
	movea.w	objoff_3C(a0),a1 ; a1=object
	move.b	#4,routine_secondary(a1)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C60E:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3C620
	movea.w	objoff_3C(a0),a1 ; a1=object
	addq.w	#1,y_pos(a1)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C620:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,objoff_2A(a0)
	bset	#4,status(a0)
	bset	#6,status(a0)
	move.b	#6,collision_flags(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C640:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3C64A
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C64A:
	addq.b	#2,routine_secondary(a0)
	lea	(byte_3CC74).l,a2
	bsr.w	loc_367D0
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C65C:
	movea.w	parent(a0),a1 ; a1=object
	btst	#2,status(a1)
	bne.s	loc_3C66C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C66C:
	addq.b	#2,routine_secondary(a0)
	move.w	#$80,objoff_2A(a0)
	bsr.w	loc_366D6
	move.w	#$80,d1
	tst.w	d0
	bne.s	loc_3C684
	neg.w	d1

loc_3C684:
	move.w	d1,x_vel(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C68C:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3C6B8
	move.w	x_pos(a0),d0
	tst.w	x_vel(a0)
	bmi.s	loc_3C6A6
	cmp.w	objoff_36(a0),d0
	bcc.s	loc_3C6AC
	bra.w	loc_3C6B0
; ===========================================================================

loc_3C6A6:
	cmp.w	objoff_34(a0),d0
	bcc.s	loc_3C6B0

loc_3C6AC:
	clr.w	x_vel(a0)

loc_3C6B0:
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6B8:
	addq.b	#2,routine_secondary(a0)
	move.w	#$E,objoff_2A(a0)
	bclr	#3,status(a0)
	bclr	#4,status(a0)
	bclr	#6,status(a0)
	clr.b	collision_flags(a0)
	movea.w	parent(a0),a1 ; a1=object
	bsr.w	JmpTo6_DeleteObject2
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6E4:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3C6F6
	movea.w	objoff_3C(a0),a1 ; a1=object
	subq.w	#1,y_pos(a1)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6F6:
	addq.b	#2,routine_secondary(a0)
	move.b	#1,anim(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C704:
	move.b	#8,routine_secondary(a0)
	bsr.w	loc_3C58A
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C712:
	clr.b	collision_flags(a0)
	st	collision_property(a0)
	bclr	#6,status(a0)
	subq.w	#1,objoff_30(a0)
	bmi.s	loc_3C72E
	bsr.w	JmpTo_loc_2D6CC
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C72E:
	moveq	#-$71,d0
	bsr.w	JmpTo5_PlayMusic
	move.w	#$720,d0
	move.w	d0,(Camera_Max_Y_pos_now).w
	move.w	d0,(Camera_Max_Y_pos).w
	bsr.w	JmpTo65_DeleteObject
	addq.w	#4,sp
	rts
; ===========================================================================

loc_3C748:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3C772(pc,d0.w),d1
	jsr	off_3C772(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	move.w	x_pos(a0),-(sp)
	move.w	#$13,d1
	move.w	#$40,d2
	move.w	#$80,d3
	move.w	(sp)+,d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================
off_3C772:
	dc.w loc_3C778-off_3C772
	dc.w loc_3C786-off_3C772; 1
	dc.w loc_3C7AE-off_3C772; 2
; ===========================================================================

loc_3C778:
	addq.b	#2,routine_secondary(a0)
	move.b	#$C,mapping_frame(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C786:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.s	loc_3C7A0
	bchg	#0,objoff_2F(a0)
	bne.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7A0:
	addq.b	#2,routine_secondary(a0)
	move.b	#4,objoff_30(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7AE:
	subq.b	#1,anim_frame_duration(a0)
	bpl.w	return_37A48
	move.b	anim_frame_duration(a0),d0
	move.b	anim_frame(a0),d1
	addq.b	#2,d0
	bpl.s	loc_3C7E4
	move.b	d1,anim_frame_duration(a0)
	subq.b	#1,objoff_30(a0)
	bpl.s	loc_3C7E4
	move.b	#$10,objoff_30(a0)
	addq.b	#1,d1
	cmpi.b	#5,d1
	bcc.w	JmpTo65_DeleteObject
	move.b	d1,anim_frame(a0)
	move.b	d1,anim_frame_duration(a0)

loc_3C7E4:
	bclr	#0,objoff_2F(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7EE:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3C7FC(pc,d0.w),d1
	jmp	off_3C7FC(pc,d1.w)
; ===========================================================================
off_3C7FC:
	dc.w loc_3C806-off_3C7FC
	dc.w loc_3C818-off_3C7FC; 1
	dc.w loc_3C83C-off_3C7FC; 2
	dc.w loc_3C85C-off_3C7FC; 3
	dc.w loc_3C8B4-off_3C7FC; 4
; ===========================================================================

loc_3C806:
	addq.b	#2,routine_secondary(a0)
	move.b	#5,mapping_frame(a0)
	addq.w	#8,y_pos(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C818:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#2,status(a1)
	bne.s	loc_3C828
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C828:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,objoff_2A(a0)
	move.w	#$40,y_vel(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C83C:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3C84A
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C84A:
	addq.b	#2,routine_secondary(a0)
	clr.w	y_vel(a0)
	move.w	#$10,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C85C:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.s	loc_3C8A6
	subq.w	#1,objoff_2A(a0)
	bne.s	BranchTo8_JmpTo45_DisplaySprite
	move.w	#$80,objoff_2A(a0)
	moveq	#0,d0
	move.b	objoff_2E(a0),d0
	addq.b	#1,d0
	cmpi.b	#3,d0
	bcs.s	loc_3C884
	moveq	#0,d0

loc_3C884:
	move.b	d0,objoff_2E(a0)
	tst.b	$30(a0,d0.w)
	bne.s	BranchTo8_JmpTo45_DisplaySprite
	st	$30(a0,d0.w)
	lea	(byte_3CC64).l,a2
	bsr.w	loc_367D0
	move.b	objoff_2E(a0),objoff_2E(a1)

BranchTo8_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8A6:
	addq.b	#2,routine_secondary(a0)
	bset	#5,status(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8B4:
	movea.w	objoff_2C(a0),a1 ; a1=object
	cmpi.b	#$C5,(a1)
	bne.w	JmpTo65_DeleteObject
	bsr.w	JmpTo_loc_2D6CC
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8C8:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3C8EA(pc,d0.w),d1
	jsr	off_3C8EA(pc,d1.w)
	lea	(off_3CCB2).l,a1
	bsr.w	JmpTo25_AnimateSprite
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3C8EA:
	dc.w loc_3C8F0-off_3C8EA
	dc.w loc_3C916-off_3C8EA; 1
	dc.w loc_3C93E-off_3C8EA; 2
; ===========================================================================

loc_3C8F0:
	addq.b	#2,routine_secondary(a0)
	move.b	#3,anim(a0)
	move.b	#7,mapping_frame(a0)
	move.w	#$100,y_vel(a0)
	move.w	#$60,objoff_2A(a0)
	lea	(byte_3CC68).l,a2
	bra.w	loc_367D0
; ===========================================================================

loc_3C916:
	bsr.w	loc_3C982
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3C924
	bra.w	loc_3C968
; ===========================================================================

loc_3C924:
	addq.b	#2,routine_secondary(a0)
	move.w	#$60,objoff_2A(a0)
	move.w	#-$100,x_vel(a0)
	move.w	y_pos(a0),objoff_34(a0)
	bra.w	loc_3C968
; ===========================================================================

loc_3C93E:
	bsr.w	loc_3C982
	subq.w	#1,objoff_2A(a0)
	bne.s	loc_3C952
	move.w	#$C0,objoff_2A(a0)
	neg.w	x_vel(a0)

loc_3C952:
	moveq	#4,d0
	move.w	y_pos(a0),d1
	cmp.w	objoff_34(a0),d1
	bcs.s	loc_3C960
	neg.w	d0

loc_3C960:
	add.w	d0,y_vel(a0)
	bra.w	loc_3C968
loc_3C968:
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	move.w	#$10,d1
	move.w	#8,d2
	move.w	#8,d3
	move.w	(sp)+,d4
	bra.w	JmpTo9_PlatformObject
; ===========================================================================

loc_3C982:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.w	loc_3C992
	rts
; ===========================================================================

loc_3C992:
	bsr.w	loc_3B7BC
	move.b	#$58,(a0) ; load 0bj58
	clr.b	routine(a0)
	movea.w	objoff_3C(a0),a1 ; a1=object
	bsr.w	JmpTo6_DeleteObject2
	addq.w	#4,sp
	rts
; ===========================================================================

loc_3C9AA:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3C9B8(pc,d0.w),d1
	jmp	off_3C9B8(pc,d1.w)
; ===========================================================================
off_3C9B8:
	dc.w loc_3C9BC-off_3C9B8
	dc.w loc_3C9C8-off_3C9B8; 1
; ===========================================================================

loc_3C9BC:
	addq.b	#2,routine_secondary(a0)
	move.b	#$98,collision_flags(a0)
	rts
; ===========================================================================

loc_3C9C8:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.w	JmpTo65_DeleteObject
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),d0
	addi.w	#$C,d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_3C9EA:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.w	JmpTo65_DeleteObject
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3CA06(pc,d0.w),d1
	jmp	off_3CA06(pc,d1.w)
; ===========================================================================
off_3CA06:
	dc.w loc_3CA0C-off_3CA06
	dc.w loc_3CA1A-off_3CA06; 1
	dc.w loc_3CA2E-off_3CA06; 2
; ===========================================================================

loc_3CA0C:
	addq.b	#2,routine_secondary(a0)
	move.b	#4,mapping_frame(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA1A:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA2E:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA3C:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.w	JmpTo65_DeleteObject
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3CA66(pc,d0.w),d1
	jsr	off_3CA66(pc,d1.w)
	bchg	#0,objoff_2F(a0)
	bne.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3CA66:
	dc.w loc_3CA70-off_3CA66
	dc.w loc_3CA98-off_3CA66; 1
	dc.w loc_3CAD0-off_3CA66; 2
	dc.w loc_3CAE4-off_3CA66; 3
	dc.w loc_3CB32-off_3CA66; 4
; ===========================================================================

loc_3CA70:
	addq.b	#2,routine_secondary(a0)
	move.b	#$D,mapping_frame(a0)
	move.b	#4,priority(a0)
	move.b	#0,collision_flags(a0)
	addi.w	#$10,y_pos(a0)
	move.b	#$C,anim_frame(a0)
	subq.w	#3,y_pos(a0)
	rts
; ===========================================================================

loc_3CA98:
	bset	#0,objoff_2F(a0)
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	return_3CAC2
	move.b	anim_frame_duration(a0),d0
	addq.b	#2,d0
	bpl.s	loc_3CABC
	move.b	anim_frame(a0),d0
	subq.b	#1,d0
	beq.s	loc_3CAC4
	move.b	d0,anim_frame(a0)
	move.b	d0,anim_frame_duration(a0)

loc_3CABC:
	bclr	#0,objoff_2F(a0)

return_3CAC2:
	rts
; ===========================================================================

loc_3CAC4:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,objoff_2A(a0)
	rts
; ===========================================================================

loc_3CAD0:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3CAD8
	rts
; ===========================================================================

loc_3CAD8:
	addq.b	#2,routine_secondary(a0)
	addi.w	#$10,y_pos(a0)
	rts
; ===========================================================================

loc_3CAE4:
	moveq	#0,d0
	move.b	objoff_2E(a0),d0
	addq.b	#1,d0
	cmpi.b	#5,d0
	bcc.s	loc_3CB0A
	addi.w	#$10,y_pos(a0)
	move.b	d0,objoff_2E(a0)
	move.b	byte_3CB26(pc,d0.w),mapping_frame(a0)
	move.b	byte_3CB2C(pc,d0.w),collision_flags(a0)
	rts
; ===========================================================================

loc_3CB0A:
	addq.b	#2,routine_secondary(a0)
	move.w	#$80,objoff_2A(a0)
	bset	#2,status(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object
	bset	#3,status(a1)
	rts
; ===========================================================================
byte_3CB26:
	dc.b  $E
	dc.b  $F	; 1
	dc.b $10	; 2
	dc.b $11	; 3
	dc.b $12	; 4
	dc.b   0	; 5
byte_3CB2C:
	dc.b $86
	dc.b $AB	; 1
	dc.b $AC	; 2
	dc.b $AD	; 3
	dc.b $AE	; 4
	dc.b   0	; 5
; ===========================================================================

loc_3CB32:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	x_pos(a1),x_pos(a0)
	rts
; ===========================================================================

loc_3CB3E:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3CB4C(pc,d0.w),d1
	jmp	off_3CB4C(pc,d1.w)
; ===========================================================================
off_3CB4C:
	dc.w loc_3CB52-off_3CB4C
	dc.w loc_3CB7C-off_3CB4C; 1
	dc.w loc_3CBA4-off_3CB4C; 2
; ===========================================================================

loc_3CB52:
	addq.b	#2,routine_secondary(a0)
	move.b	#0,mapping_frame(a0)
	move.b	#1,anim(a0)
	move.w	#$2C60,x_pos(a0)
	move.w	#$4E6,y_pos(a0)
	lea	(byte_3CC7C).l,a2
	bsr.w	loc_367D0
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CB7C:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#5,status(a1)
	bne.s	loc_3CB96
	lea	(off_3D0D8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CB96:
	addq.b	#2,routine_secondary(a0)
	move.w	#$C0,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CBA4:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3CBB2
	addq.w	#1,y_pos(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CBB2:
	movea.w	parent(a0),a1 ; a1=object
	bsr.w	JmpTo6_DeleteObject2
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3CBBE:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	y_pos(a1),d0
	addi.w	#$26,d0
	move.w	d0,y_pos(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
	; some unused/dead code ; a0=object
	move.w	x_pos(a0),-(sp)
	bsr.w	JmpTo26_ObjectMove
	move.w	#$F,d1
	move.w	#8,d2
	move.w	#8,d3
	move.w	(sp)+,d4
	bra.w	JmpTo9_PlatformObject
; ===========================================================================

loc_3CBEC:
	tst.b	collision_property(a0)
	beq.s	loc_3CC3C
	tst.b	collision_flags(a0)
	bne.s	return_3CC3A
	tst.b	objoff_30(a0)
	bne.s	loc_3CC16
	btst	#6,status(a0)
	beq.s	return_3CC3A
	move.b	#$20,objoff_30(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_3CC16:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_3CC24
	move.w	#$EEE,d0

loc_3CC24:
	move.w	d0,(a1)
	subq.b	#1,objoff_30(a0)
	bne.s	return_3CC3A
	btst	#4,status(a0)
	beq.s	return_3CC3A
	move.b	#6,collision_flags(a0)

return_3CC3A:
	rts
; ===========================================================================

loc_3CC3C:
	moveq	#$64,d0
	bsr.w	AddPoints
	clr.b	collision_flags(a0)
	move.w	#$EF,objoff_30(a0)
	move.b	#$1E,routine_secondary(a0)
	bset	#5,status(a0)
	bclr	#6,status(a0)
	rts
; ===========================================================================
byte_3CC60:
	dc.b   0
	dc.b $2A	; 1
	dc.b $C5	; 2
	dc.b $94	; 3
byte_3CC64:
	dc.b   0
	dc.b $3E	; 1
	dc.b $C5	; 2
	dc.b $98	; 3
byte_3CC68:
	dc.b   0
	dc.b $3C	; 1
	dc.b $C5	; 2
	dc.b $9A	; 3
byte_3CC6C:
	dc.b   0
	dc.b $3C	; 1
	dc.b $C5	; 2
	dc.b $9C	; 3
byte_3CC70:
	dc.b   0
	dc.b $3A	; 1
	dc.b $C5	; 2
	dc.b $96	; 3
byte_3CC74:
	dc.b   0
	dc.b $3E	; 1
	dc.b $C5	; 2
	dc.b $9E	; 3
byte_3CC78:
	dc.b   0
	dc.b $38	; 1
	dc.b $C5	; 2
	dc.b $A0	; 3
byte_3CC7C:
	dc.b   0
	dc.b $3E	; 1
	dc.b $C5	; 2
	dc.b $A2	; 3

; off_3CC80:
ObjC5_SubObjData:
	dc.l ObjC5_MapUnc_3CCD8
	dc.w $379
	dc.b 4,4,$20,0
; off_3CC8A:
ObjC5_SubObjData2:
	dc.l ObjC5_MapUnc_3CCD8
	dc.w $379
	dc.b 4,1,8,0
; off_3CC94:
ObjC5_SubObjData3:
	dc.l ObjC5_MapUnc_3CCD8
	dc.w $379
	dc.b 4,5,$10,0
; off_3CC9E:
ObjC6_SubObjData2:
	dc.l ObjC6_MapUnc_3D0EE
	dc.w 0
	dc.b 4,5,$20,0
; off_3CCA8:
ObjC5_SubObjData4:
	dc.l ObjC5_MapUnc_3CEBC
	dc.w $A46D
	dc.b 4,5,$20,0

; animation script
off_3CCB2:
	dc.w byte_3CCBA-off_3CCB2
	dc.w byte_3CCC4-off_3CCB2; 1
	dc.w byte_3CCCC-off_3CCB2; 2
	dc.w byte_3CCD0-off_3CCB2; 3
byte_3CCBA:
	dc.b   5,  0,  1,  2,  3,  3,  3,  3,$FA,  0
byte_3CCC4:
	dc.b   3,  3,  2,  1,  0,  0,$FA,  0
byte_3CCCC:
	dc.b   3,  5,  6,$FF
byte_3CCD0:
	dc.b   3,  7,  8,  9, $A, $B,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC5_MapUnc_3CCD8:	BINCLUDE "mappings/sprite/objC5_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC5_MapUnc_3CEBC:	BINCLUDE "mappings/sprite/objC5_b.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object C6 - Eggman
; ----------------------------------------------------------------------------
; Sprite_3CED0:
ObjC6:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	ObjC6_States(pc,d0.w),d1
	jmp	ObjC6_States(pc,d1.w)
; ===========================================================================
; off_3CEDE:
ObjC6_States:
	dc.w ObjC6_Init - ObjC6_States		; 0 
	dc.w ObjC6_State2 - ObjC6_States	; 2
	dc.w ObjC6_State3 - ObjC6_States	; 4
	dc.w ObjC6_State4 - ObjC6_States	; 6
; ===========================================================================
; loc_3CEE6:
ObjC6_Init:
	bsr.w	LoadSubObject
	move.b	subtype(a0),d0
	subi.b	#$A4,d0
	move.b	d0,routine(a0) ; => ObjC6_State2, ObjC6_State3, or ObjC6_State4 ??
	rts
; ===========================================================================
; loc_3CEF8:
ObjC6_State2:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	ObjC6_State2_States(pc,d0.w),d1
	jmp	ObjC6_State2_States(pc,d1.w)
; ===========================================================================
; off_3CF06:
ObjC6_State2_States:
	dc.w ObjC6_State2_State1 - ObjC6_State2_States
	dc.w ObjC6_State2_State2 - ObjC6_State2_States; 1
	dc.w ObjC6_State2_State3 - ObjC6_State2_States; 2
	dc.w ObjC6_State2_State4 - ObjC6_State2_States; 3
	dc.w ObjC6_State2_State5 - ObjC6_State2_States; 4
; ===========================================================================
; loc_3CF10:
ObjC6_State2_State1: ; a1=object (set in loc_3D94C)
	addq.b	#2,routine_secondary(a0) ; => ObjC6_State2_State2
	lea	(byte_3D0D0).l,a2
	bsr.w	loc_367D0
	move.w	#$3F8,x_pos(a1)
	move.w	#$160,y_pos(a1)
	move.w	a0,($FFFFF660).w
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3CF32:
ObjC6_State2_State2:
	bsr.w	loc_366D6
	addi.w	#$5C,d2
	cmpi.w	#$B8,d2
	bcs.s	loc_3CF44
	bra.w	JmpTo45_DisplaySprite
; ---------------------------------------------------------------------------
loc_3CF44:
	addq.b	#2,routine_secondary(a0) ; => ObjC6_State2_State3
	move.w	#$18,objoff_2A(a0)
	move.b	#1,mapping_frame(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3CF58:
ObjC6_State2_State3:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3CF62
	bra.w	JmpTo45_DisplaySprite
; ---------------------------------------------------------------------------
loc_3CF62:
	addq.b	#2,routine_secondary(a0) ; => ObjC6_State2_State4
	bset	#2,status(a0)
	move.w	#$200,x_vel(a0)
	move.w	#$10,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3CF7C:
ObjC6_State2_State4:
	cmpi.w	#$810,x_pos(a0)
	bcc.s	loc_3CFC0
	bsr.w	loc_366D6
	addi.w	#$50,d2
	cmpi.w	#$A0,d2
	bcc.s	+
	move.w	x_pos(a1),d0
	addi.w	#$50,d0
	move.w	d0,x_pos(a0)
+
	subq.w	#1,objoff_2A(a0)
	bpl.s	+
	move.w	#$20,objoff_2A(a0)
	bsr.w	loc_3D00C
+
	bsr.w	JmpTo26_ObjectMove
	lea	(off_3D0D8).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3CFC0:
	move.b	#2,mapping_frame(a0)
	clr.w	x_vel(a0)
	tst.b	render_flags(a0)
	bpl.s	BranchTo9_JmpTo45_DisplaySprite
	addq.b	#2,routine_secondary(a0) ; => ObjC6_State2_State5
	move.w	#$80,x_vel(a0)
	move.w	#-$200,y_vel(a0)
	move.b	#2,mapping_frame(a0)
	move.w	#$50,objoff_2A(a0)
	bset	#3,status(a0)

BranchTo9_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3CFF6:
ObjC6_State2_State5:
	subq.w	#1,objoff_2A(a0)
	bmi.w	JmpTo65_DeleteObject
	addi.w	#$10,y_vel(a0)
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3D00C:
	lea	(byte_3D0D4).l,a2
	bsr.w	loc_367D0
	move.b	#$AA,subtype(a1) ; <== ObjC6_SubObjData
	move.b	#5,mapping_frame(a1)
	move.w	#-$100,x_vel(a1)
	subi.w	#$18,y_pos(a1)
	move.w	#8,objoff_2A(a1)
	rts
; ===========================================================================
; loc_3D036:
ObjC6_State3:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	ObjC6_State3_States(pc,d0.w),d1
	jmp	ObjC6_State3_States(pc,d1.w)
; ===========================================================================
; off_3D044:
ObjC6_State3_States:
	dc.w ObjC6_State3_State1 - ObjC6_State3_States
	dc.w ObjC6_State3_State2 - ObjC6_State3_States; 1
	dc.w ObjC6_State3_State3 - ObjC6_State3_States; 2
; ===========================================================================
; loc_3D04A:
ObjC6_State3_State1:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#2,status(a1)
	bne.s	loc_3D05E
	bsr.w	loc_3D086
	bra.w	JmpTo45_DisplaySprite
; ---------------------------------------------------------------------------
loc_3D05E:
	addq.b	#2,routine_secondary(a0) ; => ObjC6_State3_State2
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3D066:
ObjC6_State3_State2:
	bsr.w	loc_3D086
	lea	(off_3D0E6).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
; loc_3D078:
ObjC6_State3_State3:
	lea	(MainCharacter).w,a1 ; a1=character
	bclr	#5,status(a1)
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3D086:
	move.w	x_pos(a0),-(sp)
	move.w	#$13,d1
	move.w	#$20,d2
	move.w	#$20,d3
	move.w	(sp)+,d4
	bra.w	JmpTo27_SolidObject
; ===========================================================================
; loc_3D09C:
ObjC6_State4:
	subq.w	#1,objoff_2A(a0)
	bmi.w	JmpTo65_DeleteObject
	addi.w	#$10,y_vel(a0)
	bsr.w	JmpTo26_ObjectMove
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================
; off_3D0B2:
ObjC6_SubObjData3:
	dc.l ObjC6_MapUnc_3D0EE
	dc.w 0
	dc.w $405
	dc.w $1800
; off_3D0BC:
ObjC6_SubObjData4:
	dc.l ObjC6_MapUnc_3D1DE
	dc.w $2328
	dc.w $401
	dc.w $800
; off_3D0C6:
ObjC6_SubObjData:
	dc.l ObjC6_MapUnc_3D0EE
	dc.w 0
	dc.w $405
	dc.w $400
byte_3D0D0:
	dc.b   0
	dc.b $3E	; 1
	dc.b $C6	; 2
	dc.b $A8	; 3
byte_3D0D4:
	dc.b   0
	dc.b $3C	; 1
	dc.b $C6	; 2
	dc.b $AA	; 3
; animation script
off_3D0D8:
	dc.w byte_3D0DC-off_3D0D8
	dc.w byte_3D0E2-off_3D0D8; 1
byte_3D0DC:
	dc.b   5,  2,  3,  4,$FF,  0
byte_3D0E2:
	dc.b   5,  6,  7,$FF
; animation script
off_3D0E6:
	dc.w byte_3D0E8-off_3D0E6
byte_3D0E8:
	dc.b   1,  0,  1,  2,  3,$FA
	even
; ----------------------------------------------------------------------------
; sprite mappings ; Robotnik running
; ----------------------------------------------------------------------------
ObjC6_MapUnc_3D0EE:	BINCLUDE "mappings/sprite/objC6_a.bin"
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
ObjC6_MapUnc_3D1DE:	BINCLUDE "mappings/sprite/objC6_b.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object C8 - Crawl (shield badnik) from CNZ
; ----------------------------------------------------------------------------
; Sprite_3D23E:
ObjC8:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3D24C(pc,d0.w),d1
	jmp	off_3D24C(pc,d1.w)
; ===========================================================================
off_3D24C:
	dc.w loc_3D254-off_3D24C
	dc.w loc_3D27C-off_3D24C; 1
	dc.w loc_3D2A6-off_3D24C; 2
	dc.w loc_3D2D4-off_3D24C; 3
; ===========================================================================

loc_3D254:
	bsr.w	LoadSubObject
	move.w	#$200,objoff_2A(a0)
	moveq	#$20,d0
	btst	#0,render_flags(a0)
	bne.s	loc_3D26A
	neg.w	d0

loc_3D26A:
	move.w	d0,x_vel(a0)
	move.b	#$F,y_radius(a0)
	move.b	#$10,x_radius(a0)
	rts
; ===========================================================================

loc_3D27C:
	subq.w	#1,objoff_2A(a0)
	beq.s	loc_3D298
	bsr.w	JmpTo26_ObjectMove
	bsr.w	loc_3D416
	lea	(off_3D44A).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D298:
	addq.b	#2,routine(a0)
	move.w	#$3B,objoff_2A(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D2A6:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3D2B4
	bsr.w	loc_3D416
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D2B4:
	move.b	#2,routine(a0)
	move.w	#$200,objoff_2A(a0)
	neg.w	x_vel(a0)
	bchg	#0,render_flags(a0)
	bchg	#0,status(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D2D4:
	move.b	#$D7,collision_flags(a0)
	bsr.w	loc_366D6
	move.w	d2,d4
	addi.w	#$40,d2
	cmpi.w	#$80,d2
	bcc.w	loc_3D39A
	addi.w	#$40,d3
	cmpi.w	#$80,d3
	bcc.w	loc_3D39A
	bclr	#3,status(a0)
	bne.w	loc_3D386
	move.b	collision_property(a0),d0
	beq.s	BranchTo18_JmpTo39_MarkObjGone
	bclr	#0,collision_property(a0)
	beq.s	loc_3D334
	cmpi.b	#2,anim(a1)
	bne.s	loc_3D36C
	btst	#1,status(a1)
	bne.s	loc_3D332
	bsr.w	loc_366D6
	btst	#0,render_flags(a0)
	beq.s	loc_3D32E
	subq.w	#2,d0

loc_3D32E:
	tst.w	d0
	bne.s	loc_3D390

loc_3D332:
	bsr.s	loc_3D3A4

loc_3D334:
	lea	(Sidekick).w,a1 ; a1=character
	bclr	#1,collision_property(a0)
	beq.s	loc_3D364
	cmpi.b	#2,anim(a1)
	bne.s	loc_3D36C
	btst	#1,status(a1)
	bne.s	loc_3D362
	bsr.w	loc_366D6
	btst	#0,render_flags(a0)
	beq.s	loc_3D35E
	subq.w	#2,d0

loc_3D35E:
	tst.w	d0
	bne.s	loc_3D390

loc_3D362:
	bsr.s	loc_3D3A4

loc_3D364:
	clr.b	collision_property(a0)

BranchTo18_JmpTo39_MarkObjGone 
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D36C:
	move.b	#$97,collision_flags(a0)
	btst	#1,status_secondary(a1)
	beq.s	loc_3D380
	move.b	#$17,collision_flags(a0)

loc_3D380:
	bset	#3,status(a0)

loc_3D386:
	move.b	#1,mapping_frame(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D390:
	move.b	#$17,collision_flags(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D39A:
	move.b	objoff_2C(a0),routine(a0)
	bra.w	JmpTo39_MarkObjGone
; ===========================================================================

loc_3D3A4:
	move.b	#2,mapping_frame(a0)
	btst	#1,status(a1)
	beq.s	loc_3D3B8
	move.b	#3,mapping_frame(a0)

loc_3D3B8:
	move.w	x_pos(a0),d1
	move.w	y_pos(a0),d2
	sub.w	x_pos(a1),d1
	sub.w	y_pos(a1),d2
	jsr	(CalcAngle).l
	move.b	(Timer_frames).w,d1
	andi.w	#3,d1
	add.w	d1,d0
	jsr	(CalcSine).l
	muls.w	#-$700,d1
	asr.l	#8,d1
	move.w	d1,x_vel(a1)
	muls.w	#-$700,d0
	asr.l	#8,d0
	move.w	d0,y_vel(a1)
	bset	#1,status(a1)
	bclr	#4,status(a1)
	bclr	#5,status(a1)

loc_3D404:
	clr.b	jumping(a1)
	move.w	#$B4,d0
	jsr	(PlaySound).l
	rts
; ===========================================================================
	rts
; ===========================================================================

loc_3D416:
	bsr.w	loc_366D6
	addi.w	#$40,d2
	cmpi.w	#$80,d2
	bcc.s	return_3D43E
	addi.w	#$40,d3
	cmpi.w	#$80,d3
	bcc.s	return_3D43E
	move.b	routine(a0),objoff_2C(a0)
	move.b	#6,routine(a0)
	clr.b	mapping_frame(a0)

return_3D43E:
	rts
; ===========================================================================
; off_3D440:
ObjC8_SubObjData:
	dc.l ObjC8_MapUnc_3D450
	dc.w $8340
	dc.w $403
	dc.w $10D7
; animation script
off_3D44A:
	dc.w byte_3D44C-off_3D44A
byte_3D44C:
	dc.b $13,  0,  1,$FF
	even
; ----------------------------------------------------------------------------
; sprite mappings ; Crawl CNZ
; ----------------------------------------------------------------------------
ObjC8_MapUnc_3D450:	BINCLUDE "mappings/sprite/objC8.bin"




; ===========================================================================
; ----------------------------------------------------------------------------
; Object C7 - Eggrobo (final boss) from Death Egg
; ----------------------------------------------------------------------------
; Sprite_3D4C8:
ObjC7:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3D4D6(pc,d0.w),d1
	jmp	off_3D4D6(pc,d1.w)
; ===========================================================================
off_3D4D6:
	dc.w loc_3D4F8-off_3D4D6
	dc.w loc_3D508-off_3D4D6; 1
	dc.w loc_3DA14-off_3D4D6; 2
	dc.w loc_3DA4A-off_3D4D6; 3
	dc.w loc_3DA74-off_3D4D6; 4
	dc.w loc_3DB74-off_3D4D6; 5
	dc.w loc_3DB9E-off_3D4D6; 6
	dc.w loc_3DBC8-off_3D4D6; 7
	dc.w loc_3DC50-off_3D4D6; 8
	dc.w loc_3DC9C-off_3D4D6; 9
	dc.w loc_3DCCC-off_3D4D6; 10
	dc.w loc_3DD20-off_3D4D6; 11
	dc.w loc_3DD50-off_3D4D6; 12
	dc.w loc_3DE70-off_3D4D6; 13
	dc.w loc_3DEC2-off_3D4D6; 14
	dc.w loc_3DFAA-off_3D4D6; 15
	dc.w loc_3D970-off_3D4D6; 16
; ===========================================================================

loc_3D4F8:
	lea	off_3E590(pc),a1
	bsr.w	LoadSubObject_Part3
	move.b	subtype(a0),routine(a0)
	rts
; ===========================================================================

loc_3D508:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3D51A(pc,d0.w),d1
	jsr	off_3D51A(pc,d1.w)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3D51A:
	dc.w loc_3D52A-off_3D51A
	dc.w loc_3D5A8-off_3D51A; 1
	dc.w loc_3D5C2-off_3D51A; 2
	dc.w loc_3D5EA-off_3D51A; 3
	dc.w loc_3D62E-off_3D51A; 4
	dc.w loc_3D640-off_3D51A; 5
	dc.w loc_3D684-off_3D51A; 6
	dc.w loc_3D8D2-off_3D51A; 7
; ===========================================================================

loc_3D52A:
	addq.b	#2,routine_secondary(a0)
	move.b	#3,mapping_frame(a0)
	move.b	#5,priority(a0)
	lea	(byte_3E55C).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E564).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E560).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E568).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E56C).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E570).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E574).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E578).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E57C).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E580).l,a2
	bsr.w	loc_367D0
	lea	(byte_3E2E0).l,a1
	bra.w	loc_3E2A8
; ===========================================================================

loc_3D5A8:
	btst	#2,status(a0)
	bne.s	loc_3D5B2
	rts
; ===========================================================================

loc_3D5B2:
	addq.b	#2,routine_secondary(a0)
	move.b	#$3C,anim_frame_duration(a0)
	moveq	#-7,d0
	bra.w	JmpTo12_PlaySound
; ===========================================================================

loc_3D5C2:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D5CA
	rts
; ===========================================================================

loc_3D5CA:
	addq.b	#2,routine_secondary(a0)
	move.b	#$79,anim_frame_duration(a0)
	move.w	#-$100,y_vel(a0)
	movea.w	objoff_38(a0),a1 ; a1=object
	move.b	#4,routine_secondary(a1)
	moveq	#-$6C,d0
	bra.w	JmpTo5_PlayMusic
; ===========================================================================

loc_3D5EA:
	subq.b	#1,anim_frame_duration(a0)
	beq.s	loc_3D604
	moveq	#-$49,d0
	bsr.w	JmpTo12_PlaySound
	bsr.w	JmpTo26_ObjectMove
	lea	(byte_3E2E0).l,a1
	bra.w	loc_3E2A8
; ===========================================================================

loc_3D604:
	addq.b	#2,routine_secondary(a0)
	clr.w	y_vel(a0)
	move.b	#$1F,anim_frame_duration(a0)
	move.b	#$16,collision_flags(a0)
	move.b	#$C,collision_property(a0)
	bsr.w	loc_3E0EE
	movea.w	objoff_38(a0),a1 ; a1=object
	move.b	#6,routine_secondary(a1)
	rts
; ===========================================================================

loc_3D62E:
	bsr.w	loc_3DFF8
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D63A
	rts
; ===========================================================================

loc_3D63A:
	addq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_3D640:
	bsr.w	loc_3DFF8
	addq.b	#2,routine_secondary(a0)
	move.b	#$20,anim_frame_duration(a0)
	move.b	angle(a0),d0
	addq.b	#1,d0
	move.b	d0,angle(a0)
	andi.w	#3,d0
	move.b	byte_3D680(pc,d0.w),d0
	move.b	d0,anim(a0)
	clr.b	next_anim(a0)
	cmpi.b	#2,d0
	bne.s	return_3D67E
	movea.w	objoff_38(a0),a1 ; a1=object
	move.b	#4,routine_secondary(a1)
	move.b	#2,anim(a1)

return_3D67E:
	rts
; ===========================================================================
byte_3D680:
	dc.b   2
	dc.b   0	; 1
	dc.b   2	; 2
	dc.b   4	; 3
; ===========================================================================

loc_3D684:
	bsr.w	loc_3DFF8
	moveq	#0,d0
	move.b	anim(a0),d0
	move.w	off_3D696(pc,d0.w),d1
	jmp	off_3D696(pc,d1.w)
; ===========================================================================
off_3D696:
	dc.w loc_3D6AA-off_3D696
	dc.w loc_3D702-off_3D696; 1
	dc.w loc_3D83C-off_3D696; 2
; ===========================================================================
	subq.b	#1,$1E(a0)
	bmi.s	loc_3D6A4
	rts
; ===========================================================================

loc_3D6A4:
	addq.b	#2,$1C(a0)
	rts
; ===========================================================================

loc_3D6AA:
	moveq	#0,d0
	move.b	next_anim(a0),d0
	move.w	off_3D6B8(pc,d0.w),d1
	jmp	off_3D6B8(pc,d1.w)
; ===========================================================================
off_3D6B8:
	dc.w loc_3D6C0-off_3D6B8
	dc.w loc_3D6CE-off_3D6B8; 1
	dc.w loc_3D6C0-off_3D6B8; 2
	dc.w loc_3D6E8-off_3D6B8; 3
; ===========================================================================

loc_3D6C0:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D6C8
	rts
; ===========================================================================

loc_3D6C8:
	addq.b	#2,next_anim(a0)
	rts
; ===========================================================================

loc_3D6CE:
	lea	(off_3E40C).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D6DC
	rts
; ===========================================================================

loc_3D6DC:
	addq.b	#2,next_anim(a0)
	move.b	#$40,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_3D6E8:
	lea	(off_3E42C).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D6F6
	rts
; ===========================================================================

loc_3D6F6:
	subq.b	#2,routine_secondary(a0)
	move.b	#$40,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_3D702:
	moveq	#0,d0
	move.b	next_anim(a0),d0
	move.w	word_3D710(pc,d0.w),d1
	jmp	word_3D710(pc,d1.w)
; ===========================================================================
word_3D710:
	dc.w loc_3D6C0-word_3D710
	dc.w loc_3D720-word_3D710
	dc.w loc_3D744-word_3D710
	dc.w loc_3D6C0-word_3D710
	dc.w loc_3D784-word_3D710
	dc.w loc_3D7B8-word_3D710
	dc.w loc_3D7F0-word_3D710
	dc.w loc_3D82E-word_3D710
; ===========================================================================

loc_3D720:
	lea	(off_3E3D0).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D72E
	rts
; ===========================================================================

loc_3D72E:
	addq.b	#2,next_anim(a0)
	move.b	#$80,anim_frame_duration(a0)
	clr.w	x_vel(a0)
	move.w	#-$200,y_vel(a0)
	rts
; ===========================================================================

loc_3D744:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D768
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_3D75A
	moveq	#-$24,d0
	bsr.w	JmpTo_PlaySoundLocal

loc_3D75A:
	bsr.w	JmpTo26_ObjectMove
	lea	(byte_3E2E0).l,a1
	bra.w	loc_3E2A8
; ===========================================================================

loc_3D768:
	addq.b	#2,next_anim(a0)
	clr.w	y_vel(a0)
	lea	(byte_3E584).l,a2
	bsr.w	loc_367D0
	clr.w	x_vel(a0)
	clr.w	objoff_28(a0)
	rts
; ===========================================================================

loc_3D784:
	move.w	objoff_28(a0),d0
	bne.s	loc_3D78C
	rts
; ===========================================================================

loc_3D78C:
	addq.b	#2,next_anim(a0)
	move.w	d0,x_pos(a0)
	bclr	#0,render_flags(a0)
	cmpi.w	#$780,d0
	bcc.s	loc_3D7A6
	bset	#0,render_flags(a0)

loc_3D7A6:
	bsr.w	loc_3E168
	move.w	#$800,y_vel(a0)
	move.b	#$20,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_3D7B8:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D7CC
	bsr.w	JmpTo26_ObjectMove
	lea	(byte_3E2E0).l,a1
	bra.w	loc_3E2A8
; ===========================================================================

loc_3D7CC:
	addq.b	#2,next_anim(a0)
	clr.w	y_vel(a0)
	move.b	#1,($FFFFEEBD).w
	move.w	#$40,($FFFFF660).w
	movea.w	objoff_38(a0),a1 ; a1=object
	move.b	#6,routine_secondary(a1)
	moveq	#-$47,d0
	bra.w	JmpTo12_PlaySound
; ===========================================================================

loc_3D7F0:
	lea	(off_3E30A).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D7FE
	rts
; ===========================================================================

loc_3D7FE:
	lea	(byte_3E2E0).l,a1
	bsr.w	loc_3E2A8
	bsr.w	loc_366D6
	btst	#0,render_flags(a0)
	beq.s	loc_3D816
	subq.w	#2,d0

loc_3D816:
	tst.w	d0
	bne.s	loc_3D820
	subq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_3D820:
	addq.b	#2,next_anim(a0)
	move.b	#$60,anim_frame_duration(a0)
	bra.w	loc_3E136
; ===========================================================================

loc_3D82E:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D836
	rts
; ===========================================================================

loc_3D836:
	subq.b	#2,routine_secondary(a0)
	rts
; ===========================================================================

loc_3D83C:
	moveq	#0,d0
	move.b	next_anim(a0),d0
	move.w	word_3D84A(pc,d0.w),d1
	jmp	word_3D84A(pc,d1.w)
; ===========================================================================
word_3D84A:
	dc.w loc_3D6C0-word_3D84A
	dc.w loc_3D856-word_3D84A
	dc.w loc_3D6C0-word_3D84A
	dc.w loc_3D89E-word_3D84A
	dc.w loc_3D6C0-word_3D84A
	dc.w loc_3D8B8-word_3D84A
; ===========================================================================

loc_3D856:
	bset	#6,status(a0)
	lea	(off_3E2F6).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D86A
	rts
; ===========================================================================

loc_3D86A:
	bsr.w	loc_366D6
	btst	#0,render_flags(a0)
	beq.s	loc_3D878
	subq.w	#2,d0

loc_3D878:
	tst.w	d0
	bne.s	loc_3D88E
	addq.b	#2,next_anim(a0)
	move.b	#$40,anim_frame_duration(a0)
	bset	#4,status(a0)
	rts
; ===========================================================================

loc_3D88E:
	move.b	#8,next_anim(a0)
	move.b	#$20,anim_frame_duration(a0)
	bra.w	loc_3E136
; ===========================================================================

loc_3D89E:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D8A6
	rts
; ===========================================================================

loc_3D8A6:
	addq.b	#2,next_anim(a0)
	bset	#5,status(a0)
	move.b	#$40,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_3D8B8:
	lea	(off_3E300).l,a1
	bsr.w	loc_3E1AA
	bne.s	loc_3D8C6
	rts
; ===========================================================================

loc_3D8C6:
	subq.b	#2,routine_secondary(a0)
	bclr	#6,status(a0)
	rts
; ===========================================================================

loc_3D8D2:
	moveq	#0,d0
	move.b	anim(a0),d0
	move.w	off_3D8E0(pc,d0.w),d1
	jmp	off_3D8E0(pc,d1.w)
; ===========================================================================
off_3D8E0:
	dc.w loc_3D8E6-off_3D8E0
	dc.w loc_3D922-off_3D8E0; 1
	dc.w loc_3D93C-off_3D8E0; 2
; ===========================================================================

loc_3D8E6:
	bsr.w	JmpTo_loc_2D6CC
	bsr.w	JmpTo8_ObjectMoveAndFall
	move.w	y_pos(a0),d0
	cmpi.w	#$15C,d0
	bcc.s	loc_3D8FA
	rts
; ===========================================================================

loc_3D8FA:
	move.w	#$15C,y_pos(a0)
	move.w	y_vel(a0),d0
	bmi.s	loc_3D916
	lsr.w	#2,d0
	cmpi.w	#$100,d0
	bcs.s	loc_3D916
	neg.w	d0
	move.w	d0,y_vel(a0)
	rts
; ===========================================================================

loc_3D916:
	addq.b	#2,anim(a0)
	move.b	#$40,anim_frame_duration(a0)
	rts
; ===========================================================================

loc_3D922:
	subq.b	#1,anim_frame_duration(a0)
	bmi.s	loc_3D92C
	bra.w	JmpTo_loc_2D6CC
; ===========================================================================

loc_3D92C:
	addq.b	#2,anim(a0)
	st	(Control_Locked).w
	move.w	#$1000,(Camera_Max_X_pos).w
	rts
; ===========================================================================

loc_3D93C:
	move.w	#$808,(Ctrl_1_Logical).w
	cmpi.w	#$840,(Camera_X_pos).w
	bcc.s	loc_3D94C
	rts
; ===========================================================================

loc_3D94C:
	move.b	#$20,routine(a0)
	clr.b	routine_secondary(a0)
	move.w	#$20,objoff_2A(a0)
	move.b	#1,($FFFFEEBD).w
	move.w	#$1000,($FFFFF660).w
	movea.w	objoff_36(a0),a1 ; a1=object
	bra.w	JmpTo6_DeleteObject2
; ===========================================================================

loc_3D970:
	move.b	($FFFFFE0F).w,d0
	andi.b	#$1F,d0
	bne.s	loc_3D984
	moveq	#-$1F,d0
	bsr.w	JmpTo12_PlaySound
	subq.w	#1,objoff_2A(a0)

loc_3D984:
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),d0
	sub.w	objoff_2A(a0),d0
	move.w	d0,x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	bsr.w	loc_3DFBA
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3D9AC(pc,d0.w),d1
	jmp	off_3D9AC(pc,d1.w)
; ===========================================================================
off_3D9AC:
	dc.w loc_3D9B0-off_3D9AC; 0
	dc.w loc_3D9D6-off_3D9AC; 1
; ===========================================================================

loc_3D9B0:
	lea	(MainCharacter).w,a1 ; a1=character
	cmpi.w	#$EC0,x_pos(a1)
	bcc.s	loc_3D9BE
	rts
; ===========================================================================

loc_3D9BE:
	addq.b	#2,routine_secondary(a0)
	move.w	#$3F,($FFFFF626).w
	move.b	#$16,anim_frame_duration(a0)
	move.w	#$7FFF,($FFFFF634).w
	rts
; ===========================================================================

loc_3D9D6:
	subq.b	#1,anim_frame_duration(a0)
	beq.w	loc_3D9F2
	movea.l	a0,a1
	lea	(Normal_palette).w,a0
	moveq	#$3F,d0

loc_3D9E6:
	bsr.w	JmpTo_Pal_AddColor2
	dbf	d0,loc_3D9E6
	movea.l	a1,a0
	rts
; ===========================================================================

loc_3D9F2:
	move.l	#$EEE0EEE,d0
	lea	(Normal_palette).w,a1
	moveq	#$1F,d6
-	move.l	d0,(a1)+
	dbf	d6,-

	moveq	#-7,d0
	bsr.w	JmpTo12_PlaySound
	move.b	#$20,(Game_Mode).w ; => EndingSequence
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3DA14:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DA34(pc,d0.w),d1
	jsr	off_3DA34(pc,d1.w)
	lea	byte_3DA38(pc),a1
	bsr.w	loc_3E282
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DA34:
	dc.w loc_3DA3C-off_3DA34
	dc.w return_3DA48-off_3DA34; 1
byte_3DA38:
	dc.b   0
	dc.b  $C	; 1
	dc.b $FF	; 2
	dc.b $EC	; 3
; ===========================================================================

loc_3DA3C:
	addq.b	#2,routine_secondary(a0)
	move.b	#4,mapping_frame(a0)
	rts
; ===========================================================================

return_3DA48:
	rts
; ===========================================================================

loc_3DA4A:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DA62(pc,d0.w),d1
	jsr	off_3DA62(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DA62:
	dc.w loc_3DA66-off_3DA62
	dc.w return_3DA72-off_3DA62; 1
; ===========================================================================

loc_3DA66:
	addq.b	#2,routine_secondary(a0)
	move.b	#$B,mapping_frame(a0)
	rts
; ===========================================================================

return_3DA72:
	rts
; ===========================================================================

loc_3DA74:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DA96(pc,d0.w),d1
	jsr	off_3DA96(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	btst	#6,status(a0)
	bne.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DA96:
	dc.w loc_3DAA0-off_3DA96
	dc.w loc_3DAAC-off_3DA96; 1
	dc.w loc_3DACC-off_3DA96; 2
	dc.w loc_3DB32-off_3DA96; 3
	dc.w loc_3DB5A-off_3DA96; 4
; ===========================================================================

loc_3DAA0:
	addq.b	#2,routine_secondary(a0)
	move.b	#6,mapping_frame(a0)
	rts
; ===========================================================================

loc_3DAAC:
	movea.w	objoff_2C(a0),a1 ; a1=object
	bclr	#4,status(a1)
	bne.s	loc_3DABA
	rts
; ===========================================================================

loc_3DABA:
	addq.b	#2,routine_secondary(a0)
	move.w	#$10,objoff_2A(a0)
	move.w	y_pos(a0),objoff_2E(a0)
	rts
; ===========================================================================

loc_3DACC:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DADC
	addi.w	#$20,y_vel(a0)
	bra.w	JmpTo26_ObjectMove
; ===========================================================================

loc_3DADC:
	addq.b	#2,routine_secondary(a0)
	move.w	#$20,objoff_2A(a0)
	bsr.w	loc_366D6
	tst.w	d2
	bpl.s	loc_3DAF0
	neg.w	d2

loc_3DAF0:
	cmpi.w	#$100,d2
	bcs.s	loc_3DAFA
	move.w	#$FF,d2

loc_3DAFA:
	andi.w	#$C0,d2
	lsr.w	#5,d2
	move.w	word_3DB2A(pc,d2.w),d2
	tst.w	d1
	bne.s	loc_3DB0A
	neg.w	d2

loc_3DB0A:
	move.w	d2,y_vel(a0)
	move.w	#$800,d2
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#0,render_flags(a0)
	bne.s	loc_3DB20
	neg.w	d2

loc_3DB20:
	move.w	d2,x_vel(a0)
	moveq	#-$44,d0
	bra.w	JmpTo12_PlaySound
; ===========================================================================
word_3DB2A:
	dc.w  $200
	dc.w  $100	; 1
	dc.w   $80	; 2
	dc.w	 0	; 3
; ===========================================================================

loc_3DB32:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DB3C
	bra.w	JmpTo26_ObjectMove
; ===========================================================================

loc_3DB3C:
	addq.b	#2,routine_secondary(a0)
	neg.w	x_vel(a0)
	move.w	#$20,objoff_2A(a0)
	move.w	objoff_2E(a0),d0
	sub.w	y_pos(a0),d0
	asl.w	#3,d0
	move.w	d0,y_vel(a0)
	rts
; ===========================================================================

loc_3DB5A:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DB64
	bra.w	JmpTo26_ObjectMove
; ===========================================================================

loc_3DB64:
	move.b	#2,routine_secondary(a0)
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	rts
; ===========================================================================

loc_3DB74:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DB8C(pc,d0.w),d1
	jsr	off_3DB8C(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DB8C:
	dc.w loc_3DB90-off_3DB8C
	dc.w return_3DB9C-off_3DB8C; 1
; ===========================================================================

loc_3DB90:
	addq.b	#2,routine_secondary(a0)
	move.b	#5,mapping_frame(a0)
	rts
; ===========================================================================

return_3DB9C:
	rts
; ===========================================================================

loc_3DB9E:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DBB6(pc,d0.w),d1
	jsr	off_3DBB6(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DBB6:
	dc.w loc_3DBBA-off_3DBB6
	dc.w return_3DBC6-off_3DBB6; 1
; ===========================================================================

loc_3DBBA:
	addq.b	#2,routine_secondary(a0)
	move.b	#$A,mapping_frame(a0)
	rts
; ===========================================================================

return_3DBC6:
	rts
; ===========================================================================

loc_3DBC8:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DBE8(pc,d0.w),d1
	jsr	off_3DBE8(pc,d1.w)
	lea	byte_3DBF2(pc),a1
	bsr.w	loc_3E282
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DBE8:
	dc.w loc_3DBF6-off_3DBE8
	dc.w loc_3DC02-off_3DBE8; 1
	dc.w loc_3DC1C-off_3DBE8; 2
	dc.w loc_3DC2A-off_3DBE8; 3
	dc.w loc_3DC46-off_3DBE8; 4
byte_3DBF2:
	dc.b   0
	dc.b   0	; 1
	dc.b $FF	; 2
	dc.b $CC	; 3
; ===========================================================================

loc_3DBF6:
	addq.b	#2,routine_secondary(a0)
	move.b	#$15,mapping_frame(a0)
	rts
; ===========================================================================

loc_3DC02:
	movea.w	($FFFFF660).w,a1
	btst	#3,$22(a1)
	bne.s	loc_3DC10
	rts
; ===========================================================================

loc_3DC10:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,objoff_2A(a0)
	rts
; ===========================================================================

loc_3DC1C:
	lea	(off_3E59A).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC2A:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DC34
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC34:
	addq.b	#2,routine_secondary(a0)
	movea.w	objoff_2C(a0),a1 ; a1=object
	bset	#2,status(a1)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC46:
	move.b	#-1,collision_property(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC50:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DC66(pc,d0.w),d1
	jsr	off_3DC66(pc,d1.w)
	lea	byte_3DC70(pc),a1
	bra.w	loc_3E282
; ===========================================================================
off_3DC66:
	dc.w loc_3DC74-off_3DC66
	dc.w loc_3DC80-off_3DC66; 1
	dc.w loc_3DC86-off_3DC66; 2
	dc.w loc_3DC94-off_3DC66; 3
	dc.w loc_3DC80-off_3DC66; 4
byte_3DC70:
	dc.b   0
	dc.b $38	; 1
	dc.b   0	; 2
	dc.b $18	; 3
; ===========================================================================

loc_3DC74:
	addq.b	#2,routine_secondary(a0)
	move.b	#$C,mapping_frame(a0)
	rts
; ===========================================================================

loc_3DC80:
	move.b	#3,anim(a0)

loc_3DC86:

	lea	(off_3E5AA).l,a1
	bsr.w	JmpTo25_AnimateSprite
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC94:
	move.b	#1,anim(a0)
	bra.s	loc_3DC86
; ===========================================================================

loc_3DC9C:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DCB4(pc,d0.w),d1
	jsr	off_3DCB4(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DCB4:
	dc.w loc_3DCB8-off_3DCB4
	dc.w return_3DCCA-off_3DCB4; 1
; ===========================================================================

loc_3DCB8:
	addq.b	#2,routine_secondary(a0)
	move.b	#$B,mapping_frame(a0)
	move.b	#5,priority(a0)
	rts
; ===========================================================================

return_3DCCA:
	rts
; ===========================================================================

loc_3DCCC:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DCE4(pc,d0.w),d1
	jsr	off_3DCE4(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DCE4:
	dc.w loc_3DCEE-off_3DCE4
	dc.w loc_3DD00-off_3DCE4
	dc.w loc_3DACC-off_3DCE4
	dc.w loc_3DB32-off_3DCE4
	dc.w loc_3DB5A-off_3DCE4
; ===========================================================================

loc_3DCEE:
	addq.b	#2,routine_secondary(a0)
	move.b	#6,mapping_frame(a0)
	move.b	#5,priority(a0)
	rts
; ===========================================================================

loc_3DD00:
	movea.w	objoff_2C(a0),a1 ; a1=object
	bclr	#5,status(a1)
	bne.s	loc_3DD0E
	rts
; ===========================================================================

loc_3DD0E:
	addq.b	#2,routine_secondary(a0)
	move.w	#$10,objoff_2A(a0)
	move.w	y_pos(a0),objoff_2E(a0)
	rts
; ===========================================================================

loc_3DD20:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DD38(pc,d0.w),d1
	jsr	off_3DD38(pc,d1.w)
	tst.b	(a0)
	beq.w	return_37A48
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
off_3DD38:
	dc.w loc_3DD3C-off_3DD38
	dc.w return_3DD4E-off_3DD38; 1
; ===========================================================================

loc_3DD3C:
	addq.b	#2,routine_secondary(a0)
	move.b	#$A,mapping_frame(a0)
	move.b	#5,priority(a0)
	rts
; ===========================================================================

return_3DD4E:
	rts
; ===========================================================================

loc_3DD50:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DD5E(pc,d0.w),d1
	jmp	off_3DD5E(pc,d1.w)
; ===========================================================================
off_3DD5E:
	dc.w loc_3DD64-off_3DD5E
	dc.w loc_3DDA6-off_3DD5E; 1
	dc.w loc_3DE3C-off_3DD5E; 2
; ===========================================================================

loc_3DD64:
	addq.b	#2,routine_secondary(a0)
	move.b	#$10,mapping_frame(a0)
	ori.w	#$8000,art_tile(a0)
	move.b	#1,priority(a0)
	move.w	#$A0,objoff_2A(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	move.w	x_vel(a1),objoff_30(a0)
	move.w	y_vel(a1),objoff_32(a0)
	move.w	#$18,angle(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DDA6:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DE0A
	lea	next_object(a0),a1 ; a1=object
	movea.l	a1,a2
	move.w	-(a1),y_vel(a0)
	move.w	-(a1),x_vel(a0)
	moveq	#2,d6

loc_3DDBC:
	move.l	-(a1),-(a2)
	dbf	d6,loc_3DDBC
	lea	(MainCharacter).w,a2 ; a2=character
	move.w	x_vel(a2),d0
	bne.s	loc_3DDD2
	move.w	x_pos(a2),x_pos(a0)

loc_3DDD2:
	move.w	d0,(a1)+
	move.w	y_vel(a2),d0
	bne.s	loc_3DDE0
	move.w	y_pos(a2),y_pos(a0)

loc_3DDE0:
	move.w	d0,(a1)+
	bsr.w	JmpTo26_ObjectMove
	lea	(off_3E5EE).l,a1
	bsr.w	JmpTo25_AnimateSprite
	subq.b	#1,angle(a0)
	bpl.s	BranchTo10_JmpTo45_DisplaySprite
	subq.b	#1,objoff_27(a0)
	move.b	objoff_27(a0),angle(a0)
	moveq	#-$58,d0
	bsr.w	JmpTo12_PlaySound

BranchTo10_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE0A:
	addq.b	#2,routine_secondary(a0)
	move.w	#$40,objoff_2A(a0)
	move.b	#4,angle(a0)
	lea	(MainCharacter).w,a1 ; a1=character
	move.w	x_pos(a1),x_pos(a0)
	move.w	y_pos(a1),y_pos(a0)
	lea	(byte_3E588).l,a2
	bsr.w	loc_367D0
	clr.w	x_vel(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE3C:
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DE62
	lea	(off_3E5EE).l,a1
	bsr.w	JmpTo25_AnimateSprite
	subq.b	#1,angle(a0)
	bpl.s	BranchTo11_JmpTo45_DisplaySprite
	move.b	#4,angle(a0)
	moveq	#-$58,d0
	bsr.w	JmpTo12_PlaySound

BranchTo11_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE62:
	movea.w	objoff_2C(a0),a1 ; a1=object
	move.w	x_pos(a0),objoff_28(a1)
	bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3DE70:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DE7E(pc,d0.w),d1
	jmp	off_3DE7E(pc,d1.w)
; ===========================================================================
off_3DE7E:
	dc.w loc_3DE82-off_3DE7E
	dc.w loc_3DEA2-off_3DE7E; 1
; ===========================================================================

loc_3DE82:
	addq.b	#2,routine_secondary(a0)
	move.b	#$14,mapping_frame(a0)
	move.b	#1,priority(a0)
	ori.w	#$8000,art_tile(a0)
	move.w	#4,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DEA2:
	movea.w	objoff_2C(a0),a1 ; a1=object
	tst.b	(a1)
	beq.w	JmpTo65_DeleteObject
	subq.w	#1,objoff_2A(a0)
	bne.s	BranchTo12_JmpTo45_DisplaySprite
	move.w	#4,objoff_2A(a0)
	bchg	#5,art_tile(a0)

BranchTo12_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DEC2:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3DED0(pc,d0.w),d1
	jmp	off_3DED0(pc,d1.w)
; ===========================================================================
off_3DED0:
	dc.w loc_3DED8-off_3DED0
	dc.w loc_3DF04-off_3DED0; 1
	dc.w loc_3DF36-off_3DED0; 2
	dc.w loc_3DF80-off_3DED0; 3
; ===========================================================================

loc_3DED8:
	addq.b	#2,routine_secondary(a0)
	move.b	#$E,mapping_frame(a0)
	move.b	#$89,collision_flags(a0)
	move.b	#5,priority(a0)
	move.b	#$C,width_pixels(a0)
	lea	byte_3DF00(pc),a1
	bsr.w	loc_3E282
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================
byte_3DF00:
	dc.b   0
	dc.b $38	; 1
	dc.b $FF	; 2
	dc.b $EC	; 3
; ===========================================================================

loc_3DF04:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#7,status(a1)
	bne.s	loc_3DF4C
	bsr.w	JmpTo8_ObjectMoveAndFall
	move.w	y_pos(a0),d0
	cmpi.w	#$170,d0
	bcc.s	loc_3DF22
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF22:
	addq.b	#2,routine_secondary(a0)
	move.w	#$170,y_pos(a0)
	move.w	#$40,objoff_2A(a0)
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF36:
	movea.w	objoff_2C(a0),a1 ; a1=object
	btst	#7,status(a1)
	bne.s	loc_3DF4C
	subq.w	#1,objoff_2A(a0)
	bmi.s	loc_3DF4C
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF4C:
	move.b	#6,routine_secondary(a0)
	move.l	#Obj58_MapUnc_2D50A,mappings(a0)
	move.w	#$580,art_tile(a0)
	move.b	#1,priority(a0)
	move.b	#7,anim_frame_duration(a0)
	move.b	#0,mapping_frame(a0)
	move.w	#$C4,d0
	jsr	(PlaySound).l
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF80:
	subq.b	#1,anim_frame_duration(a0)
	bpl.s	BranchTo13_JmpTo45_DisplaySprite
	move.b	#7,anim_frame_duration(a0)
	addq.b	#1,mapping_frame(a0)
	cmpi.b	#5,mapping_frame(a0)
	bcs.s	BranchTo13_JmpTo45_DisplaySprite
	clr.b	collision_flags(a0)
	cmpi.b	#7,mapping_frame(a0)
	beq.w	JmpTo65_DeleteObject

BranchTo13_JmpTo45_DisplaySprite 
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DFAA:
	subq.w	#1,objoff_2A(a0)
	bmi.w	JmpTo65_DeleteObject
	bsr.w	JmpTo8_ObjectMoveAndFall
	bra.w	JmpTo45_DisplaySprite
; ===========================================================================

loc_3DFBA:
	jsr	(SingleObjLoad).l
	bne.s	return_3DFF6
	_move.b	#$58,0(a1) ; load obj
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	jsr	(RandomNumber).l
	move.w	d0,d1
	moveq	#0,d1
	move.b	d0,d1
	lsr.b	#2,d1
	subi.w	#$30,d1
	add.w	d1,x_pos(a1)
	lsr.w	#8,d0
	lsr.b	#2,d0
	subi.w	#$30,d0
	add.w	d0,y_pos(a1)

return_3DFF6:
	rts
; ===========================================================================

loc_3DFF8:
	tst.b	collision_property(a0)
	beq.s	loc_3E05A
	tst.b	objoff_2A(a0)
	bne.s	loc_3E02E
	tst.b	collision_flags(a0)
	beq.s	loc_3E01E
	movea.w	objoff_36(a0),a1 ; a1=object
	tst.b	collision_flags(a1)
	bne.s	return_3E058
	clr.b	collision_flags(a0)
	subq.b	#1,collision_property(a0)
	beq.s	loc_3E05A

loc_3E01E:
	move.b	#$3C,objoff_2A(a0)
	move.w	#$AC,d0
	jsr	(PlaySound).l

loc_3E02E:
	lea	(Normal_palette_line2+2).w,a1
	moveq	#0,d0
	tst.w	(a1)
	bne.s	loc_3E03C
	move.w	#$EEE,d0

loc_3E03C:
	move.w	d0,(a1)
	subq.b	#1,objoff_2A(a0)
	bne.s	return_3E058
	clr.w	(Normal_palette_line2+2).w
	move.b	#$16,collision_flags(a0)
	movea.w	objoff_36(a0),a1 ; a1=object
	move.b	#$2A,collision_flags(a1)

return_3E058:
	rts
; ===========================================================================

loc_3E05A:
	moveq	#$64,d0
	bsr.w	AddPoints
	clr.b	anim_frame_duration(a0)
	move.b	#$E,routine_secondary(a0)
	bset	#7,status(a0)
	clr.b	anim(a0)
	clr.b	collision_flags(a0)
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	bsr.w	loc_3E11E
	bsr.w	loc_3E094
	movea.w	objoff_38(a0),a1 ; a1=object
	bsr.w	JmpTo6_DeleteObject2
	addq.w	#4,sp
	rts
; ===========================================================================

loc_3E094:
	lea	(byte_3E0E6).l,a1
	lea	word_3E0C6(pc),a2
	moveq	#0,d0
	moveq	#7,d6

loc_3E0A2:
	move.b	(a1)+,d0
	movea.w	(a0,d0.w),a3 ; a3=object
	move.b	#$1E,routine(a3)
	clr.b	routine_secondary(a3)
	move.w	#$80,objoff_2A(a3)
	move.w	(a2)+,x_vel(a3)
	move.w	(a2)+,y_vel(a3)
	dbf	d6,loc_3E0A2
	rts
; ===========================================================================
word_3E0C6:
	dc.w  $200,$FC00
	dc.w $FF00,$FF00	; 2
	dc.w  $300,$FD00	; 4
	dc.w $FF00,$FC00	; 6
	dc.w  $180,$FE00	; 8
	dc.w $FE00,$FD00	; 10
	dc.w	 0,$FC00	; 12
	dc.w  $100,$FD00	; 14
byte_3E0E6:
	dc.b $2C
	dc.b $2E	; 1
	dc.b $30	; 2
	dc.b $32	; 3
	dc.b $34	; 4
	dc.b $3A	; 5
	dc.b $3C	; 6
	dc.b $3E	; 7
; ===========================================================================

loc_3E0EE:
	lea	byte_3E114(pc),a1
	lea	byte_3E10A(pc),a2
	moveq	#0,d0
	moveq	#9,d6

loc_3E0FA:
	move.b	(a1)+,d0
	movea.w	(a0,d0.w),a3 ; a3=object
	move.b	(a2)+,collision_flags(a3)

loc_3E104:
	dbf	d6,loc_3E0FA
	rts
; ===========================================================================
byte_3E10A:
	dc.b   0
	dc.b $8F	; 1
	dc.b $9C	; 2
	dc.b   0	; 3
	dc.b $86	; 4
	dc.b $2A	; 5
	dc.b $8B	; 6
	dc.b $8F	; 7
	dc.b $9C	; 8
	dc.b $8B	; 9
byte_3E114:
	dc.b $2C
	dc.b $2E	; 1
	dc.b $30	; 2
	dc.b $32	; 3
	dc.b $34	; 4
	dc.b $36	; 5
	dc.b $38	; 6
	dc.b $3A	; 7
	dc.b $3C	; 8
	dc.b $3E	; 9
; ===========================================================================

loc_3E11E:
	lea	byte_3E114(pc),a1
	moveq	#0,d0
	moveq	#9,d6

loc_3E126:
	move.b	(a1)+,d0
	movea.w	(a0,d0.w),a3 ; a3=object
	clr.b	collision_flags(a3)
	dbf	d6,loc_3E126
	rts
; ===========================================================================

loc_3E136:
	lea	word_3E160(pc),a3
	moveq	#1,d6

loc_3E13C:
	lea	(byte_3E58C).l,a2
	bsr.w	loc_367D0
	move.w	(a3)+,d0
	btst	#0,render_flags(a0)
	beq.s	loc_3E152
	neg.w	d0

loc_3E152:
	move.w	d0,x_vel(a1)
	move.w	(a3)+,y_vel(a1)
	dbf	d6,loc_3E13C
	rts
; ===========================================================================
word_3E160:
	dc.w   $60,$F800
	dc.w   $C0,$F600	; 2
; ===========================================================================

loc_3E168:
	move.b	render_flags(a0),d0
	andi.b	#1,d0
	moveq	#0,d1
	lea	byte_3E19E(pc),a1

loc_3E176:
	move.b	(a1)+,d1
	beq.w	return_37A48
	movea.w	(a0,d1.w),a2 ; a2=object
	move.b	render_flags(a2),d2
	andi.b	#$FE,d2
	or.b	d0,d2
	move.b	d2,render_flags(a2)
	move.b	status(a2),d2
	andi.b	#$FE,d2
	or.b	d0,d2
	move.b	d2,status(a2)
	bra.s	loc_3E176
; ===========================================================================
byte_3E19E:
	dc.b $2C
	dc.b $2E	; 1
	dc.b $30	; 2
	dc.b $32	; 3
	dc.b $34	; 4
	dc.b $36	; 5
	dc.b $38	; 6
	dc.b $3A	; 7
	dc.b $3C	; 8
	dc.b $3E	; 9
	dc.b   0	; 10
	dc.b   0	; 11
; ===========================================================================

loc_3E1AA:
	movea.l	(a1)+,a2
	moveq	#0,d0
	move.b	anim_frame(a0),d0
	move.b	(a1,d0.w),d0
	move.b	d0,d1
	moveq	#0,d4
	andi.w	#$C0,d1
	beq.s	loc_3E1C4
	bsr.w	loc_3E23E

loc_3E1C4:
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.b	(a2)+,d0
	move.b	(a2)+,d3
	move.b	objoff_1F(a0),d2
	addq.b	#1,d2
	cmp.b	d3,d2
	bcs.s	loc_3E1DE
	addq.b	#1,anim_frame(a0)
	moveq	#0,d2

loc_3E1DE:
	move.b	d2,objoff_1F(a0)
	moveq	#0,d5

loc_3E1E4:
	move.b	(a2)+,d5
	movea.w	(a0,d5.w),a3 ; a3=object
	tst.w	d5
	bne.s	loc_3E1F0
	movea.l	a0,a3

loc_3E1F0:
	move.l	x_pos(a3),d2
	move.b	(a2)+,d1
	ext.w	d1
	asl.w	#4,d1
	btst	#0,render_flags(a0)
	beq.s	loc_3E204
	neg.w	d1

loc_3E204:
	tst.w	d4
	beq.s	loc_3E20A
	neg.w	d1

loc_3E20A:
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d2
	move.l	d2,x_pos(a3)
	move.l	y_pos(a3),d3
	move.b	(a2)+,d1
	ext.w	d1
	asl.w	#4,d1
	tst.w	d4
	beq.s	loc_3E224
	neg.w	d1

loc_3E224:
	ext.l	d1
	asl.l	#8,d1
	add.l	d1,d3
	move.l	d3,y_pos(a3)
	dbf	d0,loc_3E1E4
	moveq	#0,d1
	rts
; ===========================================================================

loc_3E236:
	clr.b	anim_frame(a0)
	moveq	#1,d1

return_3E23C:
	rts
; ===========================================================================

loc_3E23E:
	andi.b	#$3F,d0
	rol.b	#3,d1
	move.w	off_3E24C-2(pc,d1.w),d1
	jmp	off_3E24C(pc,d1.w)
; ===========================================================================
off_3E24C:
	dc.w loc_3E252-off_3E24C
	dc.w loc_3E27A-off_3E24C; 1
	dc.w loc_3E27E-off_3E24C; 2
; ===========================================================================

loc_3E252:
	tst.b	objoff_1F(a0)
	bne.s	return_3E23C
	move.b	anim_frame(a0),d1
	addq.b	#1,d1
	move.b	(a1,d1.w),d0
	bsr.w	JmpTo12_PlaySound
	addq.b	#1,d1
	move.b	d1,anim_frame(a0)
	move.b	(a1,d1.w),d0
	move.b	d0,d1
	andi.b	#$C0,d1
	bne.s	loc_3E23E
	rts
; ===========================================================================

loc_3E27A:
	moveq	#1,d4
	rts
; ===========================================================================

loc_3E27E:
	addq.w	#4,sp
	bra.s	loc_3E236
; ===========================================================================

loc_3E282:
	movea.w	objoff_2C(a0),a2 ; a2=object
	move.w	x_pos(a2),d0
	move.w	(a1)+,d1
	btst	#0,render_flags(a2)
	beq.s	loc_3E296
	neg.w	d1

loc_3E296:
	add.w	d1,d0
	move.w	d0,x_pos(a0)
	move.w	y_pos(a2),d0
	add.w	(a1)+,d0
	move.w	d0,y_pos(a0)
	rts
; ===========================================================================

loc_3E2A8:
	moveq	#0,d0
	moveq	#0,d6
	move.b	(a1)+,d6

loc_3E2AE:
	move.b	(a1)+,d0
	movea.w	(a0,d0.w),a2 ; a2=object
	move.w	x_pos(a0),d1
	move.b	(a1)+,d2
	ext.w	d2
	btst	#0,render_flags(a0)
	beq.s	loc_3E2C6
	neg.w	d2

loc_3E2C6:
	add.w	d2,d1
	move.w	d1,x_pos(a2)
	move.w	y_pos(a0),d1
	move.b	(a1)+,d2
	ext.w	d2
	add.w	d2,d1
	move.w	d1,y_pos(a2)
	dbf	d6,loc_3E2AE
	rts
; ===========================================================================
byte_3E2E0:
	dc.b   6
	dc.b $2E	; 1
	dc.b $FC	; 2
	dc.b $3C	; 3
	dc.b $30	; 4
	dc.b $F4	; 5
	dc.b   8	; 6
	dc.b $32	; 7
	dc.b  $C	; 8
	dc.b $F8	; 9
	dc.b $34	; 10
	dc.b   4	; 11
	dc.b $24	; 12
	dc.b $3A	; 13
	dc.b $FC	; 14
	dc.b $3C	; 15
	dc.b $3C	; 16
	dc.b $F4	; 17
	dc.b   8	; 18
	dc.b $3E	; 19
	dc.b   4	; 20
	dc.b $24	; 21
off_3E2F6:
	dc.l ObjC7_MapUnc_3E318
	dc.w 1
	dc.w $203
	dc.w $FF00
off_3E300:
	dc.l ObjC7_MapUnc_3E318
	dc.w $506
	dc.w $708
	dc.w $FF00
off_3E30A:
	dc.l ObjC7_MapUnc_3E318
	dc.w 1
	dc.w $203
	dc.w $405
	dc.w $607
	dc.w $8C0
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjC7_MapUnc_3E318:	BINCLUDE "mappings/sprite/objC7_a.bin"

off_3E3D0:
	dc.l ObjC7_MapUnc_3E3D8
	dc.w 1
	dc.w $2C0
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjC7_MapUnc_3E3D8:	BINCLUDE "mappings/sprite/objC7_b.bin"

off_3E40C:
	dc.l ObjC7_MapUnc_3E438
	dc.b   0,  1,  2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,  9
	dc.b  $A,  1,  2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,$C0; 16
off_3E42C:
	dc.l ObjC7_MapUnc_3E438
	dc.w $8887
	dc.w $8685
	dc.w $B40
	dc.w $BDC0
; -----------------------------------------------------------------------------
; sprite mappings
; -----------------------------------------------------------------------------
ObjC7_MapUnc_3E438:	BINCLUDE "mappings/sprite/objC7_c.bin"

byte_3E55C:
	dc.b   0
	dc.b $2C	; 1
	dc.b $C7	; 2
	dc.b   4	; 3
byte_3E560:
	dc.b   0
	dc.b $2E	; 1
	dc.b $C7	; 2
	dc.b   6	; 3
byte_3E564:
	dc.b   0
	dc.b $30	; 1
	dc.b $C7	; 2
	dc.b   8	; 3
byte_3E568:
	dc.b   0
	dc.b $32	; 1
	dc.b $C7	; 2
	dc.b  $A	; 3
byte_3E56C:
	dc.b   0
	dc.b $34	; 1
	dc.b $C7	; 2
	dc.b  $C	; 3
byte_3E570:
	dc.b   0
	dc.b $36	; 1
	dc.b $C7	; 2
	dc.b  $E	; 3
byte_3E574:
	dc.b   0
	dc.b $38	; 1
	dc.b $C7	; 2
	dc.b $10	; 3
byte_3E578:
	dc.b   0
	dc.b $3A	; 1
	dc.b $C7	; 2
	dc.b $12	; 3
byte_3E57C:
	dc.b   0
	dc.b $3C	; 1
	dc.b $C7	; 2
	dc.b $14	; 3
byte_3E580:
	dc.b   0
	dc.b $3E	; 1
	dc.b $C7	; 2
	dc.b $16	; 3
byte_3E584:
	dc.b   0
	dc.b $10	; 1
	dc.b $C7	; 2
	dc.b $18	; 3
byte_3E588:
	dc.b   0
	dc.b $10	; 1
	dc.b $C7	; 2
	dc.b $1A	; 3
byte_3E58C:
	dc.b   0
	dc.b $10	; 1
	dc.b $C7	; 2
	dc.b $1C	; 3
off_3E590:
	dc.l ObjC7_MapUnc_3E5F8
	dc.w $330
	dc.w $404
	dc.w $3800
off_3E59A:
	dc.w byte_3E59C-off_3E59A
byte_3E59C:
	dc.b   7,$15,$15,$15,$15,$15,$15,$15,$15,  0,  1,  2,$FA,  0

; animation script
off_3E5AA:
	dc.w byte_3E5B2-off_3E5AA
	dc.w byte_3E5B6-off_3E5AA; 1
	dc.w byte_3E5D0-off_3E5AA; 2
	dc.w byte_3E5EA-off_3E5AA; 3
byte_3E5B2:
	dc.b   1, $C, $D,$FF
byte_3E5B6:
	dc.b   1, $C, $D, $C, $C, $D, $D, $C, $C, $C, $D, $D, $D, $C, $C, $C

	dc.b  $C, $C, $D, $D, $D, $D, $D, $D,$FA,  0; 16
byte_3E5D0:
	dc.b   1, $D, $D, $D, $D, $D, $D, $C, $C, $C, $C, $C, $D, $D, $D, $C

	dc.b  $C, $C, $D, $D, $C, $C, $D, $C,$FD,  0; 16
byte_3E5EA:
	dc.b   0, $D,$15,$FF
; animation script
off_3E5EE:
	dc.w byte_3E5F0-off_3E5EE
byte_3E5F0:
	dc.b   3,$13,$12,$11,$10,$16,$FF
	even
; ------------------------------------------------------------------------------
; sprite mappings
; ------------------------------------------------------------------------------
ObjC7_MapUnc_3E5F8:	BINCLUDE "mappings/sprite/objC7_d.bin"
; ===========================================================================

loc_3E89E:
	move.w	d1,d2
	andi.w	#1,d2
	addq.w	#1,d2
	lsl.w	#6,d2
	swap	d2
	move.w	d1,d3
	lsr.w	#1,d3
	addq.w	#1,d3
	lsl.w	#6,d3
	swap	d3
	bsr.w	loc_3E8CA
	btst	#1,d0
	beq.w	return_37A48
	btst	#1,d1
	bne.s	loc_3E8C8
	movea.l	a3,a5

loc_3E8C8:
	movea.l	a5,a2

loc_3E8CA:
	movea.l	a2,a4
	swap	d2
	lea	(a2,d2.w),a3
	swap	d2
	move.w	d1,d5
	andi.w	#1,d5
	bsr.w	loc_3E944
	btst	#1,d1
	beq.s	loc_3E906
	swap	d2
	move.w	d2,d4
	swap	d2
	add.w	d4,d4
	move.w	d0,d3
	andi.w	#1,d3
	lsl.w	d3,d4
	adda.w	d4,a4
	move.w	d1,d5
	lsr.w	#1,d5
	swap	d3
	lea	(a4,d3.w),a5
	swap	d3
	bsr.w	loc_3E95C

loc_3E906:
	btst	#0,d0
	bne.s	loc_3E912
	btst	#1,d0
	beq.s	return_3E942

loc_3E912:
	swap	d2
	lea	(a2,d2.w),a2
	lea	(a2,d2.w),a3
	swap	d2
	move.w	d1,d5
	andi.w	#1,d5
	bsr.w	loc_3E944
	btst	#1,d1
	beq.s	return_3E942
	move.w	d1,d5
	lsr.w	#1,d5
	swap	d3
	lea	(a4,d3.w),a4
	lea	(a4,d3.w),a5
	swap	d3
	bsr.w	loc_3E95C

return_3E942:
	rts
; ===========================================================================

loc_3E944:
	moveq	#7,d6

loc_3E946:
	bsr.w	loc_3E974
	addq.w	#4,a2
	bsr.w	loc_3E99E
	addq.w	#4,a3
	dbf	d6,loc_3E946
	dbf	d5,loc_3E944
	rts
; ===========================================================================

loc_3E95C:
	moveq	#7,d6

loc_3E95E:
	bsr.w	loc_3E9C8
	addq.w	#4,a4
	bsr.w	loc_3E9F2
	addq.w	#4,a5
	dbf	d6,loc_3E95E
	dbf	d5,loc_3E95C
	rts
; ===========================================================================

loc_3E974:
	bsr.w	+
+	move.b	(a1)+,d2
	move.b	d2,d3
	andi.b	#$F0,d2
	move.b	d2,d4
	lsr.b	#4,d4
	or.b	d2,d4
	move.b	d4,(a2)+
	move.b	d4,3(a2)
	andi.b	#$F,d3
	move.b	d3,d4
	lsl.b	#4,d4
	or.b	d3,d4
	move.b	d4,(a2)+
	move.b	d4,3(a2)
	rts
; ===========================================================================

loc_3E99E:
	bsr.w	+
+	move.b	(a1)+,d2
	move.b	d2,d3
	andi.b	#$F0,d2
	move.b	d2,d4
	lsr.b	#4,d4
	or.b	d2,d4
	move.b	d4,(a3)+
	move.b	d4,3(a3)
	andi.b	#$F,d3
	move.b	d3,d4
	lsl.b	#4,d4
	or.b	d3,d4
	move.b	d4,(a3)+
	move.b	d4,3(a3)
	rts
; ===========================================================================

loc_3E9C8:
	bsr.w	+
+	move.b	(a1)+,d2
	move.b	d2,d3
	andi.b	#$F0,d2
	move.b	d2,d4
	lsr.b	#4,d4
	or.b	d2,d4
	move.b	d4,(a4)+
	move.b	d4,3(a4)
	andi.b	#$F,d3
	move.b	d3,d4
	lsl.b	#4,d4
	or.b	d3,d4
	move.b	d4,(a4)+
	move.b	d4,3(a4)
	rts
; ===========================================================================

loc_3E9F2:
	bsr.w	+
+	move.b	(a1)+,d2
	move.b	d2,d3
	andi.b	#$F0,d2
	move.b	d2,d4
	lsr.b	#4,d4
	or.b	d2,d4
	move.b	d4,(a5)+
	move.b	d4,3(a5)
	andi.b	#$F,d3
	move.b	d3,d4
	lsl.b	#4,d4
	or.b	d3,d4
	move.b	d4,(a5)+
	move.b	d4,3(a5)
	rts
; ===========================================================================

	; this data seems to be unused
	dc.b $12,$34,$56,$78
	dc.b $12,$34,$56,$78	; 4
	dc.b $12,$34,$56,$78	; 8
	dc.b $12,$34,$56,$78	; 12
	dc.b $12,$34,$56,$78	; 16
	dc.b $12,$34,$56,$78	; 20
	dc.b $12,$34,$56,$78	; 24
	dc.b $12,$34,$56,$78	; 28

; ===========================================================================

JmpTo5_DisplaySprite3 
	jmp	DisplaySprite3
; ===========================================================================

JmpTo45_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================

JmpTo65_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo19_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================

JmpTo39_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

JmpTo6_DeleteObject2 
	jmp	DeleteObject2
; ===========================================================================

JmpTo12_PlaySound 
	jmp	(PlaySound).l
; ===========================================================================

JmpTo25_SingleObjLoad2 
	jmp	SingleObjLoad2
; ===========================================================================

JmpTo25_AnimateSprite 
	jmp	AnimateSprite
; ===========================================================================

JmpTo_PlaySoundLocal 
	jmp	(PlaySoundLocal).l
; ===========================================================================

JmpTo6_RandomNumber 
	jmp	(RandomNumber).l
; ===========================================================================

JmpTo2_MarkObjGone_P1 
	jmp	MarkObjGone_P1
; ===========================================================================

JmpTo_Pal_AddColor2 
	jmp	(Pal_AddColor2).l
; ===========================================================================

JmpTo_LoadTailsDynPLC_Part2 
	jmp	LoadTailsDynPLC_Part2
; ===========================================================================

JmpTo_LoadSonicDynPLC_Part2 
	jmp	LoadSonicDynPLC_Part2
; ===========================================================================

JmpTo8_MarkObjGone3 
	jmp	MarkObjGone3
; ===========================================================================

JmpTo64_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================

JmpTo5_PlayMusic 
	jmp	(PlayMusic).l
; ===========================================================================

JmpTo_loc_2D6CC 
	jmp	loc_2D6CC
; ===========================================================================

JmpTo9_PlatformObject 
	jmp	PlatformObject
; ===========================================================================

JmpTo27_SolidObject 
	jmp	SolidObject
; ===========================================================================

JmpTo8_ObjectMoveAndFall 
	jmp	ObjectMoveAndFall
; ===========================================================================
; loc_3EAC0:
JmpTo26_ObjectMove 
	jmp	ObjectMove
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8A - Sonic Team Presents/Credits (leftover from S1) (seemingly unused)
; ----------------------------------------------------------------------------
; Sprite_3EAC8:
Obj8A: ; (screen-space obj)
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3EAD6(pc,d0.w),d1
	jmp	off_3EAD6(pc,d1.w)
; ===========================================================================
off_3EAD6:
	dc.w loc_3EADA-off_3EAD6
	dc.w JmpTo46_DisplaySprite-off_3EAD6; 1
; ===========================================================================

loc_3EADA:
	addq.b	#2,routine(a0)
	move.w	#$120,x_pixel(a0)
	move.w	#$F0,y_pixel(a0)
	move.l	#Obj8A_MapUnc_3EB4E,mappings(a0)
	move.w	#$5A0,art_tile(a0)
	bsr.w	JmpTo65_Adjust2PArtPointer
	move.w	($FFFFFFF4).w,d0
	move.b	d0,mapping_frame(a0)
	move.b	#0,render_flags(a0)
	move.b	#0,priority(a0)
	cmpi.b	#4,(Game_Mode).w	; title screen??
	bne.s	JmpTo46_DisplaySprite	; if not, branch
	move.w	#$300,art_tile(a0)
	bsr.w	JmpTo65_Adjust2PArtPointer
	move.b	#$A,mapping_frame(a0)
	tst.b	($FFFFFFD3).w
	beq.s	JmpTo46_DisplaySprite
	cmpi.b	#$72,(Ctrl_1_Held).w
	bne.s	JmpTo46_DisplaySprite
	move.w	#$EEE,(Second_palette_line3).w
	move.w	#$880,(Second_palette_line3+2).w
	jmp	DeleteObject
; ===========================================================================

JmpTo46_DisplaySprite 
	jmp	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; sprite mappings (unused?)
; ----------------------------------------------------------------------------
Obj8A_MapUnc_3EB4E:	BINCLUDE "mappings/sprite/obj8A.bin"
; ===========================================================================
	nop

JmpTo65_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; ===========================================================================
	align 4




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3E - Egg prison
; ----------------------------------------------------------------------------
; Sprite_3F1E4:
Obj3E:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	off_3F1F2(pc,d0.w),d1
	jmp	off_3F1F2(pc,d1.w)
; ===========================================================================
off_3F1F2:
	dc.w loc_3F212-off_3F1F2
	dc.w loc_3F278-off_3F1F2; 1
	dc.w loc_3F354-off_3F1F2; 2
	dc.w loc_3F38E-off_3F1F2; 3
	dc.w loc_3F3A8-off_3F1F2; 4
	dc.w loc_3F406-off_3F1F2; 5
byte_3F1FE:
	dc.b   0
	dc.b   2	; 1
	dc.b $20	; 2
	dc.b   4	; 3
	dc.b   0	; 4
	dc.b $28	; 5
	dc.b   4	; 6
	dc.b $10	; 7
	dc.b   5	; 8
	dc.b   4	; 9
	dc.b $18	; 10
	dc.b   6	; 11
	dc.b   8	; 12
	dc.b   3	; 13
	dc.b   5	; 14
	dc.b   0	; 15
	dc.b   8	; 16
	dc.b $20	; 17
	dc.b   4	; 18
	dc.b   0	; 19
; ===========================================================================

loc_3F212:
	movea.l	a0,a1
	lea	objoff_38(a0),a3
	lea	byte_3F1FE(pc),a2
	moveq	#3,d1
	bra.s	loc_3F228
; ===========================================================================

loc_3F220:
	bsr.w	JmpTo20_SingleObjLoad
	bne.s	loc_3F272
	move.w	a1,(a3)+

loc_3F228:
	_move.b	0(a0),0(a1) ; load obj
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	y_pos(a0),objoff_30(a1)
	move.l	#Obj3E_MapUnc_3F436,mappings(a1)
	move.w	#$2680,art_tile(a1)
	move.b	#$84,render_flags(a1)
	moveq	#0,d0
	move.b	(a2)+,d0
	sub.w	d0,y_pos(a1)
	move.w	y_pos(a1),objoff_30(a1)
	move.b	(a2)+,routine(a1)
	move.b	(a2)+,width_pixels(a1)
	move.b	(a2)+,priority(a1)
	move.b	(a2)+,mapping_frame(a1)

loc_3F272:
	dbf	d1,loc_3F220
	rts
; ===========================================================================

loc_3F278:
	moveq	#0,d0
	move.b	routine_secondary(a0),d0
	move.w	off_3F2AE(pc,d0.w),d1
	jsr	off_3F2AE(pc,d1.w)
	move.w	#$2B,d1
	move.w	#$18,d2
	move.w	#$18,d3
	move.w	x_pos(a0),d4
	jsr	(SolidObject).l
	lea	(off_3F428).l,a1
	jsr	AnimateSprite
	jmp	MarkObjGone
; ===========================================================================
off_3F2AE:
	dc.w loc_3F2B4-off_3F2AE
	dc.w loc_3F2FC-off_3F2AE; 1
	dc.w return_3F352-off_3F2AE; 2
; ===========================================================================

loc_3F2B4:
	movea.w	objoff_38(a0),a1 ; a1=object
	tst.w	objoff_32(a1)
	beq.s	return_3F2FA
	movea.w	objoff_3A(a0),a2 ; a2=object
	jsr	(SingleObjLoad).l
	bne.s	loc_3F2E0
	_move.b	#$27,0(a1) ; load obj
	addq.b	#2,routine(a1)
	move.w	x_pos(a2),x_pos(a1)
	move.w	y_pos(a2),y_pos(a1)

loc_3F2E0:
	move.w	#-$400,y_vel(a2)
	move.w	#$800,x_vel(a2)
	addq.b	#2,routine_secondary(a2)
	move.w	#$1D,objoff_34(a0)
	addq.b	#2,routine_secondary(a0)

return_3F2FA:
	rts
; ===========================================================================

loc_3F2FC:
	subq.w	#1,objoff_34(a0)
	bpl.s	return_3F352
	move.b	#1,anim(a0)
	moveq	#7,d6
	move.w	#$9A,d5
	moveq	#-$1C,d4

loc_3F310:
	jsr	(SingleObjLoad).l
	bne.s	loc_3F340
	_move.b	#$28,0(a1) ; load obj
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	add.w	d4,x_pos(a1)
	move.b	#1,objoff_38(a1)
	addq.w	#7,d4
	move.w	d5,objoff_36(a1)
	subq.w	#8,d5
	dbf	d6,loc_3F310

loc_3F340:
	movea.w	objoff_3C(a0),a2 ; a2=object
	move.w	#$B4,anim_frame_duration(a2)
	addq.b	#2,routine_secondary(a2)
	addq.b	#2,routine_secondary(a0)

return_3F352:

	rts
; ===========================================================================

loc_3F354:
	move.w	#$1B,d1
	move.w	#8,d2
	move.w	#8,d3
	move.w	x_pos(a0),d4
	jsr	(SolidObject).l
	move.w	objoff_30(a0),y_pos(a0)
	move.b	status(a0),d0
	andi.b	#$18,d0
	beq.s	JmpTo40_MarkObjGone
	addq.w	#8,y_pos(a0)
	clr.b	(Update_HUD_timer).w
	move.w	#1,objoff_32(a0)

JmpTo40_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

loc_3F38E:
	tst.b	routine_secondary(a0)
	beq.s	JmpTo41_MarkObjGone
	tst.b	render_flags(a0)
	bpl.w	JmpTo66_DeleteObject
	jsr	ObjectMoveAndFall

JmpTo41_MarkObjGone 
	jmp	MarkObjGone
; ===========================================================================

loc_3F3A8:
	tst.b	routine_secondary(a0)
	beq.s	return_3F404
	move.b	($FFFFFE0F).w,d0
	andi.b	#7,d0
	bne.s	loc_3F3F4
	jsr	(SingleObjLoad).l
	bne.s	loc_3F3F4
	_move.b	#$28,0(a1) ; load obj
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	jsr	(RandomNumber).l
	andi.w	#$1F,d0
	subq.w	#6,d0
	tst.w	d1
	bpl.s	loc_3F3E4
	neg.w	d0

loc_3F3E4:
	add.w	d0,x_pos(a1)
	move.b	#1,objoff_38(a1)
	move.w	#$C,objoff_36(a1)

loc_3F3F4:
	subq.w	#1,anim_frame_duration(a0)
	bne.s	return_3F404
	addq.b	#2,routine(a0)
	move.w	#$B4,anim_frame_duration(a0)

return_3F404:
	rts
; ===========================================================================

loc_3F406:
	moveq	#$6F,d0
	moveq	#$28,d1
	lea	(Object_RAM+$400).w,a1

loc_3F40E:
	cmp.b	(a1),d1
	beq.s	return_3F426
	lea	next_object(a1),a1 ; a1=object
	dbf	d0,loc_3F40E

	jsr	(loc_19452).l
	jmp	DeleteObject
; ===========================================================================

return_3F426:
	rts
; ===========================================================================
; animation script
off_3F428:
	dc.w byte_3F42C-off_3F428
	dc.w byte_3F42F-off_3F428; 1
byte_3F42C:
	dc.b  $F,  0,$FF
byte_3F42F:
	dc.b   3,  0,  1,  2,  3,$FE,  1
	even
; ----------------------------------------------------------------------------
; sprite mappings
; ----------------------------------------------------------------------------
Obj3E_MapUnc_3F436:	BINCLUDE "mappings/sprite/obj3E.bin"
; ===========================================================================
	nop

JmpTo66_DeleteObject 
	jmp	DeleteObject
; ===========================================================================

JmpTo20_SingleObjLoad 
	jmp	SingleObjLoad
; ===========================================================================




; ---------------------------------------------------------------------------
; Object touch response subroutine - $20(a0) in the object RAM
; collides Sonic with most objects (enemies, rings, monitors...) in the level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_3F554:
TouchResponse:
	nop
	bsr.w	JmpTo_loc_170BA
	cmpi.b	#$C,(Current_Zone).w
	bne.s	+
	bsr.w	JmpTo_loc_174C8
+
	tst.b	(Current_Boss_ID).w
	bne.w	Touch_Boss
	move.w	x_pos(a0),d2 ; load Sonic's position into d2,d3
	move.w	y_pos(a0),d3
	subi.w	#8,d2
	moveq	#0,d5
	move.b	y_radius(a0),d5
	subq.b	#3,d5
	sub.w	d5,d3
	cmpi.b	#$4D,mapping_frame(a0)	; is Sonic ducking?
	bne.s	Touch_NoDuck		; if not, branch
	addi.w	#$C,d3
	moveq	#$A,d5
; loc_3F592:
Touch_NoDuck:
	move.w	#$10,d4
	add.w	d5,d5
	lea	(Object_RAM+$400).w,a1
	move.w	#$6F,d6
; loc_3F5A0:
Touch_Loop:
	move.b	collision_flags(a1),d0
	bne.w	Touch_Height
; loc_3F5A8:
Touch_NextObj:
	lea	next_object(a1),a1 ; load obj address ; goto next object
	dbf	d6,Touch_Loop ; repeat 6F more times

	moveq	#0,d0
	rts
; ===========================================================================
; loc_3F5B4:
Touch_Height:
	andi.w	#$3F,d0
	add.w	d0,d0
	lea	Touch_Sizes(pc,d0.w),a2
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	x_pos(a1),d0
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_3F5D6
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	Touch_Width
	bra.w	Touch_NextObj
; ===========================================================================

loc_3F5D6:
	cmp.w	d4,d0
	bhi.w	Touch_NextObj
; loc_3F5DC:
Touch_Width:
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	y_pos(a1),d0
	sub.w	d1,d0
	sub.w	d3,d0
	bcc.s	loc_3F5F6
	add.w	d1,d1
	add.w	d1,d0
	bcs.w	Touch_ChkValue
	bra.w	Touch_NextObj
; ===========================================================================

loc_3F5F6:
	cmp.w	d5,d0
	bhi.w	Touch_NextObj
	bra.w	Touch_ChkValue
; ===========================================================================
; collision sizes (width,height)
; byte_3F600:
Touch_Sizes:
	dc.b   4,  4; 0
	dc.b $14,$14
	dc.b  $C,$14
	dc.b $14, $C
	dc.b   4,$10
	dc.b  $C,$12
	dc.b $10,$10 ; monitors
	dc.b   6,  6 ; rings
	dc.b $18, $C; 8
	dc.b  $C,$10
	dc.b $10,  8
	dc.b   8,  8
	dc.b $14,$10
	dc.b $14,  8
	dc.b  $E, $E
	dc.b $18,$18; 16
	dc.b $28,$10
	dc.b $10,$18
	dc.b   8,$10
	dc.b $20,$70
	dc.b $40,$20
	dc.b $80,$20
	dc.b $20,$20
	dc.b   8,  8; 32
	dc.b   4,  4
	dc.b $20,  8
	dc.b  $C, $C
	dc.b   8,  4
	dc.b $18,  4
	dc.b $28,  4
	dc.b   4,  8
	dc.b   4,$18; 48
	dc.b   4,$28
	dc.b   4,$10
	dc.b $18,$18
	dc.b  $C,$18
	dc.b $48,  8
	dc.b $18,$28
	dc.b $10,  4
	dc.b $20,  2; 64
	dc.b   4,$40
	dc.b $18,$80
	dc.b $20,$10
	dc.b $10,$20
	dc.b $10,$30
	dc.b $10,$40
	dc.b $10,$50
	dc.b $10,  2; 80
	dc.b $10,  1
	dc.b   2,  8
	dc.b $20,$1C; 96
; ===========================================================================
; loc_3F666:
Touch_Boss:
	lea	Touch_Sizes(pc),a3
	move.w	x_pos(a0),d2
	move.w	y_pos(a0),d3
	subi.w	#8,d2
	moveq	#0,d5
	move.b	y_radius(a0),d5
	subq.b	#3,d5
	sub.w	d5,d3
	cmpi.b	#$4D,mapping_frame(a0)
	bne.s	loc_3F68E
	addi.w	#$C,d3
	moveq	#$A,d5

loc_3F68E:
	move.w	#$10,d4
	add.w	d5,d5
	lea	(Object_RAM+$400).w,a1
	move.w	#$6F,d6

loc_3F69C:
	move.b	collision_flags(a1),d0
	bne.s	loc_3F6AE

loc_3F6A2:
	lea	next_object(a1),a1 ; a1=object
	dbf	d6,loc_3F69C

	moveq	#0,d0
	rts
; ===========================================================================

loc_3F6AE:
	bsr.w	loc_3FA2C
	andi.w	#$3F,d0
	beq.s	loc_3F6A2
	add.w	d0,d0
	lea	(a3,d0.w),a2
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	x_pos(a1),d0
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_3F6D4
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	loc_3F6D8
	bra.s	loc_3F6A2
; ===========================================================================

loc_3F6D4:
	cmp.w	d4,d0
	bhi.s	loc_3F6A2

loc_3F6D8:
	moveq	#0,d1
	move.b	(a2)+,d1
	move.w	y_pos(a1),d0
	sub.w	d1,d0
	sub.w	d3,d0
	bcc.s	loc_3F6EE
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	Touch_ChkValue
	bra.s	loc_3F6A2
; ===========================================================================

loc_3F6EE:
	cmp.w	d5,d0
	bhi.s	loc_3F6A2
; loc_3F6F2:
Touch_ChkValue:
	move.b	collision_flags(a1),d1	; load touch response number
	andi.b	#$C0,d1			; is touch response $40 or higher?
	beq.w	Touch_Enemy		; if not, branch
	cmpi.b	#$C0,d1			; is touch response $C0 or higher?
	beq.w	loc_3F976		; if yes, branch
	tst.b	d1			; is touch response $80-$BF ?
	bmi.w	Touch_ChkHurt		; if yes, branch
	; touch response is $40-$7F
	move.b	collision_flags(a1),d0
	andi.b	#$3F,d0
	cmpi.b	#6,d0			; is touch response $46 ?
	beq.s	Touch_Monitor		; if yes, branch
	move.w	(MainCharacter+invulnerable_time).w,d0
	tst.w	(Two_player_mode).w
	beq.s	loc_3F728
	move.w	invulnerable_time(a0),d0

loc_3F728:
	cmpi.w	#$5A,d0
	bcc.w	return_3F73A
	move.b	#4,routine(a1)	; set the object's routine counter
	move.w	a0,parent(a1)

return_3F73A:
	rts
; ===========================================================================
; loc_3F73C:
Touch_Monitor:
	tst.w	y_vel(a0)	; is Sonic moving upwards?
	bpl.s	loc_3F768	; if not, branch
	move.w	y_pos(a0),d0
	subi.w	#$10,d0
	cmp.w	y_pos(a1),d0
	bcs.s	return_3F78A
	neg.w	y_vel(a0)	; reverse Sonic's y-motion
	move.w	#-$180,y_vel(a1)
	tst.b	routine_secondary(a1)
	bne.s	return_3F78A
	move.b	#4,routine_secondary(a1) ; set the monitor's routine counter
	rts
; ===========================================================================

loc_3F768:
	cmpa.w	#MainCharacter,a0
	beq.s	+
	tst.w	(Two_player_mode).w
	beq.s	return_3F78A
+
	cmpi.b	#2,anim(a0)
	bne.s	return_3F78A
	neg.w	y_vel(a0)	; reverse Sonic's y-motion
	move.b	#4,routine(a1)
	move.w	a0,parent(a1)

return_3F78A:
	rts
; ===========================================================================
; loc_3F78C:
Touch_Enemy:
	btst	#1,status_secondary(a0)	; is Sonic invincible?
	bne.s	+			; if yes, branch
	cmpi.b	#9,anim(a0)
	beq.s	+
	cmpi.b	#2,anim(a0)		; is Sonic rolling?
	bne.w	Touch_ChkHurt		; if not, branch
+
	btst	#6,render_flags(a1)
	beq.s	Touch_Enemy_Part2
	tst.b	objoff_32(a1)
	beq.s	return_3F7C6
	neg.w	x_vel(a0)
	neg.w	y_vel(a0)
	move.b	#0,collision_flags(a1)
	subq.b	#1,objoff_32(a1)

return_3F7C6:
	rts
; ---------------------------------------------------------------------------
; loc_3F7C8:
Touch_Enemy_Part2:
	tst.b	collision_property(a1)
	beq.s	Touch_KillEnemy
	neg.w	x_vel(a0)
	neg.w	y_vel(a0)
	move.b	#0,collision_flags(a1)
	subq.b	#1,collision_property(a1)
	bne.s	return_3F7E8
	bset	#7,status(a1)

return_3F7E8:
	rts
; ===========================================================================
; loc_3F7EA:
Touch_KillEnemy:
	bset	#7,status(a1)
	moveq	#0,d0
	move.w	(Chain_Bonus_counter).w,d0
	addq.w	#2,(Chain_Bonus_counter).w	; add 2 to chain bonus counter
	cmpi.w	#6,d0
	bcs.s	loc_3F802
	moveq	#6,d0

loc_3F802:
	move.w	d0,objoff_3E(a1)
	move.w	Enemy_Points(pc,d0.w),d0
	cmpi.w	#$20,(Chain_Bonus_counter).w	; have 16 enemies been destroyed?
	bcs.s	loc_3F81C			; if not, branch
	move.w	#1000,d0			; fix bonus to 10000 points
	move.w	#$A,objoff_3E(a1)

loc_3F81C:
	movea.w	a0,a3
	bsr.w	AddPoints2
	_move.b	#$27,0(a1) ; load obj
	move.b	#0,routine(a1)
	tst.w	y_vel(a0)
	bmi.s	loc_3F844
	move.w	y_pos(a0),d0
	cmp.w	y_pos(a1),d0
	bcc.s	loc_3F84C
	neg.w	y_vel(a0)
	rts
; ===========================================================================

loc_3F844:
	addi.w	#$100,y_vel(a0)
	rts
; ===========================================================================

loc_3F84C:
	subi.w	#$100,y_vel(a0)
	rts
; ===========================================================================
; byte_3F854:
Enemy_Points:	dc.w 10, 20, 50, 100
; ===========================================================================

loc_3F85C:
	bset	#7,status(a1)

; ---------------------------------------------------------------------------
; Subroutine for checking if Sonic/Tails should be hurt and hurting them if so
; note: sonic or tails must be at a0
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_3F862:
Touch_ChkHurt:
	btst	#1,status_secondary(a0)	; is Sonic invincible?
	beq.s	Touch_Hurt		; if not, branch
; loc_3F86A:
Touch_NoHurt:
	moveq	#-1,d0
	rts
; ---------------------------------------------------------------------------
; loc_3F86E:
Touch_Hurt:
	nop
	tst.w	invulnerable_time(a0)
	bne.s	Touch_NoHurt
	movea.l	a1,a2

; End of function TouchResponse
; continue straight to HurtCharacter

; ---------------------------------------------------------------------------
; Hurting Sonic/Tails subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_3F878: HurtSonic:
HurtCharacter:
	move.w	(Ring_count).w,d0
	cmpa.w	#MainCharacter,a0
	beq.s	loc_3F88C
	tst.w	(Two_player_mode).w
	beq.s	Hurt_Sidekick
	move.w	(Ring_count_2P).w,d0

loc_3F88C:
	btst	#0,status_secondary(a0)
	bne.s	Hurt_Shield
	tst.w	d0
	beq.w	KillCharacter
	jsr	(SingleObjLoad).l
	bne.s	Hurt_Shield
	_move.b	#$37,0(a1) ; load obj
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.w	a0,parent(a1)

; loc_3F8B8:
Hurt_Shield:

	bclr	#0,status_secondary(a0) ; remove shield

; loc_3F8BE:
Hurt_Sidekick:

	move.b	#4,routine(a0)
	bsr.w	JmpTo_Sonic_ResetOnFloor_Part2
	bset	#1,status(a0)
	move.w	#-$400,y_vel(a0) ; make Sonic bounce away from the object
	move.w	#-$200,x_vel(a0)
	btst	#6,status(a0)	; underwater?
	beq.s	Hurt_Reverse	; if not, branch
	move.w	#-$200,y_vel(a0) ; bounce slower
	move.w	#-$100,x_vel(a0)

; loc_3F8EE:
Hurt_Reverse:
	move.w	x_pos(a0),d0
	cmp.w	x_pos(a2),d0
	bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
	neg.w	x_vel(a0)	; if Sonic is right of the object, reverse

; loc_3F8FC:
Hurt_ChkSpikes:
	move.w	#0,inertia(a0)
	move.b	#$1A,anim(a0)
	move.w	#$78,invulnerable_time(a0)
	move.w	#$23+$80,d0	; load normal damage sound
	cmpi.b	#$36,(a2)	; was damage caused by spikes?
	bne.s	Hurt_Sound	; if not, branch
	move.w	#$26+$80,d0	; load spikes damage sound

; loc_3F91C:
Hurt_Sound:
	jsr	(PlaySound).l
	moveq	#-1,d0
	rts
; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to kill Sonic or Tails
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_3F926: KillSonic:
KillCharacter:
	tst.w	(Debug_placement_mode).w
	bne.s	loc_3F972
	clr.b	status_secondary(a0)
	move.b	#6,routine(a0)
	bsr.w	JmpTo_Sonic_ResetOnFloor_Part2
	bset	#1,status(a0)
	move.w	#-$700,y_vel(a0)
	move.w	#0,x_vel(a0)
	move.w	#0,inertia(a0)
	move.b	#$18,anim(a0)
	bset	#7,art_tile(a0)
	move.w	#$A3,d0
	cmpi.b	#$36,(a2)
	bne.s	loc_3F96C
	move.w	#$A6,d0

loc_3F96C:
	jsr	(PlaySound).l

loc_3F972:
	moveq	#-1,d0
	rts
; ===========================================================================

loc_3F976:
	move.b	collision_flags(a1),d1
	andi.b	#$3F,d1
	cmpi.b	#6,d1
	beq.s	loc_3FA00
	cmpi.b	#7,d1
	beq.w	loc_3FA18
	cmpi.b	#$B,d1
	beq.s	BranchTo_loc_3F85C
	cmpi.b	#$A,d1
	beq.s	loc_3FA00
	cmpi.b	#$C,d1
	beq.s	loc_3F9CE
	cmpi.b	#$14,d1
	beq.s	loc_3FA00
	cmpi.b	#$15,d1
	beq.s	loc_3FA00
	cmpi.b	#$16,d1
	beq.s	loc_3FA00
	cmpi.b	#$17,d1
	beq.s	loc_3FA00
	cmpi.b	#$18,d1
	beq.s	loc_3FA00
	cmpi.b	#$1A,d1
	beq.s	loc_3FA22
	cmpi.b	#$21,d1
	beq.s	loc_3FA12
	rts
; ===========================================================================

BranchTo_loc_3F85C 
	bra.w	loc_3F85C
; ===========================================================================

loc_3F9CE:
	sub.w	d0,d5
	cmpi.w	#8,d5
	bcc.s	BranchTo_Touch_Enemy
	move.w	x_pos(a1),d0
	subq.w	#4,d0
	btst	#0,status(a1)
	beq.s	loc_3F9E8
	subi.w	#$10,d0

loc_3F9E8:
	sub.w	d2,d0
	bcc.s	loc_3F9F4
	addi.w	#$18,d0
	bcs.s	BranchTo_Touch_ChkHurt
	bra.s	BranchTo_Touch_Enemy
; ===========================================================================

loc_3F9F4:
	cmp.w	d4,d0
	bhi.s	BranchTo_Touch_Enemy

BranchTo_Touch_ChkHurt 
	bra.w	Touch_ChkHurt
; ===========================================================================

BranchTo_Touch_Enemy 
	bra.w	Touch_Enemy
; ===========================================================================

loc_3FA00:
	move.w	a0,d1
	subi.w	#-$5000,d1
	beq.s	loc_3FA0C
	addq.b	#1,collision_property(a1)

loc_3FA0C:
	addq.b	#1,collision_property(a1)
	rts
; ===========================================================================

loc_3FA12:
	addq.b	#1,collision_property(a1)
	rts
; ===========================================================================

loc_3FA18:
	move.b	#2,collision_property(a1)
	bra.w	Touch_Enemy
; ===========================================================================

loc_3FA22:
	move.b	#-1,collision_property(a1)
	bra.w	Touch_Enemy
; ===========================================================================

loc_3FA2C:
	cmpi.b	#$F,d0
	bne.s	return_3FA46
	moveq	#0,d0
	move.b	(Current_Boss_ID).w,d0
	beq.s	return_3FA46
	subq.w	#1,d0
	add.w	d0,d0
	move.w	off_3FA48(pc,d0.w),d0
	jmp	off_3FA48(pc,d0.w)
; ===========================================================================

return_3FA46:
	rts
; ===========================================================================
off_3FA48:
	dc.w loc_3FA5A-off_3FA48
	dc.w loc_3FA5A-off_3FA48; 1
	dc.w loc_3FA60-off_3FA48; 2
	dc.w loc_3FAC8-off_3FA48; 3
	dc.w loc_3FAFE-off_3FA48; 4
	dc.w loc_3FB8A-off_3FA48; 5
	dc.w loc_3FBC4-off_3FA48; 6
	dc.w loc_3FBCA-off_3FA48; 7
	dc.w return_3FA5E-off_3FA48; 8
; ===========================================================================

loc_3FA5A:
	move.b	collision_flags(a1),d0

return_3FA5E:
	rts
; ===========================================================================

loc_3FA60:
	tst.b	($FFFFF73F).w
	bne.s	loc_3FA68
	rts
; ===========================================================================

loc_3FA68:
	move.w	d7,-(sp)
	moveq	#0,d1
	move.b	objoff_15(a1),d1
	subq.b	#2,d1
	cmpi.b	#7,d1
	bgt.s	loc_3FAA8
	move.w	d1,d7
	add.w	d7,d7
	move.w	x_pos(a1),d0
	btst	#0,render_flags(a1)
	beq.s	loc_3FA8E
	add.w	word_3FAB0(pc,d7.w),d0
	bra.s	loc_3FA92
; ===========================================================================

loc_3FA8E:
	sub.w	word_3FAB0(pc,d7.w),d0

loc_3FA92:
	move.b	byte_3FAC0(pc,d1.w),d1
	ori.l	#$40000,d1
	move.w	y_pos(a1),d7
	subi.w	#$1C,d7
	bsr.w	loc_3FC4C

loc_3FAA8:
	move.w	(sp)+,d7
	move.b	collision_flags(a1),d0
	rts
; ===========================================================================
word_3FAB0:
	dc.w   $1C
	dc.w   $20	; 1
	dc.w   $28	; 2
	dc.w   $34	; 3
	dc.w   $3C	; 4
	dc.w   $44	; 5
	dc.w   $60	; 6
	dc.w   $70	; 7
byte_3FAC0:
	dc.b   4
	dc.b   4	; 1
	dc.b   8	; 2
	dc.b  $C	; 3
	dc.b $14	; 4
	dc.b $1C	; 5
	dc.b $24	; 6
	dc.b   8	; 7
; ===========================================================================

loc_3FAC8:
	move.w	d7,-(sp)
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	tst.b	($FFFFF73F).w
	beq.s	loc_3FAF6
	addi.w	#4,d7
	subi.w	#$50,d0
	btst	#0,render_flags(a1)
	beq.s	loc_3FAEC
	addi.w	#$A0,d0

loc_3FAEC:
	move.l	#$140010,d1
	bsr.w	loc_3FC4C

loc_3FAF6:
	move.w	(sp)+,d7
	move.b	collision_flags(a1),d0
	rts
; ===========================================================================

loc_3FAFE:
	sf	objoff_38(a1)
	cmpi.b	#1,($FFFFF73F).w
	blt.s	loc_3FB46
	move.w	d7,-(sp)
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	addi.w	#4,d7
	subi.w	#$30,d0
	btst	#0,render_flags(a1)
	beq.s	loc_3FB28
	addi.w	#$60,d0

loc_3FB28:
	move.l	#$40004,d1
	bsr.w	loc_3FC4C
	move.w	(sp)+,d7
	move.b	collision_flags(a1),d0
	cmpi.w	#$78,invulnerable_time(a0)
	bne.s	return_3FB44
	st	objoff_38(a1)

return_3FB44:
	rts
; ===========================================================================

loc_3FB46:
	move.w	d7,-(sp)
	movea.w	#$14,a5
	movea.w	#0,a4

loc_3FB50:
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	subi.w	#$20,d7
	add.w	a5,d0
	move.l	#$100004,d1
	bsr.w	loc_3FC4C
	movea.w	#-$14,a5
	adda.w	#1,a4
	cmpa.w	#1,a4
	beq.s	loc_3FB50
	move.w	(sp)+,d7
	move.b	collision_flags(a1),d0
	cmpi.w	#$78,invulnerable_time(a0)
	bne.s	return_3FB88
	st	objoff_38(a1)

return_3FB88:
	rts
; ===========================================================================

loc_3FB8A:
	tst.b	($FFFFF73F).w
	beq.s	loc_3FBBE
	move.w	d7,-(sp)
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	addi.w	#$28,d7
	move.l	#$80010,d1
	cmpi.b	#1,($FFFFF73F).w
	beq.s	loc_3FBB8
	move.w	#$20,d1
	subi.w	#8,d7
	addi.w	#4,d0

loc_3FBB8:
	bsr.w	loc_3FC4C
	move.w	(sp)+,d7

loc_3FBBE:
	move.b	collision_flags(a1),d0
	rts
; ===========================================================================

loc_3FBC4:
	move.b	collision_flags(a1),d0
	rts
; ===========================================================================

loc_3FBCA:
	cmpi.b	#1,($FFFFF73F).w
	blt.s	loc_3FC46
	beq.s	loc_3FC1C
	move.w	d7,-(sp)
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	moveq	#0,d1
	move.b	objoff_B(a1),d1
	subq.b	#2,d1
	add.w	d1,d1
	btst	#0,render_flags(a1)
	beq.s	loc_3FBF6
	add.w	word_3FC10(pc,d1.w),d0
	bra.s	loc_3FBFA
; ===========================================================================

loc_3FBF6:
	sub.w	word_3FC10(pc,d1.w),d0

loc_3FBFA:
	sub.w	word_3FC10+2(pc,d1.w),d7
	move.l	#$60008,d1
	bsr.w	loc_3FC4C
	move.w	(sp)+,d7
	move.w	#0,d0
	rts
; ===========================================================================
word_3FC10:
	dc.w   $14,    0
	dc.w   $10,  $10
	dc.w   $10,$FFF0
; ===========================================================================

loc_3FC1C:
	move.w	d7,-(sp)
	move.w	x_pos(a1),d0
	move.w	y_pos(a1),d7
	moveq	#$10,d1
	btst	#0,render_flags(a1)
	beq.s	loc_3FC32
	neg.w	d1

loc_3FC32:
	sub.w	d1,d0
	move.l	#$8000C,d1
	bsr.w	loc_3FC7A
	move.w	(sp)+,d7
	move.b	#0,d0
	rts
; ===========================================================================

loc_3FC46:
	move.b	collision_flags(a1),d0
	rts
; ===========================================================================

loc_3FC4C:
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_3FC5A
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	loc_3FC5E

return_3FC58:
	rts
; ===========================================================================

loc_3FC5A:
	cmp.w	d4,d0
	bhi.s	return_3FC58

loc_3FC5E:
	swap	d1
	sub.w	d1,d7
	sub.w	d3,d7
	bcc.s	loc_3FC70
	add.w	d1,d1
	add.w	d1,d7
	bcs.w	Touch_ChkHurt
	bra.s	return_3FC58
; ===========================================================================

loc_3FC70:
	cmp.w	d5,d7
	bhi.w	return_3FC58
	bra.w	Touch_ChkHurt
; ===========================================================================

loc_3FC7A:
	sub.w	d1,d0
	sub.w	d2,d0
	bcc.s	loc_3FC88
	add.w	d1,d1
	add.w	d1,d0
	bcs.s	loc_3FC8C

return_3FC86:
	rts
; ===========================================================================

loc_3FC88:
	cmp.w	d4,d0
	bhi.s	return_3FC86

loc_3FC8C:
	swap	d1
	sub.w	d1,d7
	sub.w	d3,d7
	bcc.s	loc_3FC9E
	add.w	d1,d1
	add.w	d1,d7
	bcs.w	loc_3FCA4
	bra.s	return_3FC86
; ===========================================================================

loc_3FC9E:
	cmp.w	d5,d7
	bhi.w	return_3FC86

loc_3FCA4:
	neg.w	x_vel(a0)
	neg.w	y_vel(a0)
	rts
; ===========================================================================
	nop

JmpTo_Sonic_ResetOnFloor_Part2 
	jmp	Sonic_ResetOnFloor_Part2
; ===========================================================================

JmpTo_loc_174C8 
	jmp	loc_174C8
; ===========================================================================

JmpTo_loc_170BA 
	jmp	loc_170BA
; ===========================================================================
	align 4
; ===========================================================================

loc_3FCC4:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	PLC_DYNANM+2(pc,d0.w),d1
	lea	PLC_DYNANM(pc,d1.w),a2
	move.w	PLC_DYNANM(pc,d0.w),d0
	jmp	PLC_DYNANM(pc,d0.w)
; ===========================================================================
	rts
; ===========================================================================




; ---------------------------------------------------------------------------
; ZONE ANIMATION PROCEDURES AND SCRIPTS
;
; Each zone gets two entries in this jump table. The first entry points to the
; zone's animation procedure (usually Dynamic_Normal, but some zones have special
; procedures for complicated animations). The second points to the zone's animation
; script.
;
; Note that Animated_Null is not a valid animation script, so don't pair it up
; with anything except Dynamic_Null, or bad things will happen (for example, a bus error exception).
; ---------------------------------------------------------------------------
PLC_DYNANM:				; Zone ID
	dc.w Dynamic_Normal-PLC_DYNANM	; $00
	dc.w Animated_EHZ-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $01
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $02
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $03
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $04
	dc.w Animated_MTZ-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $05
	dc.w Animated_MTZ-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $06
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_HTZ-PLC_DYNANM	; $07
	dc.w Animated_HTZ-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $08
	dc.w Animated_OOZ-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $09
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $0A
	dc.w Animated_OOZ2-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $0B
	dc.w Animated_Null-PLC_DYNANM

	dc.w Dynamic_CNZ-PLC_DYNANM	; $0C
	dc.w Animated_CNZ-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $0D
	dc.w Animated_CPZ-PLC_DYNANM

	dc.w Dynamic_Normal-PLC_DYNANM	; $0F
	dc.w Animated_DEZ-PLC_DYNANM

	dc.w Dynamic_ARZ-PLC_DYNANM	; $10
	dc.w Animated_ARZ-PLC_DYNANM

	dc.w Dynamic_Null-PLC_DYNANM	; $11
	dc.w Animated_Null-PLC_DYNANM	; yes, zone $11
; ===========================================================================

Dynamic_Null:
	rts
; ===========================================================================

Dynamic_HTZ:
	tst.w	(Two_player_mode).w
	bne.w	Dynamic_Normal
	lea	($FFFFF7F0).w,a3
	moveq	#0,d0
	move.w	(Camera_X_pos).w,d1
	neg.w	d1
	asr.w	#3,d1
	move.w	(Camera_X_pos).w,d0
	lsr.w	#4,d0
	add.w	d1,d0
	subi.w	#$10,d0
	divu.w	#$30,d0
	swap	d0
	cmp.b	1(a3),d0
	beq.s	BranchTo_loc_3FE5C
	move.b	d0,1(a3)
	move.w	d0,d2
	andi.w	#7,d0
	add.w	d0,d0
	add.w	d0,d0
	add.w	d0,d0
	move.w	d0,d1
	add.w	d0,d0
	add.w	d1,d0
	andi.w	#$38,d2
	lsr.w	#2,d2
	add.w	d2,d0
	lea	word_3FD9C(pc,d0.w),a4
	moveq	#5,d5
	move.w	#-$6000,d4

loc_3FD7C:
	moveq	#-1,d1
	move.w	(a4)+,d1
	andi.l	#$FFFFFF,d1
	move.w	d4,d2
	moveq	#$40,d3
	jsr	(QueueDMATransfer).l
	addi.w	#$80,d4
	dbf	d5,loc_3FD7C

BranchTo_loc_3FE5C 
	bra.w	loc_3FE5C
; ===========================================================================
; HTZ mountain art main RAM addresses?
word_3FD9C:
	dc.w   $80, $180, $280, $580, $600, $700	; 6
	dc.w   $80, $180, $280, $580, $600, $700	; 12
	dc.w  $980, $A80, $B80, $C80, $D00, $D80	; 18
	dc.w  $980, $A80, $B80, $C80, $D00, $D80	; 24
	dc.w  $E80,$1180,$1200,$1280,$1300,$1380	; 30
	dc.w  $E80,$1180,$1200,$1280,$1300,$1380	; 36
	dc.w $1400,$1480,$1500,$1580,$1600,$1900	; 42
	dc.w $1400,$1480,$1500,$1580,$1600,$1900	; 48
	dc.w $1D00,$1D80,$1E00,$1F80,$2400,$2580	; 54
	dc.w $1D00,$1D80,$1E00,$1F80,$2400,$2580	; 60
	dc.w $2600,$2680,$2780,$2B00,$2F00,$3280	; 66
	dc.w $2600,$2680,$2780,$2B00,$2F00,$3280	; 72
	dc.w $3600,$3680,$3780,$3C80,$3D00,$3F00	; 78
	dc.w $3600,$3680,$3780,$3C80,$3D00,$3F00	; 84
	dc.w $3F80,$4080,$4480,$4580,$4880,$4900	; 90
	dc.w $3F80,$4080,$4480,$4580,$4880,$4900	; 96
; ===========================================================================

loc_3FE5C:
	lea	($FFFFA800).w,a1
	move.w	(Camera_X_pos).w,d2
	neg.w	d2
	asr.w	#3,d2
	move.l	a2,-(sp)
	lea	(ArtUnc_HTZClouds).l,a0
	lea	($FFFF7C00).l,a2
	moveq	#$F,d1

loc_3FE78:
	move.w	(a1)+,d0
	neg.w	d0
	add.w	d2,d0
	andi.w	#$1F,d0
	lsr.w	#1,d0
	bcc.s	loc_3FE8A
	addi.w	#$200,d0

loc_3FE8A:
	lea	(a0,d0.w),a4
	lsr.w	#1,d0
	bcs.s	loc_3FEB4
	move.l	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.l	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.l	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.l	(a4)+,(a2)+
	suba.w	#$C0,a2
	adda.w	#$20,a0
	dbf	d1,loc_3FE78
	bra.s	loc_3FEEC
; ===========================================================================

loc_3FEB4:
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	adda.w	#$3C,a2
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	move.b	(a4)+,(a2)+
	suba.w	#$C0,a2
	adda.w	#$20,a0
	dbf	d1,loc_3FE78

loc_3FEEC:
	move.l	#$FF7C00,d1
	move.w	#-$5D00,d2
	move.w	#$80,d3
	jsr	(QueueDMATransfer).l
	movea.l	(sp)+,a2
	addq.w	#2,a3
	bra.w	loc_3FF30
; ===========================================================================

Dynamic_CNZ:
	tst.b	(Current_Boss_ID).w
	beq.s	loc_3FF10
	rts
; ===========================================================================

loc_3FF10:
	lea	(Animated_CNZ).l,a2
	tst.w	(Two_player_mode).w
	beq.s	Dynamic_Normal
	lea	(word_40160).l,a2
	bra.s	Dynamic_Normal
; ===========================================================================

Dynamic_ARZ:
	tst.b	(Current_Boss_ID).w
	beq.s	Dynamic_Normal
	rts
; ===========================================================================

Dynamic_Normal:
	lea	($FFFFF7F0).w,a3

loc_3FF30:
	move.w	(a2)+,d6

loc_3FF32:
	subq.b	#1,(a3)
	bcc.s	loc_3FF78
	moveq	#0,d0
	move.b	1(a3),d0
	cmp.b	6(a2),d0
	bcs.s	loc_3FF48
	moveq	#0,d0
	move.b	d0,1(a3)

loc_3FF48:
	addq.b	#1,1(a3)
	move.b	(a2),(a3)
	bpl.s	loc_3FF56
	add.w	d0,d0
	move.b	9(a2,d0.w),(a3)

loc_3FF56:
	move.b	8(a2,d0.w),d0
	lsl.w	#5,d0
	move.w	4(a2),d2
	move.l	(a2),d1
	andi.l	#$FFFFFF,d1
	add.l	d0,d1
	moveq	#0,d3
	move.b	7(a2),d3
	lsl.w	#4,d3
	jsr	(QueueDMATransfer).l

loc_3FF78:
	move.b	6(a2),d0
	tst.b	(a2)
	bpl.s	loc_3FF82
	add.b	d0,d0

loc_3FF82:
	addq.b	#1,d0
	andi.w	#$FE,d0
	lea	8(a2,d0.w),a2
	addq.w	#2,a3
	dbf	d6,loc_3FF32
	rts
; ===========================================================================
; ZONE ANIMATION SCRIPTS
;
; The Dynamic_Normal subroutine uses these scripts to reload certain tiles,
; thus animating them. All the relevant art must be uncompressed, because
; otherwise the subroutine would spend so much time waiting for the art to be
; decompressed that the VBLANK window would close before all the animating was done.

zoneanimdecl macro unk1, mapaddr,artaddr,numentries,unk2
	dc.l (unk1&$FF)<<24|mapaddr
	dc.w artaddr
	dc.b numentries, unk2
    endm

; loc_3FF94:
Animated_EHZ:
	dc.w 4			; Number of scripts for this zone (-1)
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers1, $7280,   6, 2
	dc.b   0,$7F		; Start of the script proper
	dc.b   2,$13
	dc.b   0,  7
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2,  7
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers2, $72C0,   8, 2
	dc.b   2,$7F
	dc.b   0, $B
	dc.b   2, $B
	dc.b   0, $B
	dc.b   2,  5
	dc.b   0,  5
	dc.b   2,  5
	dc.b   0,  5
	; Flowers
	zoneanimdecl  7, ArtUnc_Flowers3, $7300,   2, 2
	dc.b   0
	dc.b   2
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers4, $7340,   8, 2
	dc.b   0,$7F
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2, $B
	dc.b   0, $B
	dc.b   2, $B
	; Pulsing thing against checkered background
	zoneanimdecl -1, ArtUnc_EHZPulseBall, $7380,   6, 2
	dc.b   0,$17
	dc.b   2,  9
	dc.b   4, $B
	dc.b   6,$17
	dc.b   4, $B
	dc.b   2,  9

Animated_MTZ:
	dc.w 3
	; Spinning metal cylinder
	zoneanimdecl 0, ArtUnc_MTZCylinder, $6980,   8,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $40
	dc.b $50
	dc.b $60
	dc.b $70
	; lava
	zoneanimdecl $D, ArtUnc_Lava, $6800,   6,$C
	dc.b   0
	dc.b  $C
	dc.b $18
	dc.b $24
	dc.b $18
	dc.b  $C
	; MTZ background animated section
	zoneanimdecl -1, ArtUnc_MTZAnimBack, $6B80,   4, 6
	dc.b   0,$13
	dc.b   6,  7
	dc.b  $C,$13
	dc.b   6,  7
	; MTZ background animated section
	zoneanimdecl -1, ArtUnc_MTZAnimBack, $6C40,   4, 6
	dc.b  $C,$13
	dc.b   6,  7
	dc.b   0,$13
	dc.b   6,  7

Animated_HTZ:
	dc.w 4
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers1, $7280,   6, 2
	dc.b   0,$7F
	dc.b   2,$13
	dc.b   0,  7
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2,  7
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers2, $72C0,   8, 2
	dc.b   2,$7F
	dc.b   0, $B
	dc.b   2, $B
	dc.b   0, $B
	dc.b   2,  5
	dc.b   0,  5
	dc.b   2,  5
	dc.b   0,  5
	; Flowers
	zoneanimdecl  7, ArtUnc_Flowers3, $7300,   2, 2
	dc.b   0
	dc.b   2
	; Flowers
	zoneanimdecl -1, ArtUnc_Flowers4, $7340,   8, 2
	dc.b   0,$7F
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2,  7
	dc.b   0,  7
	dc.b   2, $B
	dc.b   0, $B
	dc.b   2, $B
	; Pulsing thing against checkered background
	zoneanimdecl -1, ArtUnc_EHZPulseBall, $7380,   6, 2
	dc.b   0,$17
	dc.b   2,  9
	dc.b   4, $B
	dc.b   6,$17
	dc.b   4, $B
	dc.b   2,  9

; word_4009C: Animated_HPZ:
Animated_OOZ:
	dc.w 2
	; Pulsing ball from OOZ
	zoneanimdecl  8, ArtUnc_OOZPulseBall, $5D00,   6, 8
	dc.b   0
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b $10
	dc.b   8
	; Pulsing ball from OOZ
	zoneanimdecl  8, ArtUnc_OOZPulseBall, $5E00,   6, 8
	dc.b   8
	dc.b $10
	dc.b $10
	dc.b   8
	dc.b   0
	dc.b   0
	; Pulsing ball from OOZ
	zoneanimdecl  8, ArtUnc_OOZPulseBall, $5F00,   6, 8
	dc.b $10
	dc.b   8
	dc.b   0
	dc.b   0
	dc.b   8
	dc.b $10

; word_400C8 ; Animated_OOZ:
Animated_OOZ2:
	dc.w 4
	; Pulsing ball from OOZ
	zoneanimdecl  -1, ArtUnc_OOZPulseBall, $56C0,   4, 4
	dc.b   0
	dc.b  $B
	dc.b   4
	dc.b   5
	dc.b   8
	dc.b   9
	dc.b   4
	dc.b   3
	; Square rotating around ball in OOZ
	zoneanimdecl   6, ArtUnc_OOZSquareBall1, $5740,   4, 4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	; Square rotating around ball
	zoneanimdecl   6, ArtUnc_OOZSquareBall2, $57C0,   4, 4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	; Oil
	zoneanimdecl $11, ArtUnc_Oil1, $5840,   6,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $20
	dc.b $10
	; Oil
	zoneanimdecl $11, ArtUnc_Oil2, $5A40,   6,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $20
	dc.b $10

Animated_CNZ:
	dc.w 1
	; Flipping foreground section in CNZ
	zoneanimdecl  -1, ArtUnc_OOZFlipTiles, $A800, $10,$10
	dc.b   0,$C7
	dc.b $10,  5
	dc.b $20,  5
	dc.b $30,  5
	dc.b $40,$C7
	dc.b $50,  5
	dc.b $20,  5
	dc.b $60,  5
	dc.b   0,  5
	dc.b $10,  5
	dc.b $20,  5
	dc.b $30,  5
	dc.b $40,  5
	dc.b $50,  5
	dc.b $20,  5
	dc.b $60,  5
	; Flipping foreground section in CNZ
	zoneanimdecl  -1, ArtUnc_OOZFlipTiles, $6600, $10,$10
	dc.b $70,  5
	dc.b $80,  5
	dc.b $20,  5
	dc.b $90,  5
	dc.b $A0,  5
	dc.b $B0,  5
	dc.b $20,  5
	dc.b $C0,  5
	dc.b $70,$C7
	dc.b $80,  5
	dc.b $20,  5
	dc.b $90,  5
	dc.b $A0,$C7
	dc.b $B0,  5
	dc.b $20,  5
	dc.b $C0,  5

word_40160:
	dc.w 1
	; Flipping foreground section in CNZ
	zoneanimdecl  -1, ArtUnc_OOZFlipTiles, $E800, $10,$10
	dc.b   0,$C7
	dc.b $10,  5
	dc.b $20,  5
	dc.b $30,  5
	dc.b $40,$C7
	dc.b $50,  5
	dc.b $20,  5
	dc.b $60,  5
	dc.b   0,  5
	dc.b $10,  5
	dc.b $20,  5
	dc.b $30,  5
	dc.b $40,  5
	dc.b $50,  5
	dc.b $20,  5
	dc.b $60,  5
	; Flipping foreground section in CNZ
	zoneanimdecl  -1, ArtUnc_OOZFlipTiles, $6600, $10,$10
	dc.b $70,  5
	dc.b $80,  5
	dc.b $20,  5
	dc.b $90,  5
	dc.b $A0,  5
	dc.b $B0,  5
	dc.b $20,  5
	dc.b $C0,  5
	dc.b $70,$C7
	dc.b $80,  5
	dc.b $20,  5
	dc.b $90,  5
	dc.b $A0,$C7
	dc.b $B0,  5
	dc.b $20,  5
	dc.b $C0,  5

Animated_CPZ:
	dc.w 0
	; Animated background section in CPZ and DEZ
	zoneanimdecl   4, ArtUnc_CPZAnimBack, $6E00,   8, 2
	dc.b   0
	dc.b   2
	dc.b   4
	dc.b   6
	dc.b   8
	dc.b  $A
	dc.b  $C
	dc.b  $E

Animated_DEZ:
	dc.w 0
	; Animated background section in CPZ and DEZ
	zoneanimdecl   4, ArtUnc_CPZAnimBack, $64C0,   8, 2
	dc.b   0
	dc.b   2
	dc.b   4
	dc.b   6
	dc.b   8
	dc.b  $A
	dc.b  $C
	dc.b  $E

Animated_ARZ:
	dc.w 3
	; Waterfall patterns
	zoneanimdecl   5, ArtUnc_Waterfall1, $AAE0,   2, 4
	dc.b   0
	dc.b   4
	; Waterfall patterns
	zoneanimdecl   5, ArtUnc_Waterfall1, $8600,   2, 4
	dc.b   4
	dc.b   0
	; Waterfall patterns
	zoneanimdecl   5, ArtUnc_Waterfall2, $8580,   2, 4
	dc.b   0
	dc.b   4
	; Waterfall patterns
	zoneanimdecl   5, ArtUnc_Waterfall3, $8500,   2, 4
	dc.b   0
	dc.b   4

Animated_Null:
	; invalid
; ===========================================================================

; ---------------------------------------------------------------------------
; Unused mystery function
; In CPZ, within a certain range of camera X coordinates spanning
; exactly 2 screens (a boss fight or cutscene?),
; once every 8 frames, make the entire screen refresh and do... SOMETHING...
; (in 2 separate 512-byte blocks of memory, move around a bunch of bytes)
; Maybe some abandonded scrolling effect?
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_40200:
	cmpi.b	#$D,(Current_Zone).w
	beq.s	loc_4020A

return_40208:
	rts
; ===========================================================================

loc_4020A:
	move.w	(Camera_X_pos).w,d0
	cmpi.w	#$1940,d0
	bcs.s	return_40208
	cmpi.w	#$1F80,d0
	bcc.s	return_40208
	subq.b	#1,($FFFFF72D).w
	bpl.s	return_40208
	move.b	#7,($FFFFF72D).w
	move.b	#1,(Dirty_flag).w
	lea	($FFFF7500).l,a1 ; unknown, $FFFF7500 - $FFFF7700
	bsr.s	+
	lea	($FFFF7D00).l,a1 ; unknown, $FFFF7D00 - $FFFF7F00
+
	move.w	#7,d1

-	move.w	(a1),d0
    rept 3
      rept 7
	move.w	2(a1),(a1)+	; +42 bytes
      endm
	move.w	$72(a1),(a1)+	; +6
	adda.w	#$70,a1		; +336
    endm
      rept 7
	move.w	2(a1),(a1)+	; +14
      endm
	move.w	d0,(a1)+ 	; +2 ... subsubtotal = 400 bytes
	suba.w	#$180,a1 	; -384 ... subtotal = -16 bytes
	dbf	d1,- ; now do whatever the hell that was 7 more times
				; 400 + 7 * (-16) = 512 byte range was affected
	rts
; ===========================================================================

loc_402D4:
	cmpi.b	#7,(Current_Zone).w
	bne.s	loc_402EC
	bsr.w	loc_407C0
	move.b	#-1,($FFFFF7F1).w
	move.w	#-1,($FFFFA820).w

loc_402EC:
	cmpi.b	#$D,(Current_Zone).w
	bne.s	loc_402FA
	move.b	#-1,($FFFFF7F1).w

loc_402FA:
	moveq	#0,d0
	move.b	(Current_Zone).w,d0
	add.w	d0,d0
	move.w	AnimPatMaps(pc,d0.w),d0
	lea	AnimPatMaps(pc,d0.w),a0
	tst.w	(Two_player_mode).w
	beq.s	loc_4031E
	cmpi.b	#$C,(Current_Zone).w
	bne.s	loc_4031E
	lea	(APM_CNZ2P).l,a0

loc_4031E:
	tst.w	(a0)
	beq.s	return_40336
	lea	(Block_Table).w,a1
	adda.w	(a0)+,a1
	move.w	(a0)+,d1
	tst.w	(Two_player_mode).w
	bne.s	loc_40338

loc_40330:
	move.w	(a0)+,(a1)+
	dbf	d1,loc_40330

return_40336:
	rts
; ===========================================================================

loc_40338:
	move.w	(a0)+,d0
	move.w	d0,d1
	andi.w	#$F800,d0
	andi.w	#$7FF,d1
	lsr.w	#1,d1
	or.w	d1,d0
	move.w	d0,(a1)+
	dbf	d1,loc_40338
	rts
; ===========================================================================

; --------------------------------------------------------------------------------------
; Animated Pattern Mappings (16x16)
; --------------------------------------------------------------------------------------
; off_40350:
AnimPatMaps:
	dc.w APM16_EHZ - AnimPatMaps ;  0
	dc.w APM_Null - AnimPatMaps  ;  1
	dc.w APM_Null - AnimPatMaps  ;  2
	dc.w APM_Null - AnimPatMaps  ;  3
	dc.w APM16_MTZ - AnimPatMaps ;  4
	dc.w APM16_MTZ - AnimPatMaps ;  5
	dc.w APM_Null - AnimPatMaps  ;  6
	dc.w APM16_EHZ - AnimPatMaps ;  7
	dc.w APM_HPZ - AnimPatMaps   ;  8
	dc.w APM_Null - AnimPatMaps  ;  9
	dc.w APM_OOZ - AnimPatMaps   ; $A
	dc.w APM_Null - AnimPatMaps  ; $B
	dc.w APM_CNZ - AnimPatMaps   ; $C
	dc.w APM_CPZ - AnimPatMaps   ; $D
	dc.w APM_DEZ - AnimPatMaps   ; $E
	dc.w APM_ARZ - AnimPatMaps   ; $F
	dc.w APM_Null - AnimPatMaps  ;$10
; byte_40372:
APM16_EHZ:	BINCLUDE	"mappings/16x16/AnimEHZ.bin"

; byte_403EE:
APM16_MTZ:	BINCLUDE	"mappings/16x16/AnimMTZ.bin"

; byte_404C2:
APM_HPZ:	BINCLUDE	"mappings/16x16/AnimHPZ.bin"

; byte_405B6:
APM_OOZ:	BINCLUDE	"mappings/16x16/AnimOOZ.bin"

; byte_4061A:
APM_CNZ:	BINCLUDE	"mappings/16x16/AnimCNZ.bin"

; byte_406BE:
APM_CNZ2P:	BINCLUDE	"mappings/16x16/AnimCNZ2P.bin"

; byte_40762:
APM_CPZ:	BINCLUDE	"mappings/16x16/AnimCPZ.bin"

; byte_4076E:
APM_DEZ:	BINCLUDE	"mappings/16x16/AnimDEZ.bin"

; byte_4077A:
APM_ARZ:	BINCLUDE	"mappings/16x16/AnimARZ.bin"

; byte_407BE:
APM_Null:	dc.w   0
; ===========================================================================

loc_407C0:
	lea	(ArtUnc_HTZCliffs).l,a0
	lea	(Object_RAM+$800).w,a4
	bsr.w	JmpTo2_NemDecToRAM
	lea	(Object_RAM+$800).w,a1
	lea	word_3FD9C(pc),a4
	moveq	#0,d2
	moveq	#7,d4

loc_407DA:
	moveq	#5,d3

loc_407DC:
	moveq	#-1,d0
	move.w	(a4)+,d0
	movea.l	d0,a2
	moveq	#$1F,d1

loc_407E4:
	move.l	(a1),(a2)+
	move.l	d2,(a1)+
	dbf	d1,loc_407E4
	dbf	d3,loc_407DC
	adda.w	#$C,a4
	dbf	d4,loc_407DA
	rts
; ===========================================================================
	nop

JmpTo2_NemDecToRAM 
	jmp	(NemDecToRAM).l
; ===========================================================================
	align 4
; ===========================================================================




; ----------------------------------------------------------------------------
; HUD code - HUD dealing
; ----------------------------------------------------------------------------
loc_40804:	; Single Player HUD
	bra.w	loc_40820
;	tst.w	(Ring_count).w
;	beq.s	loc_40820
	moveq	#0,d1
	btst	#3,($FFFFFE05).w
	bne.s	BranchTo_loc_40836
	cmpi.b	#9,(Timer_minute).w
	bne.s	BranchTo_loc_40836
	addq.w	#2,d1

BranchTo_loc_40836 
	bra.s	loc_40836
; ===========================================================================

loc_40820:
	moveq	#0,d1			; use normal sprite without red
	tst.b	($FFFFF502).w
	beq.s	loc_40836
	subq.b	#1,($FFFFF502).w
;	btst	#3,($FFFFFE05).w	; check if time to swap colors has been reached yet
	btst	#1,($FFFFFE05).w	; check if time to swap colors has been reached yet
	bne.s	loc_40836		; if not, branch
	addq.w	#1,d1			; use red "rings" counter
	;cmpi.b	#9,(Timer_minute).w	; is time over 9 minutes?
	;bne.s	loc_40836		; if not, branch
	;addq.w	#2,d1			; use red "rings" and "time" counter

loc_40836:
	move.w	#$90,d3
	move.w	#$108,d2
	lea	(HUD_MapUnc_40A9A).l,a1
	movea.w	#$86CA,a3
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bmi.s	return_40858
	bsr.w	JmpTo_loc_1682A

return_40858:
	rts
; End of function h

; ===========================================================================

loc_4085A:
	tst.w	(Ring_count).w
	beq.s	loc_40876

	moveq	#0,d1
	btst	#3,($FFFFFE05).w
	bne.s	BranchTo_loc_4088C
	cmpi.b	#9,(Timer_minute).w
	bne.s	BranchTo_loc_4088C
	addq.w	#2,d1

BranchTo_loc_4088C 

	bra.s	loc_4088C
; ===========================================================================

loc_40876:
	moveq	#0,d1
	btst	#3,($FFFFFE05).w
	bne.s	loc_4088C
	addq.w	#1,d1
	cmpi.b	#9,(Timer_minute).w
	bne.s	loc_4088C
	addq.w	#2,d1

loc_4088C:

	move.w	#$90,d3
	move.w	#$188,d2
	lea	(HUD_MapUnc_40BEA).l,a1
	movea.w	#$8365,a3
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	move.w	#$B8,d3
	move.w	#$108,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.b	(Timer_minute).w,d7
	bsr.w	sub_4092E
	bsr.w	sub_4096A
	moveq	#0,d7
	move.b	(Timer_second).w,d7
	bsr.w	loc_40938
	move.w	#$C0,d3
	move.w	#$118,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.w	(Ring_count).w,d7
	bsr.w	sub_40984
	tst.b	(Update_HUD_timer_2P).w
	bne.s	loc_40908
	tst.b	(Update_HUD_timer).w
	beq.s	loc_40908
	move.w	#$110,d3
	move.w	#$1B8,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.b	(Loser_Time_Left).w,d7
	bsr.w	loc_40938

loc_40908:

	moveq	#4,d1
	move.w	#$90,d3
	move.w	#$188,d2
	lea	(HUD_MapUnc_40BEA).l,a1
	movea.w	#$8365,a3
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	moveq	#0,d4
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_4092E:

	lea	(Hud_1).l,a4
	moveq	#0,d6
	bra.s	loc_40940
; ===========================================================================

loc_40938:

	lea	(Hud_10).l,a4
	moveq	#1,d6

loc_40940:

	moveq	#0,d1
	move.l	(a4)+,d4

loc_40944:
	sub.l	d4,d7
	bcs.s	loc_4094C
	addq.w	#1,d1
	bra.s	loc_40944
; ===========================================================================

loc_4094C:
	add.l	d4,d7
	lea	(HUD_MapUnc_40C82).l,a1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	addq.w	#8,d3
	dbf	d6,loc_40940
	rts
; End of function sub_4092E


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_4096A:

	moveq	#$A,d1
	lea	(HUD_MapUnc_40C82).l,a1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	addq.w	#8,d3
	rts
; End of function sub_4096A


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_40984:

	lea	(Hud_100).l,a4
	moveq	#2,d6

loc_4098C:
	moveq	#0,d1
	move.l	(a4)+,d4

loc_40990:
	sub.l	d4,d7
	bcs.s	loc_40998
	addq.w	#1,d1
	bra.s	loc_40990
; ===========================================================================

loc_40998:
	add.l	d4,d7
	tst.w	d6
	beq.s	loc_409AA
	tst.w	d1
	beq.s	loc_409A6
	bset	#$1F,d6

loc_409A6:
	tst.l	d6
	bpl.s	loc_409BE

loc_409AA:
	lea	(HUD_MapUnc_40C82).l,a1
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6

loc_409BE:
	addq.w	#8,d3
	dbf	d6,loc_4098C
	rts
; End of function sub_40984

; ===========================================================================

loc_409C6:
	tst.w	(Ring_count_2P).w
	beq.s	loc_409E2
	moveq	#0,d1
	btst	#3,($FFFFFE05).w
	bne.s	BranchTo_loc_409F8
	cmpi.b	#9,(Timer_minute_2P).w
	bne.s	BranchTo_loc_409F8
	addq.w	#2,d1

BranchTo_loc_409F8 

	bra.s	loc_409F8
; ===========================================================================

loc_409E2:
	moveq	#0,d1
	btst	#3,($FFFFFE05).w
	bne.s	loc_409F8
	addq.w	#1,d1
	cmpi.b	#9,(Timer_minute_2P).w
	bne.s	loc_409F8
	addq.w	#2,d1

loc_409F8:

	move.w	#$90,d3
	move.w	#$268,d2
	lea	(HUD_MapUnc_40BEA).l,a1
	movea.w	#$8365,a3
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	move.w	#$B8,d3
	move.w	#$1E8,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.b	(Timer_minute_2P).w,d7
	bsr.w	sub_4092E
	bsr.w	sub_4096A
	moveq	#0,d7
	move.b	(Timer_second_2P).w,d7
	bsr.w	loc_40938
	move.w	#$C0,d3
	move.w	#$1F8,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.w	(Ring_count_2P).w,d7
	bsr.w	sub_40984
	tst.b	(Update_HUD_timer).w
	bne.s	loc_40A74
	tst.b	(Update_HUD_timer_2P).w
	beq.s	loc_40A74
	move.w	#$110,d3
	move.w	#$298,d2
	movea.w	#$8371,a3
	moveq	#0,d7
	move.b	(Loser_Time_Left).w,d7
	bsr.w	loc_40938

loc_40A74:

	moveq	#5,d1
	move.w	#$90,d3
	move.w	#$268,d2
	lea	(HUD_MapUnc_40BEA).l,a1
	movea.w	#$8340,a3
	add.w	d1,d1
	adda.w	(a1,d1.w),a1
	move.w	(a1)+,d1
	subq.w	#1,d1
	bsr.w	JmpTo_loc_16DC6
	moveq	#0,d4
	rts
; ===========================================================================

; sprite mappings for the HUD
; uses the art in VRAM from $D940 - $FC00
HUD_MapUnc_40A9A:	BINCLUDE "mappings/sprite/hud_a.bin"


HUD_MapUnc_40BEA:	BINCLUDE "mappings/sprite/hud_b.bin"


HUD_MapUnc_40C82:	BINCLUDE "mappings/sprite/hud_c.bin"

; ---------------------------------------------------------------------------
; Add points subroutine
; subroutine to add to Player 1's score
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_40D06:
AddPoints:

	move.b	#1,(Update_HUD_score).w
	lea	(Score).w,a3
	add.l	d0,(a3)	; add d0*10 to the score
	move.l	#999999,d1
	cmp.l	(a3),d1	; is #999999 higher than the score?
	bhi.s	+	; if yes, branch
	move.l	d1,(a3)	; set score to #999999
+
	move.l	(a3),d0
	cmp.l	(Next_Extra_life_score).w,d0
	bcs.s	return_40D40
	addi.l	#5000,(Next_Extra_life_score).w
	addq.b	#1,(Life_count).w
	addq.b	#1,(Update_HUD_lives).w
	move.w	#$98,d0
	jmp	(PlayMusic).l
; ===========================================================================

return_40D40:
	rts
; End of function AddPoints


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ---------------------------------------------------------------------------
; Add points subroutine
; subroutine to add to Player 2's score
; (goes to AddPoints to add to Player 1's score instead if this is not Player 2)
; ---------------------------------------------------------------------------

; sub_40D42:
AddPoints2:
	tst.w	(Two_player_mode).w
	beq.s	AddPoints
	cmpa.w	#MainCharacter,a3
	beq.s	AddPoints
	move.b	#1,(Update_HUD_score_2P).w
	lea	(Score_2P).w,a3
	add.l	d0,(a3)	; add d0*10 to the score
	move.l	#999999,d1
	cmp.l	(a3),d1	; is #999999 higher than the score?
	bhi.s	+	; if yes, branch
	move.l	d1,(a3)	; set score to #999999
+
	move.l	(a3),d0
	cmp.l	(Next_Extra_life_score_2P).w,d0
	bcs.s	return_40D88
	addi.l	#5000,(Next_Extra_life_score_2P).w
	addq.b	#1,(Life_count_2P).w
	addq.b	#1,(Update_HUD_lives_2P).w
	move.w	#$98,d0
	jmp	(PlayMusic).l
; ===========================================================================

return_40D88:
	rts
; End of function AddPoints2

; ---------------------------------------------------------------------------
; Subroutine to update the HUD
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_40D8A:
HudUpdate:
	nop
	lea	(VDP_data_port).l,a6
	tst.w	(Two_player_mode).w
	bne.w	loc_40F50
	tst.w	(Debug_mode_flag).w	; is debug mode on?
	;bne.w	loc_40E9A	; if yes, branch

	tst.b	(Update_HUD_score).w	; does the score need updating?
	;beq.s	Hud_ChkRings	; if not, branch
	clr.b	(Update_HUD_score).w
	move.l	#$5C400003,d0	; set VRAM address
;	move.l	(Score).w,d1	; load score

	moveq	#0,d2
	move.w	(MainCharacter+x_vel).w,d2	; load speed
	bpl.s	+
	neg.w	d2
+	lsr.w	#1,d2


	moveq	#0,d1
	move.w	(MainCharacter+y_vel).w,d1
	;move.w	($FFFFF500).w,d1	; load speed
	bpl.s	+
	neg.w	d1
+	lsr.w	#1,d1

;	move.w	($FFFFF508).w,d1 ; DEBUG SHIT
;	lsr.w	#8,d1
	
	mulu.w	#10000,d2
	add.l	d2,d1
	;move.w	d2,d1

	bsr.w	Hud_Score
; loc_40DBA:
Hud_ChkRings:
	tst.b	(Update_HUD_rings).w	; does the ring counter need updating?
	beq.s	Hud_ChkTime	; if not, branch
	bpl.s	loc_40DC6
	bsr.w	Hud_LoadZero

loc_40DC6:
	clr.b	(Update_HUD_rings).w
	move.l	#$5F400003,d0
	moveq	#0,d1
	;move.w	(Ring_count).w,d1
	move.w	($FFFFF500).w,d1	; get hit count
	bsr.w	Hud_Rings
; loc_40DDA:
Hud_ChkTime:
	tst.b	(Update_HUD_timer).w	; does the time need updating?
	beq.s	Hud_ChkLives	; if not, branch
	tst.w	(Game_paused).w	; is the game paused?
	bne.s	Hud_ChkLives	; if yes, branch
	lea	(Timer).w,a1
	cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
;	beq.w	loc_40E84	; if yes, branch
	beq.s	Hud_ChkLives	; if yes, branch
	addq.b	#1,-(a1)
	cmpi.b	#60,(a1)
	bcs.s	Hud_ChkLives
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#60,(a1)
	bcs.s	loc_40E18
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#9,(a1)
	bcs.s	loc_40E18
	move.b	#9,(a1)

loc_40E18:

	move.l	#$5E400003,d0
	moveq	#0,d1
	move.b	(Timer_minute).w,d1
	bsr.w	Hud_Mins
	move.l	#$5EC00003,d0
	moveq	#0,d1
	move.b	(Timer_second).w,d1
	bsr.w	Hud_Secs
; loc_40E38:
Hud_ChkLives:

	tst.b	(Update_HUD_lives).w	; does the lives counter need updating?
	beq.s	Hud_ChkBonus	; if not, branch
	clr.b	(Update_HUD_lives).w
	bsr.w	Hud_Lives
; loc_40E46:
Hud_ChkBonus:
	tst.b	(Update_Bonus_score).w	; do time/ring bonus counters need updating?
	beq.s	Hud_End	; if not, branch
	clr.b	(Update_Bonus_score).w
	move.l	#$64000002,(VDP_control_port).l
	moveq	#0,d1
	move.w	($FFFFFF8E).w,d1
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	(Bonus_Countdown_1).w,d1	 ; load time bonus
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	(Bonus_Countdown_2).w,d1	 ; load ring bonus
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	($FFFFFF92).w,d1
	bsr.w	Hud_TimeRingBonus
; return_40E82:
Hud_End:
	rts
; ===========================================================================

loc_40E84:
	clr.b	(Update_HUD_timer).w
	lea	(MainCharacter).w,a0 ; a0=character
	movea.l	a0,a2
	bsr.w	KillCharacter
	move.b	#1,(Time_Over_flag).w
	rts
; ===========================================================================

loc_40E9A:
	bsr.w	HudDb_XY
	tst.b	(Update_HUD_rings).w
	beq.s	loc_40EBE
	bpl.s	loc_40EAA
	bsr.w	Hud_LoadZero

loc_40EAA:
	clr.b	(Update_HUD_rings).w
	move.l	#$5F400003,d0
	moveq	#0,d1
	move.w	(Ring_count).w,d1
	bsr.w	Hud_Rings

loc_40EBE:
	move.l	#$5EC00003,d0
	moveq	#0,d1
	move.b	($FFFFF62C).w,d1
	bsr.w	Hud_Secs
	tst.b	(Update_HUD_lives).w
	beq.s	loc_40EDC
	clr.b	(Update_HUD_lives).w
	bsr.w	Hud_Lives

loc_40EDC:
	tst.b	(Update_Bonus_score).w
	beq.s	loc_40F18
	clr.b	(Update_Bonus_score).w
	move.l	#$64000002,(VDP_control_port).l
	moveq	#0,d1
	move.w	($FFFFFF8E).w,d1
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	(Bonus_Countdown_1).w,d1
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	(Bonus_Countdown_2).w,d1
	bsr.w	Hud_TimeRingBonus
	moveq	#0,d1
	move.w	($FFFFFF92).w,d1
	bsr.w	Hud_TimeRingBonus

loc_40F18:
	tst.w	(Game_paused).w
	bne.s	return_40F4E
	lea	(Timer).w,a1
	cmpi.l	#$93B3B,(a1)+
	nop
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	return_40F4E
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	return_40F4E
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#9,(a1)
	bcs.s	return_40F4E
	move.b	#9,(a1)

return_40F4E:
	rts
; ===========================================================================

loc_40F50:
	tst.w	(Game_paused).w
	bne.w	return_4101A
	tst.b	(Update_HUD_timer).w
	beq.s	loc_40F90
	lea	(Timer).w,a1
	cmpi.l	#$93B3B,(a1)+
	beq.w	TimeOver
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	loc_40F90
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	loc_40F90
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#9,(a1)
	bcs.s	loc_40F90
	move.b	#9,(a1)

loc_40F90:
	tst.b	(Update_HUD_timer_2P).w
	beq.s	loc_40FC8
	lea	(Timer_2P).w,a1
	cmpi.l	#$93B3B,(a1)+
	beq.w	TimeOver2
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	loc_40FC8
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#$3C,(a1)
	bcs.s	loc_40FC8
	move.b	#0,(a1)
	addq.b	#1,-(a1)
	cmpi.b	#9,(a1)
	bcs.s	loc_40FC8
	move.b	#9,(a1)

loc_40FC8:
	tst.b	(Update_HUD_lives).w
	beq.s	loc_40FD6
	clr.b	(Update_HUD_lives).w
	bsr.w	Hud_Lives

loc_40FD6:
	tst.b	(Update_HUD_lives_2P).w
	beq.s	loc_40FE4
	clr.b	(Update_HUD_lives_2P).w
	bsr.w	Hud_Lives2

loc_40FE4:
	move.b	(Update_HUD_timer).w,d0
	or.b	(Update_HUD_timer_2P).w,d0
	beq.s	return_4101A
	lea	(Loser_Time_Left).w,a1
	tst.w	(a1)+
	beq.s	return_4101A
	subq.b	#1,-(a1)
	bhi.s	return_4101A
	move.b	#$3C,(a1)
	cmpi.b	#$C,-1(a1)
	bne.s	loc_41010
	move.w	#$9F,d0
	jsr	(PlayMusic).l

loc_41010:
	subq.b	#1,-(a1)
	bcc.s	return_4101A
	move.w	#0,(a1)
	bsr.s	TimeOver0

return_4101A:

	rts
; End of function HudUpdate


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4101C:
TimeOver0:
	tst.b	(Update_HUD_timer).w
	bne.s	TimeOver
	tst.b	(Update_HUD_timer_2P).w
	bne.s	TimeOver2
	rts
; ===========================================================================
; loc_4102A:
TimeOver:

	clr.b	(Update_HUD_timer).w
	lea	(MainCharacter).w,a0 ; a0=character
	movea.l	a0,a2
	bsr.w	KillCharacter
	move.b	#1,(Time_Over_flag).w
	tst.b	(Update_HUD_timer_2P).w
	beq.s	return_41058
; loc_41044:
TimeOver2:

	clr.b	(Update_HUD_timer_2P).w
	lea	(Sidekick).w,a0 ; a0=character
	movea.l	a0,a2
	bsr.w	KillCharacter
	move.b	#1,(Time_Over_flag_2P).w

return_41058:
	rts
; End of function TimeOver0


; ---------------------------------------------------------------------------
; Subroutine to load "0" on the HUD
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4105A:
Hud_LoadZero:

	move.l	#$5F400003,(VDP_control_port).l
	lea	Hud_TilesZero(pc),a2
	move.w	#2,d2
	bra.s	loc_41090

; ---------------------------------------------------------------------------
; Subroutine to load uncompressed HUD patterns ("E", "0", colon)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_4106E:
Hud_Base:
	lea	(VDP_data_port).l,a6
	bsr.w	Hud_Lives
	tst.w	(Two_player_mode).w
	bne.s	loc_410BC
	move.l	#$5C400003,(VDP_control_port).l
	lea	Hud_TilesBase(pc),a2
	move.w	#$E,d2

loc_41090:
	lea	Art_Hud(pc),a1

loc_41094:
	move.w	#$F,d1
	move.b	(a2)+,d0
	bmi.s	loc_410B0
	ext.w	d0
	lsl.w	#5,d0
	lea	(a1,d0.w),a3

loc_410A4:
	move.l	(a3)+,(a6)
	dbf	d1,loc_410A4

loc_410AA:
	dbf	d2,loc_41094
	rts
; ===========================================================================

loc_410B0:
	move.l	#0,(a6)
	dbf	d1,loc_410B0
	bra.s	loc_410AA
; End of function Hud_LoadZero

; ===========================================================================

loc_410BC:
	bsr.w	Hud_Lives2
	move.l	#Art_Hud,d1 ; source addreses
	move.w	#$DC40,d2 ; destination VRAM address
	move.w	#$160,d3 ; DMA transfer length
	jmp	(QueueDMATransfer).l
; ===========================================================================
Hud_TilesBase:
	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0 ; byte_410D4:
Hud_TilesZero:
	dc.b $FF, $FF, 0, 0 ; byte_410E0:
; ---------------------------------------------------------------------------
; Subroutine to load debug mode numbers patterns
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_410E4:
HudDb_XY:
	move.l	#$5C400003,(VDP_control_port).l
	;move.w	(Camera_X_pos).w,d1		; bottom left
	move.w	(MainCharacter+x_vel).w,d1	; bottom left
	swap	d1
	move.w	(MainCharacter+x_pos).w,d1	; top left
	bsr.s	HudDb_XY2
	;move.w	(Camera_Y_pos).w,d1		; bottom right
	move.w	(MainCharacter+y_vel).w,d1	; bottom right
	swap	d1
	move.w	(MainCharacter+y_pos).w,d1	; top right
; loc_41104:
HudDb_XY2:
	moveq	#7,d6
	lea	(Art_Text).l,a1
; loc_4110C:
HudDb_XYLoop:
	rol.w	#4,d1
	move.w	d1,d2
	andi.w	#$F,d2
	cmpi.w	#$A,d2
	bcs.s	loc_4111E
	addi.w	#7,d2

loc_4111E:
	lsl.w	#5,d2
	lea	(a1,d2.w),a3
    rept 8
	move.l	(a3)+,(a6)
    endm
	swap	d1
	dbf	d6,HudDb_XYLoop
	rts
; End of function HudDb_XY

; ---------------------------------------------------------------------------
; Subroutine to load rings numbers patterns
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4113C:
Hud_Rings:
	lea	(Hud_100).l,a2
	moveq	#2,d6
	bra.s	Hud_LoadArt
; End of function Hud_Rings

; ---------------------------------------------------------------------------
; Subroutine to load score numbers patterns
; Inputs:
; d0 = VDP input
; d1 = Score value
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_41146:
Hud_Score:
	lea	(Hud_10000000).l,a2
	;moveq	#6,d6
	moveq	#7,d6
; loc_4114E:
Hud_LoadArt:
	moveq	#0,d4
	lea	Art_Hud(pc),a1
; loc_41154:
Hud_ScoreLoop:
	moveq	#0,d2
	move.l	(a2)+,d3

loc_41158:
	sub.l	d3,d1
	bcs.s	loc_41160
	addq.w	#1,d2
	bra.s	loc_41158
; ===========================================================================

loc_41160:
	add.l	d3,d1
	tst.w	d2
	beq.s	loc_4116A
	move.w	#1,d4

loc_4116A:
	;tst.w	d4
	;beq.s	loc_41198

	lsl.w	#6,d2
	move.l	d0,4(a6)
	lea	(a1,d2.w),a3
    rept 16
	move.l	(a3)+,(a6)
    endm

loc_41198:
	addi.l	#$400000,d0
	dbf	d6,Hud_ScoreLoop
	rts
; End of function Hud_Score

; ---------------------------------------------------------------------------
; Subroutine to load countdown numbers on the continue screen
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_411A4:
ContScrCounter:
	move.l	#$5F800003,(VDP_control_port).l
	lea	(VDP_data_port).l,a6
	lea	(Hud_10).l,a2
	moveq	#1,d6
	moveq	#0,d4
	lea	Art_Hud(pc),a1
; loc_411C2:
ContScr_Loop:
	moveq	#0,d2
	move.l	(a2)+,d3

loc_411C6:
	sub.l	d3,d1
	bcs.s	loc_411CE
	addq.w	#1,d2
	bra.s	loc_411C6
; ===========================================================================

loc_411CE:
	add.l	d3,d1
	lsl.w	#6,d2
	lea	(a1,d2.w),a3
    rept 16
	move.l	(a3)+,(a6)
    endm
	dbf	d6,ContScr_Loop	; repeat 1 more time
	rts
; End of function ContScrCounter

; ===========================================================================
; ---------------------------------------------------------------------------
; for HUD counter
; ---------------------------------------------------------------------------
				; byte_411FC:
Hud_10000000:	dc.l 10000000
Hud_1000000:	dc.l 1000000
Hud_100000:	dc.l 100000	; byte_41200: ; Hud_10000:
		dc.l 10000	; byte_41204:
Hud_1000:	dc.l 1000	; byte_41208:
Hud_100:	dc.l 100	; byte_4120C:
Hud_10:		dc.l 10		; byte_41210:
Hud_1:		dc.l 1

; ---------------------------------------------------------------------------
; Subroutine to load time numbers patterns
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_41214:
Hud_Mins:
	lea	Hud_1(pc),a2
	moveq	#0,d6
	bra.s	loc_41222
; ===========================================================================
; loc_4121C:
Hud_Secs:
	lea	Hud_10(pc),a2
	moveq	#1,d6

loc_41222:
	moveq	#0,d4
	lea	Art_Hud(pc),a1
; loc_41228:
Hud_TimeLoop:
	moveq	#0,d2
	move.l	(a2)+,d3

loc_4122C:
	sub.l	d3,d1
	bcs.s	loc_41234
	addq.w	#1,d2
	bra.s	loc_4122C
; ===========================================================================

loc_41234:
	add.l	d3,d1
	tst.w	d2
	beq.s	loc_4123E
	move.w	#1,d4

loc_4123E:
	lsl.w	#6,d2
	move.l	d0,4(a6)
	lea	(a1,d2.w),a3
    rept 16
	move.l	(a3)+,(a6)
    endm
	addi.l	#$400000,d0
	dbf	d6,Hud_TimeLoop
	rts
; End of function Hud_Mins

; ---------------------------------------------------------------------------
; Subroutine to load time/ring bonus numbers patterns
; ---------------------------------------------------------------------------

; ===========================================================================
; loc_41274:
Hud_TimeRingBonus:
	lea	Hud_1000(pc),a2
	moveq	#3,d6
	moveq	#0,d4
	lea	Art_Hud(pc),a1
; loc_41280:
Hud_BonusLoop:
	moveq	#0,d2
	move.l	(a2)+,d3

loc_41284:
	sub.l	d3,d1
	bcs.s	loc_4128C
	addq.w	#1,d2
	bra.s	loc_41284
; ===========================================================================

loc_4128C:
	add.l	d3,d1
	tst.w	d2
	beq.s	loc_41296
	move.w	#1,d4

loc_41296:
	tst.w	d4
	beq.s	Hud_ClrBonus
	lsl.w	#6,d2
	lea	(a1,d2.w),a3
    rept 16
	move.l	(a3)+,(a6)
    endm

loc_412C0:
	dbf	d6,Hud_BonusLoop ; repeat 3 more times
	rts
; ===========================================================================
; loc_412C6:
Hud_ClrBonus:
	moveq	#$F,d5
; loc_412C8:
Hud_ClrBonusLoop:
	move.l	#0,(a6)
	dbf	d5,Hud_ClrBonusLoop
	bra.s	loc_412C0

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ---------------------------------------------------------------------------
; Subroutine to load uncompressed lives counter patterns (Sonic)
; ---------------------------------------------------------------------------

; sub_412D4:
Hud_Lives2:
	move.l	#$5FA00003,d0
	moveq	#0,d1
	move.b	(Life_count_2P).w,d1
	bra.s	loc_412EE
; End of function Hud_Lives2

; ---------------------------------------------------------------------------
; Subroutine to load uncompressed lives counter patterns (Tails)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_412E2:
Hud_Lives:
	move.l	#$7BA00003,d0
	moveq	#0,d1
	move.b	(Life_count).w,d1

loc_412EE:
	lea	Hud_10(pc),a2
	moveq	#1,d6
	moveq	#0,d4
	lea	Art_LivesNums(pc),a1
; loc_412FA:
Hud_LivesLoop:
	move.l	d0,4(a6)
	moveq	#0,d2
	move.l	(a2)+,d3
-	sub.l	d3,d1
	bcs.s	loc_4130A
	addq.w	#1,d2
	bra.s	-
; ===========================================================================

loc_4130A:
	add.l	d3,d1
	tst.w	d2
	beq.s	loc_41314
	move.w	#1,d4

loc_41314:
	tst.w	d4
	beq.s	Hud_ClrLives

loc_41318:
	lsl.w	#5,d2
	lea	(a1,d2.w),a3
    rept 8
	move.l	(a3)+,(a6)
    endm

loc_4132E:
	addi.l	#$400000,d0
	dbf	d6,Hud_LivesLoop ; repeat 1 more time
	rts
; ===========================================================================
; loc_4133A:
Hud_ClrLives:
	tst.w	d6
	beq.s	loc_41318
	moveq	#7,d5
; loc_41340:
Hud_ClrLivesLoop:
	move.l	#0,(a6)
	dbf	d5,Hud_ClrLivesLoop
	bra.s	loc_4132E
; End of function Hud_Lives

; ===========================================================================
; ArtUnc_4134C:
Art_Hud:	BINCLUDE	"art/uncompressed/Big and small numbers used on counters - 1.bin"
; ArtUnc_4164C:
Art_LivesNums:	BINCLUDE	"art/uncompressed/Big and small numbers used on counters - 2.bin"
; ArtUnc_4178C:
Art_Text:	BINCLUDE	"art/uncompressed/Big and small numbers used on counters - 3.bin"

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_16DC6 
	jmp	loc_16DC6
; End of function JmpTo_loc_16DC6


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo_loc_1682A 
	jmp	loc_1682A
; End of function JmpTo_loc_1682A



; ---------------------------------------------------------------------------
; =====================================================================================================================
; Selbi Splash Screen - Code made by Marc - Sonic ERaZor
; =====================================================================================================================
SelbiSplash_MusicID		EQU	$B7		; Music to play
SelbiSplash_NxtScr		EQU	$04		; Screen mode to go to next (Title Screen)
SelbiSplash_Wait		EQU	$30		; Time to wait ($100)
SelbiSplash_PalChgSpeed		EQU	$200		; Speed for the palette to be changed ($200)

; ---------------------------------------------------------------------------------------------------------------------
SelbiSplash:
	move.b	#$7D+$80,d0
	jsr	PlayMusic ; stop music

		jsr	ClearPLC			; Clear PLCs
		jsr	Pal_FadeFrom			; Fade out previous palette
		move	#$2700,sr

SelbiSplash_VDP:
		lea	($C00004).l,a6			; Setup VDP
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9001,(a6)
		move.w	#$9200,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8720,(a6)
		clr.b	($FFFFF64E).w
		jsr	ClearScreen			; Clear screen
		
SelbiSplash_Art:
		move.l	#$40000000,($C00004).l		; Load art
		lea	(Art_SelbiSplash).l,a0
		jsr	NemDec
		
SelbiSplash_Mappings:
		lea	($FF0000).l,a1			; Load screen mappings
		lea	(Map3_SelbiSplash).l,a0
		move.w	#0,d0
		jsr	EniDec
		
SelbiSplash_ShowOnVDP:
		lea	($FF0000).l,a1			; Show screen
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsr	ShowVDPGraphics		
		
SelbiSplash_Palette:
		lea	(Pal_SelbiSplash).l,a1		; Load palette
		lea	($FFFFFB80).w,a2
		move.b	#$40,d0
SelbiSplash_PalLoop:
		move.l	(a1)+,(a2)+
		tst.w	d0
		beq.s	SelbiSplash_Music
		sub.w	#1,d0
		bra.s	SelbiSplash_PalLoop
		
SelbiSplash_Music:
		move.w	#$0EEE,($FFFFFB88).w
	;	move.w	#SelbiSplash_MusicID,d0		; Play music
	;	jsr	PlaySound
		
SelbiSplash_SetWait:
		move.w	#SelbiSplash_Wait,($FFFFF614).w	; Wait time
		jsr	Pal_FadeTo			; Fade palette in
	;	move.b	#SelbiSplash_MusicID,d0		; Play music
	;	jsr	PlaySound
		
		move.l	#$4E400001,($FFFFFF7A).w
		move.w	#0,($FFFFFF7E).w
		bra.s	SelbiSplash_Loop
; ---------------------------------------------------------------------------------------------------------------------

SelbiSplash_Sounds:
		dc.b	$BD
		dc.b	$B5
		dc.b	$BC
		dc.b	$A6
		dc.b	$4B+$80
		even

; ---------------------------------------------------------------------------------------------------------------------
SelbiSplash_Loop:
		cmpi.l	#$4EE00001,($FFFFFF7A).w
		beq.w	SelbiSplash_cont1
		cmpi.w	#$20,($FFFFF614).w		; is time less than $40?
		bpl.w	SelbiSplash_ChangePal	; if yes, branch

		lea	($C00000).l,a5			; load VDP data port address to a5
		lea	($C00004).l,a6			; load VDP address port address to a6
		move.l	($FFFFFF7A).w,(a6)		; set VDP address to write to
		move.l	#$44444444,d2
		move.l	d2,(a5)			; dump art to V-Ram
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		move.l	d2,(a5)			; ''
		addi.l	#$00200000,($FFFFFF7A).w

		lea	(SelbiSplash_Sounds).l,a1
		move.w	($FFFFFF7E).w,d3
		move.b	(a1,d3.w),d0
		jsr	PlaySound
		addi.w	#1,($FFFFFF7E).w

		cmpi.l	#$4EE00001,($FFFFFF7A).w
		beq.s	SelbiSplash_cont2
		add.w	#$20,($FFFFF614).w

		bra.w	SelbiSplash_ChangePal
SelbiSplash_cont2:
		move.w	#$D0,($FFFFF614).w
		lea	($C00000).l,a5
		lea	$04(a5),a6
		move.w	#$8B00,(a6)
		move.l	#$40000010,(a6)
		move.w	#$0008,(a5)
SelbiSplash_cont1:
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB04).w
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB06).w
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB08).w
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB0A).w
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB0C).w
		sub.w	#SelbiSplash_PalChgSpeed,($FFFFFB0E).w
		cmpi.w	#$90,($FFFFF614).w		; is time less than $40?
		bmi.s	SelbiSplash_DontChangePal	; if yes, branch
		cmpi.w	#$D0,($FFFFF614).w		; is time more than $70?
		bpl.w	SelbiSplash_ChangePal		; if yes, branch

		move.b	($FFFFFE0F).w,d0
		andi.b	#3,d0
		bne.w	SelbiSplash_ChangePal
		jsr	Pal_ToWhite

		lea	($C00000).l,a5
		lea	$04(a5),a6
		move.w	#$8B00,(a6)
		move.l	#$40000010,(a6)
		move.w	#$0008,(a5)


		move.b	($FFFFFE0F).w,d0
		andi.b	#5,d0
		beq.s	SelbiSplash_ChangePal

		move.b	(SelbiSplash_Sounds+4).l,d0
		jsr	PlaySound
		bra.s	SelbiSplash_ChangePal

SelbiSplash_DontChangePal:
		tst.b	($FFFFFFAF).w
		bne.s	SelbiSplash_ChangePal
		move.b	#$B9,d0			; play giant ring sound
		jsr	PlaySound		
		movem.l	d0-a6,-(sp)

SelbiSplash_LoadPRESENTS:
		move.w	#$0CEE,($FFFFFB88).w
		lea	($FF0000).l,a1			; Load screen mappings
		lea	(Map2_SelbiSplash).l,a0
		move.w	#0,d0
		jsr	EniDec
		lea	($FF0000).l,a1			; Show screen
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsr	ShowVDPGraphics

SelbiSplash_PalLoop2:
		move.l	(a1)+,(a2)+
		tst.w	d0
		beq.s	SelbiSplash_PL2Passed
		sub.w	#1,d0
		bra.s	SelbiSplash_PalLoop2

SelbiSplash_PL2Passed:	
		jsr	Pal_MakeWhite
		movem.l (sp)+,d0-a6
		move.b	#1,($FFFFFFAF).w

SelbiSplash_ChangePal:
		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
		jsr	DelayProgram			; Run delay program
		tst.w	($FFFFF614).w			; Test wait time
		beq.s	SelbiSplash_Next		; is it over? branch
		andi.b	#$80,($FFFFF605).w		; is Start button pressed?
		beq.w	SelbiSplash_Loop		; if not, loop

SelbiSplash_Next:
		clr.b	($FFFFFFAF).w
		clr.l	($FFFFFF7A).w
	;	jmp	TongaraSplash
	move.w	#$000,d0
	jmp	loc_9480
		rts	
		
; ---------------------------------------------------------------------------------------------------------------------
Art_SelbiSplash:	BINCLUDE	"misc/SelbiSplash/Tiles.bin"
			even
;Map_SelbiSplash:	BINCLUDE	"misc/SelbiSplash/Maps_NoPRESENTS.bin"
;			even
Map2_SelbiSplash:	BINCLUDE	"misc/SelbiSplash/Maps_WithPRESENTS.bin"
			even
Map3_SelbiSplash:	BINCLUDE	"misc/SelbiSplash/Maps_SoftSelbi.bin"
			even
Pal_SelbiSplash:	BINCLUDE	"misc/SelbiSplash/Palette.bin"
			even 
; ---------------------------------------------------------------------------




; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4C - Fake Debug Object
; ----------------------------------------------------------------------------
Obj4C:
	moveq	#0,d0
	move.b	routine(a0),d0
	move.w	Obj4C_Index(pc,d0.w),d1
	jmp	Obj4C_Index(pc,d1.w)
; ===========================================================================
Obj4C_Index:
	dc.w Obj4C_Main-Obj4C_Index
	dc.w Obj4C_Delete-Obj4C_Index
; ===========================================================================

Obj4C_Main:
	tst.b	(Debug_placement_mode).w		; is debug mode even enabled?
	beq.s	Obj4C_Delete				; if not, delete object

	movea.l	$34(a0),a1				; load parent object (in this case, the real debug object)
	move.l	mappings(a1),mappings(a0)		; copy over mappings...
	move.w	art_tile(a1),art_tile(a0)		; ...tile offset...
	move.b	mapping_frame(a1),mapping_frame(a0)	; ...current frame...
;	move.b	render_flags(a1),render_flags(a0)	; ...display flags...
	move.b	($FFFFF508).w,render_flags(a0)		; ...display flags (with mirror flags)...
	move.b	($FFFFF508).w,status(a0)		; ...status (with mirror flags)...
	move.w	x_pos(a1),x_pos(a0)			; ...x-position...
	move.w	y_pos(a1),y_pos(a0)			; ...and y-position
	bsr.s	Debug_EvenObj				; even the object

	move.w	x_pos(a0),($FFFFF504).w			; globally store the x-position (for placement...)
	move.w	y_pos(a0),($FFFFF506).w			; globally store the y-position (...and deletion)
	jmp	DisplaySprite				; display
; ===========================================================================

Obj4C_Delete:
	clr.l	($FFFFF504).w				; reset stored positions
	jmp	DeleteObject				; delete object
; ===========================================================================

; ===========================================================================
; ----------------------------------------------------------------------------
; Subroutine properly even an object in the world by a specified multiple
; ----------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

EvenSize = $8


Debug_EvenObj:	; use current object as target
	movea.l	a0,a1				; copy object address to a1

Debug_EvenObj2:	; otherwise, use specified object (a1) as target
	move.w	x_pos(a1),d0			; get x-position of target
	divu.w	#EvenSize,d0			; divide it by the even size
	swap	d0				; put result in first word
	moveq	#0,d1				; clear d1
	cmpi.w	#EvenSize/2,d0			; is the object closer to the left or the right?
	blt.s	+				; if it's closer to the left, branch
	moveq	#EvenSize/2,d1			; if it's closer to the right, move it there
+	add.w	d1,x_pos(a1)			; add result to y_position, and...
	andi.w	#$10000-EvenSize,x_pos(a1)	; ...even it in the world

	move.w	y_pos(a1),d0			; get y-position of target
	divu.w	#EvenSize,d0			; divide it by the even size
	swap	d0				; put result in first word
	moveq	#0,d1				; clear d1
	cmpi.w	#EvenSize/2,d0			; is the object closer to the left or the right?
	blt.s	+				; if it's closer to the left, branch
	moveq	#EvenSize/2,d1			; if it's closer to the right, move it there
+	add.w	d1,y_pos(a1)			; add result to y-position, and...
	andi.w	#$10000-EvenSize,y_pos(a1)	; ...even it in the world

	rts					; return
; ---------------------------------------------------------------------------
; ===========================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; When debug mode is currently in use

DebugSpeed = $7F
; ---------------------------------------------------------------------------
; loc_41A78:
DebugMode:
	moveq	#0,d0
	move.b	(Debug_placement_mode).w,d0
	move.w	Debug_Index(pc,d0.w),d1
	jmp	Debug_Index(pc,d1.w)
; ===========================================================================
; off_41A86:
Debug_Index:
	dc.w Debug_Init-Debug_Index	; 0
	dc.w Debug_Main-Debug_Index	; 2
; ===========================================================================
; loc_41A8A:
Debug_Init:
	addq.b	#2,(Debug_placement_mode).w
	move.w	(Camera_Min_Y_pos).w,($FFFFFFCC).w
	move.w	(Camera_Max_Y_pos).w,($FFFFFFCE).w
	cmpi.b	#$10,(Current_Zone).w
	bne.s	loc_41AAE
	move.w	#0,(Camera_Min_X_pos).w
	move.w	#$3FFF,(Camera_Max_X_pos).w

loc_41AAE:
	andi.w	#$7FF,(MainCharacter+y_pos).w
	andi.w	#$7FF,(Camera_Y_pos).w
	andi.w	#$7FF,($FFFFEE0C).w
	clr.b	($FFFFEEBE).w
	move.b	#0,mapping_frame(a0)
	move.b	#0,anim(a0)

; Block interaction with platforms during debug mode
	clr.w	x_vel(a0)
	clr.w	y_vel(a0)
	clr.w	inertia(a0)
	btst	#3,status(a0)	; is Sonic standing on an object?
	beq.s	+		; if not, branch
	bclr	#3,status(a0)	; clear Sonic's standing flag
	moveq	#0,d0
	move.b	interact(a0),d0	; get object id
	clr.b	interact(a0)	; clear object id
	lsl.w	#6,d0
	addi.l	#Object_RAM&$FFFFFF,d0
	movea.l	d0,a2
	bclr	#3,status(a2)	; clear object's standing flag	;Mercury Constants
	clr.b	routine_secondary(a2)
+

	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
	bne.s	loc_41ADC		; if not, branch
	moveq	#6,d0
	bra.s	loc_41AE2
; ===========================================================================

loc_41ADC:
	moveq	#0,d0
;	move.b	(Current_Zone).w,d0

loc_41AE2:
	lea	(JmpTbl_DbgObjLists).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d6
	cmp.b	(Debug_object).w,d6
	bhi.s	loc_41AFC
	move.b	#0,(Debug_object).w

loc_41AFC:
	bsr.w	sub_41CEC
	move.b	#$C,($FFFFFE0A).w
	move.b	#DebugSpeed,($FFFFFE0B).w

	jsr	(SingleObjLoad).l
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	move.b	#$4C,(a1) ; load obj
	move.l	a0,$34(a1)
	;move.b	#1,$30(a1)
	move.l	mappings(a0),mappings(a1)
	move.w	art_tile(a0),art_tile(a1)
	move.b	mapping_frame(a0),mapping_frame(a1)
;	move.b	render_flags(a0),render_flags(a1)

	bsr.w	sub_41CEC
	move.b	($FFFFF508).w,render_flags(a1)
;	move.b	($FFFFF508).w,status(a1)
; end of object init

; ===========================================================================
; ===========================================================================

Debug_Main:
	moveq	#6,d0
;	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
;	beq.s	loc_41B1C		; if yes, branch
	moveq	#0,d0			; set debug list to EHZ
;	move.b	(Current_Zone).w,d0	; change the debug list based on the zone

loc_41B1C:
	lea	(JmpTbl_DbgObjLists).l,a2
	add.w	d0,d0
	adda.w	(a2,d0.w),a2
	move.w	(a2)+,d6
	;bsr.w	sub_41B34	; check button inputs
	;jmp	DisplaySprite

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_41B34:
	moveq	#0,d4
	move.w	#1,d1
	move.b	(Ctrl_1_Press).w,d4
	andi.w	#$F,d4			; is any key on the D-Pad pressed for the first time?
	bne.s	loc_41B76		; if yes, branch 1
	move.b	(Ctrl_1_Held).w,d0
	andi.w	#$F,d0			; is any key on the D-Pad held?
	bne.s	loc_41B5E		; if yes, branch 2
	move.b	#$C,($FFFFFE0A).w	; set split-second delay after pressing once ($C)
	move.b	#DebugSpeed,($FFFFFE0B).w	; set initial speed ($F)
	bra.w	loc_41BDA		; if not, branch 3 (A-check)
; ===========================================================================

loc_41B5E:
	subq.b	#1,($FFFFFE0A).w	; decrease 1 from delay
	bne.s	loc_41B7A		; still not 0? branch
	move.b	#1,($FFFFFE0A).w	; reset delay to 1 (so the above check will always get skipped)
	addq.b	#1,($FFFFFE0B).w	; increase speed by 1
	cmpi.b	#DebugSpeed+1,($FFFFFE0B).w
	bcs.s	loc_41B76		; did speed go from $FF to $00 again? if not, branch
	move.b	#DebugSpeed,($FFFFFE0B).w	; if yes, reset it to $FF

loc_41B76:
	move.b	(Ctrl_1_Held).w,d4

loc_41B7A:
	moveq	#0,d1
	move.b	($FFFFFE0B).w,d1	; put current speed into d1
	addq.w	#1,d1
	swap	d1
	asr.l	#4,d1
	move.l	y_pos(a0),d2
	move.l	x_pos(a0),d3

	btst	#0,d4		; up held?
	beq.s	loc_41BA4	; if not, branch
	sub.l	d1,d2
	moveq	#0,d0
	move.w	(Camera_Min_Y_pos).w,d0
	swap	d0
	cmp.l	d0,d2
	bge.s	loc_41BA4
	move.l	d0,d2

loc_41BA4:
	btst	#1,d4		; down held?
	beq.s	loc_41BBE	; if not, branch
	add.l	d1,d2
	moveq	#0,d0
	move.w	(Camera_Max_Y_pos).w,d0
	addi.w	#$DF,d0
	swap	d0
	cmp.l	d0,d2
	blt.s	loc_41BBE
	move.l	d0,d2

loc_41BBE:
	btst	#2,d4		; left held?
	beq.s	loc_41BCA	; if not, branch
	sub.l	d1,d3		; decrease from x-pos
	bcc.s	loc_41BCA	; is it above 0? branch
	moveq	#0,d3		; if not, reset it to 0

loc_41BCA:
	btst	#3,d4		; right held?
	beq.s	loc_41BD2	; if not, branch
	add.l	d1,d3		; increase from x-pos

loc_41BD2:
	move.l	d2,y_pos(a0)	; set new y-pos
	move.l	d3,x_pos(a0)	; set new x-pos
; end of D-Pad stuff

loc_41BDA:
	btst	#6,(Ctrl_1_Held).w	; is button A held?
	beq.s	loc_41C12		; if not, branch
	btst	#5,(Ctrl_1_Press).w	; is button C pressed?
	beq.s	loc_41BF6		; if not, branch
	subq.b	#1,(Debug_object).w	; cycle through the debug object list backwards
	bcc.s	BranchTo_sub_41CEC
	add.b	d6,(Debug_object).w
	bra.s	BranchTo_sub_41CEC
; ===========================================================================

loc_41BF6:
	btst	#6,(Ctrl_1_Press).w	; is button A pressed?
	beq.s	loc_41C12		; if not, branch
	addq.b	#1,(Debug_object).w	; cycle through the debug object list forwards
	cmp.b	(Debug_object).w,d6
	bhi.s	BranchTo_sub_41CEC
	move.b	#0,(Debug_object).w	; reset list to the beginning when the end has been reached

BranchTo_sub_41CEC
	bra.w	sub_41CEC
; ===========================================================================

loc_41C12:
	tst.b	($FFFFF503).w		; debug mode blocked by spike?
	beq.s	+			; if not, place object
	move.b	#0,($FFFFF503).w	; enable debug placement for next frame
	bra.s	loc_41C56		; skip
+
	btst	#5,(Ctrl_1_Press).w	; is button C pressed?
	beq.s	loc_41C56		; if not, branch; if yes, place object

	;move.b	#0,(Object_Respawn_Table+2).w	; clear some stuff to allow this to work

	bsr.w	SingleObjLoad_Debug	; check for a free object slot
	beq.s	+			; create, if a free slot exists
	move.w	#$6D+$80,d0		; otherwise, play "drr-drrrrr" sound
	jsr	(PlaySound).l		; play
	bra.w	loc_41C56		; branch
+
	move.w	#$55+$80,d0		; play "cl-cling" sound
	jsr	(PlaySound).l		; play
	move.w	x_pos(a0),x_pos(a1)
	move.w	y_pos(a0),y_pos(a1)
	bsr.w	Debug_EvenObj2
;	move.b	mappings(a0),(a1) ; load obj
	move.b	#$36,(a1)
;	move.b	render_flags(a0),render_flags(a1)
;	move.b	render_flags(a0),status(a1)
	move.b	mappings(a0),render_flags(a1)
	move.b	mappings(a0),status(a1)

	move.b	#-1,respawn_index(a1)	; mark the respawn index so that the game knows it's a debug-placed spike
	
	andi.b	#$7F,status(a1)
	moveq	#0,d0
	move.b	(Debug_object).w,d0
	lsl.w	#3,d0
	move.b	4(a2,d0.w),subtype(a1)
	rts
; ===========================================================================
; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array
; Specialized for Debug Mode
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_17FDA: ; allocObject:
SingleObjLoad_Debug:
	lea	(Object_RAM+$400).w,a1 ; a1=object
	move.w	#$6F-$8,d0	; search almost to the end of table (leave 8 slots free at all times)
-
	tst.b	(a1)	; is object RAM slot empty?
	beq.s	+	; if yes, branch
	lea	next_object(a1),a1 ; load obj address ; goto next object RAM slot
	dbf	d0,-	; repeat until end	
;	rts

+
;	move.w	d0,($FFFFF50A).w	; store remaining object slots (for debugging)
;	or	#%00000100,ccr		; force Z-flag
	rts
; ===========================================================================

; ===========================================================================
; ===========================================================================

loc_41C56:
	btst	#4,(Ctrl_1_Press).w	; is button B pressed?
	beq.w	return_41CB6		; if not, branch; if yes, return normal playmode
	moveq	#0,d0
	move.w	d0,(Debug_placement_mode).w
	lea	(MainCharacter).w,a1 ; a1=character
	move.l	#Mapunc_Sonic,mappings(a1)
	move.w	#$780,art_tile(a1)
	tst.w	(Two_player_mode).w
	beq.s	loc_41C82
	move.w	#$3C0,art_tile(a1)

loc_41C82:
	move.b	d0,anim(a1)
	move.w	d0,2+x_pos(a1) ; subpixel x
	move.w	d0,2+y_pos(a1) ; subpixel y
	move.b	d0,obj_control(a1)
	move.b	d0,spindash_flag(a1)
	move.w	d0,x_vel(a1)
	move.w	d0,y_vel(a1)
	move.w	d0,inertia(a1)
	move.b	#2,status(a1)
	move.b	#2,routine(a1)
	move.b	#0,routine_secondary(a1)

	move.b	#$13,y_radius(a1)
	move.b	#9,x_radius(a1)
	move.w	($FFFFFFCC).w,(Camera_Min_Y_pos).w
	move.w	($FFFFFFCE).w,(Camera_Max_Y_pos).w
	cmpi.b	#$10,(Game_Mode).w	; special stage mode?
	bne.s	return_41CB6		; if not, branch
	move.b	#2,(MainCharacter+anim).w
	bset	#2,(MainCharacter+status).w
	bset	#1,(MainCharacter+status).w

return_41CB6:
	rts
; End of function sub_41B34


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_41CEC:
	moveq	#0,d0
	move.b	(Debug_object).w,d0
	lsl.w	#3,d0

	moveq	#0,d1
	move.b	render_flags(a0),d1
	andi.b	#%11111100,d1
	add.b	(a2,d0.w),d1
	move.b	d1,($FFFFF508).w	; set the render flags on debug placement

	move.l	(a2,d0.w),mappings(a0)
	move.w	6(a2,d0.w),art_tile(a0)
	move.b	5(a2,d0.w),mapping_frame(a0)
	rts
; End of function sub_41CEC

; ===========================================================================
; ---------------------------------------------------------------------------
; OBJECT DEBUG LISTS

; The jump table goes by level ID, so Metropolis Zone's list is repeated to
; account for its third act. Hidden Palace Zone uses Oil Ocean Zone's list.
; ---------------------------------------------------------------------------
JmpTbl_DbgObjLists:
	dc.w DbgObjList_EHZ - JmpTbl_DbgObjLists ; 0
	dc.w DbgObjList_Def - JmpTbl_DbgObjLists ; 1
	dc.w DbgObjList_Def - JmpTbl_DbgObjLists ; 2
	dc.w DbgObjList_Def - JmpTbl_DbgObjLists ; 3
	dc.w DbgObjList_MTZ - JmpTbl_DbgObjLists ; 4
	dc.w DbgObjList_MTZ - JmpTbl_DbgObjLists ; 5
	dc.w DbgObjList_WFZ - JmpTbl_DbgObjLists ; 6
	dc.w DbgObjList_HTZ - JmpTbl_DbgObjLists ; 7
	dc.w DbgObjList_OOZ - JmpTbl_DbgObjLists ; 8
	dc.w DbgObjList_Def - JmpTbl_DbgObjLists ; 9
	dc.w DbgObjList_OOZ - JmpTbl_DbgObjLists ; $A
	dc.w DbgObjList_MCZ - JmpTbl_DbgObjLists ; $B
	dc.w DbgObjList_CNZ - JmpTbl_DbgObjLists ; $C
	dc.w DbgObjList_CPZ - JmpTbl_DbgObjLists ; $D
	dc.w DbgObjList_Def - JmpTbl_DbgObjLists ; $E
	dc.w DbgObjList_ARZ - JmpTbl_DbgObjLists ; $F
	dc.w DbgObjList_SCZ - JmpTbl_DbgObjLists ; $10

; macro for a debug object list header
; must be on the same line as a label that has a corresponding _End label later
dbglistheader macro {INTLABEL}
__LABEL__ label *
	dc.w ((__LABEL___End - __LABEL__ - 2) >> 3)
    endm

; macro to define debug list object data
dbglistobj macro   obj, mapaddr,  decl, frame, flags, vram
	dc.l obj<<24|mapaddr
	dc.w decl<<8|frame
	dc.w flags<<12|vram
    endm
; $OOMMMMMM $DDFF $fVVV

DbgObjList_Def: dbglistheader
		;  obj  maps  decl  frame  flags  vram
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC ; obj25 = ring
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680 ; obj26 = monitor
DbgObjList_Def_End

DbgObjList_EHZ: dbglistheader
;	dbglistobj $36, Obj36_MapUnc_15B68,   1,   0,  2, $434+$00	; level 1
;	dbglistobj $36, Obj36_MapUnc_15B68,   2,   0,  0, $434+$10	; level 2
;	dbglistobj $36, Obj36_MapUnc_15B68,   3,   0,  0, $434+$18	; level 3
;	dbglistobj $36, Obj36_MapUnc_15B68,   5,   0,  0, $434+$08	; halve
;	dbglistobj $36, Obj36_MapUnc_15B68,   6,   0,  0, $434+$24	; explode
;	dbglistobj $36, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; level 1 sideways

; level 1
	dbglistobj $00, Obj36_MapUnc_15B68,   1,   0,  2, $434+$00	; normal
	dbglistobj $01, Obj36_MapUnc_15B68,   1,   0,  2, $434+$00	; x-flip
	dbglistobj $00, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; normal sideways
	dbglistobj $01, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; x-flip sideways
	dbglistobj $02, Obj36_MapUnc_15B68,   1,   0,  2, $434+$00	; y-flip
	dbglistobj $03, Obj36_MapUnc_15B68,   1,   0,  2, $434+$00	; xy-flip


; level 2
	dbglistobj $00, Obj36_MapUnc_15B68,   2,   0,  0, $434+$10	; normal
	dbglistobj $01, Obj36_MapUnc_15B68,   2,   0,  0, $434+$10	; x-flip
	;dbglistobj $00, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; normal sideways
	;dbglistobj $01, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; x-flip sideways
	dbglistobj $02, Obj36_MapUnc_15B68,   2,   0,  0, $434+$10	; y-flip
	dbglistobj $03, Obj36_MapUnc_15B68,   2,   0,  0, $434+$10	; xy-flip


; level 3
	dbglistobj $00, Obj36_MapUnc_15B68,   3,   0,  0, $434+$18	; normal
	dbglistobj $01, Obj36_MapUnc_15B68,   3,   0,  0, $434+$18	; x-flip
	;dbglistobj $00, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; normal sideways
	;dbglistobj $01, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; x-flip sideways
	dbglistobj $02, Obj36_MapUnc_15B68,   3,   0,  0, $434+$18	; y-flip
	dbglistobj $03, Obj36_MapUnc_15B68,   3,   0,  0, $434+$18	; xy-flip


; halve
	dbglistobj $00, Obj36_MapUnc_15B68,   5,   0,  0, $434+$08	; normal
	dbglistobj $01, Obj36_MapUnc_15B68,   5,   0,  0, $434+$08	; x-flip
	;dbglistobj $00, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; normal sideways
	;dbglistobj $01, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; x-flip sideways
	dbglistobj $02, Obj36_MapUnc_15B68,   5,   0,  0, $434+$08	; y-flip
	dbglistobj $03, Obj36_MapUnc_15B68,   5,   0,  0, $434+$08	; xy-flip


; explode
	dbglistobj $00, Obj36_MapUnc_15B68,   6,   0,  0, $434+$24	; normal
	dbglistobj $01, Obj36_MapUnc_15B68,   6,   0,  0, $434+$24	; x-flip
	;dbglistobj $00, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; normal sideways
	;dbglistobj $01, Obj36_MapUnc_15B68, $40,   4,  2, $42C+$00	; x-flip sideways
	dbglistobj $02, Obj36_MapUnc_15B68,   6,   0,  0, $434+$24	; y-flip
	dbglistobj $03, Obj36_MapUnc_15B68,   6,   0,  0, $434+$24	; xy-flip
DbgObjList_EHZ_End

DbgObjList_MTZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj   3, Obj03_MapUnc_1FFB8,   9,   1,  2, $6BC
	dbglistobj $42, Obj42_MapUnc_2686C,   1,   7,  6,    0
	dbglistobj $64, Obj64_MapUnc_26A5C,   1,   0,  2,    0
	dbglistobj $64, Obj64_MapUnc_26A5C, $11,   1,  2,    0
	dbglistobj $65, Obj65_Obj6A_Obj6B_MapUnc_26EC8, $80,   0,  6,    0
	dbglistobj $65, Obj65_Obj6A_Obj6B_MapUnc_26EC8, $13,   1,  6,    0
	dbglistobj $47, Obj47_MapUnc_24D96,   0,   2,  0, $424
	dbglistobj $2D, Obj2D_MapUnc_11822,   1,   1,  6,    0
	dbglistobj $66, Obj66_MapUnc_27120,   1,   0,  8, $680
	dbglistobj $66, Obj66_MapUnc_27120, $11,   1,  8, $680
	dbglistobj $68, Obj68_Obj6D_MapUnc_27750,   0,   4,  6, $414
	dbglistobj $69, Obj69_MapUnc_27A26,   4,   0,  2, $500
	dbglistobj $6A, Obj65_Obj6A_Obj6B_MapUnc_26EC8,   0,   1,  6,    0
	dbglistobj $6B, Obj65_Obj6A_Obj6B_MapUnc_26EC8,   7,   1,  6,    0
	dbglistobj $6D, Obj68_Obj6D_MapUnc_27750,   0,   0,  2, $41C
	dbglistobj $6E, Obj6E_MapUnc_2852C,   0,   0,  6,    0
	dbglistobj $6E, Obj6E_MapUnc_2852C, $10,   1,  6,    0
	dbglistobj $6E, Obj6E_MapUnc_2852C, $20,   2,  6,    0
	dbglistobj $70, Obj70_MapUnc_28786, $10,   0, $E, $378
	dbglistobj $71, Obj71_MapUnc_11576, $22,   5,  4, $536
	dbglistobj $1C, Obj1C_MapUnc_11552,   0,   0,  4, $3FD
	dbglistobj $1C, Obj1C_MapUnc_11552,   1,   1,  4, $3FD
	dbglistobj $1C, Obj1C_MapUnc_11552,   3,   2,  2, $3FD
	dbglistobj $65, Obj65_Obj6A_Obj6B_MapUnc_26EC8, $B0,   0,  6,    0
	dbglistobj $9F, Obj9F_MapUnc_38314, $24,   0,  0, $31C
	dbglistobj $A4, ObjA4_Obj98_MapUnc_38A96, $2E,   0,  8, $368
	dbglistobj $A1, ObjA1_MapUnc_385E2, $28,   0,  2, $43C
	dbglistobj $31, Obj31_MapUnc_20E74,   0,   0,  8, $680
	dbglistobj $31, Obj31_MapUnc_20E74,   1,   1,  8, $680
	dbglistobj $31, Obj31_MapUnc_20E74,   2,   2,  8, $680
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_MTZ_End

DbgObjList_WFZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $8B, Obj03_MapUnc_1FFB8,   0,   0,  0, $6BC
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $5E,   0,  4, $54F
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $60,   1,  4, $54F
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $62,   2,  4, $54F
	dbglistobj $B4, ObjB4_MapUnc_3B3BE, $64,   0, $A, $561
	dbglistobj $B5, ObjB5_MapUnc_3B548, $66,   0, $A, $3CD
	dbglistobj $B5, ObjB5_MapUnc_3B548, $68,   0, $A, $3CD
	dbglistobj $AD, ObjAD_Obj98_MapUnc_395B4, $42,  $C,  0, $379
	dbglistobj $AE, ObjAD_Obj98_MapUnc_395B4, $44,  $B,  0, $379
	dbglistobj $B6, ObjB6_MapUnc_3B856, $6A,   0, $A, $393
	dbglistobj $B6, ObjB6_MapUnc_3B856, $6C,   0, $A, $393
	dbglistobj $B6, ObjB6_MapUnc_3B856, $6E,   0, $A, $393
	dbglistobj $B6, ObjB6_MapUnc_3B856, $70,   0, $A, $393
	dbglistobj $B7, ObjB7_MapUnc_3B8E4, $72,   0, $C, $39F
	dbglistobj $B8, ObjB8_Obj98_MapUnc_3BA46, $74,   0,  0, $3AB
	dbglistobj $B9, ObjB9_MapUnc_3BB18, $76,   0, $C, $3C3
	dbglistobj $BA, ObjBA_MapUnc_3BB70, $78,   0, $C, $3EA
	dbglistobj $BC, ObjBC_MapUnc_3BC08, $7C,   0,  4, $465
	dbglistobj $BD, ObjBD_MapUnc_3BD3E, $7E,   0, $E, $40E
	dbglistobj $BD, ObjBD_MapUnc_3BD3E, $80,   0, $E, $40E
	dbglistobj $BE, ObjBE_MapUnc_3BE46, $82,   0, $E, $41A
	dbglistobj $BF, ObjBF_MapUnc_3BEE0, $84,   0, $E, $450
	dbglistobj $C0, ObjC0_MapUnc_3C098,   8,   0,  2, $45C
	dbglistobj $C1, ObjC1_MapUnc_3C280, $88,   0, $E, $48C
	dbglistobj $C2, ObjC2_MapUnc_3C3C2, $8A,   0, $A, $461
	dbglistobj $19, Obj19_MapUnc_2222A, $38,   3, $A, $46D
	dbglistobj $D9, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $80, Obj80_MapUnc_29DD0,   0,   0,  2, $3FE
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_WFZ_End

DbgObjList_HTZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $84, Obj03_MapUnc_1FFB8,   0,   0,  0, $6BC
	dbglistobj $84, Obj03_MapUnc_1FFB8,   4,   4,  0, $6BC
	dbglistobj   3, Obj03_MapUnc_1FFB8,   9,   1,  2, $6BC
	dbglistobj $18, Obj18_MapUnc_107F6,   1,   0,  4,    0
	dbglistobj $18, Obj18_MapUnc_107F6, $9A,   1,  4,    0
	dbglistobj $36, Obj36_MapUnc_15B68,   0,   0,  2, $434
	dbglistobj $14, Obj14_MapUnc_21CF0,   0,   0,  0, $3C6
	dbglistobj $2D, Obj2D_MapUnc_11822,   0,   0,  2, $426
	dbglistobj $2F, Obj2F_MapUnc_236FA,   0,   0, $C,    0
	dbglistobj $20, Obj20_MapUnc_23254, $44,   2,  8, $416
	dbglistobj $41, Obj41_MapUnc_1901C, $81,   0,  0, $45C
	dbglistobj $41, Obj41_MapUnc_1901C, $90,   3,  0, $470
	dbglistobj $41, Obj41_MapUnc_1901C, $A0,   6,  0, $45C
	dbglistobj $41, Obj41_MapUnc_1901C, $30,   7,  0, $43C
	dbglistobj $41, Obj41_MapUnc_1901C, $40,  $A,  0, $43C
	dbglistobj $16, Obj16_MapUnc_21F14,   0,   0,  4, $3E6
	dbglistobj $1C, Obj16_MapUnc_21F14,   4,   3,  4, $3E6
	dbglistobj $1C, Obj16_MapUnc_21F14,   5,   4,  4, $3E6
	dbglistobj $1C, Obj1C_MapUnc_113D6,   7,   0,  4,    0
	dbglistobj $1C, Obj1C_MapUnc_113D6,   8,   1,  4,    0
	dbglistobj $32, Obj32_MapUnc_23852,   0,   0,  4, $3B2
	dbglistobj $31, Obj31_MapUnc_20E74,   0,   0,  8, $680
	dbglistobj $31, Obj31_MapUnc_20E74,   1,   1,  8, $680
	dbglistobj $31, Obj31_MapUnc_20E74,   2,   2,  8, $680
	dbglistobj $96, Obj94_Obj98_MapUnc_37678,  $E,   2,  6, $37E
	dbglistobj $92, Obj92_Obj93_MapUnc_37092,  $A,   0,  0,    0
	dbglistobj $95, Obj95_MapUnc_372E6,   0,   0,  0,    0
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_HTZ_End

DbgObjList_OOZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $33, Obj33_MapUnc_23DDC,   1,   0,  6, $32C
	dbglistobj $43, Obj43_MapUnc_23FE0,   0,   0, $C, $30C
	dbglistobj $19, Obj19_MapUnc_2222A, $23,   2,  6, $2F4
	dbglistobj $45, Obj45_MapUnc_2451A,   2,   0,  4, $3C5
	dbglistobj $45, Obj45_MapUnc_2451A, $12,  $A,  4, $3C5
	dbglistobj $46, Obj46_MapUnc_24C52,   0,   1,  6, $354
	dbglistobj $47, Obj47_MapUnc_24D96,   0,   2,  0, $424
	dbglistobj $15, Obj15_MapUnc_101E8, $88,   1,  4, $3E3
	dbglistobj $3D, Obj3D_MapUnc_250BA,   0,   0,  6, $332
	dbglistobj $48, Obj48_MapUnc_254FE, $80,   0,  6, $368
	dbglistobj $48, Obj48_MapUnc_254FE, $81,   1,  6, $368
	dbglistobj $48, Obj48_MapUnc_254FE, $82,   2,  6, $368
	dbglistobj $48, Obj48_MapUnc_254FE, $83,   3,  6, $368
	dbglistobj $1F, Obj1F_MapUnc_110C6,   0,   0,  6, $39D
	dbglistobj $3F, Obj3F_MapUnc_2AA12,   0,   0,  6, $403
	dbglistobj $3F, Obj3F_MapUnc_2AAC4, $80,   0,  6, $403
	dbglistobj $50, Obj50_MapUnc_2CF94,   0,   0,  2, $500
	dbglistobj $4A, Obj4A_MapUnc_2CBFE,   0,   0,  2, $538
	dbglistobj $1C, Obj1C_MapUnc_11406,  $A,   0,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_11406,  $B,   1,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_11406,  $C,   2,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_11406,  $D,   3,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_11406,  $E,   4,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_11406,  $F,   5,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_114AE, $10,   0,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_114AE, $11,   1,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_114AE, $12,   2,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_114AE, $13,   3,  4, $346
	dbglistobj $1C, Obj1C_MapUnc_114AE, $14,   4,  4, $346
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_OOZ_End

DbgObjList_MCZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $15, Obj15_Obj7A_MapUnc_10256, $48,   2,  0,    0
	dbglistobj $1F, Obj1F_MapUnc_11106,   0,   0,  6, $3F4
	dbglistobj $73, Obj73_MapUnc_28B9C, $F5,   0,  2, $6BC
	dbglistobj $6A, Obj6A_MapUnc_27D30, $18,   0,  6, $3D4
	dbglistobj $2A, Obj2A_MapUnc_11666,   0,   0,  4,    0
	dbglistobj $36, Obj36_MapUnc_15B68,   0,   0,  2, $434
	dbglistobj $36, Obj36_MapUnc_15B68, $40,   4,  2, $42C
	dbglistobj $41, Obj41_MapUnc_1901C, $81,   0,  0, $45C
	dbglistobj $41, Obj41_MapUnc_1901C, $90,   3,  0, $470
	dbglistobj $40, Obj40_MapUnc_265F4,   1,   0,  0, $440
	dbglistobj $74, Obj74_MapUnc_20F66, $11,   0,  8, $680
	dbglistobj $75, Obj75_MapUnc_28D8A, $18,   2,  2,    0
	dbglistobj $76, Obj76_MapUnc_28F3A,   0,   0,  0,    0
	dbglistobj $77, Obj77_MapUnc_29064,   1,   0,  6, $43C
	dbglistobj $7F, Obj7F_MapUnc_29938,   0,   0,  6, $40E
	dbglistobj $80, Obj80_MapUnc_29C64,   0,   0,  6, $41E
	dbglistobj $81, Obj81_MapUnc_2A24E,   0,   1,  6, $43C
	dbglistobj $7A, Obj15_Obj7A_MapUnc_10256, $12,   0,  0,    0
	dbglistobj $A3, ObjA3_MapUnc_388F0, $2C,   0,  8, $3A8
	dbglistobj $9E, Obj9E_MapUnc_37FF2, $22,   0,  2, $3C0
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_MCZ_End

DbgObjList_CNZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $84, Obj03_MapUnc_1FFB8,   0,   0,  0, $6BC
	dbglistobj $84, Obj03_MapUnc_1FFB8,   4,   4,  0, $6BC
	dbglistobj   3, Obj03_MapUnc_1FFB8,   9,   1,  2, $6BC
	dbglistobj   3, Obj03_MapUnc_1FFB8,  $D,   5,  2, $6BC
	dbglistobj $44, Obj44_MapUnc_1F85A,   0,   0,  4, $39A
	dbglistobj $85, Obj85_MapUnc_2B07E,   0,   0,  0, $422
	dbglistobj $85, Obj85_MapUnc_2B0EC, $81,   0,  0, $402
	dbglistobj $86, Obj86_MapUnc_2B45A,   0,   0,  4, $3B2
	dbglistobj $86, Obj86_MapUnc_2B45A,   1,   4,  4, $3B2
	dbglistobj $D2, ObjD2_MapUnc_2B694,   1,   0,  4, $37C
	dbglistobj $D3, ObjD3_MapUnc_2B8D4,   0,   0,  0, $380
	dbglistobj $D4, ObjD4_MapUnc_2B9CA,   0,   0,  4, $36C
	dbglistobj $D4, ObjD4_MapUnc_2B9CA,   2,   0,  4, $36C
	dbglistobj $D5, ObjD5_MapUnc_2BB40, $18,   0,  4, $384
	dbglistobj $D6, ObjD6_MapUnc_2BEBC,   1,   0,  0, $388
	dbglistobj $D7, ObjD7_MapUnc_2C626,   0,   0,  4, $394
	dbglistobj $D8, ObjD8_MapUnc_2C8C4,   0,   0,  4, $3E6
	dbglistobj $D8, ObjD8_MapUnc_2C8C4, $40,   1,  4, $3E6
	dbglistobj $D8, ObjD8_MapUnc_2C8C4, $80,   2,  4, $3E6
	dbglistobj $C8, ObjC8_MapUnc_3D450, $AC,   0,  8, $340
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_CNZ_End

DbgObjList_CPZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj  $B, Obj0B_MapUnc_201A0, $70,   0, $E, $3B0
	dbglistobj $1B, Obj1B_MapUnc_223E2,   0,   0, $E, $39C
	dbglistobj $1D, Obj1D_MapUnc_22576,   5,   0, $E, $43C
	dbglistobj $19, Obj19_MapUnc_2222A,   6,   0,  6, $3A0
	dbglistobj $2D, Obj2D_MapUnc_11822,   2,   2,  2, $394
	dbglistobj $32, Obj32_MapUnc_23886,   0,   0,  6, $430
	dbglistobj $6B, Obj6B_MapUnc_2800E, $10,   0,  6, $418
	dbglistobj $78, Obj6B_MapUnc_2800E,   0,   0,  6, $418
	dbglistobj $7A, Obj7A_MapUnc_29564,   0,   0, $E, $418
	dbglistobj $7B, Obj7B_MapUnc_29780,   2,   0,  0, $3E0
	dbglistobj   3, Obj03_MapUnc_1FFB8,   9,   1,  2, $6BC
	dbglistobj   3, Obj03_MapUnc_1FFB8,  $D,   5,  2, $6BC
	dbglistobj $36, Obj36_MapUnc_15B68,   0,   0,  2, $434
	dbglistobj $41, Obj41_MapUnc_1901C, $81,   0,  0, $45C
	dbglistobj $41, Obj41_MapUnc_1901C, $90,   3,  0, $470
	dbglistobj $41, Obj41_MapUnc_1901C, $A0,   6,  0, $45C
	dbglistobj $40, Obj40_MapUnc_265F4,   1,   0,  0, $440
	dbglistobj $A5, ObjA5_ObjA6_Obj98_MapUnc_38CCA, $32,   0,  2, $52D
	dbglistobj $A6, ObjA5_ObjA6_Obj98_MapUnc_38CCA, $32,   3,  2, $52D
	dbglistobj $A7, ObjA7_ObjA8_ObjA9_Obj98_MapUnc_3921A, $36,   0, $A, $500
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_CPZ_End

DbgObjList_ARZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $79, Obj79_MapUnc_1F424,   1,   0,  0, $47C
	dbglistobj $15, Obj15_Obj83_MapUnc_1021E, $88,   2,  0,    0
	dbglistobj $18, Obj18_MapUnc_1084E,   1,   0,  4,    0
	dbglistobj $18, Obj18_MapUnc_1084E, $9A,   1,  4,    0
	dbglistobj $22, Obj22_MapUnc_25804,   0,   1,  0, $417
	dbglistobj $23, Obj23_MapUnc_259E6,   0,   0,  2,    0
	dbglistobj $2B, Obj2B_MapUnc_25C6E,   0,   0,  2,    0
	dbglistobj $2C, Obj31_MapUnc_20E74,   0,   0,  8, $680
	dbglistobj $2C, Obj31_MapUnc_20E74,   1,   1,  8, $680
	dbglistobj $2C, Obj31_MapUnc_20E74,   2,   2,  8, $680
	dbglistobj $40, Obj40_MapUnc_265F4,   1,   0,  0, $440
	dbglistobj $41, Obj41_MapUnc_1901C, $81,   0,  0, $45C
	dbglistobj $41, Obj41_MapUnc_1901C, $90,   3,  0, $470
	dbglistobj $41, Obj41_MapUnc_1901C, $A0,   6,  0, $45C
	dbglistobj   3, Obj03_MapUnc_1FFB8,   9,   1,  2, $6BC
	dbglistobj $36, Obj36_MapUnc_15B68,   0,   0,  2, $434
	dbglistobj $2D, Obj2D_MapUnc_11822,   3,   3,  2, $3F8
	dbglistobj $1F, Obj1F_MapUnc_1115E,   0,   0,  4,    0
	dbglistobj $82, Obj82_MapUnc_2A476,   3,   0,  0,    0
	dbglistobj $82, Obj82_MapUnc_2A476, $11,   1,  0,    0
	dbglistobj $83, Obj15_Obj83_MapUnc_1021E, $10,   1,  0,    0
	dbglistobj $24, Obj24_MapUnc_1FBF6, $81,  $E,  8, $55B
	dbglistobj $91, Obj91_MapUnc_36EF6,   8,   0,  2, $53B
	dbglistobj $8C, Obj8C_MapUnc_36A4E,   0,   0, $A, $500
	dbglistobj $8D, Obj8D_MapUnc_36CF0,   2,   0, $A, $509
	dbglistobj $8E, Obj8D_MapUnc_36CF0,   2,   0, $A, $509
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_ARZ_End

DbgObjList_SCZ: dbglistheader
	dbglistobj $25, Obj25_MapUnc_12382,   0,   0,  2, $6BC
	dbglistobj $26, Obj26_MapUnc_12D36,   8,   0,  0, $680
	dbglistobj $8B, Obj03_MapUnc_1FFB8,   0,   0,  0, $6BC
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $5E,   0,  4, $54F
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $60,   1,  4, $54F
	dbglistobj $B3, ObjB3_MapUnc_3B32C, $62,   2,  4, $54F
	dbglistobj $B4, ObjB4_MapUnc_3B3BE, $64,   0, $A, $561
	dbglistobj $B5, ObjB5_MapUnc_3B548, $66,   0, $A, $3CD
	dbglistobj $B5, ObjB5_MapUnc_3B548, $68,   0, $A, $3CD
	dbglistobj $9A, Obj9A_Obj98_MapUnc_37B62, $16,   0,  0, $38A
	dbglistobj $AC, ObjAC_MapUnc_393CC, $40,   0,  0, $565
	dbglistobj $99, Obj99_Obj98_MapUnc_3789A, $12,   0, $A, $36E
	dbglistobj $3E, Obj3E_MapUnc_3F436,   0,   0,  2, $680
DbgObjList_SCZ_End

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


JmpTo66_Adjust2PArtPointer 
	jmp	Adjust2PArtPointer
; End of function JmpTo66_Adjust2PArtPointer

; ===========================================================================
	align 4




; ---------------------------------------------------------------------------
; "MAIN LEVEL LOAD BLOCK" (after Nemesis)
;
; This struct array tells the engine where to find all the art associated with
; a particular zone. Each zone gets three longwords, in which it stores three
; pointers (in the lower 24 bits) and three jump table indeces (in the upper eight
; bits). The assembled data looks something like this:
;
; aaBBBBBB
; ccDDDDDD
; eeFFFFFF
;
; aa = index for primary pattern load request list
; BBBBBB = pointer to level art
; cc = index for secondary pattern load request list
; DDDDDD = pointer to 16x16 block mappings
; ee = index for palette
; FFFFFF = pointer to 128x128 block mappings
;
; Nemesis refers to this as the "main level load block". However, that name implies
; that this is code (obviously, it isn't), or at least that it points to the level's
; collision, object and ring placement arrays (it only points to art...
; although the 128x128 mappings do affect the actual level layout and collision)
; ---------------------------------------------------------------------------

; macro for declaring a "main level load block" (MLLB)
levartptrs macro plc1,plc2,palette,art,map16x16,map128x128
	dc.l (plc1<<24)|art
	dc.l (plc2<<24)|map16x16
	dc.l (palette<<24)|map128x128
    endm

; BEGIN SArt_Ptrs Art_Ptrs_Array[17]
; dword_42594: MainLoadBlocks: saArtPtrs:
LevelArtPointers:
	levartptrs   4,  5,  4, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   0 ; EHZ  ; EMERALD HILL ZONE
	levartptrs   6,  7,  5, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   1 ; LEV1 ; LEVEL 1 (UNUSED)
	levartptrs   8,  9,  6, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   2 ; LEV2 ; LEVEL 2 (UNUSED)
	levartptrs  $A, $B,  7, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   3 ; LEV3 ; LEVEL 3 (UNUSED)
	levartptrs  $C, $D,  8, ArtKos_MTZ, BM16_MTZ, BM128_MTZ ;   4 ; MTZ  ; METROPOLIS ZONE ACTS 1 & 2
	levartptrs  $C, $D,  8, ArtKos_MTZ, BM16_MTZ, BM128_MTZ ;   5 ; MTZ3 ; METROPOLIS ZONE ACT 3
	levartptrs $10,$11, $A, ArtKos_SCZ, BM16_WFZ, BM128_WFZ ;   6 ; WFZ  ; WING FORTRESS ZONE
	levartptrs $12,$13, $B, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   7 ; HTZ  ; HILL TOP ZONE
	levartptrs $14,$15, $C,   BM16_OOZ,   BM16_OOZ,  BM16_OOZ ;   8 ; HPZ  ; HIDDEN PALACE ZONE (UNUSED)
	levartptrs $16,$17, $D, ArtKos_EHZ, BM16_EHZ, BM128_EHZ ;   9 ; LEV9 ; LEVEL 9 (UNUSED)
	levartptrs $18,$19, $E, ArtKos_OOZ, BM16_OOZ, BM128_OOZ ;  $A ; OOZ  ; OIL OCEAN ZONE
	levartptrs $1A,$1B, $F, ArtKos_MCZ, BM16_MCZ, BM128_MCZ ;  $B ; MCZ  ; MYSTIC CAVE ZONE
	levartptrs $1C,$1D,$10, ArtKos_CNZ, BM16_CNZ, BM128_CNZ ;  $C ; CNZ  ; CASINO NIGHT ZONE
	levartptrs $1E,$1F,$11, ArtKos_CPZ, BM16_CPZ, BM128_CPZ ;  $D ; CPZ  ; CHEMICAL PLANT ZONE
	levartptrs $20,$21,$12, ArtKos_CPZ, BM16_CPZ, BM128_CPZ ;  $E ; DEZ  ; DEATH EGG ZONE
	levartptrs $22,$23,$13, ArtKos_ARZ, BM16_ARZ, BM128_ARZ ;  $F ; ARZ  ; AQUATIC RUIN ZONE
	levartptrs $24,$25,$14, ArtKos_SCZ, BM16_WFZ, BM128_WFZ ; $10 ; SCZ  ; SKY CHASE ZONE
; ---------------------------------------------------------------------------
; END Art_Ptrs_Array[17]




; ---------------------------------------------------------------------------
; PATTERN LOAD REQUEST LISTS
;
; Pattern load request lists are simple structures used to load
; Nemesis-compressed art for sprites.
;
; The decompressor predictably moves down the list, so request 0 is processed first, etc.
; This only matters if your addresses are bad and you overwrite art loaded in a previous request.
;
; NOTICE: The load queue buffer can only hold $15 (21) load requests. None of the routines
; that load PLRs into the queue do any bounds checking, so it's possible to create a buffer
; overflow and completely screw up the variables stored directly after the queue buffer.
;
; Of course, this problem is mitigated by the difficulty one will have in finding space
; to load 21 Nemesis-compressed bits of art. It's still something you need to be aware of
; before adding PLRs.
; ---------------------------------------------------------------------------

;---------------------------------------------------------------------------------------
; Table of pattern load request lists. Remember to use word-length data when adding lists
; otherwise you'll break the array.
;---------------------------------------------------------------------------------------
; word_42660 ; OffInd_PlrLists:
ArtLoadCues:
	dc.w PlrList_Std1 - ArtLoadCues	; 0
	dc.w PlrList_Std2 - ArtLoadCues	; 1
	dc.w PlrList_StdWtr - ArtLoadCues	; 2
	dc.w PlrList_GameOver - ArtLoadCues	; 3
	dc.w PlrList_Ehz1 - ArtLoadCues	; 4
	dc.w PlrList_Ehz2 - ArtLoadCues	; 5
	dc.w PLC_6 - ArtLoadCues	; 6
	dc.w PLC_7 - ArtLoadCues	; 7
	dc.w PLC_8 - ArtLoadCues	; 8
	dc.w PLC_9 - ArtLoadCues	; 9
	dc.w PlrList_Mtz1 - ArtLoadCues	; 10
	dc.w PlrList_Mtz1 - ArtLoadCues	; 11
	dc.w PlrList_Mtz1 - ArtLoadCues	; 12
	dc.w PlrList_Mtz2 - ArtLoadCues	; 13
	dc.w PlrList_Wfz1 - ArtLoadCues	; 14
	dc.w PlrList_Wfz1 - ArtLoadCues	; 15
	dc.w PlrList_Wfz1 - ArtLoadCues	; 16
	dc.w PlrList_Wfz2 - ArtLoadCues	; 17
	dc.w PlrList_Htz1 - ArtLoadCues	; 18
	dc.w PlrList_Htz2 - ArtLoadCues	; 19
	dc.w PLC_10 - ArtLoadCues	; 20
	dc.w PLC_10 - ArtLoadCues	; 21
	dc.w PLC_10 - ArtLoadCues	; 22
	dc.w PLC_10 - ArtLoadCues	; 23
	dc.w PLC_10 - ArtLoadCues	; 24
	dc.w PLC_11 - ArtLoadCues	; 25
	dc.w PLC_12 - ArtLoadCues	; 26
	dc.w PLC_13 - ArtLoadCues	; 27
	dc.w PLC_14 - ArtLoadCues	; 28
	dc.w PLC_15 - ArtLoadCues	; 29
	dc.w PLC_16 - ArtLoadCues	; 30
	dc.w PLC_17 - ArtLoadCues	; 31
	dc.w PLC_18 - ArtLoadCues	; 32
	dc.w PLC_19 - ArtLoadCues	; 33
	dc.w PLC_1A - ArtLoadCues	; 34
	dc.w PLC_1B - ArtLoadCues	; 35
	dc.w PLC_1C - ArtLoadCues	; 36
	dc.w PLC_1D - ArtLoadCues	; 37
	dc.w PLC_1E - ArtLoadCues	; 38
	dc.w PLC_1F - ArtLoadCues	; 39
	dc.w PLC_20 - ArtLoadCues	; 40
	dc.w PLC_21 - ArtLoadCues	; 41
	dc.w PLC_22 - ArtLoadCues	; 42
	dc.w PLC_23 - ArtLoadCues	; 43
	dc.w PLC_24 - ArtLoadCues	; 44
	dc.w PLC_25 - ArtLoadCues	; 45
	dc.w PLC_26 - ArtLoadCues	; 46
	dc.w PLC_27 - ArtLoadCues	; 47
	dc.w PLC_28 - ArtLoadCues	; 48
	dc.w PLC_29 - ArtLoadCues	; 49
	dc.w PLC_2A - ArtLoadCues	; 50
	dc.w PLC_2B - ArtLoadCues	; 51
	dc.w PLC_2C - ArtLoadCues	; 52
	dc.w PLC_2D - ArtLoadCues	; 53
	dc.w PLC_2E - ArtLoadCues	; 54
	dc.w PLC_2F - ArtLoadCues	; 55
	dc.w PLC_30 - ArtLoadCues	; 56
	dc.w PLC_31 - ArtLoadCues	; 57
	dc.w PLC_32 - ArtLoadCues	; 58
	dc.w PLC_33 - ArtLoadCues	; 59
	dc.w PLC_34 - ArtLoadCues	; 60
	dc.w PLC_35 - ArtLoadCues	; 61
	dc.w PLC_36 - ArtLoadCues	; 62
	dc.w PLC_37 - ArtLoadCues	; 63
	dc.w PLC_38 - ArtLoadCues	; 64
	dc.w PLC_39 - ArtLoadCues	; 65
	dc.w PLC_3A - ArtLoadCues	; 66
	dc.w PLC_3B - ArtLoadCues	; 67

; macro for a pattern load request list header
; must be on the same line as a label that has a corresponding _End label later
plrlistheader macro {INTLABEL}
__LABEL__ label *
	dc.w ((__LABEL___End - __LABEL__ - 8) / 6)
    endm

; macro for a pattern load request
plreq macro toVRAMaddr,fromROMaddr
	dc.l	fromROMaddr
	dc.w	toVRAMaddr
    endm

;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 1 - loaded for every level
;---------------------------------------------------------------------------------------
PlrList_Std1: plrlistheader
	plreq $D940, ArtNem_HUD
	plreq $FA80, ArtNem_Sonic_life_counter
	plreq $D780, ArtNem_Ring
	plreq $9580, ArtNem_Numbers
PlrList_Std1_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 2 - loaded for every level
;---------------------------------------------------------------------------------------
PlrList_Std2: plrlistheader
	plreq $8F80, ArtNem_Checkpoint
	plreq $D000, ArtNem_Powerups
	plreq $97C0, ArtNem_Shield
	plreq $9BC0, ArtNem_Invincible_stars
PlrList_Std2_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Aquatic level standard
;---------------------------------------------------------------------------------------
PlrList_StdWtr:	plrlistheader
	plreq $B480, ArtNem_Explosion
	plreq $BE40, ArtNem_SuperSonic_stars
	plreq $BD00, ArtNem_Bubbles
PlrList_StdWtr_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Game/Time over
;---------------------------------------------------------------------------------------
PlrList_GameOver: plrlistheader
	plreq $9BC0, ArtNem_Game_Over
PlrList_GameOver_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Emerald Hill Zone primary
;---------------------------------------------------------------------------------------
PlrList_Ehz1: plrlistheader
;	plreq $73C0, ArtNem_Waterfall
;	plreq $76C0, ArtNem_EHZ_Bridge
;	plreq $77C0, ArtNem_Buzzer_Fireball
;	plreq $7A40, ArtNem_Buzzer
;	plreq $7DC0, ArtNem_Coconuts
;	plreq $8280, ArtNem_Masher
;	plreq $8780-$13C0, ArtNem_DignlSprng
;	plreq $8B80-$13C0, ArtNem_VrtclSprng
;	plreq $8E00-$13C0, ArtNem_HrzntlSprng
	plreq $73C0, ArtNem_FieryExplosion ; $7C00
PlrList_Ehz1_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Emerald Hill Zone secondary
;---------------------------------------------------------------------------------------
PlrList_Ehz2: plrlistheader
	plreq $8580, ArtNem_HorizSpike	; H-SPIKE GRAPHICS ADDED
	plreq $8680, ArtNem_Spikes
PlrList_Ehz2_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Miles 1up patch
;---------------------------------------------------------------------------------------
PLC_6: plrlistheader
	plreq $DE80, ArtUnc_MilesLife
PLC_6_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Miles life counter
;---------------------------------------------------------------------------------------
PLC_7: plrlistheader
	plreq $FA80, ArtUnc_MilesLife
PLC_7_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Tails 1up patch
;---------------------------------------------------------------------------------------
PLC_8: plrlistheader
	plreq $DE80, ArtNem_TailsLife
PLC_8_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Tails life counter
;---------------------------------------------------------------------------------------
PLC_9: plrlistheader
	plreq $FA80, ArtNem_TailsLife
PLC_9_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Metropolis Zone primary
;---------------------------------------------------------------------------------------
PlrList_Mtz1: plrlistheader
	plreq $6F00, ArtNem_MtzWheel
	plreq $7E00, ArtNem_MtzWheelIndent
	plreq $7F20, ArtNem_LavaCup
	plreq $7FA0, ArtNem_BoltEnd_Rope
	plreq $80A0, ArtNem_MtzSteam
	plreq $8280, ArtNem_MtzSpikeBlock
	plreq $8380, ArtNem_MtzSpike
	plreq $6380, ArtNem_Crabmeat
	plreq $6D00, ArtNem_MtzSupernova
PlrList_Mtz1_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Metropolis Zone secondary
;---------------------------------------------------------------------------------------
PlrList_Mtz2: plrlistheader
	plreq $8480, ArtNem_Button
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_MtzMantis
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
	plreq $A000, ArtNem_MtzAsstBlocks
	plreq $A6C0, ArtNem_MtzLavaBubble
	plreq $ABE0, ArtNem_MtzCog
	plreq $AD60, ArtNem_MtzUnkBlocks
PlrList_Mtz2_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Wing Fortress Zone primary
;---------------------------------------------------------------------------------------
PlrList_Wfz1: plrlistheader
	plreq $A000, ArtNem_Tornado
	plreq $A9E0, ArtNem_Clouds
	plreq $AC20, ArtNem_WfzVrtclPrpllr
	plreq $79A0, ArtNem_WfzHrzntlPrpllr
	plreq $ACA0, ArtNem_Balkrie
	plreq $9180, ArtNem_BreakPanels
	plreq $6F20, ArtNem_WfzScratch
	plreq $7260, ArtNem_WfzTiltPlatforms
	plreq $A000, ArtNem_Tornado
	plreq $A9E0, ArtNem_Clouds
PlrList_Wfz1_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Wing Fortress Zone secondary
;---------------------------------------------------------------------------------------
PlrList_Wfz2: plrlistheader
	plreq $AC20, ArtNem_WfzVrtclPrpllr
	plreq $79A0, ArtNem_WfzHrzntlPrpllr
	plreq $73E0, ArtNem_WfzVrtclLazer
	plreq $7560, ArtNem_WfzWallTurret
	plreq $7860, ArtNem_WfzHrzntlLazer
	plreq $7D40, ArtNem_WfzConveyorBeltWheel
	plreq $7F40, ArtNem_WfzHook
	plreq $8CA0, ArtNem_WfzThrust
	plreq $81C0, ArtNem_WfzBeltPlatform
	plreq $8340, ArtNem_WfzGunPlatform
	plreq $8A00, ArtNem_WfzUnusedBadnik
	plreq $8B80, ArtNem_WfzLaunchCatapult
	plreq $8C20, ArtNem_WfzSwitch
	plreq $8DA0, ArtNem_WfzFloatingPlatform
PlrList_Wfz2_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Hill Top Zone primary
;---------------------------------------------------------------------------------------
PlrList_Htz1: plrlistheader
	plreq $73C0, ArtNem_Buzzer_Fireball
	plreq $7640, ArtNem_HtzRock
	plreq $78C0, ArtNem_HtzSeeSaw
	plreq $7BC0, ArtNem_Sol
	plreq $6FC0, ArtNem_Rexon
	plreq $A400, ArtNem_Spiker
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_DignlSprng
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
PlrList_Htz1_End
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Hill Top Zone secondary
;---------------------------------------------------------------------------------------
PlrList_Htz2: plrlistheader
	plreq $7CC0, ArtNem_HtzZipline
	plreq $82C0, ArtNem_HtzFireball
	plreq $84C0, ArtNem_HtzValveBarrier
PlrList_Htz2_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; OOZ Primary
;---------------------------------------------------------------------------------------
PLC_10: plrlistheader
	plreq $5C40, ArtNem_OOZBurn
	plreq $5E80, ArtNem_OOZElevator
	plreq $6180, ArtNem_SpikyThing
	plreq $6580, ArtNem_BurnerLid
	plreq $6640, ArtNem_StripedBlocksVert
	plreq $66C0, ArtNem_Oilfall
	plreq $68C0, ArtNem_Oilfall2
	plreq $6A80, ArtNem_BallThing
	plreq $6D00, ArtNem_LaunchBall
PLC_10_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; OOZ Secondary
;---------------------------------------------------------------------------------------
PLC_11: plrlistheader
	plreq $73A0, ArtNem_OOZPlatform
	plreq $78A0, ArtNem_PushSpring
	plreq $7C60, ArtNem_OOZSwingPlat
	plreq $7FE0, ArtNem_StripedBlocksHoriz
	plreq $8060, ArtNem_OOZFanHoriz
	plreq $8480, ArtNem_Button
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_DignlSprng
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
	plreq $A000, ArtNem_Aquis
	plreq $A700, ArtNem_Octus
PLC_11_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; MCZ Primary
;---------------------------------------------------------------------------------------
PLC_12: plrlistheader
	plreq $7A80, ArtNem_Crate
	plreq $7E80, ArtNem_MCZCollapsePlat
	plreq $81C0, ArtNem_VineSwitch
	plreq $83C0, ArtNem_VinePulley
	plreq $7500, ArtNem_Flasher
	plreq $7800, ArtNem_Crawlton
PLC_12_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; MCZ Secondary
;---------------------------------------------------------------------------------------
PLC_13: plrlistheader
	plreq $8580, ArtNem_HorizSpike
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_MCZGateLog
	plreq $8800, ArtNem_LeverSpring
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
PLC_13_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CNZ Primary
;---------------------------------------------------------------------------------------
PLC_14: plrlistheader
	plreq $6800, ArtNem_Crawl
	plreq $6D80, ArtNem_BigMovingBlock
	plreq $6F80, ArtNem_CNZSnake
	plreq $7000, ArtNem_CNZBonusSpike
	plreq $7080, ArtNem_CNZElevator
	plreq $7100, ArtNem_CNZCage
	plreq $7280, ArtNem_CNZHexBumper
	plreq $7340, ArtNem_CNZRoundBumper
	plreq $7640, ArtNem_CNZFlipper
	plreq $7CC0, ArtNem_CNZMiniBumper
PLC_14_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CNZ Secondary
;---------------------------------------------------------------------------------------
PLC_15: plrlistheader
	plreq $8040, ArtNem_CNZDiagPlunger
	plreq $8440, ArtNem_CNZVertPlunger
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_DignlSprng
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
PLC_15_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CPZ Primary
;---------------------------------------------------------------------------------------
PLC_16: plrlistheader
	plreq $6E60, ArtNem_CPZMetalThings
	plreq $7280, ArtNem_ConstructionStripes
	plreq $7380, ArtNem_CPZBooster
	plreq $7400, ArtNem_CPZElevator
	plreq $7600, ArtNem_CPZAnimatedBits
	plreq $7C00, ArtNem_CPZTubeSpring
	plreq $8000, ArtNem_WaterSurface
	plreq $8300, ArtNem_CPZStairBlock
	plreq $8600, ArtNem_CPZMetalBlock
PLC_16_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CPZ Secondary
;---------------------------------------------------------------------------------------
PLC_17: plrlistheader
	plreq $A000, ArtNem_Grabber
	plreq $A5A0, ArtNem_Spiny
	plreq $8680, ArtNem_Spikes
	plreq $8780, ArtNem_CPZDroplet
	plreq $8800, ArtNem_LeverSpring
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
PLC_17_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; DEZ Primary
;---------------------------------------------------------------------------------------
PLC_18: plrlistheader
	plreq $6500, ArtNem_ConstructionStripes
PLC_18_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; DEZ Secondary
;---------------------------------------------------------------------------------------
PLC_19: plrlistheader
	plreq $7000, ArtNem_SilverSonic
	plreq $6F00, ArtNem_DEZWindow
	plreq $A300, ArtNem_RobotnikRunning
	plreq $A000, ArtNem_RobotnikUpper
	plreq $AC80, ArtNem_RobotnikLower
PLC_19_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; ARZ Primary
;---------------------------------------------------------------------------------------
PLC_1A: plrlistheader
	plreq $7F00, ArtNem_ARZBarrierThing
	plreq $8000, ArtNem_WaterSurface2
	plreq $8200, ArtNem_Leaves
	plreq $82E0, ArtNem_ArrowAndShooter
PLC_1A_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; ARZ Secondary
;---------------------------------------------------------------------------------------
PLC_1B: plrlistheader
	plreq $A760, ArtNem_ChopChop
	plreq $A000, ArtNem_Whisp
	plreq $A120, ArtNem_Grounder
	plreq $AB60, ArtNem_BigBubbles
	plreq $8680, ArtNem_Spikes
	plreq $8800, ArtNem_LeverSpring
	plreq $8B80, ArtNem_VrtclSprng
	plreq $8E00, ArtNem_HrzntlSprng
PLC_1B_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; SCZ Primary
;---------------------------------------------------------------------------------------
PLC_1C: plrlistheader
	plreq $A000, ArtNem_Tornado
PLC_1C_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; SCZ Secondary
;---------------------------------------------------------------------------------------
PLC_1D: plrlistheader
	plreq $A9E0, ArtNem_Clouds
	plreq $AC20, ArtNem_WfzVrtclPrpllr
	plreq $79A0, ArtNem_WfzHrzntlPrpllr
	plreq $ACA0, ArtNem_Balkrie
	plreq $7140, ArtNem_Turtloid
	plreq $6DC0, ArtNem_Nebula
PLC_1D_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Sonic end of level results screen
;---------------------------------------------------------------------------------------
PLC_1E: plrlistheader
	plreq $B000, ArtNem_TitleCard
	plreq $B600, ArtNem_ResultsText
	plreq $BE80, ArtNem_MiniSonic
	plreq $A800, ArtNem_Perfect
PLC_1E_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; End of level signpost
;---------------------------------------------------------------------------------------
PLC_1F: plrlistheader
	plreq $8680, ArtNem_Signpost
PLC_1F_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CPZ Boss
;---------------------------------------------------------------------------------------
PLC_20: plrlistheader
	plreq $8400, ArtNem_Eggpod
	plreq $A000, ArtNem_CPZBoss
	plreq $8300, ArtNem_EggpodJets
	plreq $AE00, ArtNem_BossSmoke
	plreq $B000, ArtNem_FieryExplosion
PLC_20_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; EHZ Boss
;---------------------------------------------------------------------------------------
PLC_21: plrlistheader
	plreq $7400, ArtNem_Eggpod
	plreq $8000, ArtNem_EHZBoss
	plreq $AD80, ArtNem_EggChoppers
	plreq $B000, ArtNem_FieryExplosion
PLC_21_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; HTZ Boss
;---------------------------------------------------------------------------------------
PLC_22: plrlistheader
	plreq $7820, ArtNem_Eggpod
	plreq $8420, ArtNem_HTZBoss
	plreq $B000, ArtNem_FieryExplosion
	plreq $BC80, ArtNem_BossSmoke
PLC_22_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; ARZ Boss
;---------------------------------------------------------------------------------------
PLC_23: plrlistheader
	plreq $A000, ArtNem_Eggpod
	plreq $7C00, ArtNem_ARZBoss
	plreq $B000, ArtNem_FieryExplosion
PLC_23_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; MCZ Boss
;---------------------------------------------------------------------------------------
PLC_24: plrlistheader
	plreq $A000, ArtNem_Eggpod
	plreq $7800, ArtNem_MCZBoss
	plreq $B000, ArtNem_FieryExplosion
PLC_24_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CNZ Boss
;---------------------------------------------------------------------------------------
PLC_25: plrlistheader
	plreq $A000, ArtNem_Eggpod
	plreq $80E0, ArtNem_CNZBoss
	plreq $B000, ArtNem_FieryExplosion
PLC_25_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; MTZ Boss
;---------------------------------------------------------------------------------------
PLC_26: plrlistheader
	plreq $A000, ArtNem_Eggpod
	plreq $6F80, ArtNem_MTZBoss
	plreq $AC00, ArtNem_EggpodJets
	plreq $B000, ArtNem_FieryExplosion
PLC_26_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; OOZ Boss
;---------------------------------------------------------------------------------------
PLC_27: plrlistheader
	plreq $7180, ArtNem_OOZBoss
	plreq $B000, ArtNem_FieryExplosion
PLC_27_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Fiery Explosion
;---------------------------------------------------------------------------------------
PLC_28: plrlistheader
	plreq $B000, ArtNem_FieryExplosion
PLC_28_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Death Egg
;---------------------------------------------------------------------------------------
PLC_29: plrlistheader
	plreq $6600, ArtNem_DEZBoss
PLC_29_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; EHZ Animals
;---------------------------------------------------------------------------------------
PLC_2A: plrlistheader
	plreq $B000, ArtNem_Squirrel
	plreq $B280, ArtNem_Bird
PLC_2A_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; MCZ Animals
;---------------------------------------------------------------------------------------
PLC_2B: plrlistheader
	plreq $B000, ArtNem_Mouse
	plreq $B280, ArtNem_Chicken
PLC_2B_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; HTZ/MTZ/WFZ animals
;---------------------------------------------------------------------------------------
PLC_2C: plrlistheader
	plreq $B000, ArtNem_Beaver
	plreq $B280, ArtNem_Eagle
PLC_2C_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; DEZ Animals
;---------------------------------------------------------------------------------------
PLC_2D: plrlistheader
	plreq $B000, ArtNem_Pig
	plreq $B280, ArtNem_Chicken
PLC_2D_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; HPZ animals
;---------------------------------------------------------------------------------------
PLC_2E: plrlistheader
	plreq $B000, ArtNem_Mouse
	plreq $B280, ArtNem_Seal
PLC_2E_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; OOZ Animals
;---------------------------------------------------------------------------------------
PLC_2F: plrlistheader
	plreq $B000, ArtNem_Penguin
	plreq $B280, ArtNem_Seal
PLC_2F_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; SCZ Animals
;---------------------------------------------------------------------------------------
PLC_30: plrlistheader
	plreq $B000, ArtNem_Turtle
	plreq $B280, ArtNem_Chicken
PLC_30_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CNZ Animals
;---------------------------------------------------------------------------------------
PLC_31: plrlistheader
	plreq $B000, ArtNem_Bear
	plreq $B280, ArtNem_Bird
PLC_31_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; CPZ Animals
;---------------------------------------------------------------------------------------
PLC_32: plrlistheader
	plreq $B000, ArtNem_Rabbit
	plreq $B280, ArtNem_Eagle
PLC_32_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; ARZ Animals
;---------------------------------------------------------------------------------------
PLC_33: plrlistheader
	plreq $B000, ArtNem_Penguin
	plreq $B280, ArtNem_Bird
PLC_33_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Special Stage
;---------------------------------------------------------------------------------------
PLC_34: plrlistheader
	plreq $2E80, ArtNem_SpecialEmerald
	plreq $3440, ArtNem_SpecialMessages
	plreq $3F40, MapEng_SpecialHUD
	plreq $4780, ArtNem_SpecialFlatShadow
	plreq $4C40, ArtNem_SpecialDiagShadow
	plreq $5380, ArtNem_SpecialSideShadow
	plreq $56A0, ArtNem_SpecialExplosion
	plreq $6440, ArtNem_SpecialRings
	plreq $7140, ArtNem_SpecialStart
	plreq $7BE0, ArtNem_SpecialPlayerVSPlayer
	plreq $E000, ArtNem_SpecialBack
	plreq $EFE0, ArtNem_SpecialStars
	plreq $F480, ArtNem_SpecialTailsText
PLC_34_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Special Stage Bombs
;---------------------------------------------------------------------------------------
PLC_35: plrlistheader
	plreq $7140, ArtNem_SpecialBomb
PLC_35_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; WFZ Boss
;---------------------------------------------------------------------------------------
PLC_36: plrlistheader
	plreq $6F20, ArtNem_WFZBoss
	plreq $A300, ArtNem_RobotnikRunning
	plreq $A000, ArtNem_RobotnikUpper
	plreq $AC80, ArtNem_RobotnikLower
	plreq $B000, ArtNem_FieryExplosion
PLC_36_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Tornado
;---------------------------------------------------------------------------------------
PLC_37: plrlistheader
	plreq $A000, ArtNem_Tornado
	plreq $AC20, ArtNem_TornadoThruster
	plreq $A9E0, ArtNem_Clouds
PLC_37_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Egg Prison
;---------------------------------------------------------------------------------------
PLC_38: plrlistheader
	plreq $D000, ArtNem_Capsule
PLC_38_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Normal explosion
;---------------------------------------------------------------------------------------
PLC_39: plrlistheader
	plreq $B480, ArtNem_Explosion
PLC_39_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Tails end of level results screen
;---------------------------------------------------------------------------------------
PLC_3A: plrlistheader
	plreq $B000, ArtNem_TitleCard
	plreq $B600, ArtNem_ResultsText
	plreq $BE80, ArtNem_MiniTails
	plreq $A800, ArtNem_Perfect
PLC_3A_End
;---------------------------------------------------------------------------------------
; Pattern load queue
; Fiery Explosion
;---------------------------------------------------------------------------------------
PLC_3B: plrlistheader
	plreq $B000, ArtNem_FieryExplosion
PLC_3B_End



;---------------------------------------------------------------------------------------
; Curve and resistance mapping
;---------------------------------------------------------------------------------------
ColCurveMap:	BINCLUDE	"collision/Curve and resistance mapping.bin"
;--------------------------------------------------------------------------------------
; Collision arrays
;--------------------------------------------------------------------------------------
ColArray:	BINCLUDE	"collision/Collision array 1.bin"
		BINCLUDE	"collision/Collision array 2.bin"
;---------------------------------------------------------------------------------------
; EHZ and HTZ primary 16x16 collision index (Kosinski compression)
ColP_EHZHTZ:	BINCLUDE	"collision/EHZ and HTZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; EHZ and HTZ secondary 16x16 collision index (Kosinski compression)
ColS_EHZHTZ:	BINCLUDE	"collision/EHZ and HTZ secondary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; MTZ primary 16x16 collision index (Kosinski compression)
ColP_MTZ:	BINCLUDE	"collision/MTZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; OOZ primary 16x16 collision index (Kosinski compression)
ColP_OOZ:	BINCLUDE	"collision/OOZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; MCZ primary 16x16 collision index (Kosinski compression)
ColP_MCZ:	BINCLUDE	"collision/MCZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; CNZ primary 16x16 collision index (Kosinski compression)
ColP_CNZ:	BINCLUDE	"collision/CNZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; CNZ secondary 16x16 collision index (Kosinski compression)
ColS_CNZ:	BINCLUDE	"collision/CNZ secondary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; CPZ and DEZ primary 16x16 collision index (Kosinski compression)
ColP_CPZDEZ:	BINCLUDE	"collision/CPZ and DEZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; CPZ and DEZ secondary 16x16 collision index (Kosinski compression)
ColS_CPZDEZ:	BINCLUDE	"collision/CPZ and DEZ secondary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; ARZ primary 16x16 collision index (Kosinski compression)
ColP_ARZ:	BINCLUDE	"collision/ARZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; ARZ secondary 16x16 collision index (Kosinski compression)
ColS_ARZ:	BINCLUDE	"collision/ARZ secondary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; WFZ/SCZ primary 16x16 collision index (Kosinski compression)
ColP_WFZSCZ:	BINCLUDE	"collision/WFZ and SCZ primary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------
; WFZ/SCZ secondary 16x16 collision index (Kosinski compression)
ColS_WFZSCZ:	BINCLUDE	"collision/WFZ and SCZ secondary 16x16 collision index.bin"
;---------------------------------------------------------------------------------------




;---------------------------------------------------------------------------------------
; Offset index of level layouts
; Two entries per zone, pointing to the level layouts for acts 1 and 2 of each zone
; respectively.
;---------------------------------------------------------------------------------------
Off_Level:
	dc.w Level_EHZ1-Off_Level
	dc.w Level_EHZ2-Off_Level; 1
	dc.w Level_EHZ1-Off_Level; 2
	dc.w Level_EHZ1-Off_Level; 3
	dc.w Level_EHZ1-Off_Level; 4
	dc.w Level_EHZ1-Off_Level; 5
	dc.w Level_EHZ1-Off_Level; 6
	dc.w Level_EHZ1-Off_Level; 7
	dc.w Level_MTZ1-Off_Level; 8
	dc.w Level_MTZ2-Off_Level; 9
	dc.w Level_MTZ3-Off_Level; 10
	dc.w Level_MTZ3-Off_Level; 11
	dc.w Level_WFZ-Off_Level; 12
	dc.w Level_WFZ-Off_Level; 13
	dc.w Level_HTZ1-Off_Level; 14
	dc.w Level_HTZ2-Off_Level; 15
	dc.w Level_OOZ1-Off_Level; 16
	dc.w Level_OOZ1-Off_Level; 17
	dc.w Level_EHZ1-Off_Level; 18
	dc.w Level_EHZ1-Off_Level; 19
	dc.w Level_OOZ1-Off_Level; 20
	dc.w Level_OOZ2-Off_Level; 21
	dc.w Level_MCZ1-Off_Level; 22
	dc.w Level_MCZ2-Off_Level; 23
	dc.w Level_CNZ1-Off_Level; 24
	dc.w Level_CNZ2-Off_Level; 25
	dc.w Level_CPZ1-Off_Level; 26
	dc.w Level_CPZ2-Off_Level; 27
	dc.w Level_DEZ-Off_Level; 28
	dc.w Level_DEZ-Off_Level; 29
	dc.w Level_ARZ1-Off_Level; 30
	dc.w Level_ARZ2-Off_Level; 31
	dc.w Level_SCZ-Off_Level; 32
	dc.w Level_SCZ-Off_Level; 33
;---------------------------------------------------------------------------------------
; EHZ act 1 level layout (Kosinski compression)
Level_EHZ1:	BINCLUDE	"level/layout/EHZ_1.bin"
;---------------------------------------------------------------------------------------
; EHZ act 2 level layout (Kosinski compression)
Level_EHZ2:	BINCLUDE	"level/layout/EHZ_2.bin"
;---------------------------------------------------------------------------------------
; MTZ act 1 level layout (Kosinski compression)
Level_MTZ1:	BINCLUDE	"level/layout/MTZ_1.bin"
;---------------------------------------------------------------------------------------
; MTZ act 2 level layout (Kosinski compression)
Level_MTZ2:	BINCLUDE	"level/layout/MTZ_2.bin"
;---------------------------------------------------------------------------------------
; MTZ act 3 level layout (Kosinski compression)
Level_MTZ3:	BINCLUDE	"level/layout/MTZ_3.bin"
;---------------------------------------------------------------------------------------
; WFZ level layout (Kosinski compression)
Level_WFZ:	BINCLUDE	"level/layout/WFZ.bin"
;---------------------------------------------------------------------------------------
; HTZ act 1 level layout (Kosinski compression)
Level_HTZ1:	BINCLUDE	"level/layout/HTZ_1.bin"
;---------------------------------------------------------------------------------------
; HTZ act 2 level layout (Kosinski compression)
Level_HTZ2:	BINCLUDE	"level/layout/HTZ_2.bin"
;---------------------------------------------------------------------------------------
; OOZ act 1 level layout (Kosinski compression)
Level_OOZ1:	BINCLUDE	"level/layout/OOZ_1.bin"
;---------------------------------------------------------------------------------------
; OOZ act 2 level layout (Kosinski compression)
Level_OOZ2:	BINCLUDE	"level/layout/OOZ_2.bin"
;---------------------------------------------------------------------------------------
; MCZ act 1 level layout (Kosinski compression)
Level_MCZ1:	BINCLUDE	"level/layout/MCZ_1.bin"
;---------------------------------------------------------------------------------------
; MCZ act 2 level layout (Kosinski compression)
Level_MCZ2:	BINCLUDE	"level/layout/MCZ_2.bin"
;---------------------------------------------------------------------------------------
; CNZ act 1 level layout (Kosinski compression)
Level_CNZ1:	BINCLUDE	"level/layout/CNZ_1.bin"
;---------------------------------------------------------------------------------------
; CNZ act 2 level layout (Kosinski compression)
Level_CNZ2:	BINCLUDE	"level/layout/CNZ_2.bin"
;---------------------------------------------------------------------------------------
; CPZ act 1 level layout (Kosinski compression)
Level_CPZ1:	BINCLUDE	"level/layout/CPZ_1.bin"
;---------------------------------------------------------------------------------------
; CPZ act 2 level layout (Kosinski compression)
Level_CPZ2:	BINCLUDE	"level/layout/CPZ_2.bin"
;---------------------------------------------------------------------------------------
; DEZ level layout (Kosinski compression)
Level_DEZ:	BINCLUDE	"level/layout/DEZ.bin"
;---------------------------------------------------------------------------------------
; ARZ act 1 level layout (Kosinski compression)
Level_ARZ1:	BINCLUDE	"level/layout/ARZ_1.bin"
;---------------------------------------------------------------------------------------
; ARZ act 2 level layout (Kosinski compression)
Level_ARZ2:	BINCLUDE	"level/layout/ARZ_2.bin"
;---------------------------------------------------------------------------------------
; SCZ level layout (Kosinski compression)
Level_SCZ:	BINCLUDE	"level/layout/SCZ.bin"




;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated flowers in EHZ and HTZ ; ArtUnc_49714: ArtUnc_49794: ArtUnc_49814: ArtUnc_49894:
;---------------------------------------------------------------------------------------
ArtUnc_Flowers1:	BINCLUDE	"art/uncompressed/EHZ and HTZ flowers - 1.bin"
ArtUnc_Flowers2:	BINCLUDE	"art/uncompressed/EHZ and HTZ flowers - 2.bin"
ArtUnc_Flowers3:	BINCLUDE	"art/uncompressed/EHZ and HTZ flowers - 3.bin"
ArtUnc_Flowers4:	BINCLUDE	"art/uncompressed/EHZ and HTZ flowers - 4.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing thing against checkered backing from EHZ ; ArtUnc_49914:
ArtUnc_EHZPulseBall:	BINCLUDE	"art/uncompressed/Pulsing ball against checkered background (EHZ).bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (192 blocks)
; Dynamically reloaded cliffs in background from HTZ ; ArtNem_49A14:
ArtUnc_HTZCliffs:	BINCLUDE	"art/nemesis/Dynamically reloaded cliffs in HTZ background.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Dynamically reloaded clouds in background from HTZ ; ArtUnc_4A33E:
ArtUnc_HTZClouds:	BINCLUDE	"art/uncompressed/Background clouds (HTZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Spinning metal cylinder patterns in MTZ ; ArtUnc_4A73E:
ArtUnc_MTZCylinder:	BINCLUDE	"art/uncompressed/Spinning metal cylinder (MTZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Lava patterns in MTZ and HTZ  ; ArtUnc_4B73E:
ArtUnc_Lava:	BINCLUDE	"art/uncompressed/Lava.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated section of MTZ background ; ArtUnc_4BD3E:
ArtUnc_MTZAnimBack:	BINCLUDE	"art/uncompressed/Animated section of MTZ background.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing ball in OOZ   ; ArtUnc_4BF7E:
ArtUnc_OOZPulseBall:	BINCLUDE	"art/uncompressed/Pulsing ball (OOZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Square rotating around ball in OOZ ; ArtUnc_4C0FE: ArtUnc_4C2FE:
ArtUnc_OOZSquareBall1:	BINCLUDE	"art/uncompressed/Square rotating around ball in OOZ - 1.bin"
ArtUnc_OOZSquareBall2:	BINCLUDE	"art/uncompressed/Square rotating around ball in OOZ - 2.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Oil in OOZ    ; ArtUnc_4C4FE: ArtUnc_4CCFE:
ArtUnc_Oil1:	BINCLUDE	"art/uncompressed/Oil - 1.bin"
ArtUnc_Oil2:	BINCLUDE	"art/uncompressed/Oil - 2.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Flipping foreground section in CNZ ; ArtUnc_4D4FE:
ArtUnc_OOZFlipTiles:	BINCLUDE	"art/uncompressed/Flipping foreground section (CNZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Bonus pictures for slots in CNZ ; ArtUnc_4EEFE:
ArtUnc_CNZSlotPics:	BINCLUDE	"art/uncompressed/Slot pictures.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated background section in CPZ and DEZ ; ArtUnc_4FAFE:
ArtUnc_CPZAnimBack:	BINCLUDE	"art/uncompressed/Animated background section (CPZ and DEZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Waterfall patterns from ARZ   ; ArtUnc_4FCFE: ArtUnc_4FDFE: ArtUnc_4FEFE:
ArtUnc_Waterfall1:	BINCLUDE	"art/uncompressed/ARZ waterfall patterns - 1.bin"
ArtUnc_Waterfall2:	BINCLUDE	"art/uncompressed/ARZ waterfall patterns - 2.bin"
ArtUnc_Waterfall3:	BINCLUDE	"art/uncompressed/ARZ waterfall patterns - 3.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Sonic  ; ArtUnc_50000:
;---------------------------------------------------------------------------------------
	align $20
ArtUnc_Sonic:	BINCLUDE	"art/uncompressed/Sonic's art.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Tails  ; ArtUnc_64320:
;---------------------------------------------------------------------------------------
	align $20
ArtUnc_Tails:	BINCLUDE	"art/uncompressed/Tails's art.bin"
;--------------------------------------------------------------------------------------
; Sprite Mappings
; Sonic			; MapUnc_6FBE0: SprTbl_Sonic:
;--------------------------------------------------------------------------------------
Mapunc_Sonic:	BINCLUDE	"mappings/sprite/Sonic.bin"
;--------------------------------------------------------------------------------------
; Sprite Dynamic Pattern Reloading
; Sonic DPLCs   		; MapRUnc_714E0:
;--------------------------------------------------------------------------------------
; WARNING: the build script needs editing if you rename this label
;          or if you move Sonic's running frame to somewhere else than frame $2D
MapRUnc_Sonic:	BINCLUDE	"mappings/spriteDPLC/Sonic.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Shield			; ArtNem_71D8E:
ArtNem_Shield:	BINCLUDE	"art/nemesis/Shield.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (34 blocks)
; Invincibility stars		; ArtNem_71F14:
ArtNem_Invincible_stars:	BINCLUDE	"art/nemesis/Invincibility stars.bin"
;--------------------------------------------------------------------------------------
; Uncompressed art
; Splash in water		; ArtUnc_71FFC:
ArtUnc_Splash:	BINCLUDE	"art/uncompressed/Splash.bin"
;--------------------------------------------------------------------------------------
; Uncompressed art
; Smoke from dashing		; ArtUnc_7287C:
ArtUnc_Dust:	BINCLUDE	"art/uncompressed/Spindash smoke.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (14 blocks)
; Supersonic stars		; ArtNem_7393C:		
ArtNem_SuperSonic_stars:	BINCLUDE	"art/nemesis/Super Sonic stars.bin"
;--------------------------------------------------------------------------------------
; Sprite Mappings
; Tails			; MapUnc_739E2:
;--------------------------------------------------------------------------------------
MapUnc_Tails:	BINCLUDE	"mappings/sprite/Tails.bin"
;--------------------------------------------------------------------------------------
; Sprite Dynamic Pattern Reloading
; Tails DPLCs	; MapRUnc_7446C:
;--------------------------------------------------------------------------------------
MapRUnc_Tails:	BINCLUDE	"mappings/spriteDPLC/Tails.bin"
;-------------------------------------------------------------------------------------
; Nemesis compressed art (127 blocks)
; "SEGA" Patterns	; ArtNem_74876:
ArtNem_SEGA:	BINCLUDE	"art/nemesis/SEGA.bin"
;-------------------------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Shaded blocks from intro	; ArtNem_74CF6:
ArtNem_IntroTrails:	BINCLUDE	"art/nemesis/Shaded blocks from intro.bin"
;---------------------------------------------------------------------------------------
; Enigma compressed art mappings
; "SEGA" mappings		; MapEng_74D0E:
MapEng_SEGA:	BINCLUDE	"mappings/misc/SEGA mappings.bin"
;---------------------------------------------------------------------------------------
; Enigma compressed art mappings
; Mappings for title screen background	; ArtNem_74DC6:
MapEng_TitleScreen:	BINCLUDE	"mappings/misc/Mappings for title screen background.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed art mappings
; Mappings for title screen background (smaller part, water/horizon)	; MapEng_74E3A:
MapEng_TitleBack:	BINCLUDE	"mappings/misc/Mappings for title screen background 2.bin"
;---------------------------------------------------------------------------------------
; Enigma compressed art mappings
; "Sonic the Hedgehog 2" title screen logo mappings	; MapEng_74E86:
MapEng_TitleLogo:	BINCLUDE	"mappings/misc/Sonic the Hedgehog 2 title screen logo mappings.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (336 blocks)
; Main patterns from title screen	; ArtNem_74F6C:
	even
MapEng_Title:	BINCLUDE	"art/nemesis/Main patterns from title screen.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (674 blocks)
; Sonic and tails from title screen	; ArtNem_7667A:
	even
MapEng_TitleSprites:	BINCLUDE	"art/nemesis/Sonic and Tails from title screen.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; A few menu patterns	; ArtNem_78CBC:
	even
ArtNem_MenuJunk:	BINCLUDE	"art/nemesis/A few menu blocks.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Button			ArtNem_78DAC:
	even
ArtNem_Button:	BINCLUDE	"art/nemesis/Button.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Vertical Spring		ArtNem_78E84:
	even
ArtNem_VrtclSprng:	BINCLUDE	"art/nemesis/Vertical spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Horizontal spring		ArtNem_78FA0:
	even
ArtNem_HrzntlSprng:	BINCLUDE	"art/nemesis/Horizontal spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Diagonal spring		ArtNem_7906A:
	even
ArtNem_DignlSprng:	BINCLUDE	"art/nemesis/Diagonal spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Score, Rings, Time patterns	ArtNem_7923E:
	even
ArtNem_HUD:	BINCLUDE	"art/nemesis/HUD.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Sonic lives counter		ArtNem_79346:
	even
ArtNem_Sonic_life_counter:	BINCLUDE	"art/nemesis/Sonic lives counter.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (14 blocks)
; Ring				ArtNem_7945C:
	even
ArtNem_Ring:	BINCLUDE	"art/nemesis/Ring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (60 blocks)
; Monitors and contents		ArtNem_79550:
	even
ArtNem_Powerups:	BINCLUDE	"art/nemesis/Monitor and contents.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spikes			7995C:
	even
ArtNem_Spikes:	BINCLUDE	"art/nemesis/Spikes.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Numbers			799AC:
	even
ArtNem_Numbers:	BINCLUDE	"art/nemesis/Numbers.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Star pole			79A86:
	even
ArtNem_Checkpoint:	BINCLUDE	"art/nemesis/Star pole.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (78 blocks)
; Signpost		; ArtNem_79BDE:
	even
ArtNem_Signpost:	BINCLUDE	"art/nemesis/Signpost.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Signpost		; ArtUnc_7A18A:
; Yep, it's in the rom twice, once compressed and once uncompressed
	even
ArtUnc_Signpost:	BINCLUDE	"art/uncompressed/Signpost.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Lever spring		; ArtNem_7AB4A:
	even
ArtNem_LeverSpring:	BINCLUDE	"art/nemesis/Lever spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Long horizontal spike		; ArtNem_7AC9A:
	even
ArtNem_HorizSpike:	BINCLUDE	"art/nemesis/Long horizontal spike.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Bubble thing from underwater	; ArtNem_7AD16:
	even
ArtNem_BigBubbles:	BINCLUDE	"art/nemesis/Bubble generator.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Bubbles from character	7AEE2:
	even
ArtNem_Bubbles:	BINCLUDE	"art/nemesis/Bubbles.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Countdown text for drowning	; ArtUnc_7AF80:
	even
ArtUnc_Countdown:	BINCLUDE	"art/uncompressed/Numbers for drowning countdown.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (34 blocks)
; Game/Time over text		7B400:
	even
ArtNem_Game_Over:	BINCLUDE	"art/nemesis/Game and Time Over text.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (68 blocks)
; Explosion			7B592:
	even
ArtNem_Explosion:	BINCLUDE	"art/nemesis/Explosion.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Miles life counter	; ArtNem_7B946:
	even
ArtUnc_MilesLife:	BINCLUDE	"art/nemesis/Miles life counter.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (49 blocks)
; Egg prison		; ArtNem_7BA32:
	even
ArtNem_Capsule:	BINCLUDE	"art/nemesis/Egg Prison.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (36 blocks)
; Tails on the continue screen (nagging Sonic)	; ArtNem_7BDBE:
	even
ArtNem_ContinueTails:	BINCLUDE	"art/nemesis/Tails on continue screen.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Sonic extra continue icon	; ArtNem_7C0AA:
	even
ArtNem_MiniSonic:	BINCLUDE	"art/nemesis/Sonic continue.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Tails life counter		; ArtNem_7C20C:
	even
ArtNem_TailsLife:	BINCLUDE	"art/nemesis/Tails life counter.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Tails extra continue icon	; ArtNem_7C2F2:
	even
ArtNem_MiniTails:	BINCLUDE	"art/nemesis/Tails continue.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (88 blocks)
; Standard font		; ArtNem_7C43A:
	even
ArtNem_FontStuff:	BINCLUDE	"art/nemesis/Standard font.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (38 blocks)
; 1P/2P wins text from 2P mode		; ArtNem_7C9AE:
	even
ArtNem_1P2PWins:	BINCLUDE	"art/nemesis/1P and 2P wins text from 2P mode.bin"
;---------------------------------------------------------------------------------------
; Enigma compressed art mappings
; Sonic/Miles animated background mappings	; MapEng_7CB80:
MapEng_MenuBack:	BINCLUDE	"mappings/misc/Sonic and Miles animated background.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Sonic/Miles animated background patterns	; ArtUnc_7CD2C:
	even
ArtUnc_MenuBack:	BINCLUDE	"art/uncompressed/Sonic and Miles animated background.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (94 blocks)
; Title card patterns		; ArtNem_7D22C:
	even
ArtNem_TitleCard:	BINCLUDE	"art/nemesis/Title card.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (92 blocks)
; Alphabet for font using large broken letters	; ArtNem_7D58A:
	even
ArtNem_TitleCard2:	BINCLUDE	"art/nemesis/Font using large broken letters.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (21 blocks)
; A menu box with a shadow	; ArtNem_7D990:
	even
ArtNem_MenuBox:	BINCLUDE	"art/nemesis/A menu box with a shadow.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (170 blocks)
; Pictures in level preview box in level select		; ArtNem_7DA10:
	even
ArtNem_LevelSelectPics:	BINCLUDE	"art/nemesis/Pictures in level preview box from level select.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (68 blocks)
; Text for Sonic or Tails Got Through Act and Bonus/Perfect	; ArtNem_7E86A:
	even
ArtNem_ResultsText:	BINCLUDE	"art/nemesis/End of level results text.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (72 blocks)
; Text for end of special stage, along with patterns for 3 emeralds.	; ArtNem_7EB58:
	even
ArtNem_SpecialStageResults:	BINCLUDE	"art/nemesis/Special stage results screen art and some emeralds.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (14 blocks)
; "Perfect" text	; ArtNem_7EEBE:
	even
ArtNem_Perfect:	BINCLUDE	"art/nemesis/Perfect text.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Flicky		; ArtNem_7EF60:
	even
ArtNem_Bird:	BINCLUDE	"art/nemesis/Flicky.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Squirrel		; ArtNem_7F0A2:
	even
ArtNem_Squirrel:	BINCLUDE	"art/nemesis/Squirrel.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Mouse			; ArtNem_7F206:
	even
ArtNem_Mouse:	BINCLUDE	"art/nemesis/Mouse.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Chicken		; ArtNem_7F340:
	even
ArtNem_Chicken:	BINCLUDE	"art/nemesis/Chicken.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Beaver		; ArtNem_7F4A2:
	even
ArtNem_Beaver:	BINCLUDE	"art/nemesis/Beaver.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Some bird		; ArtNem_7F5E2:
	even
ArtNem_Eagle:	BINCLUDE	"art/nemesis/Penguin.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Pig			; ArtNem_7F710:
	even
ArtNem_Pig:	BINCLUDE	"art/nemesis/Pig.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (14 blocks)
; Seal			; ArtNem_7F846:
	even
ArtNem_Seal:	BINCLUDE	"art/nemesis/Seal.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Penguin		; ArtNem_7F962:
	even
ArtNem_Penguin:	BINCLUDE	"art/nemesis/Penguin 2.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Turtle		; ArtNem_7FADE:
	even
ArtNem_Turtle:	BINCLUDE	"art/nemesis/Turtle.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Bear			; ArtNem_7FC90:
	even
ArtNem_Bear:	BINCLUDE	"art/nemesis/Bear.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Splats		; ArtNem_7FDD2:
	even
ArtNem_Rabbit:	BINCLUDE	"art/nemesis/Rabbit.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Rivet thing that you bust to get inside ship at the end of WFZ	; ArtNem_7FF2A:
	even
ArtNem_WfzSwitch:	BINCLUDE	"art/nemesis/WFZ boss chamber switch.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (15 blocks)
; Breakaway panels in WFZ	; ArtNem_7FF98:
	even
ArtNem_BreakPanels:	BINCLUDE	"art/nemesis/Breakaway panels from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Spiked thing from OOZ		; ArtNem_8007C:
	even
ArtNem_SpikyThing:	BINCLUDE	"art/nemesis/Spiked ball from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (6 blocks)
; Green platform over the burners in OOZ	; ArtNem_80274:
	even
ArtNem_BurnerLid:	BINCLUDE	"art/nemesis/Burner Platform from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Striped blocks from OOZ	; ArtNem_8030A:
	even
ArtNem_StripedBlocksVert:	BINCLUDE	"art/nemesis/Striped blocks from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Oil splashing into oil in OOZ	; ArtNem_80376:
	even
ArtNem_Oilfall:	BINCLUDE	"art/nemesis/Cascading oil hitting oil from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (13 blocks)
; Cascading oil from OOZ	; ArtNem_804F2:
	even
ArtNem_Oilfall2:	BINCLUDE	"art/nemesis/Cascading oil from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Ball thing (unused?) from OOZ	; ArtNem_805C0:
	even
ArtNem_BallThing:	BINCLUDE	"art/nemesis/Ball on spring from OOZ (beta holdovers).bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (53 blocks)
; Spinball from OOZ	; ArtNem_806E0:
	even
ArtNem_LaunchBall:	BINCLUDE	"art/nemesis/Transporter ball from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (40 blocks)
; Collapsing platform from OOZ	; ArtNem_809D0:
	even
ArtNem_OOZPlatform:	BINCLUDE	"art/nemesis/OOZ collapsing platform.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (30 blocks)
; Diagonal and vertical weird spring from OOZ	; ArtNem_80C64:
	even
ArtNem_PushSpring:	BINCLUDE	"art/nemesis/Push spring from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Swinging platform from OOZ	; ArtNem_80E26:
	even
ArtNem_OOZSwingPlat:	BINCLUDE	"art/nemesis/Swinging platform from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; 4 stripy blocks from OOZ	; ArtNem_81048:
	even
ArtNem_StripedBlocksHoriz:	BINCLUDE	"art/nemesis/4 stripy blocks from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Raising platform from OOZ	; ArtNem_810B8:
	even
ArtNem_OOZElevator:	BINCLUDE	"art/nemesis/Rising platform from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (30 blocks)
; Fan in OOZ		; ArtNem_81254:
	even
ArtNem_OOZFanHoriz:	BINCLUDE	"art/nemesis/Fan from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Green flame thing that shoots platform up in OOZ	; ArtNem_81514:
	even
ArtNem_OOZBurn:	BINCLUDE	"art/nemesis/Green flame from OOZ burners.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Patterns for appearing and disappearing string of platforms in CNZ	; ArtNem_81600:
	even
ArtNem_CNZSnake:	BINCLUDE	"art/nemesis/Caterpiller platforms from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Spikey ball from pokie in CNZ		; ArtNem_81668:
	even
ArtNem_CNZBonusSpike:	BINCLUDE	"art/nemesis/Spikey ball from CNZ slots.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Moving cube from either CNZ or CPZ	; ArtNem_816C8:
	even
ArtNem_BigMovingBlock:	BINCLUDE	"art/nemesis/Moving block from CNZ and CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Elevator in CNZ		; ArtNem_817B4:
	even
ArtNem_CNZElevator:	BINCLUDE	"art/nemesis/CNZ elevator.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Bars from pokies in CNZ	; ArtNem_81826:
	even
ArtNem_CNZCage:	BINCLUDE	"art/nemesis/CNZ slot machine bars.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (6 blocks)
; Hexagonal bumper in CNZ	; ArtNem_81894:
	even
ArtNem_CNZHexBumper:	BINCLUDE	"art/nemesis/Hexagonal bumper from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Normal round bumper from CNZ	; ArtNem_8191E:
	even
ArtNem_CNZRoundBumper:	BINCLUDE	"art/nemesis/Round bumper from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Diagonal spring from CNZ that you charge up	; ArtNem_81AB0:
	even
ArtNem_CNZDiagPlunger:	BINCLUDE	"art/nemesis/Diagonal impulse spring from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Vertical red spring		; ArtNem_81C96:
	even
ArtNem_CNZVertPlunger:	BINCLUDE	"art/nemesis/Vertical impulse spring.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Weird blocks from CNZ that you hit 3 times to get rid of	; ArtNem_81DCC:
	even
ArtNem_CNZMiniBumper:	BINCLUDE	"art/nemesis/Drop target from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (52 blocks)
; Flippers from CNZ	; ArtNem_81EF2:
	even
ArtNem_CNZFlipper:	BINCLUDE	"art/nemesis/Flippers.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Large moving platform from CPZ	; ArtNem_82216:
	even
ArtNem_CPZElevator:	BINCLUDE	"art/nemesis/Large moving platform from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Top of water in HPZ and CPZ	; ArtNem_82364:
	even
ArtNem_WaterSurface:	BINCLUDE	"art/nemesis/Top of water in HPZ and CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Booster things in CPZ		; ArtNem_824D4:
	even
ArtNem_CPZBooster:	BINCLUDE	"art/nemesis/Speed booster from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; CPZ droplet chain enemy	; ArtNem_8253C:
	even
ArtNem_CPZDroplet:	BINCLUDE	"art/nemesis/CPZ worm enemy.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (33 blocks)
; CPZ metal things (girder, cylinders)	; ArtNem_825AE:
	even
ArtNem_CPZMetalThings:	BINCLUDE	"art/nemesis/CPZ metal things.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; CPZ metal block		; ArtNem_827B8:
	even
ArtNem_CPZMetalBlock:	BINCLUDE	"art/nemesis/CPZ large moving platform blocks.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Yellow and black stripy tiles from DEZ	; ArtNem_827F8:
	even
ArtNem_ConstructionStripes:	BINCLUDE	"art/nemesis/Stripy blocks from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Yellow flipping platforms and stuff CPZ	; ArtNem_82864:
	even
ArtNem_CPZAnimatedBits:	BINCLUDE	"art/nemesis/Small yellow moving platform from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Moving block from CPZ		; ArtNem_82A46:
	even
ArtNem_CPZStairBlock:	BINCLUDE	"art/nemesis/Moving block from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Spring that covers tube in CPZ	; ArtNem_82C06:
	even
ArtNem_CPZTubeSpring:	BINCLUDE	"art/nemesis/CPZ spintube exit cover.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Top of water in ARZ		; ArtNem_82E02:
	even
ArtNem_WaterSurface2:	BINCLUDE	"art/nemesis/Top of water in ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (7 blocks)
; Leaves from ARZ	; ArtNem_82EE8:
	even
ArtNem_Leaves:	BINCLUDE	"art/nemesis/Leaves in ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (17 blocks)
; Arrow shooter and arrow from ARZ	; ArtNem_82F74:
	even
ArtNem_ArrowAndShooter:	BINCLUDE	"art/nemesis/Arrow shooter and arrow from ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; One way barrier from ARZ (unused?)	; ArtNem_830D2:
	even
ArtNem_ARZBarrierThing:	BINCLUDE	"art/nemesis/One way barrier from ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Buzz bomber			; ArtNem_8316A:
	even
ArtNem_Buzzer:	BINCLUDE	"art/nemesis/Buzzer enemy.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (58 blocks)
; Octopus badnik from OOZ	; ArtNem_8336A:
	even
ArtNem_Octus:	BINCLUDE	"art/nemesis/Octopus badnik from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (56 blocks)
; Flying badnik from OOZ	; ArtNem_8368A:
	even
ArtNem_Aquis:	BINCLUDE	"art/nemesis/Seahorse from OOZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (22 blocks)
; Fish badnik from EHZ		; ArtNem_839EA:	ArtNem_Pirahna:
	even
ArtNem_Masher:	BINCLUDE	"art/nemesis/EHZ Pirahna badnik.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (96 blocks)
; Robotnik's main ship		; ArtNem_83BF6:
	even
ArtNem_Eggpod:	BINCLUDE	"art/nemesis/Eggpod.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (111 blocks)
; CPZ Boss			; ArtNem_84332:
	even
ArtNem_CPZBoss:	BINCLUDE	"art/nemesis/CPZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (100 blocks)
; Large explosion		; ArtNem_84890:
	even
ArtNem_FieryExplosion:	BINCLUDE	"art/nemesis/Large explosion.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Horizontal jet		; ArtNem_84F18:
	even
ArtNem_EggpodJets:	BINCLUDE	"art/nemesis/Horizontal jet.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Smoke trail from CPZ and HTZ bosses	; ArtNem_84F96:
	even
ArtNem_BossSmoke:	BINCLUDE	"art/nemesis/Smoke trail from CPZ and HTZ bosses.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (128 blocks)
; EHZ Boss	; ArtNem_8507C:
	even
ArtNem_EHZBoss:	BINCLUDE	"art/nemesis/EHZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Helicopter blades for EHZ boss	; ArtNem_85868:
	even
ArtNem_EggChoppers:	BINCLUDE	"art/nemesis/Chopper blades for EHZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (107 blocks)
; HTZ boss			; ArtNem_8595C:
	even
ArtNem_HTZBoss:	BINCLUDE	"art/nemesis/HTZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (166 blocks)
; ARZ boss			; ArtNem_86128:
	even
ArtNem_ARZBoss:	BINCLUDE	"art/nemesis/ARZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (204 blocks)
; MCZ boss			; ArtNem_86B6E:
	even
ArtNem_MCZBoss:	BINCLUDE	"art/nemesis/MCZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (133 blocks)
; CNZ boss			; ArtNem_87AAC:
	even
ArtNem_CNZBoss:	BINCLUDE	"art/nemesis/CNZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (181 blocks)
; OOZ boss			; ArtNem_882D6:
	even
ArtNem_OOZBoss:	BINCLUDE	"art/nemesis/OOZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (124 blocks)
; MTZ boss			; ArtNem_88DA6:
	even
ArtNem_MTZBoss:	BINCLUDE	"art/nemesis/MTZ boss.bin"
;--------------------------------------------------------------------------------------
; Uncompressed art (8 blocks)
; Falling rocks and stalactites from MCZ	; ArtUnc_894E4:
	even
ArtUnc_FallingRocks:	BINCLUDE	"art/uncompressed/Falling rocks and stalactites from MCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Blowfly from ARZ	; ArtNem_895E4:
	even
ArtNem_Whisp:	BINCLUDE	"art/nemesis/Blowfly from ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (50 blocks)
; Grounder from ARZ	; ArtNem_8970E:
	even
ArtNem_Grounder:	BINCLUDE	"art/nemesis/Grounder from ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Fish from ARZ		; ArtNem_89B9A:
	even
ArtNem_ChopChop:	BINCLUDE	"art/nemesis/Shark from ARZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (19 blocks)
; Lava snake from HTZ		89DEC: ArtNem_HtzRexxon:
	even
ArtNem_Rexon:	BINCLUDE	"art/nemesis/Rexxon (lava snake) from HTZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Enemy with spike cone on top from HTZ		89FAA:	ArtNem_HtzDriller:
	even
ArtNem_Spiker:	BINCLUDE	"art/nemesis/Driller badnik from HTZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Bomber badnik from SCZ	; ArtNem_8A142:
	even
ArtNem_Nebula:	BINCLUDE	"art/nemesis/Bomber badnik from SCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (57 blocks)
; Turtle badnik from SCZ	; ArtNem_8A362:
	even
ArtNem_Turtloid:	BINCLUDE	"art/nemesis/Turtle badnik from SCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (38 blocks)
; Coconuts monkey badnik from EHZ
	even
ArtNem_Coconuts:	BINCLUDE	"art/nemesis/Coconuts badnik from EHZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Snake badnik from MCZ		; ArtNem_8AB36:
	even
ArtNem_Crawlton:	BINCLUDE	"art/nemesis/Snake badnik from MCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Firefly from MCZ		; ArtNem_8AC5E:
	even
ArtNem_Flasher:	BINCLUDE	"art/nemesis/Firefly from MCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Praying mantis badnik from MTZ	8AD80:
	even
ArtNem_MtzMantis:	BINCLUDE	"art/nemesis/Praying mantis badnik from MTZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (36 blocks)
; Crab badnik from MCZ			8B058:
	even
ArtNem_Crabmeat:	BINCLUDE	"art/nemesis/Crabmeat badnik from MCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (15 blocks)
; Exploding star badnik from MTZ	8B300:
	even
ArtNem_MtzSupernova:	BINCLUDE	"art/nemesis/Exploding star badnik from MTZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Weird crawling badnik from CPZ	; ArtNem_8B430:
	even
ArtNem_Spiny:	BINCLUDE	"art/nemesis/Weird crawling badnik from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (45 blocks)
; Spider badnik from CPZ 	ArtNem_8B6B4:
	even
ArtNem_Grabber:	BINCLUDE	"art/nemesis/Spider badnik from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Chicken badnik from WFZ		8B9DC:
	even
ArtNem_WfzScratch:	BINCLUDE	"art/nemesis/Scratch from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (25 blocks)
; Jet like badnik from SCZ		8BC16:
	even
ArtNem_Balkrie:	BINCLUDE	"art/nemesis/Balkrie (jet badnik) from SCZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (217 blocks)
; Silver Sonic			; ArtNem_8BE12:
	even
ArtNem_SilverSonic:	BINCLUDE	"art/nemesis/Silver Sonic.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (79 blocks)
; The Tornado			8CC44:
	even
ArtNem_Tornado:	BINCLUDE	"art/nemesis/The Tornado.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Wall turret from WFZ		8D1A0:
	even
ArtNem_WfzWallTurret:	BINCLUDE	"art/nemesis/Wall turret from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Hook on chain in WFZ		8D388:
	even
ArtNem_WfzHook:	BINCLUDE	"art/nemesis/Hook on chain from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (54 blocks)
; Retracting platform from WFZ		8D540:
	even
ArtNem_WfzGunPlatform:	BINCLUDE	"art/nemesis/Retracting platform from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Wheel for belt in WFZ		8D7D8:
	even
ArtNem_WfzConveyorBeltWheel:	BINCLUDE	"art/nemesis/Wheel for belt in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Moving platform in WFZ	8D96E:
	even
ArtNem_WfzFloatingPlatform:	BINCLUDE	"art/nemesis/Moving platform from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Giant unused vertical red laser in WFZ	8DA6E:
	even
ArtNem_WfzVrtclLazer:	BINCLUDE	"art/nemesis/Unused vertical laser in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Clouds			8DAFC:
	even
ArtNem_Clouds:	BINCLUDE	"art/nemesis/Clouds.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Red horizontal laser in WFZ		8DC42:
	even
ArtNem_WfzHrzntlLazer:	BINCLUDE	"art/nemesis/Red horizontal laser from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (5 blocks)
; Catapult that shoots sonic across quickly in WFZ	8DCA2:
	even
ArtNem_WfzLaunchCatapult:	BINCLUDE	"art/nemesis/Catapult that shoots Sonic to the side from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Rising platforms on belt from WFZ	8DD0C:
	even
ArtNem_WfzBeltPlatform:	BINCLUDE	"art/nemesis/Platform on belt in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Unused badnik in WFZ		8DDF6:
	even
ArtNem_WfzUnusedBadnik:	BINCLUDE	"art/nemesis/Unused badnik from WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Vertical spinning blades from WFZ	8DEB8:
	even
ArtNem_WfzVrtclPrpllr:	BINCLUDE	"art/nemesis/Vertical spinning blades in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (29 blocks)
; Horizontal spinning blades from WFZ		8DEE8:
	even
ArtNem_WfzHrzntlPrpllr:	BINCLUDE	"art/nemesis/Horizontal spinning blades in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Platforms that tilt in WFZ		8E010:
	even
ArtNem_WfzTiltPlatforms:	BINCLUDE	"art/nemesis/Tilting plaforms in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Thrust from Robotnic's getaway ship in WFZ		8E0C4:
	even
ArtNem_WfzThrust:	BINCLUDE	"art/nemesis/Thrust from Robotnik's getaway ship in WFZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (117 blocks)
; Laser boss from WFZ	; ArtNem_8E138:
	even
ArtNem_WFZBoss:	BINCLUDE	"art/nemesis/WFZ boss.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Robotnik's head	; ArtNem_8E886:
	even
ArtNem_RobotnikUpper:	BINCLUDE	"art/nemesis/Robotnik's head.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (76 blocks)
; Robotnik		; ArtNem_8EA5A:
	even
ArtNem_RobotnikRunning:	BINCLUDE	"art/nemesis/Robotnik.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Robotnik's lower half	; ArtNem_8EE52:
	even
ArtNem_RobotnikLower:	BINCLUDE	"art/nemesis/Robotnik's lover half.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Window in back that Robotnic looks through in DEZ	; ArtNem_8EF96:
	even
ArtNem_DEZWindow:	BINCLUDE	"art/nemesis/Window in back that Robotnik looks through in DEZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (327 blocks)
; Eggrobo		; ArtNem_8F024:
	even
ArtNem_DEZBoss:	BINCLUDE	"art/nemesis/Eggrobo.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (42 blocks)
; Bouncer badnik from CNZ	; ArtNem_901A4:
	even
ArtNem_Crawl:	BINCLUDE	"art/nemesis/Bouncer badnik from CNZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Rocket thruster for Tornado	; ArtNem_90520:
	even
ArtNem_TornadoThruster:	BINCLUDE	"art/nemesis/Rocket thruster for Tornado.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 1 of end of game sequence	; MapEng_906E0:
MapEng_Ending1:	BINCLUDE	"mappings/misc/End of game sequence frame 1.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 2 of end of game sequence	; MapEng_906F8:
MapEng_Ending2:	BINCLUDE	"mappings/misc/End of game sequence frame 2.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 3 of end of game sequence	; MapEng_90722:
MapEng_Ending3:	BINCLUDE	"mappings/misc/End of game sequence frame 3.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 4 of end of game sequence	; MapEng_9073C:
MapEng_Ending4:	BINCLUDE	"mappings/misc/End of game sequence frame 4.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Closeup of Tails flying plane in ending sequence	; MapEng_9076E:
MapEng_EndingTailsPlane:	BINCLUDE	"mappings/misc/Closeup of Tails flying plane in ending sequence.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Closeup of Sonic flying plane in ending sequence	; MapEng_907C0:
MapEng_EndingSonicPlane:	BINCLUDE	"mappings/misc/Closeup of Sonic flying plane in ending sequence.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings
; MapEng_9082A:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 1.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_90852:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 2.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_9087A:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 3.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_908A2:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 4.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_908CA:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 5.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_908F2:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 6.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_9091A:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 7.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (same as above)
; MapEng_90942:
	BINCLUDE	"mappings/misc/Strange unused mappings 1 - 8.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Strange unused mappings (different)
; MapEng_9096A:
	BINCLUDE	"mappings/misc/Strange unused mappings 2.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (363 blocks)
; Movie sequence at end of game		; ArtNem_90992:
	even
ArtNem_EndingPics:	BINCLUDE	"art/nemesis/Movie sequence at end of game.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (127 blocks)
; Final image of Tornado with it and Sonic facing screen	; ArtNem_91F3C:
	even
ArtNem_EndingFinalTornado:	BINCLUDE	"art/nemesis/Final image of Tornado with it and Sonic facing screen.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (109 blocks)
; Mini pictures of Tornado in final ending sequence	; ArtNem_927E0:
	even
ArtNem_EndingMiniTornado:	BINCLUDE	"art/nemesis/Small pictures of Tornado in final ending sequence.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (135 blocks)
; Mini pictures of Sonic and final image of Sonic
	even
ArtNem_EndingSonic:	BINCLUDE	"art/nemesis/Small pictures of Sonic and final image of Sonic.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (117 blocks)
; Mini pictures of Sonic and final image of Sonic in supersonic mode	; ArtNem_93848:
	even
ArtNem_EndingSuperSonic:	BINCLUDE	"art/nemesis/Small pictures of Sonic and final image of Sonic in Super Sonic mode.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (181 blocks)
; Final image of Tails		; ArtNem_93F3C:
	even
ArtNem_EndingTails:	BINCLUDE	"art/nemesis/Final image of Tails.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (72 blocks)
; Sonic the Hedgehog 2 image at end of credits	; ArtNem_94B28:
	even
ArtNem_EndingTitle:	BINCLUDE	"art/nemesis/Sonic the Hedgehog 2 image at end of credits.bin"


; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; LEVEL ART AND BLOCK MAPPINGS (16x16 and 128x128)
;
; #define BLOCK_TBL_LEN  // table length unknown
; #define BIGBLOCK_TBL_LEN // table length unknown
; typedef uint16_t uword
;
; struct blockMapElement {
;  uword unk : 5;    // u
;  uword patternIndex : 11; };  // i
; // uuuu uiii iiii iiii
;
; blockMapElement (*blockMapTable)[BLOCK_TBL_LEN][4] = 0xFFFF9000
;
; struct bigBlockMapElement {
;  uword : 4
;  uword blockMapIndex : 12; };  //I
; // 0000 IIII IIII IIII
;
; bigBlockMapElement (*bigBlockMapTable)[BIGBLOCK_TBL_LEN][64] = 0xFFFF0000
;
; /*
; This data determines how the level blocks will be constructed graphically. There are
; two kinds of block mappings: 16x16 and 128x128.
;
; 16x16 blocks are made up of four cells arranged in a square (thus, 16x16 pixels).
; Two bytes are used to define each cell, so the block is 8 bytes long. It can be
; represented by the bitmap blockMapElement, of which the members are:
;
; unk
;  These bits have to do with pattern orientation. I do not know their exact
;  meaning.
; patternIndex
;  The pattern's address divided by $20. Otherwise said: an index into the
;  pattern array.
;
; Each mapping can be expressed as an array of four blockMapElements, while the
; whole table is expressed as a two-dimensional array of blockMapElements (blockMapTable).
; The maps are read in left-to-right, top-to-bottom order.
;
; 128x128 maps are basically lists of indices into blockMapTable. The levels are built
; out of these "big blocks", rather than the "small" 16x16 blocks. bigBlockMapTable is,
; predictably, the table of big block mappings.
; Each big block is 8 16x16 blocks, or 16 cells, square. This produces a total of 16
; blocks or 64 cells.
; As noted earlier, each element of the table provides 'i' for blockMapTable[i][j].
; */

;----------------------------------------------------------------------------------
; EHZ 16x16 block mappings (Kosinski compression) ; was: (Kozinski compression)
BM16_EHZ:	BINCLUDE	"mappings/16x16/EHZ.bin"
;-----------------------------------------------------------------------------------
; EHZ/HTZ main level patterns (Kosinski compression)
; ArtKoz_95C24:
ArtKos_EHZ:	BINCLUDE	"art/kosinski/EHZ_HTZ.bin"
;-----------------------------------------------------------------------------------
; HTZ 16x16 block mappings (Kosinski compression)
BM16_HTZ:	BINCLUDE	"mappings/16x16/HTZ.bin"
;-----------------------------------------------------------------------------------
; HTZ pattern suppliment to EHZ level patterns (Kosinski compression)
; ArtKoz_98AB4:
ArtKos_HTZ:	BINCLUDE	"art/kosinski/HTZ_Supp.bin"
;-----------------------------------------------------------------------------------
; EHZ/HTZ 128x128 block mappings (Kosinski compression)
BM128_EHZ:	BINCLUDE	"mappings/128x128/EHZ_HTZ.bin"
;-----------------------------------------------------------------------------------
; MTZ 16x16 block mappings (Kosinski compression)
BM16_MTZ:	BINCLUDE	"mappings/16x16/MTZ.bin"
;-----------------------------------------------------------------------------------
; MTZ main level patterns (Kosinski compression)
; ArtKoz_9DB64:
ArtKos_MTZ:	BINCLUDE	"art/kosinski/MTZ.bin"
;-----------------------------------------------------------------------------------
; MTZ 128x128 block mappings (Kosinski compression)
BM128_MTZ:	BINCLUDE	"mappings/128x128/MTZ.bin"
;-----------------------------------------------------------------------------------
; OOZ 16x16 block mappings (Kosinski compression)
BM16_OOZ:	BINCLUDE	"mappings/16x16/OOZ.bin"
;-----------------------------------------------------------------------------------
; OOZ main level patterns (Kosinski compression)
; ArtKoz_A4204:
ArtKos_OOZ:	BINCLUDE	"art/kosinski/OOZ.bin"
;-----------------------------------------------------------------------------------
; OOZ 128x128 block mappings (Kosinski compression)
BM128_OOZ:	BINCLUDE	"mappings/128x128/OOZ.bin"
;-----------------------------------------------------------------------------------
; MCZ 16x16 block mappings (Kosinski compression)
BM16_MCZ:	BINCLUDE	"mappings/16x16/MCZ.bin"
;-----------------------------------------------------------------------------------
; MCZ main level patterns (Kosinski compression)
; ArtKoz_A9D74:
ArtKos_MCZ:	BINCLUDE	"art/kosinski/MCZ.bin"
;-----------------------------------------------------------------------------------
; MCZ 128x128 block mappings (Kosinski compression)
BM128_MCZ:	BINCLUDE	"mappings/128x128/MCZ.bin"
;-----------------------------------------------------------------------------------
; CNZ 16x16 block mappings (Kosinski compression)
BM16_CNZ:	BINCLUDE	"mappings/16x16/CNZ.bin"
;-----------------------------------------------------------------------------------
; CNZ main level patterns (Kosinski compression)
; ArtKoz_B0894:
ArtKos_CNZ:	BINCLUDE	"art/kosinski/CNZ.bin"
;-----------------------------------------------------------------------------------
; CNZ 128x128 block mappings (Kosinski compression)
BM128_CNZ:	BINCLUDE	"mappings/128x128/CNZ.bin"
;-----------------------------------------------------------------------------------
; CPZ/DEZ 16x16 block mappings (Kosinski compression)
BM16_CPZ:	BINCLUDE	"mappings/16x16/CPZ_DEZ.bin"
;-----------------------------------------------------------------------------------
; CPZ/DEZ main level patterns (Kosinski compression)
; ArtKoz_B6174:
ArtKos_CPZ:	BINCLUDE	"art/kosinski/CPZ_DEZ.bin"
;-----------------------------------------------------------------------------------
; CPZ/DEZ 128x128 block mappings (Kosinski compression)
BM128_CPZ:	BINCLUDE	"mappings/128x128/CPZ_DEZ.bin"
;-----------------------------------------------------------------------------------
; ARZ 16x16 block mappings (Kosinski compression)
BM16_ARZ:	BINCLUDE	"mappings/16x16/ARZ.bin"
;-----------------------------------------------------------------------------------
; ARZ main level patterns (Kosinski compression)
; ArtKoz_BCC24:
ArtKos_ARZ:	BINCLUDE	"art/kosinski/ARZ.bin"
;-----------------------------------------------------------------------------------
; ARZ 128x128 block mappings (Kosinski compression)
BM128_ARZ:	BINCLUDE	"mappings/128x128/ARZ.bin"
;-----------------------------------------------------------------------------------
; WFZ/SCZ 16x16 block mappings (Kosinski compression)
BM16_WFZ:	BINCLUDE	"mappings/16x16/WFZ_SCZ.bin"
;-----------------------------------------------------------------------------------
; WFZ/SCZ main level patterns (Kosinski compression)
; ArtKoz_C5004:
ArtKos_SCZ:	BINCLUDE	"art/kosinski/WFZ_SCZ.bin"
;-----------------------------------------------------------------------------------
; WFZ pattern suppliment to SCZ tiles (Kosinski compression)
; ArtKoz_C7EC4:
ArtKos_WFZ:	BINCLUDE	"art/kosinski/WFZ_Supp.bin"
;-----------------------------------------------------------------------------------
; WFZ/SCZ 128x128 block mappings (Kosinski compression)
BM128_WFZ:	BINCLUDE	"mappings/128x128/WFZ_SCZ.bin"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;-----------------------------------------------------------------------------------
; Exit curve + slope up
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CA904:
MapSpec_Rise1:	BINCLUDE	"mappings/special stage/Slope up - Frame 1.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CADA8:
MapSpec_Rise2:	BINCLUDE	"mappings/special stage/Slope up - Frame 2.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CB376:
MapSpec_Rise3:	BINCLUDE	"mappings/special stage/Slope up - Frame 3.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CB92E:
MapSpec_Rise4:	BINCLUDE	"mappings/special stage/Slope up - Frame 4.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CBF92:
MapSpec_Rise5:	BINCLUDE	"mappings/special stage/Slope up - Frame 5.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CC5BE:
MapSpec_Rise6:	BINCLUDE	"mappings/special stage/Slope up - Frame 6.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CCC7A:
MapSpec_Rise7:	BINCLUDE	"mappings/special stage/Slope up - Frame 7.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CD282:
MapSpec_Rise8:	BINCLUDE	"mappings/special stage/Slope up - Frame 8.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CD7C0:
MapSpec_Rise9:	BINCLUDE	"mappings/special stage/Slope up - Frame 9.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CDD44:
MapSpec_Rise10:	BINCLUDE	"mappings/special stage/Slope up - Frame 10.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CE2BE:
MapSpec_Rise11:	BINCLUDE	"mappings/special stage/Slope up - Frame 11.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CE7DE:
MapSpec_Rise12:	BINCLUDE	"mappings/special stage/Slope up - Frame 12.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CEC52:
MapSpec_Rise13:	BINCLUDE	"mappings/special stage/Slope up - Frame 13.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CF0BC:
MapSpec_Rise14:	BINCLUDE	"mappings/special stage/Slope up - Frame 14.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CF580:
MapSpec_Rise15:	BINCLUDE	"mappings/special stage/Slope up - Frame 15.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CFA00:
MapSpec_Rise16:	BINCLUDE	"mappings/special stage/Slope up - Frame 16.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_CFE4A:
MapSpec_Rise17:	BINCLUDE	"mappings/special stage/Slope up - Frame 17.bin"

;-----------------------------------------------------------------------------------
; Straight path
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D028C:
MapSpec_Straight1:	BINCLUDE	"mappings/special stage/Straight path - Frame 1.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D090A:
MapSpec_Straight2:	BINCLUDE	"mappings/special stage/Straight path - Frame 2.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D0EA6:
MapSpec_Straight3:	BINCLUDE	"mappings/special stage/Straight path - Frame 3.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D1400:
MapSpec_Straight4:	BINCLUDE	"mappings/special stage/Straight path - Frame 4.bin"

;-----------------------------------------------------------------------------------
; Exit curve + slope down
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D19FC:
MapSpec_Drop1:	BINCLUDE	"mappings/special stage/Slope down - Frame 1.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D1EAC:
MapSpec_Drop2:	BINCLUDE	"mappings/special stage/Slope down - Frame 2.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D23AE:
MapSpec_Drop3:	BINCLUDE	"mappings/special stage/Slope down - Frame 3.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D27C6:
MapSpec_Drop4:	BINCLUDE	"mappings/special stage/Slope down - Frame 4.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D2C14:
MapSpec_Drop5:	BINCLUDE	"mappings/special stage/Slope down - Frame 5.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D3092:
MapSpec_Drop6:	BINCLUDE	"mappings/special stage/Slope down - Frame 6.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D3522:
MapSpec_Drop7:	BINCLUDE	"mappings/special stage/Slope down - Frame 7.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D39EC:
MapSpec_Drop8:	BINCLUDE	"mappings/special stage/Slope down - Frame 8.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D3F78:
MapSpec_Drop9:	BINCLUDE	"mappings/special stage/Slope down - Frame 9.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D4660:
MapSpec_Drop10:	BINCLUDE	"mappings/special stage/Slope down - Frame 10.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D4DA6:
MapSpec_Drop11:	BINCLUDE	"mappings/special stage/Slope down - Frame 11.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D53FC:
MapSpec_Drop12:	BINCLUDE	"mappings/special stage/Slope down - Frame 12.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D5958:
MapSpec_Drop13:	BINCLUDE	"mappings/special stage/Slope down - Frame 13.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D5F02:
MapSpec_Drop14:	BINCLUDE	"mappings/special stage/Slope down - Frame 14.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D6596:
MapSpec_Drop15:	BINCLUDE	"mappings/special stage/Slope down - Frame 15.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D6BAA:
MapSpec_Drop16:	BINCLUDE	"mappings/special stage/Slope down - Frame 16.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D702E:
MapSpec_Drop17:	BINCLUDE	"mappings/special stage/Slope down - Frame 17.bin"

;-----------------------------------------------------------------------------------
; Curved path
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D749C:
MapSpec_Turning1:	BINCLUDE	"mappings/special stage/Curve right - Frame 1.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D7912:
MapSpec_Turning2:	BINCLUDE	"mappings/special stage/Curve right - Frame 2.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D7DAA:
MapSpec_Turning3:	BINCLUDE	"mappings/special stage/Curve right - Frame 3.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D8250:
MapSpec_Turning4:	BINCLUDE	"mappings/special stage/Curve right - Frame 4.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D85F8:
MapSpec_Turning5:	BINCLUDE	"mappings/special stage/Curve right - Frame 5.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings ; MapSpec_D89EC:
MapSpec_Turning6:	BINCLUDE	"mappings/special stage/Curve right - Frame 6.bin"

;-----------------------------------------------------------------------------------
; Exit curve
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Exit curve  ; MapSpec_D8E24:
MapSpec_Unturn1:	BINCLUDE	"mappings/special stage/Curve right - Frame 7.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Exit curve  ; MapSpec_D92B6:
MapSpec_Unturn2:	BINCLUDE	"mappings/special stage/Curve right - Frame 8.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Exit curve  ; MapSpec_D9778:
MapSpec_Unturn3:	BINCLUDE	"mappings/special stage/Curve right - Frame 9.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Exit curve  ; MapSpec_D9B80:
MapSpec_Unturn4:	BINCLUDE	"mappings/special stage/Curve right - Frame 10.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Exit curve  ; MapSpec_DA016:
MapSpec_Unturn5:	BINCLUDE	"mappings/special stage/Curve right - Frame 11.bin"

;-----------------------------------------------------------------------------------
; Enter curve
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DA4CE:
MapSpec_Turn1:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 1.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DAB20:
MapSpec_Turn2:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 2.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DB086:
MapSpec_Turn3:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 3.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DB5AE:
MapSpec_Turn4:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 4.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DBB62:
MapSpec_Turn5:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 5.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DC154:
MapSpec_Turn6:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 6.bin"
;-----------------------------------------------------------------------------------
; Special stage tube mappings
; Begin curve right ; MapSpec_DC5E8:
MapSpec_Turn7:	BINCLUDE	"mappings/special stage/Begin curve right - Frame 7.bin"

;--------------------------------------------------------------------------------------
; Kosinski compressed art
; Special stage level patterns
; Note: Only one line of each tile is stored in this archive. The other 7 lines are
;  the same as this one line, so to get the full tiles, each line needs to be
;  duplicated 7 times over.					; ArtKoz_DCA38:
;--------------------------------------------------------------------------------------
ArtKos_Special:	BINCLUDE	"art/kosinski/SpecStag.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (127 blocks)
; Background patterns for special stage		; ArtNem_DCD68:
	even
ArtNem_SpecialBack:	BINCLUDE	"art/nemesis/Background art for special stage.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed tile mappings
; Main background mappings for special stage	; MapEng_DD1DE:
MapEng_SpecialBack:	BINCLUDE	"mappings/misc/Main background mappings for special stage.bin"
;--------------------------------------------------------------------------------------
; Enigma compressed tile mappings
; Lower background mappings for special stage	; MapEng_DD30C:
MapEng_SpecialBackBottom:	BINCLUDE	"mappings/misc/Lower background mappings for special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (62 blocks)
; Sonic/Miles and number text from special stage	; ArtNem_DD48A:
	even
MapEng_SpecialHUD:	BINCLUDE	"art/nemesis/Sonic and Miles number text from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; "Start" and checkered flag patterns in special stage	; ArtNem_DD790:
	even
ArtNem_SpecialStart:	BINCLUDE	"art/nemesis/Start text from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (37 blocks)
; Stars in special stage	; ArtNem_DD8CE:
	even
ArtNem_SpecialStars:	BINCLUDE	"art/nemesis/Stars in special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (13 blocks)
; Text for most of the "Player VS Player" message in 2P special stage	; ArtNem_DD9C8:
	even
ArtNem_SpecialPlayerVSPlayer:	BINCLUDE	"art/nemesis/Special stage Player VS Player text.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (104 blocks)
; Ring patterns in special stage	; ArtNem_DDA7E:
	even
ArtNem_SpecialRings:	BINCLUDE	"art/nemesis/Special stage ring art.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (38 blocks)
; Horizontal shadow patterns in special stage	; ArtNem_DDFA4:
	even
ArtNem_SpecialFlatShadow:	BINCLUDE	"art/nemesis/Horizontal shadow from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (58 blocks)
; Diagonal shadow patterns in special stage	; ArtNem_DE05A:
	even
ArtNem_SpecialDiagShadow:	BINCLUDE	"art/nemesis/Diagonal shadow from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (25 blocks)
; Vertical shadow patterns in special stage	; ArtNem_DE120:
	even
ArtNem_SpecialSideShadow:	BINCLUDE	"art/nemesis/Vertical shadow from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Explosion patterns in special stage	; ArtNem_DE188:
	even
ArtNem_SpecialExplosion:	BINCLUDE	"art/nemesis/Explosion from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (80 blocks)
; Bomb patterns in special stage	; ArtNem_DE4BC:
	even
ArtNem_SpecialBomb:	BINCLUDE	"art/nemesis/Bomb from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (46 blocks)
; Emerald patterns in special stage	; ArtNem_DE8AC:
	even
ArtNem_SpecialEmerald:	BINCLUDE	"art/nemesis/Emerald from special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (99 blocks)
; Text for the messages and thumbs up/down icon in special stage	; ArtNem_DEAF4:
	even
ArtNem_SpecialMessages:	BINCLUDE	"art/nemesis/Special stage messages and icons.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (851 blocks)
; Sonic and Tails animation frames from special stage
; Art for Obj09 and Obj10 and Obj88	; ArtNem_DEEAE:
	even
ArtNem_SpecialSonicAndTails:	BINCLUDE	"art/nemesis/Sonic and Tails animation frames in special stage.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art (5 blocks)
; "Tails" patterns from special stage	; ArtNem_E247E:
	even
ArtNem_SpecialTailsText:	BINCLUDE	"art/nemesis/Tails text patterns from special stage.bin"
;--------------------------------------------------------------------------------------
; Special stage object perspective data (Kosinski compression)	; MiscKoz_E24FE:
;--------------------------------------------------------------------------------------
MiscKoz_SpecialPerspective:	BINCLUDE	"misc/Special stage object perspective data (Kosinski compression).bin"
;--------------------------------------------------------------------------------------
; Special stage level layout (Nemesis compression)	; MiscNem_E34EE:
;--------------------------------------------------------------------------------------
MiscKoz_SpecialLevelLayout:	BINCLUDE	"misc/Special stage level layouts (Nemesis compression).bin"
;--------------------------------------------------------------------------------------
; Special stage object location list (Kosinski compression)	; MiscKoz_E35F2:
;--------------------------------------------------------------------------------------
MiscKoz_SpecialObjectLocations:	BINCLUDE	"misc/Special stage object location lists (Kosinski compression).bin"

;--------------------------------------------------------------------------------------
; Filler (free space) (unnecessary; could be replaced with "even")
;--------------------------------------------------------------------------------------
	align $100




;--------------------------------------------------------------------------------------
; Offset index of ring locations
;  The first commented number on each line is an array index; the second is the
;  associated zone.
;--------------------------------------------------------------------------------------
Off_Rings:
	dc.w	Rings_EHZ_1 - Off_Rings	; 0  $00
	dc.w	Rings_EHZ_2 - Off_Rings	; 1
	dc.w	Rings_Lev1_1 - Off_Rings	; 2  $01
	dc.w	Rings_Lev1_2 - Off_Rings	; 3
	dc.w	Rings_Lev2_1 - Off_Rings	; 4  $02
	dc.w	Rings_Lev2_2 - Off_Rings	; 5
	dc.w	Rings_Lev3_1 - Off_Rings	; 6  $03
	dc.w	Rings_Lev3_2 - Off_Rings	; 7
	dc.w	Rings_MTZ_1 - Off_Rings	; 8  $04
	dc.w	Rings_MTZ_2 - Off_Rings	; 9
	dc.w	Rings_MTZ_3 - Off_Rings	; 10 $05
	dc.w	Rings_MTZ_4 - Off_Rings	; 11
	dc.w	Rings_WFZ_1 - Off_Rings	; 12 $06
	dc.w	Rings_WFZ_2 - Off_Rings	; 13
	dc.w	Rings_HTZ_1 - Off_Rings	; 14 $07
	dc.w	Rings_HTZ_2 - Off_Rings	; 15
	dc.w	Rings_HPZ_1 - Off_Rings	; 16 $08
	dc.w	Rings_HPZ_2 - Off_Rings	; 17
	dc.w	Rings_Lev9_1 - Off_Rings	; 18 $09
	dc.w	Rings_Lev9_2 - Off_Rings	; 19
	dc.w	Rings_OOZ_1 - Off_Rings	; 20 $0A
	dc.w	Rings_OOZ_2 - Off_Rings	; 21
	dc.w	Rings_MCZ_1 - Off_Rings	; 22 $0B
	dc.w	Rings_MCZ_2 - Off_Rings	; 23
	dc.w	Rings_CNZ_1 - Off_Rings	; 24 $0C
	dc.w	Rings_CNZ_2 - Off_Rings	; 25
	dc.w	Rings_CPZ_1 - Off_Rings	; 26 $0D
	dc.w	Rings_CPZ_2 - Off_Rings	; 27
	dc.w	Rings_DEZ_1 - Off_Rings	; 28 $0E
	dc.w	Rings_DEZ_2 - Off_Rings	; 29
	dc.w	Rings_ARZ_1 - Off_Rings	; 30 $0F
	dc.w	Rings_ARZ_2 - Off_Rings	; 31
	dc.w	Rings_SCZ_1 - Off_Rings	; 32 $10
	dc.w	Rings_SCZ_2 - Off_Rings	; 33

Rings_EHZ_1:	BINCLUDE	"level/rings/EHZ_1.bin"
Rings_EHZ_2:	BINCLUDE	"level/rings/EHZ_2.bin"
Rings_Lev1_1:	BINCLUDE	"level/rings/01_1.bin"
Rings_Lev1_2:	BINCLUDE	"level/rings/01_2.bin"
Rings_Lev2_1:	BINCLUDE	"level/rings/02_1.bin"
Rings_Lev2_2:	BINCLUDE	"level/rings/02_2.bin"
Rings_Lev3_1:	BINCLUDE	"level/rings/03_1.bin"
Rings_Lev3_2:	BINCLUDE	"level/rings/03_2.bin"
Rings_MTZ_1:	BINCLUDE	"level/rings/MTZ_1.bin"
Rings_MTZ_2:	BINCLUDE	"level/rings/MTZ_2.bin"
Rings_MTZ_3:	BINCLUDE	"level/rings/MTZ_3.bin"
Rings_MTZ_4:	BINCLUDE	"level/rings/MTZ_4.bin"
Rings_HTZ_1:	BINCLUDE	"level/rings/HTZ_1.bin"
Rings_HTZ_2:	BINCLUDE	"level/rings/HTZ_2.bin"
Rings_HPZ_1:	BINCLUDE	"level/rings/HPZ_1.bin"
Rings_HPZ_2:	BINCLUDE	"level/rings/HPZ_2.bin"
Rings_Lev9_1:	BINCLUDE	"level/rings/09_1.bin"
Rings_Lev9_2:	BINCLUDE	"level/rings/09_2.bin"
Rings_OOZ_1:	BINCLUDE	"level/rings/OOZ_1.bin"
Rings_OOZ_2:	BINCLUDE	"level/rings/OOZ_2.bin"
Rings_MCZ_1:	BINCLUDE	"level/rings/MCZ_1.bin"
Rings_MCZ_2:	BINCLUDE	"level/rings/MCZ_2.bin"
Rings_CNZ_1:	BINCLUDE	"level/rings/CNZ_1.bin"
Rings_CNZ_2:	BINCLUDE	"level/rings/CNZ_2.bin"
Rings_CPZ_1:	BINCLUDE	"level/rings/CPZ_1.bin"
Rings_CPZ_2:	BINCLUDE	"level/rings/CPZ_2.bin"
Rings_DEZ_1:	BINCLUDE	"level/rings/DEZ_1.bin"
Rings_DEZ_2:	BINCLUDE	"level/rings/DEZ_2.bin"
Rings_WFZ_1:	BINCLUDE	"level/rings/WFZ_1.bin"
Rings_WFZ_2:	BINCLUDE	"level/rings/WFZ_2.bin"
Rings_ARZ_1:	BINCLUDE	"level/rings/ARZ_1.bin"
Rings_ARZ_2:	BINCLUDE	"level/rings/ARZ_2.bin"
Rings_SCZ_1:	BINCLUDE	"level/rings/SCZ_1.bin"
Rings_SCZ_2:	BINCLUDE	"level/rings/SCZ_2.bin"

; --------------------------------------------------------------------------------------
; Filler (free space) (unnecessary; could be replaced with "even")
; --------------------------------------------------------------------------------------
	align $200

; --------------------------------------------------------------------------------------
; Offset index of object locations
; --------------------------------------------------------------------------------------
Off_Objects:
	dc.w	Objects_EHZ_1 - Off_Objects	; 0  $00
	dc.w	Objects_EHZ_2 - Off_Objects	; 1
	dc.w	Objects_Null3 - Off_Objects	; 2  $01
	dc.w	Objects_Null3 - Off_Objects	; 3
	dc.w	Objects_Null3 - Off_Objects	; 4  $02
	dc.w	Objects_Null3 - Off_Objects	; 5
	dc.w	Objects_Null3 - Off_Objects	; 6  $03
	dc.w	Objects_Null3 - Off_Objects	; 7
	dc.w	Objects_MTZ_1 - Off_Objects	; 8  $04
	dc.w	Objects_MTZ_2 - Off_Objects	; 9
	dc.w	Objects_MTZ_3 - Off_Objects	; 10 $05
	dc.w	Objects_MTZ_3 - Off_Objects	; 11
	dc.w	Objects_WFZ_1 - Off_Objects	; 12 $06
	dc.w	Objects_WFZ_2 - Off_Objects	; 13
	dc.w	Objects_HTZ_1 - Off_Objects	; 14 $07
	dc.w	Objects_HTZ_2 - Off_Objects	; 15
	dc.w	Objects_HPZ_1 - Off_Objects	; 16 $08
	dc.w	Objects_HPZ_2 - Off_Objects	; 17
	dc.w	Objects_Null3 - Off_Objects	; 18 $09
	dc.w	Objects_Null3 - Off_Objects	; 19
	dc.w	Objects_OOZ_1 - Off_Objects	; 20 $0A
	dc.w	Objects_OOZ_2 - Off_Objects	; 21
	dc.w	Objects_MCZ_1 - Off_Objects	; 22 $0B
	dc.w	Objects_MCZ_2 - Off_Objects	; 23
	dc.w	Objects_CNZ_1 - Off_Objects	; 24 $0C
	dc.w	Objects_CNZ_2 - Off_Objects	; 25
	dc.w	Objects_CPZ_1 - Off_Objects	; 26 $0D
	dc.w	Objects_CPZ_2 - Off_Objects	; 27
	dc.w	Objects_DEZ_1 - Off_Objects	; 28 $0E
	dc.w	Objects_DEZ_2 - Off_Objects	; 29
	dc.w	Objects_ARZ_1 - Off_Objects	; 30 $0F
	dc.w	Objects_ARZ_2 - Off_Objects	; 31
	dc.w	Objects_SCZ_1 - Off_Objects	; 32 $10
	dc.w	Objects_SCZ_2 - Off_Objects	; 33

;Objects_Null1: ; unused
		BINCLUDE	"level/objects/Null_1.bin"

Objects_EHZ_1:	BINCLUDE	"level/objects/EHZ_1.bin"
Objects_EHZ_2:	BINCLUDE	"level/objects/EHZ_2.bin"
Objects_MTZ_1:	BINCLUDE	"level/objects/MTZ_1.bin"
Objects_MTZ_2:	BINCLUDE	"level/objects/MTZ_2.bin"
Objects_MTZ_3:	BINCLUDE	"level/objects/MTZ_3.bin"
Objects_WFZ_1:	BINCLUDE	"level/objects/WFZ_1.bin"
Objects_WFZ_2:	BINCLUDE	"level/objects/WFZ_2.bin"
Objects_HTZ_1:	BINCLUDE	"level/objects/HTZ_1.bin"
Objects_HTZ_2:	BINCLUDE	"level/objects/HTZ_2.bin"
Objects_HPZ_1:	BINCLUDE	"level/objects/HPZ_1.bin"
Objects_HPZ_2:	BINCLUDE	"level/objects/HPZ_2.bin"

;Objects_Null2: ; unused
		BINCLUDE	"level/objects/Null_2.bin"

Objects_OOZ_1:	BINCLUDE	"level/objects/OOZ_1.bin"
Objects_OOZ_2:	BINCLUDE	"level/objects/OOZ_2.bin"
Objects_MCZ_1:	BINCLUDE	"level/objects/MCZ_1.bin"
Objects_MCZ_2:	BINCLUDE	"level/objects/MCZ_2.bin"
Objects_CNZ_1:	BINCLUDE	"level/objects/CNZ_1.bin"
Objects_CNZ_2:	BINCLUDE	"level/objects/CNZ_2.bin"
Objects_CPZ_1:	BINCLUDE	"level/objects/CPZ_1.bin"
Objects_CPZ_2:	BINCLUDE	"level/objects/CPZ_2.bin"
Objects_DEZ_1:	BINCLUDE	"level/objects/DEZ_1.bin"
Objects_DEZ_2:	BINCLUDE	"level/objects/DEZ_2.bin"
Objects_ARZ_1:	BINCLUDE	"level/objects/ARZ_1.bin"
Objects_ARZ_2:	BINCLUDE	"level/objects/ARZ_2.bin"
Objects_SCZ_1:	BINCLUDE	"level/objects/SCZ_1.bin"
Objects_SCZ_2:	BINCLUDE	"level/objects/SCZ_2.bin"
Objects_Null3:	BINCLUDE	"level/objects/Null_3.bin"

;Objects_Null4: ; unused
		BINCLUDE	"level/objects/Null_4.bin"
;Objects_Null5: ; unused
		BINCLUDE	"level/objects/Null_5.bin"
;Objects_Null6: ; unused
		BINCLUDE	"level/objects/Null_6.bin"

; --------------------------------------------------------------------------------------
; Filler (free space) (unnecessary; could be replaced with "even")
; --------------------------------------------------------------------------------------
	align $1000




; ---------------------------------------------------------------------------
; Subroutine to load the sound driver
; ---------------------------------------------------------------------------
; sub_EC000:
SoundDriverLoad:
	move	sr,-(sp)
	movem.l	d0-a6,-(sp)
	move	#$2700,sr
	lea	(Z80_Bus_Request).l,a3
	lea	(Z80_Reset).l,a2
	moveq	#0,d2
	move.w	#$100,d1
	move.w	d1,(a3)	; get Z80 bus
	move.w	d1,(a2)	; release Z80 reset (was held high by console on startup)
-	btst	d2,(a3)
	bne.s	-	; wait until the 68000 has the bus
	jsr	DecompressSoundDriver(pc)
	btst	#0,($C00005).l	; check video mode
	sne	(Z80_RAM+zPalModeByte).l	; set if PAL
	move.w	d2,(a2)	; hold Z80 reset
	move.w	d2,(a3)	; release Z80 bus
	moveq	#$E6,d0
-	dbf	d0,-	; wait for 2,314 cycles
	move.w	d1,(a2)	; release Z80 reset
	movem.l	(sp)+,d0-a6
	move	(sp)+,sr
	rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; slightly modified Saxman decompression of the sound driver
; a4 == $A00000 (start of Z80 RAM)
; a5 == current position in Z80 RAM?
; a6 == current position in compressed sound driver?
; d0 == data to decompress? (byte)
; d4 == ???
; d5 == ???
; d6 == ???
; d7 == bytes left to decompress
; loc_EC04A:
DecompressSoundDriver:
	lea	Snd_Driver(pc),a6
; WARNING: the build script needs editing if you rename this label
movewZ80CompSize:	move.w	#Snd_Driver_End-Snd_Driver,d7 ; patched (by fixpointer.exe) after compression since the exact size can't be known beforehand
	moveq	#0,d6
	lea	(Z80_RAM).l,a5
	moveq	#0,d5
	lea	(Z80_RAM).l,a4

loc_EC062:
	lsr.w	#1,d6
	btst	#8,d6
	bne.s	+
	jsr	sub_EC0DE(pc)
	move.b	d0,d6
	ori.w	#$FF00,d6
+
	btst	#0,d6
	beq.s	loc_EC086
	jsr	sub_EC0DE(pc)
	move.b	d0,(a5)+
	addq.w	#1,d5
	bra.w	loc_EC062
; ---------------------------------------------------------------------------

loc_EC086:
	jsr	sub_EC0DE(pc)
	moveq	#0,d4
	move.b	d0,d4
	jsr	sub_EC0DE(pc)
	move.b	d0,d3
	andi.w	#$F,d3
	addq.w	#2,d3
	andi.w	#$F0,d0
	lsl.w	#4,d0
	add.w	d0,d4
	addi.w	#$12,d4
	andi.w	#$FFF,d4
	move.w	d5,d0
	andi.w	#$F000,d0
	add.w	d0,d4
	cmp.w	d4,d5
	bcc.s	loc_EC0CC
	subi.w	#$1000,d4
	bcc.s	loc_EC0CC
	add.w	d3,d5
	addq.w	#1,d5
-	move.b	#0,(a5)+
	dbf	d3,-

	bra.w	loc_EC062
; ---------------------------------------------------------------------------

loc_EC0CC:
	add.w	d3,d5
	addq.w	#1,d5
-	move.b	(a4,d4.w),(a5)+
	addq.w	#1,d4
	dbf	d3,-

	bra.w	loc_EC062
; End of function DecompressSoundDriver


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


sub_EC0DE:
	move.b	(a6)+,d0
	subq.w	#1,d7
	bne.s	return_EC0E6
	addq.w	#4,sp

return_EC0E6:
	rts
; End of function sub_EC0DE

; ===========================================================================
; ---------------------------------------------------------------------------
; S2 sound driver (Sound driver compression (slightly modified Saxman))
; ---------------------------------------------------------------------------
; loc_EC0E8:
Snd_Driver:
    if assembleZ80SoundDriver
	include "win32/s2.sounddriver.asm" ; CPU Z80

	CPU 68000
	padding off
	listing off
	supmode on
	!org (Snd_Driver+Size_of_Snd_driver_guess) ; don't worry; I know what I'm doing
    else
	BINCLUDE "sound/Sound driver.bin"
zPalModeByte = 7
zComRange = $1B80
    endif


; loc_ED04C:
Snd_Driver_End:




; ---------------------------------------------------------------------------
; Filler (free space)
; ---------------------------------------------------------------------------
	; the DAC data has to line up with the end of the bank.
	if assembleZ80SoundDriver
		; actually it only has to fit within one bank, but we'll line it up to the end anyway
		; because the padding gives the sound driver some room to grow
		cnop -Size_of_DAC_samples, $8000
	else
		org $F0000-Size_of_DAC_samples ; not as much leeway here
	endif

; ---------------------------------------------------------------------------
; DAC samples
; ---------------------------------------------------------------------------
; loc_ED100:
SndDAC_Start:

SndDAC_Sample1:
	BINCLUDE	"sound/DAC/Sample 1.bin"
SndDAC_Sample1_End

SndDAC_Sample2:
	BINCLUDE	"sound/DAC/Sample 2.bin"
SndDAC_Sample2_End

SndDAC_Sample5:
	BINCLUDE	"sound/DAC/Sample 5.bin"
SndDAC_Sample5_End

SndDAC_Sample6:
	BINCLUDE	"sound/DAC/Sample 6.bin"
SndDAC_Sample6_End

SndDAC_Sample3:
	BINCLUDE	"sound/DAC/Sample 3.bin"
SndDAC_Sample3_End

SndDAC_Sample4:
	BINCLUDE	"sound/DAC/Sample 4.bin"
SndDAC_Sample4_End

SndDAC_Sample7:
	BINCLUDE	"sound/DAC/Sample 7.bin"
SndDAC_Sample7_End

SndDAC_End

	if SndDAC_End - SndDAC_Start > $8000
		fatal "DAC samples must fit within $8000 bytes, but you have $\{SndDAC_End-SndDAC_Start } bytes of DAC samples."
	endif
	if SndDAC_End - SndDAC_Start > Size_of_DAC_samples
		fatal "Size_of_DAC_samples = $\{Size_of_DAC_samples}, but you have $\{SndDAC_End-SndDAC_Start} bytes of DAC samples."
	endif

; ---------------------------------------------------------------------------
; Music pointers
; ---------------------------------------------------------------------------
	if assembleZ80SoundDriver
		align $8000
	else
		org $F0000 ; not as much leeway here
	endif

; loc_F0000:
MusicPoint1:	rom_ptr_z80	Mus_Continue-MusicPoint2


Mus_Continue:   BINCLUDE    "sound/music/Continue.bin"

; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Buzzer's fireball
ArtNem_Buzzer_Fireball:	BINCLUDE	"art/nemesis/Fireball 1 (Buzzer).bin"
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Waterfall tiles
ArtNem_Waterfall:	BINCLUDE	"art/nemesis/Waterfall tiles.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Another fireball
ArtNem_HtzFireball:	BINCLUDE	"art/nemesis/Fireball 2.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Bridge in EHZ
ArtNem_EHZ_Bridge:	BINCLUDE	"art/nemesis/EHZ bridge.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Diagonally moving lift in HTZ
ArtNem_HtzZipline:	BINCLUDE	"art/nemesis/HTZ zip-line platform.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; One way barrier from HTZ
ArtNem_HtzValveBarrier:	BINCLUDE	"art/nemesis/One way barrier from HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; See-saw in HTZ
ArtNem_HtzSeeSaw:	BINCLUDE	"art/nemesis/See-saw in HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Unused Fireball
;ArtNem_F0B06:
	BINCLUDE	"art/nemesis/Fireball 3.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Rock from HTZ
ArtNem_HtzRock:	BINCLUDE	"art/nemesis/Rock from HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Orbit badnik from HTZ		; ArtNem_HtzSol:
ArtNem_Sol:	BINCLUDE	"art/nemesis/Sol badnik from HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (120 blocks)
; Large spinning wheel from MTZ
ArtNem_MtzWheel:	BINCLUDE	"art/nemesis/Large spinning wheel from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Indent in large spinning wheel from MTZ
ArtNem_MtzWheelIndent:	BINCLUDE	"art/nemesis/Large spinning wheel from MTZ - indent.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spike block from MTZ
ArtNem_MtzSpikeBlock:	BINCLUDE	"art/nemesis/MTZ spike block.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (15 blocks)
; Steam from MTZ
ArtNem_MtzSteam:	BINCLUDE	"art/nemesis/Steam from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spike from MTZ
ArtNem_MtzSpike:	BINCLUDE	"art/nemesis/Spike from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (54 blocks)
; Similarly shaded blocks from MTZ
ArtNem_MtzAsstBlocks:	BINCLUDE	"art/nemesis/Similarly shaded blocks from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Lava bubble from MTZ
ArtNem_MtzLavaBubble:	BINCLUDE	"art/nemesis/Lava bubble from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Lava cup
ArtNem_LavaCup:	BINCLUDE	"art/nemesis/Lava cup from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; End of a bolt and rope from MTZ
ArtNem_BoltEnd_Rope:	BINCLUDE	"art/nemesis/Bolt end and rope from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Small cog from MTZ
ArtNem_MtzCog:	BINCLUDE	"art/nemesis/Small cog from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Unknown. Four blocks that are all the same colour from MTZ.
ArtNem_MtzUnkBlocks:	BINCLUDE	"art/nemesis/Unknown MTZ sprite.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Large wooden box from MCZ	; ArtNem_F187C:
ArtNem_Crate:	BINCLUDE	"art/nemesis/Large wooden box from MCZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Collapsing platform from MCZ	; ArtNem_F1ABA:
ArtNem_MCZCollapsePlat:	BINCLUDE	"art/nemesis/Collapsing platform from MCZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Switch that you pull on from MCZ	; ArtNem_F1C64:
ArtNem_VineSwitch:	BINCLUDE	"art/nemesis/Pull switch from MCZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Vine that lowers in MCZ	; ArtNem_F1D5C:
ArtNem_VinePulley:	BINCLUDE	"art/nemesis/Vine that lowers from MCZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Log viewed from the end for folding gates in MCZ (start of MCZ2)	; ArtNem_F1E06:
ArtNem_MCZGateLog:	BINCLUDE	"art/nemesis/Drawbridge logs from MCZ.bin"

; ----------------------------------------------------------------------------------
; Filler (free space)
; ----------------------------------------------------------------------------------
	; the PCM data has to line up with the end of the bank.
	if assembleZ80SoundDriver
		cnop -Size_of_SEGA_sound, $8000
	else
		org $F8000-Size_of_SEGA_sound ; not as much leeway here
	endif

; -------------------------------------------------------------------------------
; Sega Intro Sound
; 8-bit unsigned raw audio at 16Khz
; -------------------------------------------------------------------------------
; loc_F1E8C:
Snd_Sega:	BINCLUDE	"sound/PCM/SEGA.bin"
Snd_Sega_End:

	if Snd_Sega_End - Snd_Sega > $8000
		fatal "Sega sound must fit within $8000 bytes, but you have a $\{Snd_Sega_End-Snd_Sega} byte Sega sound."
	endif
	if Snd_Sega_End - Snd_Sega > Size_of_SEGA_sound
		fatal "Size_of_SEGA_sound = $\{Size_of_SEGA_sound}, but you have a $\{Snd_Sega_End-Snd_Sega} byte Sega sound."
	endif

; ------------------------------------------------------------------------------
; Music pointers
; ------------------------------------------------------------------------------
	if assembleZ80SoundDriver
		align $8000
	else
		org $F8000 ; not as much leeway here
	endif

; loc_F8000:
MusicPoint2:
	rom_ptr_z80	Mus_CNZ_2P
	rom_ptr_z80	Mus_EHZ
	rom_ptr_z80	Mus_MTZ
	rom_ptr_z80	Mus_CNZ
	rom_ptr_z80	Mus_MCZ
	rom_ptr_z80	Mus_MCZ_2P
	rom_ptr_z80	Mus_ARZ
	rom_ptr_z80	Mus_DEZ
	rom_ptr_z80	Mus_SpecStage
	rom_ptr_z80	Mus_Options
	rom_ptr_z80	Mus_Ending
	rom_ptr_z80	Mus_EndBoss
	rom_ptr_z80	Mus_CPZ
	rom_ptr_z80	Mus_Boss
	rom_ptr_z80	Mus_SCZ
	rom_ptr_z80	Mus_OOZ
	rom_ptr_z80	Mus_WFZ
	rom_ptr_z80	Mus_EHZ_2P
	rom_ptr_z80	Mus_2PResult
	rom_ptr_z80	Mus_SuperSonic
	rom_ptr_z80	Mus_HTZ
	rom_ptr_z80	Mus_ExtraLife
	rom_ptr_z80	Mus_Title
	rom_ptr_z80	Mus_EndLevel
	rom_ptr_z80	Mus_GameOver
	rom_ptr_z80	Mus_Invincible
	rom_ptr_z80	Mus_Emerald
	rom_ptr_z80	Mus_HPZ
	rom_ptr_z80	Mus_Drowning
	rom_ptr_z80	Mus_Credits

; loc_F803C:
Mus_HPZ:	BINCLUDE	"sound/music/HPZ.bin"
Mus_Drowning:	BINCLUDE	"sound/music/Drowning.bin"
Mus_Invincible:	BINCLUDE	"sound/music/Invincible.bin"
Mus_CNZ_2P:	BINCLUDE	"sound/music/CNZ_2p.bin"
Mus_EHZ:	BINCLUDE	"sound/music/EHZ.bin"
Mus_MTZ:	BINCLUDE	"sound/music/MTZ.bin"
Mus_CNZ:	BINCLUDE	"sound/music/CNZ.bin"
Mus_MCZ:	BINCLUDE	"sound/music/MCZ.bin"
Mus_MCZ_2P:	BINCLUDE	"sound/music/MCZ_2p.bin"
Mus_ARZ:	BINCLUDE	"sound/music/ARZ.bin"
Mus_DEZ:	BINCLUDE	"sound/music/DEZ.bin"
Mus_SpecStage:	BINCLUDE	"sound/music/SpecStg.bin"
Mus_Options:	BINCLUDE	"sound/music/Options.bin"
Mus_Ending:	BINCLUDE	"sound/music/Ending.bin"
Mus_EndBoss:	BINCLUDE	"sound/music/End_Boss.bin"
Mus_CPZ:	BINCLUDE	"sound/music/CPZ.bin"
Mus_Boss:	BINCLUDE	"sound/music/Boss.bin"
Mus_SCZ:	BINCLUDE	"sound/music/SCZ.bin"
Mus_OOZ:	BINCLUDE	"sound/music/OOZ.bin"
Mus_WFZ:	BINCLUDE	"sound/music/WFZ.bin"
Mus_EHZ_2P:	BINCLUDE	"sound/music/EHZ_2p.bin"
Mus_2PResult:	BINCLUDE	"sound/music/2player results screen.bin"
Mus_SuperSonic:	BINCLUDE	"sound/music/Supersonic.bin"
Mus_HTZ:	BINCLUDE	"sound/music/HTZ.bin"
Mus_Title:	BINCLUDE	"sound/music/Title screen.bin"
Mus_EndLevel:	BINCLUDE	"sound/music/End of level.bin"
Mus_ExtraLife:	BINCLUDE	"sound/music/Extra life.bin"
Mus_GameOver:	BINCLUDE	"sound/music/Game over.bin"
Mus_Emerald:	BINCLUDE	"sound/music/Got an emerald.bin"
Mus_Credits:	BINCLUDE	"sound/music/Credits.bin"
; ------------------------------------------------------------------------------------------
; Sound effect pointers
; ------------------------------------------------------------------------------------------
; WARNING the sound driver treats certain sounds specially
; going by the number of the sound.
; Keep that in mind if you rearrange this list of pointers.
; If needed you can change these lines in s2.sounddriver.asm
; 	cp	35h+80h ; is this the ring sound?
;	cp	5Ah+80h ; is this the bloop/gloop noise?
;	cp	60h+80h ; is this the spindash rev sound playing?

; loc_FEE91: SoundPoint:
SoundIndex:
	rom_ptr_z80	Sound20	; jumping sound
	rom_ptr_z80	Sound21	; checkpoint ding-dong sound
	rom_ptr_z80	Sound22	; spike switch sound
	rom_ptr_z80	Sound23	; hurt sound
	rom_ptr_z80	Sound24	; skidding sound
	rom_ptr_z80	Sound25	; block push sound
	rom_ptr_z80	Sound26	; spiky impalement sound
	rom_ptr_z80	Sound27	; sparkling sound
	rom_ptr_z80	Sound28	; short beep
	rom_ptr_z80	Sound29	; bwoop
	rom_ptr_z80	Sound2A	; splash sound
	rom_ptr_z80	Sound2B	; swish
	rom_ptr_z80	Sound2C	; boss hit
	rom_ptr_z80	Sound2D	; inhaling a bubble
	rom_ptr_z80	Sound2E	; arrow firing
	rom_ptr_z80	Sound2F	; shield sound
	rom_ptr_z80	Sound30	; laser beam
	rom_ptr_z80	Sound31	; zap
	rom_ptr_z80	Sound32	; drownage
	rom_ptr_z80	Sound33	; fire + burn
	rom_ptr_z80	Sound34	; bumper bing
	rom_ptr_z80	Sound35	; ring sound
	rom_ptr_z80	Sound36
	rom_ptr_z80	Sound37	; rumbling
	rom_ptr_z80	Sound38
	rom_ptr_z80	Sound39	; smash/breaking
	rom_ptr_z80	Sound3A	; nondescript ding
	rom_ptr_z80	Sound3B	; door slamming shut
	rom_ptr_z80	Sound3C	; spindash unleashed
	rom_ptr_z80	Sound3D	; slide-thunk
	rom_ptr_z80	Sound3E	; rolling sound
	rom_ptr_z80	Sound3F	; got continue
	rom_ptr_z80	Sound40	; short bonus ding
	rom_ptr_z80	Sound41	; badnik bust
	rom_ptr_z80	Sound42	; warning ding-ding
	rom_ptr_z80	Sound43	; special stage ring flash (unused)
	rom_ptr_z80	Sound44	; thunk
	rom_ptr_z80	Sound45	; cha-ching
	rom_ptr_z80	Sound46	; losing rings
	rom_ptr_z80	Sound47	; chain pull chink-chink
	rom_ptr_z80	Sound48	; flamethrower
	rom_ptr_z80	Sound49	; bonus pwoieeew (unused)
	rom_ptr_z80	Sound4A	; special stage entry
	rom_ptr_z80	Sound4B	; slower smash/crumble
	rom_ptr_z80	Sound4C	; spring boing
	rom_ptr_z80	Sound4D	; selection blip
	rom_ptr_z80	Sound4E	; another ring sound (only plays in the left speaker?)
	rom_ptr_z80	Sound4F	; signpost spin sound
	rom_ptr_z80	Sound50	; mosquito zapper
	rom_ptr_z80	Sound51
	rom_ptr_z80	Sound52
	rom_ptr_z80	Sound53
	rom_ptr_z80	Sound54	; OOZ lid pop sound
	rom_ptr_z80	Sound55
	rom_ptr_z80	Sound56
	rom_ptr_z80	Sound57
	rom_ptr_z80	Sound58	; CNZ bonusy bumper sound
	rom_ptr_z80	Sound59	; CNZ baaang bumper sound
	rom_ptr_z80	Sound5A	; CNZ gloop / water droplet sound
	rom_ptr_z80	Sound5B
	rom_ptr_z80	Sound5C
	rom_ptr_z80	Sound5D	; chain clink
	rom_ptr_z80	Sound5E	; helicopter
	rom_ptr_z80	Sound5F
	rom_ptr_z80	Sound60	; spindash charge
	rom_ptr_z80	Sound61	; rumbling
	rom_ptr_z80	Sound62
	rom_ptr_z80	Sound63	; CNZ blooing bumper
	rom_ptr_z80	Sound64	; HTZ track click sound
	rom_ptr_z80	Sound65	; kicking up leaves sound
	rom_ptr_z80	Sound66	; leaf splash?
	rom_ptr_z80	Sound67
	rom_ptr_z80	Sound68	; door slamming quickly
	rom_ptr_z80	Sound69
	rom_ptr_z80	Sound6A	; robotic laser burst
	rom_ptr_z80	Sound6B	; scatter
	rom_ptr_z80	Sound6C
	rom_ptr_z80	Sound6D	; error sound
	rom_ptr_z80	Sound6E	; silver sonic buzz saw
	rom_ptr_z80	Sound6F
	rom_ptr_z80	Sound70

	; There are many non-relative pointers in these sound effects,
	; so the sounds shouldn't simply be BINCLUDE'd.
	; They could be included as separate .asm files using "include" instead of "binclude",
	; but I wanted to minimize the number of included asm files.

; jumping sound
Sound20:	dc.w $0000,$0101
		dc.w $8080,z80_ptr(+),$F400
+		dc.b $F5,$00,$9E,$05,$F0,$02,$01,$F8,$65,$A3,$15,$F2

; checkpoint ding-dong sound
Sound21:	dc.w z80_ptr(ssamp21),$0101
		dc.w $8005,z80_ptr(+),$0001
ssamp21:	dc.b $3C,$05,$0A,$01,$01,$56,$5C,$5C,$5C,$0E,$11,$11
		dc.b $11,$09,$06,$0A,$0A,$4F,$3F,$3F,$3F,$17,$20,$80,$80
+		dc.b $EF,$00,$BD,$06,$BA,$16,$F2

; spike switch sound
Sound22:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F0,$01,$01,$F0,$08,$F3,$E7,$C0,$04,$CA,$04
-		dc.b $C0,$01,$EC
		dc.w $01F7,$0006,z80_ptr(-)
		dc.b $F2

; hurt sound
Sound23:	dc.w z80_ptr(ssamp23),$0101
		dc.w $8005,z80_ptr(+),$F400
+		dc.b $EF,$00,$B0,$07,$E7,$AD
-		dc.b $01,$E6
		dc.w $01F7,$002F,z80_ptr(-)
		dc.b $F2
ssamp23:	dc.b $30,$30,$30,$30,$30,$9E,$DC,$D8,$DC,$0E,$04,$0A
		dc.b $05,$08,$08,$08,$08,$BF,$BF,$BF,$BF,$14,$14,$3C,$80

; skidding sound
Sound24:	dc.w $0000,$0102 ; sound header... no sample and 2 script entries
		dc.w $80A0,z80_ptr(+),$F400 ; entry 1 header
		dc.w $80C0,z80_ptr(++),$F400 ; entry 2 header
+		dc.b $F5,$00,$AF,$01,$80,$AF,$80,$03 ; script entry 1
-		dc.b $AF,$01,$80
		dc.w $01F7,$000B,z80_ptr(-) ; loopback
		dc.b $F2 ; script 1 end
+		dc.b $F5,$00,$80,$01,$AD,$80,$AD,$80,$03 ; script entry 2
-		dc.b $AD,$01,$80
		dc.w $01F7,$000B,z80_ptr(-) ; loopback
		dc.b $F2 ; script 2 end

; block push sound
Sound25:	dc.w z80_ptr(ssamp25),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$80,$01,$8B,$0A,$80,$02,$F2
ssamp25:	dc.b $FA,$21,$10,$30,$32,$2F,$2F,$1F,$2F,$05,$09,$08
		dc.b $02,$06,$06,$0F,$02,$1F,$4F,$2F,$2F,$0F,$0E,$1A,$80

; spiky impalement sound
Sound26:	dc.w z80_ptr(ssamp26),$0101
		dc.w $8005,z80_ptr(+),$F200
+		dc.b $EF,$00,$F0,$01,$01,$10,$FF,$CF,$05,$D7,$25,$F2
ssamp26:	dc.b $3B,$3C,$30,$39,$31,$DF,$1F,$1F,$DF,$04,$04,$05
		dc.b $01,$04,$04,$04,$02,$FF,$1F,$0F,$AF,$29,$0F,$20,$80

; sparkling sound
Sound27:	dc.w z80_ptr(ssamp27),$0101
		dc.w $8004,z80_ptr(+),$0C1C
+		dc.b $EF,$00,$C1,$05,$C4,$05,$C9,$2B,$F2
ssamp27:	dc.b $07,$73,$33,$33,$73,$0F,$19,$14,$1A,$0A,$0A,$0A
		dc.b $0A,$0A,$0A,$0A,$0A,$57,$57,$57,$57,$00,$00,$00,$00

; short beep
Sound28:	dc.w $0000,$0101
		dc.w $8080,z80_ptr(+),$E803
+		dc.b $F5,$04,$CB,$04,$F2

; bwoop
Sound29:	dc.w $0000,$0101
		dc.w $80A0,z80_ptr(+),$0000
+		dc.b $F0,$01,$01,$E6,$35,$8E,$06,$F2

; splash sound
Sound2A:	dc.w z80_ptr(ssamp2A),$0102
		dc.w $80C0,z80_ptr(+),$0000
		dc.w $8005,z80_ptr(++),$0003
+		dc.b $F5,$00,$F3,$E7,$C2,$05,$C6,$05,$E7
-		dc.b $07,$EC,$01
		dc.w $E7F7,$000F,z80_ptr(-)
		dc.b $F2
+		dc.b $EF,$00,$A6,$14,$F2
ssamp2A:	dc.b $00,$00,$02,$03,$00,$D9,$1F,$DF,$1F,$12,$14,$11
		dc.b $0F,$0A,$0A,$00,$0D,$FF,$FF,$FF,$FF,$22,$27,$07,$80

; swish
Sound2B:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F5,$00,$F3,$E7,$C6,$03,$80,$03,$C6,$01,$E7
-		dc.b $01,$EC,$01
		dc.w $E7F7,$0015,z80_ptr(-)
		dc.b $F2

; boss hit
Sound2C:	dc.w z80_ptr(smashsamp),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$F0,$01,$01,$0C,$01
-		dc.b $81,$0A,$E6
		dc.w $10F7,$0004,z80_ptr(-)
		dc.b $F2
smashsamp:	dc.b $F9,$21,$10,$30,$32,$1F,$1F,$1F,$1F,$05,$09,$18
		dc.b $02,$0B,$10,$1F,$05,$1F,$4F,$2F,$2F,$0E,$04,$07,$80

; inhaling a bubble
Sound2D:	dc.w z80_ptr(ssamp2D),$0101
		dc.w $8005,z80_ptr(+),$0E00
+		dc.b $EF,$00,$F0,$01,$01,$21,$6E,$A6,$07
		dc.b $80,$06,$F0,$01,$01,$44,$1E,$AD,$08,$F2
ssamp2D:	dc.b $35,$05,$08,$09,$07,$1E,$0D,$0D,$0E,$0C,$03,$15
		dc.b $06,$16,$09,$0E,$10,$2F,$1F,$2F,$1F,$15,$12,$12,$80

; arrow firing
Sound2E:	dc.w z80_ptr(ssamp2E),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$80,$01,$F0,$01,$01,$40,$48,$83,$06,$85,$02,$F2
+		dc.b $F5,$00,$80,$0B,$F3,$E7,$C6,$01,$E7
-		dc.b $02,$EC,$01
		dc.w $E7F7,$0010,z80_ptr(-)
		dc.b $F2
ssamp2E:	dc.b $FA,$02,$00,$03,$05,$12,$0F,$11,$13,$05,$09,$18
		dc.b $02,$06,$06,$0F,$02,$1F,$4F,$2F,$2F,$2F,$0E,$1A,$80

; shield sound
Sound2F:	dc.w z80_ptr(ssamp2F),$0101
		dc.w $8005,z80_ptr(+),$0C00
+		dc.b $EF,$00,$80,$01,$A3,$05,$E7,$A4,$26,$F2
ssamp2F:	dc.b $30,$30,$30,$30,$30,$9E,$AC,$A8,$DC,$0E,$04,$0A
		dc.b $05,$08,$08,$08,$08,$BF,$BF,$BF,$BF,$04,$14,$2C,$80

; laser beam
Sound30:	dc.w z80_ptr(ssamp30),$0101 ; sound header... a sample and 1 script entry
		dc.w $8005,z80_ptr(+),$FB05 ; script entry header
+		dc.b $EF,$00,$DF,$7F ; script start
-		dc.b $DF,$02,$E6 ; script continued
		dc.w $01F7,$001B,z80_ptr(-) ; loopback
		dc.b $F2 ; script end
ssamp30:	dc.b $83,$1F,$1F,$15,$1F,$1F,$1F,$1F,$1F,$00,$00,$00 ; sample
		dc.b $00,$02,$02,$02,$02,$2F,$FF,$2F,$3F,$0B,$01,$16,$82 ; (fixed length)

; zap
Sound31:	dc.w z80_ptr(ssamp31),$0101
		dc.w $8005,z80_ptr(+),$FB02
+		dc.b $EF,$00,$B3,$05,$80,$01,$B3,$09,$F2
ssamp31:	dc.b $83,$12,$13,$10,$1E,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$02,$02,$02,$02,$2F,$FF,$2F,$3F,$05,$34,$10,$87

; drownage
Sound32:	dc.w z80_ptr(ssamp32),$0102
		dc.w $8004,z80_ptr(++),$0C04
		dc.w $8005,z80_ptr(+),$0E02
+		dc.b $EF,$00,$F0,$01,$01,$83,$0C
-		dc.b $8A,$05,$05,$E6
		dc.w $03F7,$000A,z80_ptr(-)
		dc.b $F2
+		dc.b $80,$06,$EF,$00,$F0,$01,$01,$6F,$0E
-		dc.b $8D,$04,$05,$E6
		dc.w $03F7,$000A,z80_ptr(-)
		dc.b $F2
ssamp32:	dc.b $35,$14,$04,$1A,$09,$0E,$11,$10,$0E,$0C,$03,$15
		dc.b $06,$16,$09,$0E,$10,$2F,$4F,$2F,$4F,$2F,$12,$12,$80

; fire + burn
Sound33:	dc.w z80_ptr(ssamp2E),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$80,$01,$F0,$01,$01,$40,$48,$83,$06,$85,$02,$F2
+		dc.b $F5,$00,$80,$0B,$F3,$E7,$A7,$25,$E7
-		dc.b $02,$EC,$01
		dc.w $E7F7,$0010,z80_ptr(-)
		dc.b $F2

; bumper bing
Sound34:	dc.w z80_ptr(ssamp34),$0103
		dc.w $8005,z80_ptr(+),$0000
		dc.w $8004,z80_ptr(++),$0000
		dc.w $8002,z80_ptr(+++),$0002
+		dc.b $EF,$00,$F6,$E0,$F2
+		dc.b $EF,$00,$E1,$07,$80,$01,$BA,$20,$F2
+		dc.b $EF,$01,$9A,$03,$F2
ssamp34:	dc.b $3C,$05,$0A,$01,$01,$56,$5C,$5C,$5C,$0E,$11,$11
		dc.b $11,$09,$06,$0A,$0A,$4F,$3F,$3F,$3F,$1F,$2B,$80,$80
; unused sample
		dc.b $05,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$12,$0C,$0C
		dc.b $0C,$12,$08,$08,$08,$1F,$5F,$5F,$5F,$07,$80,$80,$80

; ring sound
Sound35:	dc.w z80_ptr(ringsamp),$0101
		dc.w $8005,z80_ptr(+),$0005
+		dc.b $EF,$00,$E0,$40,$C1,$05,$C4,$05,$C9,$1B,$F2


Sound36:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F0,$01,$01,$F0,$08,$F3,$E7,$C1,$07
-		dc.b $D0,$01,$EC
		dc.w $01F7,$000C,z80_ptr(-)
		dc.b $F2

; rumbling
Sound37:	dc.w z80_ptr(ssamp37),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$F0,$01,$01,$20,$08
-		dc.b $8B
		dc.w $0AF7,$0008,z80_ptr(-)
-		dc.b $8B,$10,$E6
		dc.w $03F7,$0009,z80_ptr(-)
		dc.b $F2
ssamp37:	dc.b $FA,$21,$10,$30,$32,$1F,$1F,$1F,$1F,$05,$09,$18
		dc.b $02,$06,$06,$0F,$02,$1F,$4F,$2F,$2F,$0F,$0E,$1A,$80


Sound38:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F0,$01,$01,$F0,$08,$F3,$E7,$B4,$08
-		dc.b $B0,$02,$EC
		dc.w $01F7,$0003,z80_ptr(-)
		dc.b $F2

; smash/breaking
Sound39:	dc.w z80_ptr(smashsamp),$0104
		dc.w $8002,z80_ptr(+),$1000
		dc.w $8004,z80_ptr(+++),$0000
		dc.w $8005,z80_ptr(++),$1000
		dc.w $80C0,z80_ptr(s39s4),$0000
+		dc.b $E0,$40,$80,$02,$F6,$CB,$F3
+		dc.b $E0,$80,$80,$01
+		dc.b $EF,$00,$F0,$03,$01,$20,$04
-		dc.b $81,$18,$E6
		dc.w $0AF7,$0006,z80_ptr(-)
		dc.b $F2
s39s4:		dc.b $F0,$01,$01,$0F,$05,$F3,$E7
-		dc.b $B0,$18,$E7,$EC
		dc.w $03F7,$0005,z80_ptr(-)
		dc.b $F2

; nondescript ding
Sound3A:	dc.w z80_ptr(ssamp3A),$0101
		dc.w $8005,z80_ptr(+),$0007
+		dc.b $EF,$00,$AE,$08,$F2
ssamp3A:	dc.b $1C,$2E,$0F,$02,$02,$1F,$1F,$1F,$1F,$18,$14,$0F
		dc.b $0E,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$20,$1B,$80,$80

; door slamming shut
Sound3B:	dc.w z80_ptr(ssamp3B),$0101
		dc.w $8005,z80_ptr(+),$F400
+		dc.b $EF,$00,$9B,$04,$80,$A0,$06,$F2
ssamp3B:	dc.b $3C,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$00,$0F,$16
		dc.b $0F,$00,$00,$00,$00,$0F,$FF,$AF,$FF,$00,$0A,$80,$80

; spindash unleashed
Sound3C:	dc.w z80_ptr(ssamp3C),$0102
		dc.w $8005,z80_ptr(+),$9000
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$F0,$01,$01,$C5,$1A,$CD,$07,$F2
+		dc.b $F5,$07,$80,$07,$F0,$01,$02,$05,$FF,$F3,$E7,$BB,$4F,$F2
ssamp3C:	dc.b $FD,$09,$00,$03,$00,$1F,$1F,$1F,$1F,$10,$0C,$0C
		dc.b $0C,$0B,$10,$1F,$05,$1F,$4F,$2F,$2F,$09,$92,$84,$8E

; slide-thunk
Sound3D:	dc.w z80_ptr(ssamp3D),$0102
		dc.w $8005,z80_ptr(+),$100A
		dc.w $8004,z80_ptr(++),$0000
+		dc.b $EF,$00,$F0,$01,$01,$60,$01,$A7,$08,$F2
+		dc.b $80,$08,$EF,$01,$84,$22,$F2
ssamp3D:	dc.b $FA,$21,$19,$3A,$30,$1F,$1F,$1F,$1F,$05,$09,$18
		dc.b $02,$0B,$10,$1F,$05,$1F,$4F,$2F,$2F,$0E,$04,$07,$80
; unused sample
		dc.b $FA,$31,$10,$30,$32,$1F,$1F,$1F,$1F,$05,$05,$18
		dc.b $10,$0B,$10,$1F,$10,$1F,$1F,$2F,$2F,$0D,$01,$00,$80

; rolling sound
Sound3E:	dc.w z80_ptr(ssamp3E),$0101
		dc.w $8004,z80_ptr(+),$0C05
+		dc.b $EF,$00,$80,$01,$F0,$03,$01,$09,$FF,$CA,$25,$F4
-		dc.b $E7,$E6,$01,$D0
		dc.w $02F7,$002A,z80_ptr(-)
		dc.b $F2
ssamp3E:	dc.b $3C,$00,$02,$44,$02,$1F,$1F,$1F,$15,$00,$00,$1F
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$0D,$28,$00,$00

; got continue
Sound3F:	dc.w z80_ptr(ssamp3F),$0103
		dc.w $8002,z80_ptr(+),$F406
		dc.w $8004,z80_ptr(++),$F406
		dc.w $8005,z80_ptr(+++),$F406
+		dc.b $EF,$00,$C9,$07,$CD,$D0,$CB,$CE,$D2,$CD,$D0,$D4,$CE,$D2,$D5
-		dc.b $D0,$07,$D4,$D7,$E6
		dc.w $05F7,$0008,z80_ptr(-)
		dc.b $F2
+		dc.b $EF,$00,$E1,$01,$80,$07,$CD,$15,$CE,$D0,$D2
-		dc.b $D4,$15,$E6
		dc.w $05F7,$0008,z80_ptr(-)
		dc.b $F2
+		dc.b $EF,$00,$E1,$01,$C9,$15,$CB,$CD,$CE
-		dc.b $D0,$15,$E6
		dc.w $05F7,$0008,z80_ptr(-)
		dc.b $F2
ssamp3F:	dc.b $14,$25,$36,$33,$11,$1F,$1F,$1F,$1F,$15,$1C,$18
		dc.b $13,$0B,$0D,$08,$09,$0F,$8F,$9F,$0F,$24,$0A,$05,$80

; short bonus ding
Sound40:	dc.w z80_ptr(ssamp3F),$0102
		dc.w $8005,z80_ptr(++),$0008
		dc.w $8004,z80_ptr(+),$0008
+		dc.b $E1,$03,$80,$02
+		dc.b $EF,$00,$C4,$16,$F2

; badnik bust
Sound41:	dc.w z80_ptr(ssamp41),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0002
+		dc.b $F0,$03,$01,$72,$0B,$EF,$00,$BA,$16,$F2
+		dc.b $F5,$01,$F3,$E7,$B0,$1B,$F2
ssamp41:	dc.b $3C,$0F,$03,$01,$01,$1F,$1F,$1F,$1F,$19,$19,$12
		dc.b $0E,$05,$00,$12,$0F,$0F,$FF,$7F,$FF,$00,$00,$80,$80

; warning ding-ding
Sound42:	dc.w z80_ptr(ssamp3F),$0101
		dc.w $8005,z80_ptr(+),$0C08
+		dc.b $EF,$00,$BA,$08,$BA,$25,$F2

; special stage ring flash (unused)
Sound43:	dc.w z80_ptr(ssamp43),$0102
		dc.w $8004,z80_ptr(+),$0C00
		dc.w $8005,z80_ptr(++),$0013
+		dc.b $EF,$01,$80,$01,$A2,$08,$EF,$00,$E7,$AD,$26,$F2
+		dc.b $EF,$02,$F0,$06,$01,$03,$FF,$80,$0A
-		dc.b $C3
		dc.w $06F7,$0005,z80_ptr(-)
		dc.b $C3,$17,$F2
ssamp43:	dc.b $30,$30,$34,$5C,$30,$9E,$AC,$A8,$DC,$0E,$04,$0A
		dc.b $05,$08,$08,$08,$08,$BF,$BF,$BF,$BF,$24,$04,$1C,$80
; unused sample
		dc.b $30,$30,$34,$5C,$30,$9E,$AC,$A8,$DC,$0E,$04,$0A
		dc.b $05,$08,$08,$08,$08,$BF,$BF,$BF,$BF,$24,$04,$2C,$80
; another unused sample
		dc.b $04,$37,$77,$72,$49,$1F,$1F,$1F,$1F,$07,$07,$0A
		dc.b $0D,$00,$00,$0B,$0B,$1F,$1F,$0F,$0F,$13,$13,$81,$88

; thunk
Sound44:	dc.w z80_ptr(ssamp44),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$8A,$22,$F2
ssamp44:	dc.b $FA,$21,$10,$30,$32,$1F,$1F,$1F,$1F,$05,$05,$18
		dc.b $10,$0B,$10,$1F,$10,$1F,$4F,$2F,$2F,$0D,$04,$07,$80

; cha-ching
Sound45:	dc.w z80_ptr(ssamp45),$0103
		dc.w $8005,z80_ptr(+),$0000
		dc.w $8004,z80_ptr(++),$0000
		dc.w $80C0,z80_ptr(+++),$0000
+		dc.b $EF,$00,$8A,$08,$80,$02,$8A,$08,$F2
+		dc.b $EF,$01,$80,$12,$C6,$55,$F2
+		dc.b $F5,$02,$F3,$E7,$80,$02,$C2,$05,$C4,$04,$C2,$05,$C4,$04,$F2
ssamp45:	dc.b $3B,$03,$02,$02,$06,$18,$1A,$1A,$96,$17,$0A,$0E
		dc.b $10,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$39,$28,$80
ringsamp:	dc.b $04,$37,$77,$72,$49,$1F,$1F,$1F,$1F,$07,$07,$0A
		dc.b $0D,$00,$00,$0B,$0B,$1F,$1F,$0F,$0F,$23,$23,$80,$80

; losing rings
Sound46:	dc.w z80_ptr(ringsamp),$0102
		dc.w $8004,z80_ptr(+),$0005
		dc.w $8005,z80_ptr(++),$0008
+		dc.b $EF,$00,$C6,$02,$05,$05,$05,$05,$05,$05,$3A,$F2
+		dc.b $EF,$00,$80,$02,$C4,$02,$05,$15,$02,$05,$32,$F2

; chain pull chink-chink
Sound47:	dc.w z80_ptr(ssamp47),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$BE,$05,$80,$04,$BE,$04,$80,$04,$F2
ssamp47:	dc.b $28,$2F,$37,$5F,$2B,$1F,$1F,$1F,$1F,$15,$15,$15
		dc.b $13,$13,$0D,$0C,$10,$2F,$3F,$2F,$2F,$00,$1F,$10,$80

; flamethrower
Sound48:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F5,$00,$F3,$E7,$A7,$25,$F2

; bonus pwoieeew (unused)
Sound49:	dc.w z80_ptr(ssamp49),$0101
		dc.w $8005,z80_ptr(+),$0E00
+		dc.b $EF,$00,$F0,$01,$01,$33,$18,$B9,$1A,$F2
ssamp49:	dc.b $3B,$0A,$05,$31,$02,$5F,$5F,$5F,$5F,$04,$16,$14
		dc.b $0C,$00,$00,$04,$00,$1F,$D8,$6F,$FF,$03,$00,$25,$80

; special stage entry
Sound4A:	dc.w z80_ptr(ssamp4A),$0101
		dc.w $8005,z80_ptr(+),$0002
+		dc.b $EF,$00,$F0,$01,$01,$5B,$02,$CC,$65,$F2
ssamp4A:	dc.b $20,$36,$30,$35,$31,$41,$3B,$49,$4B,$09,$09,$06
		dc.b $08,$01,$02,$03,$A9,$0F,$0F,$0F,$0F,$29,$23,$27,$80

; slower smash/crumble
Sound4B:	dc.w z80_ptr(smashsamp),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$F0,$03,$01,$20,$04
-		dc.b $81,$18,$E6
		dc.w $0AF7,$0006,z80_ptr(-)
		dc.b $F2
+		dc.b $F0,$01,$01,$0F,$05,$F3,$E7
-		dc.b $B0,$18,$E7,$EC
		dc.w $03F7,$0005,z80_ptr(-)
		dc.b $F2

; spring boing
Sound4C:	dc.w z80_ptr(ssamp4C),$0101
		dc.w $8004,z80_ptr(+),$0002
+		dc.b $EF,$00,$80,$01,$F0,$03,$01,$5D,$0F,$B0,$0C,$F4
-		dc.b $E7,$E6,$02,$BD
		dc.w $02F7,$0019,z80_ptr(-)
		dc.b $F2
ssamp4C:	dc.b $20,$36,$30,$35,$31,$DF,$9F,$DF,$9F,$07,$09,$06
		dc.b $06,$07,$06,$06,$08,$2F,$1F,$1F,$FF,$16,$13,$30,$80

; selection blip
Sound4D:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $BB,$02,$F2

; another ring sound (only plays in the left speaker?)
Sound4E:	dc.w z80_ptr(ringsamp),$0101
		dc.w $8004,z80_ptr(+),$0005
+		dc.b $EF,$00,$E0,$80,$C1,$04,$C4,$05,$C9,$1B,$F2

; signpost spin sound
Sound4F:	dc.w z80_ptr(ssamp4F),$0102
		dc.w $8004,z80_ptr(+),$2703
		dc.w $8005,z80_ptr(++),$2700
+		dc.b $80,$04
+		dc.b $EF,$00
-		dc.b $B4,$05,$E6
		dc.w $02F7,$0015,z80_ptr(-)
		dc.b $F2
ssamp4F:	dc.b $F4,$06,$0F,$04,$0E,$1F,$1F,$1F,$1F,$00,$0B,$00
		dc.b $0B,$00,$05,$00,$08,$0F,$FF,$0F,$FF,$0C,$03,$8B,$80

; mosquito zapper
Sound50:	dc.w z80_ptr(ssamp50),$0101
		dc.w $8005,z80_ptr(+),$F400
+		dc.b $EF,$00,$B3,$04,$80,$01
-		dc.b $B4,$04,$80
		dc.w $01F7,$0004,z80_ptr(-)
		dc.b $F2
ssamp50:	dc.b $83,$12,$13,$10,$1E,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$02,$02,$02,$02,$2F,$FF,$2F,$3F,$06,$34,$10,$87


Sound51:	dc.w z80_ptr(ssamp51),$0102
		dc.w $80C0,z80_ptr(+),$0001
		dc.w $8005,z80_ptr(++),$000B
+		dc.b $F5,$02,$F3,$E4,$B0,$04,$85,$02,$F2
+		dc.b $EF,$00,$E8,$04,$A5,$06,$F2
ssamp51:	dc.b $3C,$02,$01,$00,$01,$1F,$1F,$1F,$1F,$00,$19,$0E
		dc.b $10,$00,$00,$0C,$0F,$0F,$FF,$EF,$FF,$05,$00,$80,$80


Sound52:	dc.w z80_ptr(ssamp52),$0101
		dc.w $8005,z80_ptr(+),$0002
+		dc.b $F0,$01,$01,$2A,$07,$EF,$00
-		dc.b $A5,$03
		dc.w $E7F7,$0013,z80_ptr(-)
-		dc.b $A5,$03,$E7,$E6
		dc.w $02F7,$0013,z80_ptr(-)
		dc.b $F2
ssamp52:	dc.b $28,$21,$21,$21,$30,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$29,$20,$29,$80


Sound53:	dc.w z80_ptr(ssamp53),$0101
		dc.w $8005,z80_ptr(+),$F503
+		dc.b $EF,$00,$F0,$01,$01,$46,$09,$A7,$14,$E7,$14,$E7,$E6,$04
		dc.b $14,$E7,$E6,$04,$14,$E7,$E6,$04,$0A,$E7,$E6,$04,$0A,$F2
ssamp53:	dc.b $07,$0A,$0C,$0C,$0C,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$2A,$0F,$0F,$80

; OOZ lid pop sound
Sound54:	dc.w z80_ptr(ssamp54),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0006
+		dc.b $EF,$00,$B6,$15,$F2
+		dc.b $F3,$E7,$F5,$04,$C6,$03,$E7,$C5,$E7
		dc.b $C4,$E7,$C3,$E7,$C2,$E7,$C1,$E7,$C0,$F2
ssamp54:	dc.b $07,$03,$02,$03,$00,$FF,$6F,$6F,$3F,$12,$14,$11
		dc.b $0E,$1A,$0A,$03,$0D,$FF,$FF,$FF,$FF,$03,$07,$07,$80


Sound55:	dc.w z80_ptr(ssamp55),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$AA,$07,$B6,$15,$F2
ssamp55:	dc.b $42,$20,$0E,$0F,$0F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
		dc.b $1F,$0F,$0E,$0F,$0E,$0F,$0F,$0F,$0F,$2E,$80,$20,$80


Sound56:	dc.w z80_ptr(ssamp56),$0101
		dc.w $8005,z80_ptr(+),$100E
+		dc.b $EF,$00,$F0,$01,$01,$1E,$FF,$8F,$1C,$F4
-		dc.b $E7,$9A
		dc.w $05F7,$0009,z80_ptr(-)
-		dc.b $E7,$9A,$04,$E6,$02,$E7,$9A,$04,$E6
		dc.w $02F7,$0008,z80_ptr(-)
		dc.b $F2
ssamp56:	dc.b $0D,$06,$00,$00,$E5,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$27,$80,$80,$80


Sound57:	dc.w z80_ptr(ssamp57),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$CA,$15,$F2
ssamp57:	dc.b $04,$09,$70,$00,$30,$1C,$1F,$DF,$1F,$15,$12,$0B
		dc.b $0F,$0C,$0D,$00,$0D,$07,$2F,$FA,$FA,$00,$29,$00,$00

; CNZ bonusy bumper sound
Sound58:	dc.w z80_ptr(ssamp58),$0101
		dc.w $8005,z80_ptr(+),$0007
+		dc.b $EF,$00,$B3,$06,$B3,$15,$F2
ssamp58:	dc.b $3C,$05,$0A,$01,$01,$56,$5C,$5C,$5C,$0E,$11,$11
		dc.b $11,$09,$06,$0A,$0A,$4F,$3F,$3F,$3F,$17,$20,$80,$80

; CNZ baaang bumper sound
Sound59:	dc.w z80_ptr(ssamp59),$0103
		dc.w $8004,z80_ptr(+),$0000
		dc.w $8002,z80_ptr(++),$0002
		dc.w $8005,z80_ptr(+++),$0000
+		dc.b $EF,$00,$E1,$0C,$B5,$14,$F2
+		dc.b $EF,$01,$9A,$03,$F2
+		dc.b $EF,$00,$B6,$14,$F2
ssamp59:	dc.b $32,$30,$30,$40,$70,$1F,$1F,$1F,$1F,$12,$0A,$01
		dc.b $0D,$00,$01,$01,$0C,$00,$23,$C3,$F6,$08,$07,$1C,$03
; unused sample:
		dc.b $05,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$12,$0C,$0C
		dc.b $0C,$12,$08,$08,$08,$1F,$5F,$5F,$5F,$07,$80,$80,$80

; CNZ gloop / water droplet sound
Sound5A:	dc.w z80_ptr(ssamp5A),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$F0,$01,$01,$7F,$F1,$AA,$0A,$F2
ssamp5A:	dc.b $47,$03,$02,$02,$04,$5F,$5F,$5F,$5F,$0E,$1A,$11
		dc.b $0A,$09,$0A,$0A,$0A,$4F,$3F,$3F,$3F,$7F,$80,$80,$A3


Sound5B:	dc.w z80_ptr(ssamp5B),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$80,$02,$A5,$01,$E7
-		dc.b $01,$E7,$E6
		dc.w $02F7,$0005,z80_ptr(-)
		dc.b $F2
ssamp5B:	dc.b $38,$0F,$0F,$0F,$0F,$1F,$1F,$1F,$0E,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$1F,$00,$00,$00,$80


Sound5C:	dc.w z80_ptr(ssamp5C),$0102
		dc.w $8004,z80_ptr(+),$000E
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$85,$40
-		dc.b $E7,$04,$E6
		dc.w $04F7,$000A,z80_ptr(-)
		dc.b $F2
+		dc.b $F5,$00,$F3,$E7,$A7,$40
-		dc.b $E7,$08,$E6
		dc.w $01F7,$0005,z80_ptr(-)
		dc.b $F2
ssamp5C:	dc.b $FA,$12,$01,$01,$01,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$81,$8E,$14,$80

; chain clink
Sound5D:	dc.w z80_ptr(ssamp5D),$0101
		dc.w $8005,z80_ptr(+),$0000
+		dc.b $EF,$00,$C0,$04,$F2
ssamp5D:	dc.b $28,$2F,$37,$5F,$2B,$1F,$1F,$1F,$1F,$15,$15,$15
		dc.b $13,$13,$0D,$0C,$10,$2F,$3F,$2F,$2F,$00,$1F,$10,$80

; helicopter
Sound5E:	dc.w z80_ptr(ssamp5E),$0101
		dc.w $8002,z80_ptr(+),$1405
+		dc.b $EF,$00
-		dc.b $95,$02,$95
		dc.w $01F7,$0013,z80_ptr(-)
-		dc.b $95,$02,$95,$01,$E6
		dc.w $01F7,$001B,z80_ptr(-)
		dc.b $F2
ssamp5E:	dc.b $35,$30,$44,$40,$51,$1F,$1F,$1F,$1F,$10,$00,$13
		dc.b $15,$1F,$00,$1F,$1A,$7F,$0F,$7F,$5F,$02,$A8,$80,$80


Sound5F:	dc.w z80_ptr(ssamp5F),$0103
		dc.w $8005,z80_ptr(s5Fs1),$0000
		dc.w $80C0,z80_ptr(s5Fs2),$0000
		dc.w $80A0,z80_ptr(s5Fs3),$0000
s5Fs1		dc.b $EF,$00,$F0,$01,$01,$C5,$1A,$CD,$07,$E6,$0A,$80
		dc.b $06,$EF,$01,$F0,$01,$01,$11,$FF,$A2,$28
-		dc.b $E7,$03,$E6
		dc.w $03F7,$0005,z80_ptr(-)
		dc.b $F2
s5Fs2		dc.b $80,$07,$F0,$01,$02,$05,$FF,$F3,$E7,$BB,$1D
-		dc.b $E7,$07,$EC
		dc.w $01F7,$0010,z80_ptr(-)
		dc.b $F2
s5Fs3		dc.b $80,$16,$F5,$03
-		dc.b $BF,$04,$C1,$C3,$EC,$01,$E9
		dc.w $FFF7,$0005,z80_ptr(-)
-		dc.b $BF,$04,$C1,$C3,$EC,$01,$E9
		dc.w $01F7,$0007,z80_ptr(-)
		dc.b $F2
ssamp5F:	dc.b $FD,$09,$00,$03,$00,$1F,$1F,$1F,$1F,$10,$0C,$0C
		dc.b $0C,$0B,$10,$1F,$05,$1F,$4F,$2F,$2F,$09,$92,$84,$8E
; unused sample
		dc.b $3A,$70,$30,$04,$01,$0F,$14,$19,$16,$08,$0A,$0B
		dc.b $05,$03,$03,$03,$05,$1F,$6F,$8F,$5F,$1F,$22,$1F,$80

; spindash charge
Sound60:	dc.w z80_ptr(ssamp60),$0101
		dc.w $8005,z80_ptr(+),$FE00
+		dc.b $EF,$00,$F0,$00,$01,$20,$F6,$C4,$16,$E7,$F4,$D0,$18,$E7
-		dc.b $04,$E7,$E6
		dc.w $03F7,$0010,z80_ptr(-)
		dc.b $F2
ssamp60:	dc.b $34,$00,$03,$0C,$09,$9F,$8C,$8F,$95,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$00,$1D,$00,$00

; rumbling
Sound61:	dc.w z80_ptr(ssamp61),$0101
		dc.w $8004,z80_ptr(+),$0004
+		dc.b $80,$01,$EF,$00,$F0,$00,$01,$70,$06,$82,$06,$85,$08,$83
		dc.b $01,$82,$05,$86,$06,$89,$03,$82,$08,$88,$04,$82,$06,$E6
		dc.b $02,$85,$08,$E6,$02,$83,$01,$E6,$02,$82,$05,$E6,$02,$86
		dc.b $06,$E6,$02,$89,$03,$E6,$02,$82,$08,$E6,$02,$88,$04,$E6,$02,$F2
ssamp61:	dc.b $32,$30,$30,$50,$30,$1F,$0E,$19,$0E,$07,$12,$15
		dc.b $09,$0A,$09,$1D,$06,$E8,$03,$0A,$17,$07,$00,$00,$00


Sound62:	dc.w z80_ptr(ssamp62),$0101
		dc.w $8005,z80_ptr(+),$FF00
+		dc.b $EF,$00,$A6,$05,$F0,$01,$01,$E7,$40
-		dc.b $C4,$02,$E7,$E6
		dc.w $01F7,$0012,z80_ptr(-)
		dc.b $F2
ssamp62:	dc.b $34,$0C,$10,$73,$0C,$AF,$AC,$FF,$D5,$06,$00,$02
		dc.b $01,$02,$0A,$04,$08,$BF,$BF,$BF,$BF,$00,$08,$80,$80

; CNZ blooing bumper
Sound63:	dc.w z80_ptr(ssamp63),$0101
		dc.w $8005,z80_ptr(+),$0907
+		dc.b $EF,$00,$F0,$01,$01,$04,$56,$92,$03,$9A,$25,$F2
ssamp63:	dc.b $3D,$12,$10,$77,$30,$5F,$5F,$5F,$5F,$0F,$0A,$00
		dc.b $01,$0A,$0A,$0D,$0D,$4F,$0F,$0F,$0F,$13,$80,$80,$80

; HTZ track click sound
Sound64:	dc.w z80_ptr(ssamp64),$0101
		dc.w $8005,z80_ptr(+),$1100
+		dc.b $EF,$00,$C7,$02,$F2
ssamp64:	dc.b $24,$2A,$02,$05,$01,$1A,$1F,$10,$1F,$0F,$1F,$1F
		dc.b $1F,$0C,$0D,$11,$11,$0C,$09,$09,$0F,$0E,$04,$80,$80

; kicking up leaves sound
Sound65:	dc.w z80_ptr(ssamp65),$0101
		dc.w $80C0,z80_ptr(+),$F800
+		dc.b $F5,$03,$F3,$E7,$CE,$03,$F5,$06,$CE,$04,$EC
		dc.b $02,$CE,$02,$F5,$03,$EC,$FE,$CE,$08,$CE,$18,$F2
ssamp65:	; uhm... apparently they forgot to null out the pointer to here.
		; luckily, sound 65 doesn't really use its sample

; leaf splash?
Sound66:	dc.w z80_ptr(ssamp66),$0102
		dc.w $8005,z80_ptr(++),$EE08
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F3,$E7,$F5,$09,$C6,$36,$F2
+		dc.b $EF,$00,$80,$01,$92,$02,$02,$02,$30,$F2
ssamp66:	dc.b $32,$33,$17,$34,$13,$0F,$0D,$1B,$17,$00,$04,$02
		dc.b $0B,$08,$00,$08,$09,$6F,$5F,$4F,$6F,$05,$00,$00,$80


Sound67:	dc.w z80_ptr(ssamp67),$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F5,$06,$F3,$E7,$90,$0A,$94,$0A,$98,$0A,$9C
		dc.b $0A,$A0,$0A,$A4,$08,$A8,$08,$AC,$08,$B0,$08,$F2
ssamp67:	; another not-really-used sample

; door slamming quickly
Sound68:	dc.w z80_ptr(ssamp68),$0101
		dc.w $8005,z80_ptr(+),$F400
+		dc.b $EF,$00,$9B,$04,$A5,$06,$F2
ssamp68:	dc.b $3C,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$00,$0F,$16
		dc.b $0F,$00,$00,$00,$00,$0F,$FF,$AF,$FF,$00,$0A,$80,$80


Sound69:	dc.w z80_ptr(ssamp69),$0102
		dc.w $8005,z80_ptr(+),$F400
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$9B,$03,$A8,$06,$9E,$08,$F2
+		dc.b $F5,$04,$F3,$E7,$C6,$03,$C6,$06,$C6,$08,$F2
ssamp69:	dc.b $3C,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$00,$0F,$16
		dc.b $0F,$00,$00,$00,$00,$0F,$FF,$AF,$FF,$00,$0A,$80,$80

; robotic laser burst
Sound6A:	dc.w z80_ptr(ssamp6A),$0101
		dc.w $8005,z80_ptr(+),$0004
+		dc.b $EF,$00,$DF,$14,$E6,$18,$06,$F2
ssamp6A:	dc.b $3D,$09,$34,$34,$28,$1F,$16,$16,$16,$00,$00,$00
		dc.b $04,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$15,$02,$02,$00

; scatter
Sound6B:	dc.w z80_ptr(ssamp6B),$0101
		dc.w $8004,z80_ptr(+),$0002
+		dc.b $EF,$00,$81,$04,$80,$0C,$F2
ssamp6B:	dc.b $3A,$30,$30,$40,$70,$1F,$1F,$1F,$1F,$12,$0A,$01
		dc.b $07,$00,$01,$01,$03,$00,$23,$C3,$46,$08,$07,$1C,$03


Sound6C:	dc.w z80_ptr(ssamp6C),$0104
		dc.w $8005,z80_ptr(++),$0010
		dc.w $8004,z80_ptr(+),$0010
		dc.w $80C0,z80_ptr(s5Fs2),$0000
		dc.w $80A0,z80_ptr(s5Fs3),$0000
+		dc.b $E1,$10
+		dc.b $EF,$01,$F0,$01,$01,$EC,$56,$C0,$24,$F4,$EF,$00,$E6,$F0
-		dc.b $BB,$02,$E7,$E6,$02,$E9
		dc.w $01F7,$0020,z80_ptr(-)
		dc.b $F2
ssamp6C:	dc.b $00,$53,$30,$03,$30,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$0F,$0F,$06,$23,$80
; unused sample
		dc.b $3C,$72,$32,$32,$72,$14,$14,$0F,$0F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$02,$02,$08,$08,$35,$14,$00,$00

; error sound
Sound6D:	dc.w z80_ptr(ssamp6D),$0101
		dc.w $8005,z80_ptr(+),$0004
+		dc.b $EF,$00,$B0,$06,$80,$06,$B0,$18,$F2
ssamp6D:	dc.b $38,$00,$00,$00,$00,$1F,$1F,$1F,$1F,$00,$00,$00
		dc.b $00,$00,$00,$00,$00,$0F,$0F,$0F,$0F,$1F,$0C,$17,$00

; silver sonic buzz saw
Sound6E:	dc.w z80_ptr(ssamp6E),$0102
		dc.w $8005,z80_ptr(+),$0000
		dc.w $80C0,z80_ptr(++),$0000
+		dc.b $EF,$00,$C6,$24,$E7
-		dc.b $C6,$04,$E7,$E6
		dc.w $04F7,$0008,z80_ptr(-)
		dc.b $F2
+		dc.b $F3,$E7,$C7,$44,$F2
ssamp6E:	dc.b $33,$00,$10,$00,$31,$1F,$1D,$1E,$0E,$00,$0C,$1D
		dc.b $00,$00,$00,$01,$00,$0F,$0F,$0F,$0F,$08,$06,$07,$80


Sound6F:	dc.w z80_ptr(ssamp6A),$0103
		dc.w $8005,z80_ptr(++),$000B
		dc.w $8004,z80_ptr(+),$0012
		dc.w $80C0,z80_ptr(+++),$0000
+		dc.b $E1,$02,$80,$02
+		dc.b $EF,$00,$E6,$0C,$DF,$06,$E7,$E6,$F4,$06,$E7
		dc.b $E6,$F4,$12,$E7,$E6,$0C,$06,$E7,$E6,$0C,$06,$F2
+		dc.b $F3,$E7,$C6,$04,$C0,$BA,$B4,$AE,$E6
		dc.b $01,$AE,$E6,$01,$AE,$E6,$01,$AE,$F2


Sound70:	dc.w $0000,$0101
		dc.w $80C0,z80_ptr(+),$0000
+		dc.b $F3,$E7,$C6,$18
-		dc.b $E7,$03,$E6
		dc.w $01F7,$0008,z80_ptr(-)
		dc.b $F2



; end of 'ROM'
	if padToPowerOfTwo && (*)&(*-1)
		cnop	-1,2<<lastbit(*-1)
		dc.b	0
paddingSoFar	:= paddingSoFar+1
	else
		even
	endif
	if MOMPASS=2
		; "About" because it will be off by the same amount that Size_of_Snd_driver_guess is incorrect (if you changed it), and because I may have missed a small amount of internal padding somewhere
		message "rom size is $\{*} bytes (\{*/1024.0} kb). About $\{paddingSoFar} bytes are padding. "
	endif
	; share these symbols externally (WARNING: don't rename, move or remove these labels!)
	shared word_728C_user,Obj5F_MapUnc_7240,off_3A294,MapRUnc_Sonic,movewZ80CompSize
EndOfRom:
	END
